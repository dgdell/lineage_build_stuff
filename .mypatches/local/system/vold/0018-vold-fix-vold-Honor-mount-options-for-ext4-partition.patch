From cb5b663dd4208f492b5a548dfdc07685469dc1dd Mon Sep 17 00:00:00 2001
From: nx111 <gd.zhangdz@gmail.com>
Date: Sun, 26 Aug 2018 17:13:31 +0800
Subject: [PATCH 18/20] vold: fix "vold: Honor mount options for ext4
 partitions"

Change-Id: Iff940afee244bb2a998727b29e8e2661fdc02e10
---
 Android.bp             |  1 +
 VolumeManager.h        |  5 +++
 main.cpp               | 10 ++---
 model/Disk.cpp         | 10 +++++
 model/Disk.h           |  3 ++
 model/ResponseCode.cpp | 42 +++++++++++++++++++
 model/ResponseCode.h   | 91 ++++++++++++++++++++++++++++++++++++++++++
 model/VolumeBase.cpp   | 12 ++++++
 model/VolumeBase.h     |  3 ++
 9 files changed, 172 insertions(+), 5 deletions(-)
 create mode 100644 model/ResponseCode.cpp
 create mode 100644 model/ResponseCode.h

diff --git a/Android.bp b/Android.bp
index 48dfaaf..cb8f31d 100644
--- a/Android.bp
+++ b/Android.bp
@@ -127,6 +127,7 @@ cc_library_static {
         "model/ObbVolume.cpp",
         "model/PrivateVolume.cpp",
         "model/PublicVolume.cpp",
+        "model/ResponseCode.cpp",
         "model/VolumeBase.cpp",
         "secontext.cpp",
     ],
diff --git a/VolumeManager.h b/VolumeManager.h
index 119a56a..506bced 100644
--- a/VolumeManager.h
+++ b/VolumeManager.h
@@ -45,6 +45,8 @@ class VolumeManager {
 private:
     static VolumeManager *sInstance;
 
+    SocketListener        *mBroadcaster;
+
     bool                   mDebug;
 
 public:
@@ -121,6 +123,9 @@ public:
     int updateVirtualDisk();
     int setDebug(bool enable);
 
+    void setBroadcaster(SocketListener *sl) { mBroadcaster = sl; }
+    SocketListener *getBroadcaster() { return mBroadcaster; }
+
     static VolumeManager *Instance();
 
     /*
diff --git a/main.cpp b/main.cpp
index 3007f73..7418aaf 100644
--- a/main.cpp
+++ b/main.cpp
@@ -239,12 +239,12 @@ static int process_config(VolumeManager* vm, bool* has_adoptable, bool* has_quot
         if (fs_mgr_is_voldmanaged(rec)) {
             std::string sysPattern(rec->blk_device);
             std::string fstype;
-            if (recs->fs_type) {
-                fstype = recs->fs_type;
+            if (rec->fs_type) {
+                fstype = rec->fs_type;
             }
             std::string mntopts;
-            if (recs->fs_options) {
-                mntopts = recs->fs_options;
+            if (rec->fs_options) {
+                mntopts = rec->fs_options;
             }
             std::string nickname(rec->label);
             int partnum = rec->partnum;
@@ -258,7 +258,7 @@ static int process_config(VolumeManager* vm, bool* has_adoptable, bool* has_quot
                     || android::base::GetBoolProperty("vold.debug.default_primary", false)) {
                 flags |= android::vold::Disk::Flags::kDefaultPrimary;
             }
-            if (fs_mgr_is_nonremovable(rec) {
+            if (fs_mgr_is_nonremovable(rec)) {
                 flags |= android::vold::Disk::Flags::kNonRemovable;
             }
 
diff --git a/model/Disk.cpp b/model/Disk.cpp
index 9d323b4..261b4c3 100644
--- a/model/Disk.cpp
+++ b/model/Disk.cpp
@@ -594,6 +594,16 @@ status_t Disk::partitionMixed(int8_t ratio) {
     return OK;
 }
 
+void Disk::notifyEvent(int event) {
+    VolumeManager::Instance()->getBroadcaster()->sendBroadcast(event,
+            getId().c_str(), false);
+}
+
+void Disk::notifyEvent(int event, const std::string& value) {
+    VolumeManager::Instance()->getBroadcaster()->sendBroadcast(event,
+            StringPrintf("%s %s", getId().c_str(), value.c_str()).c_str(), false);
+}
+
 int Disk::getMaxMinors() {
     // Figure out maximum partition devices supported
     unsigned int majorId = major(mDevice);
diff --git a/model/Disk.h b/model/Disk.h
index a365ec6..20f5522 100644
--- a/model/Disk.h
+++ b/model/Disk.h
@@ -81,6 +81,9 @@ public:
     virtual status_t partitionPrivate();
     virtual status_t partitionMixed(int8_t ratio);
 
+    void notifyEvent(int msg);
+    void notifyEvent(int msg, const std::string& value);
+
 protected:
     /* ID that uniquely references this disk */
     std::string mId;
diff --git a/model/ResponseCode.cpp b/model/ResponseCode.cpp
new file mode 100644
index 0000000..d7e778d
--- /dev/null
+++ b/model/ResponseCode.cpp
@@ -0,0 +1,42 @@
+/*
+ * Copyright (C) 2008 The Android Open Source Project
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+#include <stdio.h>
+#include <errno.h>
+#include <string.h>
+
+#define LOG_TAG "Vold"
+
+#include <cutils/log.h>
+
+#include "ResponseCode.h"
+
+int ResponseCode::convertFromErrno() {
+   if (errno == ENODEV) {
+        return(ResponseCode::OpFailedNoMedia);
+    } else if (errno == ENODATA) {
+        return(ResponseCode::OpFailedMediaBlank);
+    } else if (errno == EIO) {
+        return(ResponseCode::OpFailedMediaCorrupt);
+    } else if (errno == EBUSY) {
+        return(ResponseCode::OpFailedStorageBusy);
+    } else if (errno == ENOENT) {
+        return(ResponseCode::OpFailedStorageNotFound);
+    }
+
+    SLOGW("Returning OperationFailed - no handler for errno %d", errno);
+    return(ResponseCode::OperationFailed);
+}
diff --git a/model/ResponseCode.h b/model/ResponseCode.h
new file mode 100644
index 0000000..f2c533e
--- /dev/null
+++ b/model/ResponseCode.h
@@ -0,0 +1,91 @@
+/*
+ * Copyright (C) 2008 The Android Open Source Project
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+#ifndef _RESPONSECODE_H
+#define _RESPONSECODE_H
+
+class ResponseCode {
+public:
+    // 100 series - Requestion action was initiated; expect another reply
+    // before proceeding with a new command.
+    static const int ActionInitiated  = 100;
+
+    static const int VolumeListResult         = 110;
+    static const int AsecListResult           = 111;
+    static const int StorageUsersListResult   = 112;
+    static const int CryptfsGetfieldResult    = 113;
+
+    // 200 series - Requested action has been successfully completed
+    static const int CommandOkay              = 200;
+    static const int ShareStatusResult        = 210;
+    static const int AsecPathResult           = 211;
+    static const int ShareEnabledResult       = 212;
+    static const int PasswordTypeResult       = 213;
+
+    // 400 series - The command was accepted but the requested action
+    // did not take place.
+    static const int OperationFailed          = 400;
+    static const int OpFailedNoMedia          = 401;
+    static const int OpFailedMediaBlank       = 402;
+    static const int OpFailedMediaCorrupt     = 403;
+    static const int OpFailedVolNotMounted    = 404;
+    static const int OpFailedStorageBusy      = 405;
+    static const int OpFailedStorageNotFound  = 406;
+
+    // 500 series - The command was not accepted and the requested
+    // action did not take place.
+    static const int CommandSyntaxError = 500;
+    static const int CommandParameterError = 501;
+    static const int CommandNoPermission = 502;
+
+    // 600 series - Unsolicited broadcasts
+    static const int UnsolicitedInformational       = 600;
+    static const int VolumeStateChange              = 605;
+    static const int VolumeMountFailedBlank         = 610;
+    static const int VolumeMountFailedDamaged       = 611;
+    static const int VolumeMountFailedNoMedia       = 612;
+    static const int VolumeUuidChange               = 613;
+    static const int VolumeUserLabelChange          = 614;
+
+    static const int ShareAvailabilityChange        = 620;
+
+    static const int VolumeDiskInserted            = 630;
+    static const int VolumeDiskRemoved             = 631;
+    static const int VolumeBadRemoval              = 632;
+
+    static const int DiskCreated = 640;
+    static const int DiskSizeChanged = 641;
+    static const int DiskLabelChanged = 642;
+    static const int DiskScanned = 643;
+    static const int DiskSysPathChanged = 644;
+    static const int DiskDestroyed = 649;
+
+    static const int VolumeCreated = 650;
+    static const int VolumeStateChanged = 651;
+    static const int VolumeFsTypeChanged = 652;
+    static const int VolumeFsUuidChanged = 653;
+    static const int VolumeFsLabelChanged = 654;
+    static const int VolumePathChanged = 655;
+    static const int VolumeInternalPathChanged = 656;
+    static const int VolumeDestroyed = 659;
+
+    static const int MoveStatus = 660;
+    static const int BenchmarkResult = 661;
+    static const int TrimResult = 662;
+
+    static int convertFromErrno();
+};
+#endif
diff --git a/model/VolumeBase.cpp b/model/VolumeBase.cpp
index 8cca74e..3cca731 100644
--- a/model/VolumeBase.cpp
+++ b/model/VolumeBase.cpp
@@ -144,6 +144,18 @@ android::sp<android::os::IVoldListener> VolumeBase::getListener() {
     }
 }
 
+void VolumeBase::notifyEvent(int event) {
+    if (mSilent) return;
+    VolumeManager::Instance()->getBroadcaster()->sendBroadcast(event,
+            getId().c_str(), false);
+}
+
+void VolumeBase::notifyEvent(int event, const std::string& value) {
+    if (mSilent) return;
+    VolumeManager::Instance()->getBroadcaster()->sendBroadcast(event,
+            StringPrintf("%s %s", getId().c_str(), value.c_str()).c_str(), false);
+}
+
 void VolumeBase::addVolume(const std::shared_ptr<VolumeBase>& volume) {
     mVolumes.push_back(volume);
 }
diff --git a/model/VolumeBase.h b/model/VolumeBase.h
index 4aa8b02..ffa62f9 100644
--- a/model/VolumeBase.h
+++ b/model/VolumeBase.h
@@ -117,6 +117,9 @@ protected:
 
     android::sp<android::os::IVoldListener> getListener();
 
+    void notifyEvent(int msg);
+    void notifyEvent(int msg, const std::string& value);
+
 private:
     /* ID that uniquely references volume while alive */
     std::string mId;
-- 
2.17.1

