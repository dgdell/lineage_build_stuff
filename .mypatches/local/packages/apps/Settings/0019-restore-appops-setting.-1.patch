From ea383bddc5afcadd892dfc3a8aceb7433e3289e7 Mon Sep 17 00:00:00 2001
From: nx111 <gd.zhangdz@gmail.com>
Date: Mon, 15 Oct 2018 02:03:07 +0800
Subject: [PATCH 19/19] restore appops setting.(1)

Change-Id: I7552cc1b18032bf8270e0a7961b52331d813c9b3
---
 AndroidManifest.xml                           |  15 +
 res/values/cm_arrays.xml                      | 180 ++++++++
 res/values/cm_strings.xml                     | 186 ++++++++
 src/com/android/settings/Settings.java        |   9 +
 .../applications/ProcessStatsSummary.java     |   9 +
 .../applications/appops/AppOpsDetails.java    | 404 ++++++++++++++++++
 .../applications/appops/AppOpsDetailsTop.java |  37 ++
 .../applications/appops/AppOpsSummary.java    | 272 ++++++++++++
 8 files changed, 1112 insertions(+)
 create mode 100644 src/com/android/settings/applications/appops/AppOpsDetails.java
 create mode 100644 src/com/android/settings/applications/appops/AppOpsDetailsTop.java
 create mode 100644 src/com/android/settings/applications/appops/AppOpsSummary.java

diff --git a/AndroidManifest.xml b/AndroidManifest.xml
index dc05c41beb..29ae2def77 100644
--- a/AndroidManifest.xml
+++ b/AndroidManifest.xml
@@ -1256,6 +1256,21 @@
             </intent-filter>
         </activity>
 
+        <activity android:name="Settings$AppOpsSummaryActivity"
+                android:label="@*lineageos.platform:string/privacy_guard_manager_title"
+                android:taskAffinity=""
+                android:excludeFromRecents="true">
+            <intent-filter>
+                <action android:name="android.intent.action.MAIN" />
+                <action android:name="android.settings.APP_OPS_SETTINGS" />
+                <category android:name="android.intent.category.DEFAULT" />
+                <category android:name="android.intent.category.VOICE_LAUNCH" />
+                <category android:name="com.android.settings.SHORTCUT" />
+            </intent-filter>
+            <meta-data android:name="com.android.settings.FRAGMENT_CLASS"
+                android:value="com.android.settings.applications.AppOpsSummary" />
+        </activity>
+
         <activity android:name="Settings$BackgroundCheckSummaryActivity"
                 android:label="@string/background_check_title"
                 android:enabled="false">
diff --git a/res/values/cm_arrays.xml b/res/values/cm_arrays.xml
index a313880f81..0bcbe338c9 100644
--- a/res/values/cm_arrays.xml
+++ b/res/values/cm_arrays.xml
@@ -23,4 +23,184 @@
         <item>@string/security_settings_fingerprint_sensor_location_left</item>
         <item>@string/security_settings_fingerprint_sensor_location_right</item>
     </string-array>
+
+    <!-- Names of categories of app ops tabs - extension of AOSP -->
+    <string-array name="app_ops_categories_lineage" translatable="false">
+        <item>@string/app_ops_categories_location</item>
+        <item>@string/app_ops_categories_personal</item>
+        <item>@string/app_ops_categories_messaging</item>
+        <item>@string/app_ops_categories_media</item>
+        <item>@string/app_ops_categories_device</item>
+        <item>@string/app_ops_categories_run_in_background</item>
+        <item>@string/app_ops_categories_bootup</item>
+        <item>@string/app_ops_categories_su</item>
+        <item>@string/app_ops_categories_other</item>
+    </string-array>
+
+    <!-- User display names for app ops codes - extension of AOSP -->
+    <string-array name="app_ops_summaries_lineage" translatable="false">
+        <item>@string/app_ops_summaries_coarse_location</item>
+        <item>@string/app_ops_summaries_fine_location</item>
+        <item>@string/app_ops_summaries_gps</item>
+        <item>@string/app_ops_summaries_vibrate</item>
+        <item>@string/app_ops_summaries_read_contacts</item>
+        <item>@string/app_ops_summaries_modify_contacts</item>
+        <item>@string/app_ops_summaries_read_call_log</item>
+        <item>@string/app_ops_summaries_modify_call_log</item>
+        <item>@string/app_ops_summaries_read_calendar</item>
+        <item>@string/app_ops_summaries_modify_calendar</item>
+        <item>@string/app_ops_summaries_wifi_scan</item>
+        <item>@string/app_ops_summaries_notification</item>
+        <item>@string/app_ops_summaries_cell_scan</item>
+        <item>@string/app_ops_summaries_call_phone</item>
+        <item>@string/app_ops_summaries_read_sms</item>
+        <item>@string/app_ops_summaries_write_sms</item>
+        <item>@string/app_ops_summaries_receive_sms</item>
+        <item>@string/app_ops_summaries_receive_emergency_sms</item>
+        <item>@string/app_ops_summaries_receive_mms</item>
+        <item>@string/app_ops_summaries_receive_wap_push</item>
+        <item>@string/app_ops_summaries_send_sms</item>
+        <item>@string/app_ops_summaries_read_icc_sms</item>
+        <item>@string/app_ops_summaries_write_icc_sms</item>
+        <item>@string/app_ops_summaries_modify_settings</item>
+        <item>@string/app_ops_summaries_draw_on_top</item>
+        <item>@string/app_ops_summaries_access_notifications</item>
+        <item>@string/app_ops_summaries_camera</item>
+        <item>@string/app_ops_summaries_record_audio</item>
+        <item>@string/app_ops_summaries_play_audio</item>
+        <item>@string/app_ops_summaries_read_clipboard</item>
+        <item>@string/app_ops_summaries_modify_clipboard</item>
+        <item>@string/app_ops_summaries_media_buttons</item>
+        <item>@string/app_ops_summaries_audio_focus</item>
+        <item>@string/app_ops_summaries_master_volume</item>
+        <item>@string/app_ops_summaries_voice_volume</item>
+        <item>@string/app_ops_summaries_ring_volume</item>
+        <item>@string/app_ops_summaries_media_volume</item>
+        <item>@string/app_ops_summaries_alarm_volume</item>
+        <item>@string/app_ops_summaries_notification_volume</item>
+        <item>@string/app_ops_summaries_bluetooth_volume</item>
+        <item>@string/app_ops_summaries_keep_awake</item>
+        <item>@string/app_ops_summaries_monitor_location</item>
+        <item>@string/app_ops_summaries_monitor_high_power_location</item>
+        <item>@string/app_ops_summaries_get_usage_stats</item>
+        <item>@string/app_ops_summaries_mute_unmute_microphone</item>
+        <item>@string/app_ops_summaries_toast_window</item>
+        <item>@string/app_ops_summaries_project_media</item>
+        <item>@string/app_ops_summaries_activate_vpn</item>
+        <item>@string/app_ops_summaries_write_wallpaper</item>
+        <item>@string/app_ops_summaries_assist_structure</item>
+        <item>@string/app_ops_summaries_assist_screenshot</item>
+        <item>@string/app_ops_summaries_read_phone_state</item>
+        <item>@string/app_ops_summaries_add_voicemail</item>
+        <item>@string/app_ops_summaries_use_sip</item>
+        <item>@string/app_ops_summaries_make_call</item>
+        <item>@string/app_ops_summaries_use_fingerprint</item>
+        <item>@string/app_ops_summaries_use_body_sensors</item>
+        <item>@string/app_ops_summaries_read_cell_broadcasts</item>
+        <item>@string/app_ops_summaries_mock_location</item>
+        <item>@string/app_ops_summaries_read_external_storage</item>
+        <item>@string/app_ops_summaries_write_external_storage</item>
+        <item>@string/app_ops_summaries_turn_screen_on</item>
+        <item>@string/app_ops_summaries_get_accounts</item>
+        <item>@string/app_ops_summaries_run_in_background</item>
+        <item>@string/app_ops_summaries_accessibility_volume</item>
+        <item>@string/app_ops_summaries_read_phone_numbers</item>
+        <item>@string/app_ops_summaries_request_install_packages</item>
+        <item>@string/app_ops_summaries_picture_in_picture</item>
+        <item>@string/app_ops_summaries_instant_app_start_foreground</item>
+        <item>@string/app_ops_summaries_answer_phone_calls</item>
+        <item>@string/app_ops_summaries_toggle_wifi</item>
+        <item>@string/app_ops_summaries_toggle_bluetooth</item>
+        <item>@string/app_ops_summaries_start_at_boot</item>
+        <item>@string/app_ops_summaries_toggle_nfc</item>
+        <item>@string/app_ops_summaries_toggle_mobile_data</item>
+        <item>@string/app_ops_summaries_superuser</item>
+    </string-array>
+
+    <!-- User display names for app ops codes - extension of AOSP -->
+    <string-array name="app_ops_labels_lineage" translatable="false">
+        <item>@string/app_ops_labels_coarse_location</item>
+        <item>@string/app_ops_labels_fine_location</item>
+        <item>@string/app_ops_labels_gps</item>
+        <item>@string/app_ops_labels_vibrate</item>
+        <item>@string/app_ops_labels_read_contacts</item>
+        <item>@string/app_ops_labels_modify_contacts</item>
+        <item>@string/app_ops_labels_read_call_log</item>
+        <item>@string/app_ops_labels_modify_call_log</item>
+        <item>@string/app_ops_labels_read_calendar</item>
+        <item>@string/app_ops_labels_modify_calendar</item>
+        <item>@string/app_ops_labels_wifi_scan</item>
+        <item>@string/app_ops_labels_notification</item>
+        <item>@string/app_ops_labels_cell_scan</item>
+        <item>@string/app_ops_labels_call_phone</item>
+        <item>@string/app_ops_labels_read_sms</item>
+        <item>@string/app_ops_labels_write_sms</item>
+        <item>@string/app_ops_labels_receive_sms</item>
+        <item>@string/app_ops_labels_receive_emergency_sms</item>
+        <item>@string/app_ops_labels_receive_mms</item>
+        <item>@string/app_ops_labels_receive_wap_push</item>
+        <item>@string/app_ops_labels_send_sms</item>
+        <item>@string/app_ops_labels_read_icc_sms</item>
+        <item>@string/app_ops_labels_write_icc_sms</item>
+        <item>@string/app_ops_labels_modify_settings</item>
+        <item>@string/app_ops_labels_draw_on_top</item>
+        <item>@string/app_ops_labels_access_notifications</item>
+        <item>@string/app_ops_labels_camera</item>
+        <item>@string/app_ops_labels_record_audio</item>
+        <item>@string/app_ops_labels_play_audio</item>
+        <item>@string/app_ops_labels_read_clipboard</item>
+        <item>@string/app_ops_labels_modify_clipboard</item>
+        <item>@string/app_ops_labels_media_buttons</item>
+        <item>@string/app_ops_labels_audio_focus</item>
+        <item>@string/app_ops_labels_master_volume</item>
+        <item>@string/app_ops_labels_voice_volume</item>
+        <item>@string/app_ops_labels_ring_volume</item>
+        <item>@string/app_ops_labels_media_volume</item>
+        <item>@string/app_ops_labels_alarm_volume</item>
+        <item>@string/app_ops_labels_notification_volume</item>
+        <item>@string/app_ops_labels_bluetooth_volume</item>
+        <item>@string/app_ops_labels_keep_awake</item>
+        <item>@string/app_ops_labels_monitor_location</item>
+        <item>@string/app_ops_labels_monitor_high_power_location</item>
+        <item>@string/app_ops_labels_get_usage_stats</item>
+        <item>@string/app_ops_labels_mute_unmute_microphone</item>
+        <item>@string/app_ops_labels_toast_window</item>
+        <item>@string/app_ops_labels_project_media</item>
+        <item>@string/app_ops_labels_activate_vpn</item>
+        <item>@string/app_ops_labels_write_wallpaper</item>
+        <item>@string/app_ops_labels_assist_structure</item>
+        <item>@string/app_ops_labels_assist_screenshot</item>
+        <item>@string/app_ops_labels_read_phone_state</item>
+        <item>@string/app_ops_labels_add_voicemail</item>
+        <item>@string/app_ops_labels_use_sip</item>
+        <item>@string/app_ops_labels_make_call</item>
+        <item>@string/app_ops_labels_use_fingerprint</item>
+        <item>@string/app_ops_labels_use_body_sensors</item>
+        <item>@string/app_ops_labels_read_cell_broadcasts</item>
+        <item>@string/app_ops_labels_mock_location</item>
+        <item>@string/app_ops_labels_read_external_storage</item>
+        <item>@string/app_ops_labels_write_external_storage</item>
+        <item>@string/app_ops_labels_turn_screen_on</item>
+        <item>@string/app_ops_labels_get_accounts</item>
+        <item>@string/app_ops_labels_run_in_background</item>
+        <item>@string/app_ops_labels_accessibility_volume</item>
+        <item>@string/app_ops_labels_read_phone_numbers</item>
+        <item>@string/app_ops_labels_request_install_packages</item>
+        <item>@string/app_ops_labels_picture_in_picture</item>
+        <item>@string/app_ops_labels_instant_app_start_foreground</item>
+        <item>@string/app_ops_labels_answer_phone_calls</item>
+        <item>@string/app_ops_labels_toggle_wifi</item>
+        <item>@string/app_ops_labels_toggle_bluetooth</item>
+        <item>@string/app_ops_labels_start_at_boot</item>
+        <item>@string/app_ops_labels_toggle_nfc</item>
+        <item>@string/app_ops_labels_toggle_mobile_data</item>
+        <item>@string/app_ops_labels_superuser</item>
+    </string-array>
+
+    <!-- App ops permissions -->
+    <string-array name="app_ops_permissions">
+        <item>@string/app_ops_permissions_allowed</item>
+        <item>@string/app_ops_permissions_ignored</item>
+        <item>@string/app_ops_permissions_always_ask</item>
+    </string-array>
 </resources>
diff --git a/res/values/cm_strings.xml b/res/values/cm_strings.xml
index a7914bcbeb..cc469e64e5 100644
--- a/res/values/cm_strings.xml
+++ b/res/values/cm_strings.xml
@@ -110,6 +110,192 @@
     <string name="proximity_wake_title">Prevent accidental wake-up</string>
     <string name="proximity_wake_summary">Check the proximity sensor prior to waking up screen</string>
 
+    <!-- Names of categories of app ops tabs - extension of AOSP -->
+    <string name="app_ops_categories_location">Location</string>
+    <string name="app_ops_categories_personal">Personal</string>
+    <string name="app_ops_categories_messaging">Messaging</string>
+    <string name="app_ops_categories_media">Media</string>
+    <string name="app_ops_categories_device">Device</string>
+    <string name="app_ops_categories_run_in_background">Run in background</string>
+    <string name="app_ops_categories_bootup">Bootup</string>
+    <string name="app_ops_categories_su">Root access</string>
+    <string name="app_ops_categories_other">Other</string>
+
+    <!-- User display names for app ops codes - extension of AOSP -->
+    <string name="app_ops_summaries_coarse_location">coarse location</string>
+    <string name="app_ops_summaries_fine_location">fine location</string>
+    <string name="app_ops_summaries_gps">GPS</string>
+    <string name="app_ops_summaries_vibrate">vibrate</string>
+    <string name="app_ops_summaries_read_contacts">read contacts</string>
+    <string name="app_ops_summaries_modify_contacts">modify contacts</string>
+    <string name="app_ops_summaries_read_call_log">read call log</string>
+    <string name="app_ops_summaries_modify_call_log">modify call log</string>
+    <string name="app_ops_summaries_read_calendar">read calendar</string>
+    <string name="app_ops_summaries_modify_calendar">modify calendar</string>
+    <string name="app_ops_summaries_wifi_scan">Wi-Fi scan</string>
+    <string name="app_ops_summaries_notification">notification/toast</string>
+    <string name="app_ops_summaries_cell_scan">cell scan</string>
+    <string name="app_ops_summaries_call_phone">call phone</string>
+    <string name="app_ops_summaries_read_sms">read SMS</string>
+    <string name="app_ops_summaries_write_sms">write SMS</string>
+    <string name="app_ops_summaries_receive_sms">receive SMS</string>
+    <string name="app_ops_summaries_receive_emergency_sms">receive emergency SMS</string>
+    <string name="app_ops_summaries_receive_mms">receive MMS</string>
+    <string name="app_ops_summaries_receive_wap_push">receive WAP push</string>
+    <string name="app_ops_summaries_send_sms">send SMS</string>
+    <string name="app_ops_summaries_read_icc_sms">read ICC SMS</string>
+    <string name="app_ops_summaries_write_icc_sms">write ICC SMS</string>
+    <string name="app_ops_summaries_modify_settings">modify settings</string>
+    <string name="app_ops_summaries_draw_on_top">draw on top</string>
+    <string name="app_ops_summaries_access_notifications">access notifications</string>
+    <string name="app_ops_summaries_camera">camera</string>
+    <string name="app_ops_summaries_record_audio">record audio</string>
+    <string name="app_ops_summaries_play_audio">play audio</string>
+    <string name="app_ops_summaries_read_clipboard">read clipboard</string>
+    <string name="app_ops_summaries_modify_clipboard">modify clipboard</string>
+    <string name="app_ops_summaries_media_buttons">media buttons</string>
+    <string name="app_ops_summaries_audio_focus">audio focus</string>
+    <string name="app_ops_summaries_master_volume">master volume</string>
+    <string name="app_ops_summaries_voice_volume">voice volume</string>
+    <string name="app_ops_summaries_ring_volume">ring volume</string>
+    <string name="app_ops_summaries_media_volume">media volume</string>
+    <string name="app_ops_summaries_alarm_volume">alarm volume</string>
+    <string name="app_ops_summaries_notification_volume">notification volume</string>
+    <string name="app_ops_summaries_bluetooth_volume">bluetooth volume</string>
+    <string name="app_ops_summaries_keep_awake">keep awake</string>
+    <string name="app_ops_summaries_monitor_location">monitor location</string>
+    <string name="app_ops_summaries_monitor_high_power_location">monitor high power location</string>
+    <string name="app_ops_summaries_get_usage_stats">get app usage stats</string>
+    <string name="app_ops_summaries_mute_unmute_microphone">mute/unmute microphone</string>
+    <string name="app_ops_summaries_toast_window">display toasts</string>
+    <string name="app_ops_summaries_project_media">project media</string>
+    <string name="app_ops_summaries_activate_vpn">activate VPN</string>
+    <string name="app_ops_summaries_write_wallpaper">write wallpaper</string>
+    <string name="app_ops_summaries_assist_structure">assist structure</string>
+    <string name="app_ops_summaries_assist_screenshot">assist screenshot</string>
+    <string name="app_ops_summaries_read_phone_state">read phone state</string>
+    <string name="app_ops_summaries_add_voicemail">add voicemail</string>
+    <string name="app_ops_summaries_use_sip">use SIP</string>
+    <string name="app_ops_summaries_make_call">make call</string>
+    <string name="app_ops_summaries_use_fingerprint">use fingerprint</string>
+    <string name="app_ops_summaries_use_body_sensors">use body sensors</string>
+    <string name="app_ops_summaries_read_cell_broadcasts">read cell broadcasts</string>
+    <string name="app_ops_summaries_mock_location">mock location</string>
+    <string name="app_ops_summaries_read_external_storage">read external storage</string>
+    <string name="app_ops_summaries_write_external_storage">write to external storage</string>
+    <string name="app_ops_summaries_turn_screen_on">turn screen on</string>
+    <string name="app_ops_summaries_get_accounts">get accounts</string>
+    <string name="app_ops_summaries_run_in_background">run in background</string>
+    <string name="app_ops_summaries_accessibility_volume">audio accessibility volume</string>
+    <string name="app_ops_summaries_read_phone_numbers">read phone numbers</string>
+    <string name="app_ops_summaries_request_install_packages">request install packages</string>
+    <string name="app_ops_summaries_picture_in_picture">use picture in picture</string>
+    <string name="app_ops_summaries_instant_app_start_foreground">start instant app in foreground</string>
+    <string name="app_ops_summaries_answer_phone_calls">answer phone calls</string>
+    <string name="app_ops_summaries_toggle_wifi">toggle Wi-Fi</string>
+    <string name="app_ops_summaries_toggle_bluetooth">toggle bluetooth</string>
+    <string name="app_ops_summaries_start_at_boot">start at boot</string>
+    <string name="app_ops_summaries_toggle_nfc">toggle NFC</string>
+    <string name="app_ops_summaries_toggle_mobile_data">toggle cellular data</string>
+    <string name="app_ops_summaries_superuser">root access</string>
+
+    <!-- User display names for app ops codes - extension of AOSP -->
+    <string name="app_ops_labels_coarse_location">Coarse location</string>
+    <string name="app_ops_labels_fine_location">Fine location</string>
+    <string name="app_ops_labels_gps">GPS</string>
+    <string name="app_ops_labels_vibrate">Vibrate</string>
+    <string name="app_ops_labels_read_contacts">Read contacts</string>
+    <string name="app_ops_labels_modify_contacts">Modify contacts</string>
+    <string name="app_ops_labels_read_call_log">Read call log</string>
+    <string name="app_ops_labels_modify_call_log">Modify call log</string>
+    <string name="app_ops_labels_read_calendar">Read calendar</string>
+    <string name="app_ops_labels_modify_calendar">Modify calendar</string>
+    <string name="app_ops_labels_wifi_scan">Wi-Fi scan</string>
+    <string name="app_ops_labels_notification">Notification/Toast</string>
+    <string name="app_ops_labels_cell_scan">Cell scan</string>
+    <string name="app_ops_labels_call_phone">Call phone</string>
+    <string name="app_ops_labels_read_sms">Read SMS</string>
+    <string name="app_ops_labels_write_sms">Write SMS</string>
+    <string name="app_ops_labels_receive_sms">Receive SMS</string>
+    <string name="app_ops_labels_receive_emergency_sms">Receive emergency SMS</string>
+    <string name="app_ops_labels_receive_mms">Receive MMS</string>
+    <string name="app_ops_labels_receive_wap_push">Receive WAP push</string>
+    <string name="app_ops_labels_send_sms">Send SMS</string>
+    <string name="app_ops_labels_read_icc_sms">Read ICC SMS</string>
+    <string name="app_ops_labels_write_icc_sms">Write ICC SMS</string>
+    <string name="app_ops_labels_modify_settings">Modify settings</string>
+    <string name="app_ops_labels_draw_on_top">Draw on top</string>
+    <string name="app_ops_labels_access_notifications">Access notifications</string>
+    <string name="app_ops_labels_camera">Camera</string>
+    <string name="app_ops_labels_record_audio">Record audio</string>
+    <string name="app_ops_labels_play_audio">Play audio</string>
+    <string name="app_ops_labels_read_clipboard">Read clipboard</string>
+    <string name="app_ops_labels_modify_clipboard">Modify clipboard</string>
+    <string name="app_ops_labels_media_buttons">Media buttons</string>
+    <string name="app_ops_labels_audio_focus">Audio focus</string>
+    <string name="app_ops_labels_master_volume">Master volume</string>
+    <string name="app_ops_labels_voice_volume">Voice volume</string>
+    <string name="app_ops_labels_ring_volume">Ring volume</string>
+    <string name="app_ops_labels_media_volume">Media volume</string>
+    <string name="app_ops_labels_alarm_volume">Alarm volume</string>
+    <string name="app_ops_labels_notification_volume">Notification volume</string>
+    <string name="app_ops_labels_bluetooth_volume">Bluetooth volume</string>
+    <string name="app_ops_labels_keep_awake">Keep awake</string>
+    <string name="app_ops_labels_monitor_location">Monitor location</string>
+    <string name="app_ops_labels_monitor_high_power_location">Monitor high power location</string>
+    <string name="app_ops_labels_get_usage_stats">Get usage stats</string>
+    <string name="app_ops_labels_mute_unmute_microphone">Mute/unmute microphone</string>
+    <string name="app_ops_labels_toast_window">Display toasts</string>
+    <string name="app_ops_labels_project_media">Project media</string>
+    <string name="app_ops_labels_activate_vpn">Activate VPN</string>
+    <string name="app_ops_labels_write_wallpaper">Write wallpaper</string>
+    <string name="app_ops_labels_assist_structure">Assist structure</string>
+    <string name="app_ops_labels_assist_screenshot">Assist screenshot</string>
+    <string name="app_ops_labels_read_phone_state">Read phone state</string>
+    <string name="app_ops_labels_add_voicemail">Add voicemail</string>
+    <string name="app_ops_labels_use_sip">Use SIP</string>
+    <string name="app_ops_labels_make_call">Make call</string>
+    <string name="app_ops_labels_use_fingerprint">Use fingerprint</string>
+    <string name="app_ops_labels_use_body_sensors">Use body sensors</string>
+    <string name="app_ops_labels_read_cell_broadcasts">Read cell broadcasts</string>
+    <string name="app_ops_labels_mock_location">Mock location</string>
+    <string name="app_ops_labels_read_external_storage">Read external storage</string>
+    <string name="app_ops_labels_write_external_storage">Write to external storage</string>
+    <string name="app_ops_labels_turn_screen_on">Turn screen on</string>
+    <string name="app_ops_labels_get_accounts">Get accounts</string>
+    <string name="app_ops_labels_run_in_background">Run in background</string>
+    <string name="app_ops_labels_accessibility_volume">Audio accessibility volume</string>
+    <string name="app_ops_labels_read_phone_numbers">Read phone numbers</string>
+    <string name="app_ops_labels_request_install_packages">Request install packages</string>
+    <string name="app_ops_labels_picture_in_picture">Use picture in picture</string>
+    <string name="app_ops_labels_instant_app_start_foreground">Start instant app in foreground</string>
+    <string name="app_ops_labels_answer_phone_calls">Answer phone calls</string>
+    <string name="app_ops_labels_toggle_wifi">Toggle Wi-Fi</string>
+    <string name="app_ops_labels_toggle_bluetooth">Toggle bluetooth</string>
+    <string name="app_ops_labels_start_at_boot">Start at boot</string>
+    <string name="app_ops_labels_toggle_nfc">Toggle NFC</string>
+    <string name="app_ops_labels_toggle_mobile_data">Toggle cellular data</string>
+    <string name="app_ops_labels_superuser">Root access</string>
+
+    <!-- App ops permissions -->
+    <string name="app_ops_permissions_allowed">Allowed</string>
+    <string name="app_ops_permissions_ignored">Ignored</string>
+    <string name="app_ops_permissions_always_ask">Always ask</string>
+
+    <!-- App ops detail -->
+    <string name="app_ops_entry_summary"><xliff:g id="op">%1$s</xliff:g> (used <xliff:g id="count">%2$s</xliff:g>)</string>
+    <string name="app_ops_allowed_count">Allowed <xliff:g id="count" example="2 times">%s</xliff:g></string>
+    <string name="app_ops_ignored_count">Denied <xliff:g id="count" example="2 times">%s</xliff:g></string>
+    <string name="app_ops_both_count">Allowed <xliff:g id="count">%1$s</xliff:g>, denied <xliff:g id="count">%2$s</xliff:g></string>
+    <string name="app_ops_no_blockable_permissions">No permissions available to block</string>
+
+    <!-- App ops menu options -->
+    <string name="app_ops_show_user_apps">Show user apps</string>
+    <string name="app_ops_show_system_apps">Show built-in apps</string>
+    <string name="app_ops_reset_counters">Reset allow/deny counters</string>
+    <string name="app_ops_reset_confirm_title">Confirm counters reset</string>
+    <string name="app_ops_reset_confirm_mesg">Are you sure you wish to reset counters?</string>
+
     <!-- Security & privacy settings -->
     <string name="security_privacy_settings_title">Security &amp; privacy</string>
 
diff --git a/src/com/android/settings/Settings.java b/src/com/android/settings/Settings.java
index 0ad964b65b..0228c53449 100644
--- a/src/com/android/settings/Settings.java
+++ b/src/com/android/settings/Settings.java
@@ -56,6 +56,15 @@ public class Settings extends SettingsActivity {
     public static class ManageApplicationsActivity extends SettingsActivity { /* empty */ }
     public static class ManageAssistActivity extends SettingsActivity { /* empty */ }
     public static class HighPowerApplicationsActivity extends SettingsActivity { /* empty */ }
+    public static class AppOpsSummaryActivity extends SettingsActivity {
+        @Override
+        public boolean isValidFragment(String className) {
+            if (AppOpsSummary.class.getName().equals(className)) {
+                return true;
+            }
+            return super.isValidFragment(className);
+        }
+    }
     public static class BackgroundCheckSummaryActivity extends SettingsActivity { /* empty */ }
     public static class StorageUseActivity extends SettingsActivity { /* empty */ }
     public static class DevelopmentSettingsDashboardActivity extends SettingsActivity { /* empty */ }
diff --git a/src/com/android/settings/applications/ProcessStatsSummary.java b/src/com/android/settings/applications/ProcessStatsSummary.java
index 53da04c119..7bdc9c5076 100644
--- a/src/com/android/settings/applications/ProcessStatsSummary.java
+++ b/src/com/android/settings/applications/ProcessStatsSummary.java
@@ -25,6 +25,7 @@ import android.text.format.Formatter.BytesResult;
 
 import com.android.internal.logging.nano.MetricsProto.MetricsEvent;
 import com.android.settings.R;
+import com.android.settings.Settings.AppOpsSummaryActivity;
 import com.android.settings.SummaryPreference;
 import com.android.settings.Utils;
 import com.android.settings.applications.ProcStatsData.MemInfo;
@@ -53,6 +54,8 @@ public class ProcessStatsSummary extends ProcessStatsBase implements OnPreferenc
     public void onCreate(Bundle icicle) {
         super.onCreate(icicle);
 
+        mActivity = getActivity();
+
         addPreferencesFromResource(R.xml.process_stats_summary);
         mSummaryPref = (SummaryPreference) findPreference(KEY_STATUS_HEADER);
         mPerformance = findPreference(KEY_PERFORMANCE);
@@ -123,6 +126,12 @@ public class ProcessStatsSummary extends ProcessStatsBase implements OnPreferenc
                     .setSourceMetricsCategory(getMetricsCategory())
                     .launch();
             return true;
+        } else if (preference == mAppStartupPreference) {
+            Intent intent = new Intent(Intent.ACTION_MAIN);
+            intent.putExtra("appops_tab", getString(R.string.app_ops_categories_bootup));
+            intent.setClass(mActivity, AppOpsSummaryActivity.class);
+            mActivity.startActivity(intent);
+            return true;
         }
         return false;
     }
diff --git a/src/com/android/settings/applications/appops/AppOpsDetails.java b/src/com/android/settings/applications/appops/AppOpsDetails.java
new file mode 100644
index 0000000000..220bdff005
--- /dev/null
+++ b/src/com/android/settings/applications/appops/AppOpsDetails.java
@@ -0,0 +1,404 @@
+/**
+ * Copyright (C) 2013 The Android Open Source Project
+ * Copyright (C) 2017-2018 The LineageOS Project
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License"); you may not
+ * use this file except in compliance with the License. You may obtain a copy
+ * of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
+ * License for the specific language governing permissions and limitations
+ * under the License.
+ */
+
+package com.android.settings.applications;
+
+import android.app.Activity;
+import android.app.AppOpsManager;
+import android.content.Context;
+import android.content.Intent;
+import android.content.pm.ApplicationInfo;
+import android.content.pm.PackageInfo;
+import android.content.pm.PackageManager;
+import android.content.pm.PackageManager.NameNotFoundException;
+import android.content.pm.PermissionGroupInfo;
+import android.content.pm.PermissionInfo;
+import android.content.res.Resources;
+import android.graphics.drawable.Drawable;
+import android.os.Bundle;
+import android.support.v14.preference.SwitchPreference;
+import android.support.v7.preference.ListPreference;
+import android.support.v7.preference.Preference;
+import android.support.v7.preference.Preference.OnPreferenceChangeListener;
+import android.support.v7.preference.PreferenceScreen;
+import android.text.TextUtils;
+import android.util.Log;
+
+import com.android.internal.logging.nano.MetricsProto.MetricsEvent;
+import com.android.settings.R;
+import com.android.settings.SettingsActivity;
+import com.android.settings.SettingsPreferenceFragment;
+import com.android.settings.widget.EntityHeaderController;
+import com.android.settingslib.Utils;
+
+import java.util.HashMap;
+import java.util.List;
+import java.util.StringJoiner;
+
+public class AppOpsDetails extends SettingsPreferenceFragment {
+    static final String TAG = "AppOpsDetails";
+
+    public static final String ARG_PACKAGE_NAME = "package";
+    private static final String KEY_HEADER = "header";
+
+    private AppOpsState mState;
+    private PackageManager mPm;
+    private AppOpsManager mAppOps;
+    private PackageInfo mPackageInfo;
+    private PreferenceScreen mPreferenceScreen;
+
+    private final int MODE_ALLOWED = 0;
+    private final int MODE_IGNORED = 1;
+    private final int MODE_ASK     = 2;
+
+    private final String[] MODE_ENTRIES = {
+            String.valueOf(MODE_ALLOWED),
+            String.valueOf(MODE_IGNORED),
+            String.valueOf(MODE_ASK)
+    };
+
+    private int modeToPosition(int mode) {
+        switch (mode) {
+            case AppOpsManager.MODE_ALLOWED:
+                return MODE_ALLOWED;
+            case AppOpsManager.MODE_IGNORED:
+                return MODE_IGNORED;
+            case AppOpsManager.MODE_ASK:
+                return MODE_ASK;
+            default:
+                return MODE_IGNORED;
+        }
+    }
+
+    private int positionToMode(int position) {
+        switch (position) {
+            case MODE_ALLOWED:
+                return AppOpsManager.MODE_ALLOWED;
+            case MODE_IGNORED:
+                return AppOpsManager.MODE_IGNORED;
+            case MODE_ASK:
+                return AppOpsManager.MODE_ASK;
+            default:
+                return AppOpsManager.MODE_IGNORED;
+        }
+    }
+
+    private static HashMap<Integer, Integer> OP_ICONS = new HashMap<>();
+
+    static {
+        OP_ICONS.put(AppOpsManager.OP_ACTIVATE_VPN, R.drawable.ic_perm_vpn);
+        OP_ICONS.put(AppOpsManager.OP_AUDIO_ALARM_VOLUME, R.drawable.ic_perm_alarm);
+        OP_ICONS.put(AppOpsManager.OP_AUDIO_MEDIA_VOLUME, R.drawable.ic_perm_audio);
+        OP_ICONS.put(AppOpsManager.OP_BLUETOOTH_CHANGE, R.drawable.ic_perm_bluetooth);
+        OP_ICONS.put(AppOpsManager.OP_BOOT_COMPLETED, R.drawable.ic_perm_boot);
+        OP_ICONS.put(AppOpsManager.OP_CHANGE_WIFI_STATE, R.drawable.ic_perm_wifi);
+        OP_ICONS.put(AppOpsManager.OP_DATA_CONNECT_CHANGE, R.drawable.ic_perm_data);
+        OP_ICONS.put(AppOpsManager.OP_GET_USAGE_STATS, R.drawable.ic_perm_data);
+        OP_ICONS.put(AppOpsManager.OP_GPS, R.drawable.ic_perm_location);
+        OP_ICONS.put(AppOpsManager.OP_MUTE_MICROPHONE, R.drawable.ic_perm_microphone);
+        OP_ICONS.put(AppOpsManager.OP_NFC_CHANGE, R.drawable.ic_perm_nfc);
+        OP_ICONS.put(AppOpsManager.OP_POST_NOTIFICATION, R.drawable.ic_perm_notifications);
+        OP_ICONS.put(AppOpsManager.OP_READ_CLIPBOARD, R.drawable.ic_perm_clipboard);
+        OP_ICONS.put(AppOpsManager.OP_RUN_IN_BACKGROUND, R.drawable.ic_perm_background);
+        OP_ICONS.put(AppOpsManager.OP_SU, R.drawable.ic_perm_su);
+        OP_ICONS.put(AppOpsManager.OP_SYSTEM_ALERT_WINDOW, R.drawable.ic_perm_drawontop);
+        OP_ICONS.put(AppOpsManager.OP_TAKE_AUDIO_FOCUS, R.drawable.ic_perm_audio);
+        OP_ICONS.put(AppOpsManager.OP_TOAST_WINDOW, R.drawable.ic_perm_notifications);
+        OP_ICONS.put(AppOpsManager.OP_TURN_SCREEN_ON, R.drawable.ic_perm_turnscreenon);
+        OP_ICONS.put(AppOpsManager.OP_VIBRATE, R.drawable.ic_perm_vibrate);
+        OP_ICONS.put(AppOpsManager.OP_WAKE_LOCK, R.drawable.ic_perm_nosleep);
+        OP_ICONS.put(AppOpsManager.OP_WIFI_SCAN, R.drawable.ic_perm_wifi);
+        OP_ICONS.put(AppOpsManager.OP_WRITE_CLIPBOARD, R.drawable.ic_perm_clipboard);
+        OP_ICONS.put(AppOpsManager.OP_WRITE_SETTINGS, R.drawable.ic_perm_settings);
+        OP_ICONS.put(AppOpsManager.OP_WRITE_SMS , R.drawable.ic_perm_sms);
+    }
+
+    private boolean isPlatformSigned() {
+        final int match = mPm.checkSignatures("android", mPackageInfo.packageName);
+        return match >= PackageManager.SIGNATURE_MATCH;
+    }
+
+    // Utility method to set application label and icon.
+    private void setAppHeader(PackageInfo pkgInfo) {
+        ApplicationInfo appInfo = pkgInfo.applicationInfo;
+        String appLabel = mPm.getApplicationLabel(appInfo).toString();
+        String label;
+        try {
+            label = appInfo.loadLabel(mPm).toString();
+        } catch (Throwable t) {
+            Log.e(TAG, "Error loading application label for " + appLabel, t);
+            label = appLabel;
+        }
+
+        final Activity activity = getActivity();
+        final Preference pref = EntityHeaderController
+                .newInstance(getActivity(), this /* fragment */, null /* header */)
+                .setIcon(mPm.getApplicationIcon(appInfo))
+                .setLabel(label)
+                .setPackageName(appInfo.packageName)
+                .setUid(appInfo.uid)
+                .setHasAppInfoLink(true)
+                .setButtonActions(EntityHeaderController.ActionType.ACTION_NONE,
+                        EntityHeaderController.ActionType.ACTION_NONE)
+                .done(getActivity(), getPrefContext());
+        pref.setKey(KEY_HEADER);
+        getPreferenceScreen().addPreference(pref);
+    }
+
+    private String retrieveAppEntry() {
+        final Bundle args = getArguments();
+        String packageName = (args != null) ? args.getString(ARG_PACKAGE_NAME) : null;
+        if (packageName == null) {
+            Intent intent = (args == null) ?
+                    getActivity().getIntent() : (Intent) args.getParcelable("intent");
+            if (intent != null) {
+                packageName = intent.getData().getSchemeSpecificPart();
+            }
+        }
+        try {
+            mPackageInfo = mPm.getPackageInfo(packageName,
+                    PackageManager.MATCH_DISABLED_COMPONENTS |
+                    PackageManager.MATCH_ANY_USER);
+        } catch (NameNotFoundException e) {
+            Log.e(TAG, "Exception when retrieving package:" + packageName, e);
+            mPackageInfo = null;
+        }
+
+        return packageName;
+    }
+
+    private boolean refreshUi() {
+        if (mPackageInfo == null) {
+            return false;
+        }
+
+        mPreferenceScreen.removeAll();
+        setAppHeader(mPackageInfo);
+
+        AppOpsState.OpsTemplate[] allTemplates = getTemplates();
+        for (AppOpsState.OpsTemplate tpl : allTemplates) {
+            List<AppOpsState.AppOpEntry> entries = mState.buildState(tpl,
+                    mPackageInfo.applicationInfo.uid, mPackageInfo.packageName, true);
+            for (final AppOpsState.AppOpEntry entry : entries) {
+                String perm = null;
+                int op = -1;
+                // Find the first permission with a known name
+                for (int i = 0; i < entry.getNumOpEntry() && perm == null; i++) {
+                    op = entry.getOpEntry(i).getOp();
+                    perm = AppOpsManager.opToPermission(op);
+                }
+                Drawable icon = getIconByPermission(perm);
+                if (icon == null && op != -1 && OP_ICONS.containsKey(op)) {
+                    icon = getActivity().getDrawable(OP_ICONS.get(op));
+                }
+                if (icon == null) {
+                    Log.e(TAG, "Failed to retrieve icon for permission: " + perm);
+                } else {
+                    icon.setTint(Utils.getColorAttr(getActivity(),
+                            android.R.attr.colorControlNormal));
+                }
+
+                final AppOpsManager.OpEntry firstOp = entry.getOpEntry(0);
+                final int switchOp = AppOpsManager.opToSwitch(firstOp.getOp());
+
+                // ListPreference for 3 states: ask, allow, deny
+                if (AppOpsManager.isStrictOp(switchOp)) {
+                    ListPreference listPref = getListPrefForEntry(entry, icon);
+                    mPreferenceScreen.addPreference(listPref);
+                } else {
+                    SwitchPreference switchPref = getSwitchPrefForEntry(entry, icon);
+                    mPreferenceScreen.addPreference(switchPref);
+                }
+            }
+        }
+
+        if (mPreferenceScreen.getPreferenceCount() == 0) {
+            Preference noBlockablePermissionsPref = getNoBlockablePermissionsPref();
+            mPreferenceScreen.addPreference(noBlockablePermissionsPref);
+        }
+
+        return true;
+    }
+
+    private AppOpsState.OpsTemplate[] getTemplates() {
+        /* If we are platform signed, only show the root switch, this
+         * one is safe to toggle while other permission-based ones could
+         * certainly cause system-wide problems
+         */
+        if (isPlatformSigned()) {
+            return new AppOpsState.OpsTemplate[]{ AppOpsState.SU_TEMPLATE };
+        }
+
+        int length = AppOpsState.ALL_PERMS_TEMPLATES.length;
+        AppOpsState.OpsTemplate[] allTemplates = new AppOpsState.OpsTemplate[length];
+        // Loop all existing templates and set the visibility of each perm to true
+        for (int i = 0; i < length; i++) {
+            AppOpsState.OpsTemplate tpl = AppOpsState.ALL_PERMS_TEMPLATES[i];
+            for (int j = 0; j < tpl.ops.length; j++) {
+                // we only want to use the template's orderings, not the visibility
+                tpl.showPerms[j] = true;
+            }
+
+            allTemplates[i] = tpl;
+        }
+
+        return allTemplates;
+    }
+
+    private Drawable getIconByPermission(String perm) {
+        Drawable icon = null;
+        if (perm != null) {
+            try {
+                PermissionInfo pi = mPm.getPermissionInfo(perm, 0);
+                if (pi.group != null) {
+                    PermissionGroupInfo pgi = mPm.getPermissionGroupInfo(pi.group, 0);
+                    if (pgi.icon != 0) {
+                        icon = pgi.loadIcon(mPm);
+                    }
+                }
+            } catch (NameNotFoundException e) {
+            }
+        }
+        return icon;
+    }
+
+    private ListPreference getListPrefForEntry(final AppOpsState.AppOpEntry entry, Drawable icon) {
+        final Resources res = getActivity().getResources();
+
+        final AppOpsManager.OpEntry firstOp = entry.getOpEntry(0);
+        final AppOpsManager.PackageOps pkgOps = entry.getPackageOps();
+        final int uid = pkgOps.getUid();
+        final String pkgName = pkgOps.getPackageName();
+        final int switchOp = AppOpsManager.opToSwitch(firstOp.getOp());
+        final int mode = mAppOps.checkOpNoThrow(switchOp, uid, pkgName);
+        final CharSequence opName = entry.getSwitchText(mState);
+
+        ListPreference listPref = new ListPreference(getActivity());
+        listPref.setLayoutResource(R.layout.preference_appops);
+        listPref.setIcon(icon);
+        listPref.setTitle(opName);
+        listPref.setDialogTitle(opName);
+        listPref.setEntries(R.array.app_ops_permissions);
+        listPref.setEntryValues(MODE_ENTRIES);
+        listPref.setValueIndex(modeToPosition(mode));
+        String summary = getSummary(listPref.getEntry(), entry.getCountsText(res),
+                entry.getTimeText(res, true));
+        listPref.setSummary(summary);
+        listPref.setOnPreferenceChangeListener(new OnPreferenceChangeListener() {
+            @Override
+            public boolean onPreferenceChange(Preference preference, Object newValue) {
+                ListPreference listPref = (ListPreference) preference;
+                String value = newValue.toString();
+                int selectedIndex = listPref.findIndexOfValue(value);
+                mAppOps.setMode(switchOp, uid, pkgName, positionToMode(selectedIndex));
+                String summary = getSummary(listPref.getEntries()[selectedIndex],
+                        entry.getCountsText(res), entry.getTimeText(res, true));
+                listPref.setSummary(summary);
+                return true;
+            }
+        });
+
+        return listPref;
+    }
+
+    private SwitchPreference getSwitchPrefForEntry(final AppOpsState.AppOpEntry entry,
+                                                   Drawable icon) {
+        final Resources res = getActivity().getResources();
+
+        final AppOpsManager.OpEntry firstOp = entry.getOpEntry(0);
+        final AppOpsManager.PackageOps pkgOps = entry.getPackageOps();
+        final int uid = pkgOps.getUid();
+        final String pkgName = pkgOps.getPackageName();
+        final int switchOp = AppOpsManager.opToSwitch(firstOp.getOp());
+        final int mode = mAppOps.checkOpNoThrow(switchOp, uid, pkgName);
+        final CharSequence opName = entry.getSwitchText(mState);
+
+        SwitchPreference switchPref = new SwitchPreference(getActivity());
+        switchPref.setLayoutResource(R.layout.preference_appops);
+        switchPref.setIcon(icon);
+        switchPref.setTitle(opName);
+        String summary = getSummary(entry.getCountsText(res), entry.getTimeText(res, true));
+        switchPref.setSummary(summary);
+        switchPref.setChecked(mode == AppOpsManager.MODE_ALLOWED);
+        switchPref.setOnPreferenceChangeListener(new OnPreferenceChangeListener() {
+            @Override
+            public boolean onPreferenceChange(Preference preference,
+                                              Object newValue) {
+                Boolean isChecked = (Boolean) newValue;
+                mAppOps.setMode(switchOp, uid, pkgName,
+                        isChecked ? AppOpsManager.MODE_ALLOWED
+                                : AppOpsManager.MODE_IGNORED);
+                return true;
+            }
+        });
+
+        return switchPref;
+    }
+
+    private Preference getNoBlockablePermissionsPref() {
+        Preference emptyPref = new Preference(getActivity());
+        emptyPref.setTitle(R.string.app_ops_no_blockable_permissions);
+        emptyPref.setSelectable(false);
+        emptyPref.setEnabled(false);
+        return emptyPref;
+    }
+
+    private void setIntentAndFinish(boolean finish, boolean appChanged) {
+        Intent intent = new Intent();
+        intent.putExtra(ManageApplications.APP_CHG, appChanged);
+        SettingsActivity sa = (SettingsActivity)getActivity();
+        sa.finishPreferencePanel(this, Activity.RESULT_OK, intent);
+    }
+
+    /** Called when the activity is first created. */
+    @Override
+    public void onCreate(Bundle icicle) {
+        super.onCreate(icicle);
+
+        mState = new AppOpsState(getActivity());
+        mPm = getActivity().getPackageManager();
+        mAppOps = (AppOpsManager)getActivity().getSystemService(Context.APP_OPS_SERVICE);
+        mPreferenceScreen = getPreferenceManager().createPreferenceScreen(getActivity());
+        retrieveAppEntry();
+
+        setPreferenceScreen(mPreferenceScreen);
+        setHasOptionsMenu(true);
+    }
+
+    @Override
+    public int getMetricsCategory() {
+        return MetricsEvent.APP_OPS_DETAILS;
+    }
+
+    @Override
+    public void onResume() {
+        super.onResume();
+        if (!refreshUi()) {
+            setIntentAndFinish(true, true);
+        }
+    }
+
+    private String getSummary(CharSequence... lines) {
+        StringJoiner sj = new StringJoiner("\n");
+        for (CharSequence line : lines) {
+            if (!TextUtils.isEmpty(line)) {
+                sj.add(line);
+            }
+        }
+        return sj.toString();
+    }
+}
diff --git a/src/com/android/settings/applications/appops/AppOpsDetailsTop.java b/src/com/android/settings/applications/appops/AppOpsDetailsTop.java
new file mode 100644
index 0000000000..c3c70848aa
--- /dev/null
+++ b/src/com/android/settings/applications/appops/AppOpsDetailsTop.java
@@ -0,0 +1,37 @@
+/**
+ * Copyright (C) 2015 The CyanogenMod Project
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License"); you may not
+ * use this file except in compliance with the License. You may obtain a copy
+ * of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
+ * License for the specific language governing permissions and limitations
+ * under the License.
+ */
+
+package com.android.settings.applications;
+
+import android.content.Intent;
+import android.preference.PreferenceActivity;
+
+public class AppOpsDetailsTop extends PreferenceActivity {
+
+    @Override
+    public Intent getIntent() {
+        Intent modIntent = new Intent(super.getIntent());
+        modIntent.putExtra(EXTRA_SHOW_FRAGMENT, AppOpsDetails.class.getName());
+        modIntent.putExtra(EXTRA_NO_HEADERS, true);
+        return modIntent;
+    }
+
+    @Override
+    protected boolean isValidFragment(String fragmentName) {
+        if (AppOpsDetails.class.getName().equals(fragmentName)) return true;
+        return false;
+    }
+}
diff --git a/src/com/android/settings/applications/appops/AppOpsSummary.java b/src/com/android/settings/applications/appops/AppOpsSummary.java
new file mode 100644
index 0000000000..ea4b5d9609
--- /dev/null
+++ b/src/com/android/settings/applications/appops/AppOpsSummary.java
@@ -0,0 +1,272 @@
+/**
+ * Copyright (C) 2013 The Android Open Source Project
+ * Copyright (C) 2016 The CyanogenMod Project
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License"); you may not
+ * use this file except in compliance with the License. You may obtain a copy
+ * of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
+ * License for the specific language governing permissions and limitations
+ * under the License.
+ */
+
+package com.android.settings.applications;
+
+import android.app.Activity;
+import android.app.AlertDialog;
+import android.app.AppOpsManager;
+import android.app.Fragment;
+import android.app.FragmentManager;
+import android.content.Context;
+import android.content.DialogInterface;
+import android.content.res.Resources;
+import android.content.SharedPreferences;
+import android.os.Bundle;
+import android.preference.PreferenceFrameLayout;
+import android.support.v13.app.FragmentPagerAdapter;
+import android.support.v4.view.PagerTabStrip;
+import android.support.v4.view.ViewPager;
+import android.util.Pair;
+import android.util.TypedValue;
+import android.view.LayoutInflater;
+import android.view.Menu;
+import android.view.MenuInflater;
+import android.view.MenuItem;
+import android.view.View;
+import android.view.ViewGroup;
+
+import com.android.internal.logging.nano.MetricsProto.MetricsEvent;
+import com.android.settings.core.InstrumentedPreferenceFragment;
+
+import java.util.ArrayList;
+import java.util.Arrays;
+import java.util.List;
+
+import com.android.settings.development.DevelopmentSettings;
+import com.android.settings.R;
+
+public class AppOpsSummary extends InstrumentedPreferenceFragment {
+    // layout inflater object used to inflate views
+    private LayoutInflater mInflater;
+    
+    private ViewGroup mContentContainer;
+    private View mRootView;
+    private ViewPager mViewPager;
+
+    private MyPagerAdapter mAdapter;
+
+    private Activity mActivity;
+    private SharedPreferences mPreferences;
+
+    @Override
+    public int getMetricsCategory() {
+        return MetricsEvent.APP_OPS_SUMMARY;
+    }
+
+    static class MyPagerAdapter extends FragmentPagerAdapter
+            implements ViewPager.OnPageChangeListener {
+        private List<Pair<CharSequence, AppOpsState.OpsTemplate>> mPageData;
+        private int mCurPos;
+
+        public MyPagerAdapter(FragmentManager fm,
+                List<Pair<CharSequence, AppOpsState.OpsTemplate>> data) {
+            super(fm);
+            mPageData = data;
+        }
+
+        @Override
+        public Fragment getItem(int position) {
+            return new AppOpsCategory(mPageData.get(position).second);
+        }
+
+        @Override
+        public int getCount() {
+            return mPageData.size();
+        }
+
+        @Override
+        public CharSequence getPageTitle(int position) {
+            return mPageData.get(position).first;
+        }
+
+        @Override
+        public void onPageScrolled(int position, float positionOffset, int positionOffsetPixels) {
+        }
+
+        @Override
+        public void onPageSelected(int position) {
+            mCurPos = position;
+        }
+
+        public int getCurrentPage() {
+            return mCurPos;
+        }
+
+        @Override
+        public void onPageScrollStateChanged(int state) {
+            if (state == ViewPager.SCROLL_STATE_IDLE) {
+                //updateCurrentTab(mCurPos);
+            }
+        }
+    }
+
+    private void resetAdapter() {
+        // trigger adapter load, preserving the selected page
+        int curPos = mAdapter.getCurrentPage();
+        mViewPager.setAdapter(mAdapter);
+        mViewPager.setOnPageChangeListener(mAdapter);
+        mViewPager.setCurrentItem(curPos);
+    }
+
+    @Override
+    public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {
+        // initialize the inflater
+        mInflater = inflater;
+
+        View rootView = mInflater.inflate(R.layout.app_ops_summary,
+                container, false);
+        mContentContainer = container;
+        mRootView = rootView;
+
+        CharSequence[] pageNames = getResources().getTextArray(R.array.app_ops_categories_lineage);
+        AppOpsState.OpsTemplate[] templates = AppOpsState.ALL_PERMS_TEMPLATES;
+        assert(pageNames.length == templates.length);
+
+        int specificTab = -1;
+        Bundle bundle = getArguments();
+        if (bundle != null) {
+            specificTab = Arrays.asList(pageNames).indexOf(bundle.getString("appops_tab", ""));
+        }
+
+        List<Pair<CharSequence, AppOpsState.OpsTemplate>> pageData = new ArrayList<>();
+        for (int i = 0; i < pageNames.length; i++) {
+            pageData.add(Pair.create(pageNames[i], templates[i]));
+        }
+        filterPageData(pageData, specificTab);
+
+        mViewPager = (ViewPager) rootView.findViewById(R.id.pager);
+        mAdapter = new MyPagerAdapter(getChildFragmentManager(), pageData);
+        mViewPager.setAdapter(mAdapter);
+        mViewPager.setOnPageChangeListener(mAdapter);
+        PagerTabStrip tabs = (PagerTabStrip) rootView.findViewById(R.id.tabs);
+
+        // HACK - https://code.google.com/p/android/issues/detail?id=213359
+        ((ViewPager.LayoutParams)tabs.getLayoutParams()).isDecor = true;
+
+        Resources.Theme theme = tabs.getContext().getTheme();
+        TypedValue typedValue = new TypedValue();
+        theme.resolveAttribute(android.R.attr.colorAccent, typedValue, true);
+        final int colorAccent = getContext().getColor(typedValue.resourceId);
+        tabs.setTabIndicatorColor(colorAccent);
+
+        // We have to do this now because PreferenceFrameLayout looks at it
+        // only when the view is added.
+        if (container instanceof PreferenceFrameLayout) {
+            ((PreferenceFrameLayout.LayoutParams) rootView.getLayoutParams()).removeBorders = true;
+        }
+
+        mActivity = getActivity();
+
+        return rootView;
+    }
+
+    private void filterPageData(List<Pair<CharSequence, AppOpsState.OpsTemplate>> data, int tab) {
+        if (tab >= 0 && tab < data.size()) {
+            Pair<CharSequence, AppOpsState.OpsTemplate> item = data.get(tab);
+            data.clear();
+            data.add(item);
+        } else if (!DevelopmentSettings.isRootForAppsEnabled()) {
+            for (Pair<CharSequence, AppOpsState.OpsTemplate> item : data) {
+                if (item.second == AppOpsState.SU_TEMPLATE) {
+                    data.remove(item);
+                    return;
+                }
+            }
+        }
+    }
+
+    private boolean shouldShowUserApps() {
+        return mPreferences.getBoolean("show_user_apps", true);
+    }
+
+    private boolean shouldShowSystemApps() {
+        return mPreferences.getBoolean("show_system_apps", true);
+    }
+
+    @Override
+    public void onActivityCreated(Bundle savedInstanceState) {
+        super.onActivityCreated(savedInstanceState);
+
+        // get shared preferences
+        mPreferences = mActivity.getSharedPreferences("appops_manager", Activity.MODE_PRIVATE);
+
+        setHasOptionsMenu(true);
+    }
+
+    @Override
+    public void onCreateOptionsMenu(Menu menu, MenuInflater inflater) {
+        super.onCreateOptionsMenu(menu, inflater);
+        inflater.inflate(R.menu.appops_manager, menu);
+        menu.findItem(R.id.show_user_apps).setChecked(shouldShowUserApps());
+        menu.findItem(R.id.show_system_apps).setChecked(shouldShowSystemApps());
+    }
+
+    private void resetCounters() {
+        final AppOpsManager appOps =
+                (AppOpsManager) mActivity.getSystemService(Context.APP_OPS_SERVICE);
+        if (appOps == null) {
+            return;
+        }
+        appOps.resetCounters();
+        // reload content
+        resetAdapter();
+    }
+
+    private void resetCountersConfirm() {
+        new AlertDialog.Builder(getActivity())
+            .setIcon(android.R.drawable.ic_dialog_alert)
+            .setTitle(R.string.app_ops_reset_confirm_title)
+            .setMessage(R.string.app_ops_reset_confirm_mesg)
+            .setPositiveButton(android.R.string.ok, new DialogInterface.OnClickListener()
+                {
+                    @Override
+                    public void onClick(DialogInterface dialog, int which) {
+                        resetCounters();
+                    }
+                })
+            .setNegativeButton(android.R.string.cancel, null)
+            .show();
+    }
+
+    @Override
+    public boolean onOptionsItemSelected(MenuItem item) {
+        switch (item.getItemId()) {
+            case R.id.show_user_apps:
+                final String prefNameUserApps = "show_user_apps";
+                // set the menu checkbox and save it in shared preference
+                item.setChecked(!item.isChecked());
+                mPreferences.edit().putBoolean(prefNameUserApps, item.isChecked()).commit();
+                // reload content
+                resetAdapter();
+                return true;
+            case R.id.show_system_apps:
+                final String prefNameSysApps = "show_system_apps";
+                // set the menu checkbox and save it in shared preference
+                item.setChecked(!item.isChecked());
+                mPreferences.edit().putBoolean(prefNameSysApps, item.isChecked()).commit();
+                // reload view content
+                resetAdapter();
+                return true;
+            case R.id.reset_counters:
+                resetCountersConfirm();
+                return true;
+            default:
+                return super.onContextItemSelected(item);
+        }
+    }
+}
-- 
2.17.1

