From 397c3ddf83497484fab7fc5ed3534c1de13e4161 Mon Sep 17 00:00:00 2001
From: nx111 <gd.zhangdz@gmail.com>
Date: Sat, 6 Oct 2018 15:08:08 +0800
Subject: [PATCH 16/16] add debug info for setupDataCall

Change-Id: I7b3dca96b16c8e35c24f4d57fc317e666c552523
---
 ril/libril/ril_service.cpp | 8 ++++++++
 1 file changed, 8 insertions(+)

diff --git a/ril/libril/ril_service.cpp b/ril/libril/ril_service.cpp
index d07c146..6ab137b 100644
--- a/ril/libril/ril_service.cpp
+++ b/ril/libril/ril_service.cpp
@@ -1155,6 +1155,8 @@ Return<void> RadioImpl::setupDataCall(int32_t serial, RadioTechnology radioTechn
     if (s_vendorFunctions->version >= 4 && s_vendorFunctions->version <= 14) {
         const hidl_string &protocol =
                 (isRoaming ? dataProfileInfo.roamingProtocol : dataProfileInfo.protocol);
+        RLOGD("%s: version=%d radioTechnology=%d", __FUNCTION__, s_vendorFunctions->version, (int) radioTechnology);
+
         dispatchStrings(serial, mSlotId, RIL_REQUEST_SETUP_DATA_CALL, true, 7,
             std::to_string((int) radioTechnology + 2).c_str(),
             std::to_string((int) dataProfileInfo.profileId).c_str(),
@@ -1165,6 +1167,7 @@ Return<void> RadioImpl::setupDataCall(int32_t serial, RadioTechnology radioTechn
             protocol.c_str());
     } else if (s_vendorFunctions->version >= 15) {
         char *mvnoTypeStr = NULL;
+        RLOGD("%s: version=%d radioTechnology=%d", __FUNCTION__, s_vendorFunctions->version, (int) radioTechnology);
         if (!convertMvnoTypeToString(dataProfileInfo.mvnoType, mvnoTypeStr)) {
             RequestInfo *pRI = android::addRequestToList(serial, mSlotId,
                     RIL_REQUEST_SETUP_DATA_CALL);
@@ -4110,6 +4113,7 @@ int radio::setupDataCallResponse(int slotId,
                 RLOGE("setupDataCallResponse: Invalid response");
                 if (e == RIL_E_SUCCESS) responseInfo.error = RadioError::INVALID_RESPONSE;
             }
+            RLOGD("%s: not v6/v9/v11", __FUNCTION__);
             result.status = DataCallFailCause::ERROR_UNSPECIFIED;
             result.type = hidl_string();
             result.ifname = hidl_string();
@@ -4118,13 +4122,17 @@ int radio::setupDataCallResponse(int slotId,
             result.gateways = hidl_string();
             result.pcscf = hidl_string();
         } else if ((responseLen % sizeof(RIL_Data_Call_Response_v11)) == 0) {
+            RLOGD("%s: v11", __FUNCTION__);
             convertRilDataCallToHal((RIL_Data_Call_Response_v11 *) response, result);
         } else if ((responseLen % sizeof(RIL_Data_Call_Response_v9)) == 0) {
+            RLOGD("%s: v9", __FUNCTION__);
             convertRilDataCallToHal((RIL_Data_Call_Response_v9 *) response, result);
         } else if ((responseLen % sizeof(RIL_Data_Call_Response_v6)) == 0) {
+            RLOGD("%s: v6", __FUNCTION__);
             convertRilDataCallToHal((RIL_Data_Call_Response_v6 *) response, result);
         }
 
+        RLOGD("%s: status=%d type=%s ifname=%s, addresses=%s, dnses=%s, gateways=%s, pcscf=%s", __FUNCTION__, result.status, result.type.c_str(), result.ifname.c_str(), result.addresses.c_str(), result.dnses.c_str(), result.gateways.c_str(), result.pcscf.c_str());
         Return<void> retStatus = radioService[slotId]->mRadioResponse->setupDataCallResponse(
                 responseInfo, result);
         radioService[slotId]->checkReturnStatus(retStatus);
-- 
2.17.1

