From 4543cd77e599b693c1487676bd18d62bd95d092d Mon Sep 17 00:00:00 2001
From: nx111 <gd.zhangdz@gmail.com>
Date: Sat, 6 Jan 2018 11:08:58 +0800
Subject: [PATCH 4/4] msm8974-common: libril: add debug info.

Change-Id: I8234149aae9df49f7a3b329e68a33e64ad1c998b
---
 ril/libril/ril_service.cpp | 26 ++++++++++++++------------
 1 file changed, 14 insertions(+), 12 deletions(-)

diff --git a/ril/libril/ril_service.cpp b/ril/libril/ril_service.cpp
index 9af61df..2ebf692 100644
--- a/ril/libril/ril_service.cpp
+++ b/ril/libril/ril_service.cpp
@@ -3467,7 +3467,7 @@ int radio::getSignalStrengthResponse(int slotId,
         SignalStrength signalStrength = {};
         if (response == NULL || (responseLen != sizeof(RIL_SignalStrength_v10)
                 && responseLen != sizeof(RIL_SignalStrength_v8))) {
-            RLOGE("getSignalStrengthResponse: Invalid response");
+            RLOGE("getSignalStrengthResponse: Invalid response (responseLen:%d != sizeof(RIL_SignalStrength_v10):%d and sizeof(RIL_SignalStrength_v8):%d )",responseLen,sizeof(RIL_SignalStrength_v10),sizeof(RIL_SignalStrength_v8));
             if (e == RIL_E_SUCCESS) responseInfo.error = RadioError::INVALID_RESPONSE;
         } else {
             convertRilSignalStrengthToHal(response, responseLen, signalStrength);
@@ -3791,7 +3791,7 @@ int radio::getVoiceRegistrationStateResponse(int slotId,
                if (e == RIL_E_SUCCESS) responseInfo.error = RadioError::INVALID_RESPONSE;
         } else if (s_vendorFunctions->version <= 14) {
             if (numStrings < 15) {
-                RLOGE("getVoiceRegistrationStateResponse Invalid response: NULL");
+                RLOGE("getVoiceRegistrationStateResponse Invalid response: (numStrings(%d) < 15)",numStrings);
                 if (e == RIL_E_SUCCESS) responseInfo.error = RadioError::INVALID_RESPONSE;
             } else {
                 char **resp = (char **) response;
@@ -3810,7 +3810,7 @@ int radio::getVoiceRegistrationStateResponse(int slotId,
                     (RIL_VoiceRegistrationStateResponse *)response;
 
             if (responseLen != sizeof(RIL_VoiceRegistrationStateResponse)) {
-                RLOGE("getVoiceRegistrationStateResponse Invalid response: NULL");
+                RLOGE("getVoiceRegistrationStateResponse Invalid response: (responseLen(%d) != sizeof(RIL_VoiceRegistrationStateResponse)(%d)",responseLen,sizeof(RIL_VoiceRegistrationStateResponse));
                 if (e == RIL_E_SUCCESS) responseInfo.error = RadioError::INVALID_RESPONSE;
             } else {
                 voiceRegResponse.regState = (RegState) voiceRegState->regState;
@@ -3854,7 +3854,7 @@ int radio::getDataRegistrationStateResponse(int slotId,
         } else if (s_vendorFunctions->version <= 14) {
             int numStrings = responseLen / sizeof(char *);
             if (numStrings < 6) {
-                RLOGE("getDataRegistrationStateResponse Invalid response: NULL");
+                RLOGE("getDataRegistrationStateResponse Invalid response: (numStrings(%d) < 6)", numStrings);
                 if (e == RIL_E_SUCCESS) responseInfo.error = RadioError::INVALID_RESPONSE;
             } else {
                 char **resp = (char **) response;
@@ -3872,7 +3872,7 @@ int radio::getDataRegistrationStateResponse(int slotId,
                     (RIL_DataRegistrationStateResponse *)response;
 
             if (responseLen != sizeof(RIL_DataRegistrationStateResponse)) {
-                RLOGE("getDataRegistrationStateResponse Invalid response: NULL");
+                RLOGE("getDataRegistrationStateResponse Invalid response: responseLen(%d) != sizeof(RIL_DataRegistrationStateResponse)(%d)",responseLen, sizeof(RIL_DataRegistrationStateResponse));
                 if (e == RIL_E_SUCCESS) responseInfo.error = RadioError::INVALID_RESPONSE;
             } else {
                 dataRegResponse.regState = (RegState) dataRegState->regState;
@@ -3910,14 +3910,16 @@ int radio::getOperatorResponse(int slotId,
         hidl_string numeric;
         int numStrings = responseLen / sizeof(char *);
         if (response == NULL || numStrings < 3) {
-            RLOGE("getOperatorResponse Invalid response: NULL");
+            RLOGE("getOperatorResponse Invalid response: numStrings(%d) < 3)",numStrings);
             if (e == RIL_E_SUCCESS) responseInfo.error = RadioError::INVALID_RESPONSE;
-
         } else {
             char **resp = (char **) response;
             longName = convertCharPtrToHidlString(resp[0]);
             shortName = convertCharPtrToHidlString(resp[1]);
             numeric = convertCharPtrToHidlString(resp[2]);
+#if VDBG
+            RLOGD("getOperatorResponse: longName(%s) resp[1](%s) numeric(%s)", resp[0], resp[1], resp[2]);
+#endif
         }
         Return<void> retStatus = radioService[slotId]->mRadioResponse->getOperatorResponse(
                 responseInfo, longName, shortName, numeric);
@@ -4054,7 +4056,7 @@ int radio::setupDataCallResponse(int slotId,
                 && responseLen % sizeof(RIL_Data_Call_Response_v9) != 0
                 && responseLen % sizeof(RIL_Data_Call_Response_v6) != 0)) {
             if (response != NULL) {
-                RLOGE("setupDataCallResponse: Invalid response");
+                RLOGE("setupDataCallResponse: Invalid response (responseLen=%d, sizeof(RIL_Data_Call_Response_v11=%d)",responseLen, sizeof(RIL_Data_Call_Response_v11));
                 if (e == RIL_E_SUCCESS) responseInfo.error = RadioError::INVALID_RESPONSE;
             }
             result.status = DataCallFailCause::ERROR_UNSPECIFIED;
@@ -4466,7 +4468,7 @@ int radio::getNetworkSelectionModeResponse(int slotId,
         populateResponseInfo(responseInfo, serial, responseType, e);
         bool manual = false;
         if (response == NULL || responseLen % sizeof(int) != 0) {
-            RLOGE("getNetworkSelectionModeResponse Invalid response: NULL");
+            RLOGE("getNetworkSelectionModeResponse Invalid response: NULL (responseLen:%d %% sizeof(int):%d != 0)",responseLen, sizeof(int));
             if (e == RIL_E_SUCCESS) responseInfo.error = RadioError::INVALID_RESPONSE;
         } else {
             int *pInt = (int *) response;
@@ -5504,7 +5506,7 @@ int radio::getCDMASubscriptionResponse(int slotId,
         int numStrings = responseLen / sizeof(char *);
         hidl_string emptyString;
         if (response == NULL || numStrings < 5) {
-            RLOGE("getOperatorResponse Invalid response: NULL");
+            RLOGE("getCDMASubscriptionResponse Invalid response: NULL (numStrings(%d) < 5)", numStrings);
             if (e == RIL_E_SUCCESS) responseInfo.error = RadioError::INVALID_RESPONSE;
             Return<void> retStatus
                     = radioService[slotId]->mRadioResponse->getCDMASubscriptionResponse(
@@ -5584,7 +5586,7 @@ int radio::getDeviceIdentityResponse(int slotId,
         int numStrings = responseLen / sizeof(char *);
         hidl_string emptyString;
         if (response == NULL || numStrings < 4) {
-            RLOGE("getDeviceIdentityResponse Invalid response: NULL");
+            RLOGE("getDeviceIdentityResponse Invalid response: NULL (numStrings(%d) < 4)", numStrings);
             if (e == RIL_E_SUCCESS) responseInfo.error = RadioError::INVALID_RESPONSE;
             Return<void> retStatus
                     = radioService[slotId]->mRadioResponse->getDeviceIdentityResponse(responseInfo,
@@ -6440,7 +6442,7 @@ int radio::getModemActivityInfoResponse(int slotId,
         populateResponseInfo(responseInfo, serial, responseType, e);
         ActivityStatsInfo info;
         if (response == NULL || responseLen != sizeof(RIL_ActivityStatsInfo)) {
-            RLOGE("getModemActivityInfoResponse Invalid response: NULL");
+            RLOGE("getModemActivityInfoResponse Invalid response: NULL (responseLen(%d) != sizeof RIL_ActivityStatsInfo(%d))",responseLen,sizeof(RIL_ActivityStatsInfo));
             if (e == RIL_E_SUCCESS) responseInfo.error = RadioError::INVALID_RESPONSE;
         } else {
             RIL_ActivityStatsInfo *resp = (RIL_ActivityStatsInfo *)response;
-- 
2.7.4

