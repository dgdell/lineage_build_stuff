From 63330d5221f22a1f77ae5e5fc676c795bbf29626 Mon Sep 17 00:00:00 2001
From: nx111 <gd.zhangdz@gmail.com>
Date: Tue, 16 Oct 2018 02:07:21 +0800
Subject: [PATCH 49/50] f/b: port AppOpsSummary.[DNM](1/2)

Change-Id: Ica44a3b7ff150c3572003a17e3ba6e5a226c2dec
---
 core/java/android/app/AppOpsManager.java | 39 +++++++++++++++++++++++-
 core/java/android/os/UserManager.java    | 12 ++++++++
 2 files changed, 50 insertions(+), 1 deletion(-)

diff --git a/core/java/android/app/AppOpsManager.java b/core/java/android/app/AppOpsManager.java
index 6ccf01c008a..001dc1ba4ad 100644
--- a/core/java/android/app/AppOpsManager.java
+++ b/core/java/android/app/AppOpsManager.java
@@ -352,8 +352,12 @@ public class AppOpsManager {
     public static final int OP_START_FOREGROUND = 76;
     /** @hide */
     public static final int OP_BLUETOOTH_SCAN = 77;
+    /** @hide Boot completed */
+    public static final int OP_BOOT_COMPLETED = 78;
+    /** @hide SU access */
+    public static final int OP_SU = 79;
     /** @hide */
-    public static final int _NUM_OP = 78;
+    public static final int _NUM_OP = 80;
 
     /** Access to coarse location information. */
     public static final String OPSTR_COARSE_LOCATION = "android:coarse_location";
@@ -597,6 +601,10 @@ public class AppOpsManager {
     public static final String OPSTR_START_FOREGROUND = "android:start_foreground";
     /** @hide */
     public static final String OPSTR_BLUETOOTH_SCAN = "android:bluetooth_scan";
+    /** @hide */
+    public static final String OPSTR_BOOT_COMPLETED = "android:boot_completed";
+    /** @hide */
+    public static final String OPSTR_SU = "android:su";
 
     // Warning: If an permission is added here it also has to be added to
     // com.android.packageinstaller.permission.utils.EventLogger
@@ -646,6 +654,7 @@ public class AppOpsManager {
             OP_WRITE_SETTINGS,
             OP_REQUEST_INSTALL_PACKAGES,
             OP_START_FOREGROUND,
+            OP_SU,
     };
 
     /**
@@ -735,6 +744,8 @@ public class AppOpsManager {
             OP_MANAGE_IPSEC_TUNNELS,            // MANAGE_IPSEC_HANDOVERS
             OP_START_FOREGROUND,                // START_FOREGROUND
             OP_COARSE_LOCATION,                 // BLUETOOTH_SCAN
+            OP_BOOT_COMPLETED,                  // BOOT_COMPLETED
+            OP_SU,                              // SU
     };
 
     /**
@@ -819,6 +830,8 @@ public class AppOpsManager {
             OPSTR_MANAGE_IPSEC_TUNNELS,
             OPSTR_START_FOREGROUND,
             OPSTR_BLUETOOTH_SCAN,
+            OPSTR_BOOT_COMPLETED,
+            OPSTR_SU,
     };
 
     /**
@@ -904,6 +917,8 @@ public class AppOpsManager {
             "MANAGE_IPSEC_TUNNELS",
             "START_FOREGROUND",
             "BLUETOOTH_SCAN",
+            "BOOT_COMPLETED",
+            "SU",
     };
 
     /**
@@ -989,6 +1004,8 @@ public class AppOpsManager {
             null, // no permission for OP_MANAGE_IPSEC_TUNNELS
             Manifest.permission.FOREGROUND_SERVICE,
             null, // no permission for OP_BLUETOOTH_SCAN
+            Manifest.permission.RECEIVE_BOOT_COMPLETED,
+            null, // no permission for OP_SU
     };
 
     /**
@@ -1075,6 +1092,8 @@ public class AppOpsManager {
             null, // MANAGE_IPSEC_TUNNELS
             null, // START_FOREGROUND
             null, // maybe should be UserManager.DISALLOW_SHARE_LOCATION, //BLUETOOTH_SCAN
+            null, //BOOT_COMPLETED
+            UserManager.DISALLOW_SU, //SU TODO: this should really be investigated.
     };
 
     /**
@@ -1160,6 +1179,8 @@ public class AppOpsManager {
             false, // MANAGE_IPSEC_HANDOVERS
             false, // START_FOREGROUND
             true, // BLUETOOTH_SCAN
+            true, // BOOT_COMPLETED
+            false, // SU
     };
 
     /**
@@ -1244,6 +1265,8 @@ public class AppOpsManager {
             AppOpsManager.MODE_ERRORED,  // MANAGE_IPSEC_TUNNELS
             AppOpsManager.MODE_ALLOWED,  // OP_START_FOREGROUND
             AppOpsManager.MODE_ALLOWED,  // OP_BLUETOOTH_SCAN
+            AppOpsManager.MODE_ALLOWED, // OP_BOOT_COMPLETED
+            AppOpsManager.MODE_ALLOWED,  // OP_SU
     };
 
     /**
@@ -1332,6 +1355,8 @@ public class AppOpsManager {
             false, // MANAGE_IPSEC_TUNNELS
             false, // START_FOREGROUND
             false, // BLUETOOTH_SCAN
+            false, // OP_BOOT_COMPLETED
+            false, // OP_SU
     };
 
     /**
@@ -1346,6 +1371,18 @@ public class AppOpsManager {
 
     private static HashMap<String, Integer> sNameToOp = new HashMap<String, Integer>();
 
+    /**
+     * App op guard states.
+     * @hide
+     */
+    public static final int[] PRIVACY_GUARD_OP_STATES = new int[] {
+            OP_COARSE_LOCATION,
+            OP_READ_CALL_LOG,
+            OP_READ_CONTACTS,
+            OP_READ_CALENDAR,
+            OP_READ_SMS,
+    };
+
     static {
         if (sOpToSwitch.length != _NUM_OP) {
             throw new IllegalStateException("sOpToSwitch length " + sOpToSwitch.length
diff --git a/core/java/android/os/UserManager.java b/core/java/android/os/UserManager.java
index b5918519d87..bfe4e4d4eba 100644
--- a/core/java/android/os/UserManager.java
+++ b/core/java/android/os/UserManager.java
@@ -1012,6 +1012,18 @@ public class UserManager {
     public static final String EXTRA_USER_ACCOUNT_OPTIONS
             = "android.os.extra.USER_ACCOUNT_OPTIONS";
 
+    /**
+     * Specifies if the user is not allowed to use SU commands.
+     * The default value is <code>false</code>.
+     *
+     * <p/>Key for user restrictions.
+     * <p/>Type: Boolean
+     * @see #setUserRestrictions(Bundle)
+     * @see #getUserRestrictions()
+     * @hide
+     */
+    public static final String DISALLOW_SU = "no_su";
+
     /** @hide */
     public static final int PIN_VERIFICATION_FAILED_INCORRECT = -3;
     /** @hide */
-- 
2.17.1

