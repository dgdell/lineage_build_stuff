From 2209eec702e10bc2c0711c9574c086806c858a04 Mon Sep 17 00:00:00 2001
From: Joey <joey@lineageos.org>
Date: Sat, 10 Mar 2018 22:33:43 +0100
Subject: [PATCH 125/249] wiki: add initial LineageSDK documentation

Change-Id: I955ccc40401f8ddab847126e07c3c1d0e4c824f4
Signed-off-by: Joey <joey@lineageos.org>
---
 index.md                     |   6 ++
 pages.md                     |   2 +-
 pages/lineage_sdk.md         |  13 +++
 pages/sdk/add_to_your_app.md |  57 +++++++++++++
 pages/sdk/api_versions.md    | 116 ++++++++++++++++++++++++++
 pages/sdk/profiles_api.md    | 129 +++++++++++++++++++++++++++++
 pages/sdk/styles_api.md      | 156 +++++++++++++++++++++++++++++++++++
 7 files changed, 478 insertions(+), 1 deletion(-)
 create mode 100644 pages/lineage_sdk.md
 create mode 100644 pages/sdk/add_to_your_app.md
 create mode 100644 pages/sdk/api_versions.md
 create mode 100644 pages/sdk/profiles_api.md
 create mode 100644 pages/sdk/styles_api.md

diff --git a/index.md b/index.md
index beb880a..2ef0e13 100644
--- a/index.md
+++ b/index.md
@@ -51,4 +51,10 @@ in `frameworks/base`.
 * If you unofficially maintain a device, and think it's good enough to go live, follow our instructions on [submitting a port]({{ "submitting_device.html" | relative_url }}). One of our developer relations
 staff will reach out to you, and we'll work to get the ball rolling on official builds for your device.
 
+### LineageSDK
+
+Enhance your apps with new Lineage-specific APIs using the [LineageOS platform SDK]({{ "sdk" | relative_url}}).
+
+## Wiki contents
+
 You can view all current pages [here]({{ "pages.html" | relative_url }}).
diff --git a/pages.md b/pages.md
index 25667ea..6c55a24 100644
--- a/pages.md
+++ b/pages.md
@@ -7,7 +7,7 @@ tags:
 ---
 
 {% assign sorted_pages = site.pages | sort: 'title' %}
-{% assign ignore_tags = "noindex|how-to" | split: "|" %}
+{% assign ignore_tags = "noindex|how-to|sdk" | split: "|" %}
 
 {% for page in sorted_pages %}
 {% assign ignore = false %}
diff --git a/pages/lineage_sdk.md b/pages/lineage_sdk.md
new file mode 100644
index 0000000..29ab7e6
--- /dev/null
+++ b/pages/lineage_sdk.md
@@ -0,0 +1,13 @@
+---
+sidebar: home_sidebar
+title: LineageSDK
+permalink: sdk/
+---
+
+{% assign sorted_pages = site.pages | sort: 'title' %}
+
+{% for page in sorted_pages %}
+{% if page.title and page.url and page.tags contains "sdk" %}
+- [{{ page.title }}]({{ page.url | relative_url }})
+{% endif %}
+{% endfor %}
diff --git a/pages/sdk/add_to_your_app.md b/pages/sdk/add_to_your_app.md
new file mode 100644
index 0000000..c81affc
--- /dev/null
+++ b/pages/sdk/add_to_your_app.md
@@ -0,0 +1,57 @@
+---
+sidebar: home_sidebar
+title: Add the LineageSDK to your app
+folder: sdk
+permalink: sdk/add-to-your-app.html
+tags:
+ - sdk
+---
+
+## Overview
+
+The LineageOS platform SDK is a powerful resource that allows app developers to do more with LineageOS devices.
+
+It is available on all the devices running LineageOS 15.1 (or later). It's also
+possible to use the SDK with devices running an unofficial LineageOS build, but we can't assure
+the same quality level of an official build.
+
+### Adding to your Android Studio project
+
+You can download the LineageSDK jar library from our [prebuilts repo](https://github.com/LineageOS/android_prebuilts_lineage-sdk).
+Once you have downloaded the jar file, insert in the module-level `build.gradle` of your app this dependency:
+
+{% highlight gradle %}
+dependencies {
+    implementation fileTree(dir: 'libs', include: ['lineageos-sdk.jar'])
+}
+{% endhighlight %}
+
+And put the `lineageos-sdk.jar` file in your app's module `libs` folder (usually `app/libs`) and refresh the gradle dependencies.
+
+### Compiling the library from source
+
+In order to compile this library from source, you need to [set up a LineageOS build environment](https://wiki.lineageos.org/devices/angler/build).
+
+Once your build environment is ready, run the following commands to generate the .jar  library:
+
+{% highlight bash %}
+source build/envsetup.sh
+breakfast yourDevice    # Replace yourDevice with your device's codename
+croot
+make org.lineageos.platform.sdk.aar
+{% endhighlight %}
+
+The jar library will be available at the following path:
+
+`out/target/common/obj/JAVA_LIBRARIES/org.lineageos.platform.sdk.aar_intermediates/classes.jar`
+
+### Compatibility
+
+The library has been tested on both java and kotlin projects.
+
+## Get assistance
+
+If you have any questions or get stuck on any of the steps, feel free to ask on [our subreddit](https://reddit.com/r/LineageOS) or in
+[#LineageOS on freenode](https://webchat.freenode.net/?channels=LineageOS).
+
+You can also find more information in the [LineageSDK javadoc](https://lineageos.github.io/android_lineage-sdk).
diff --git a/pages/sdk/api_versions.md b/pages/sdk/api_versions.md
new file mode 100644
index 0000000..7efba07
--- /dev/null
+++ b/pages/sdk/api_versions.md
@@ -0,0 +1,116 @@
+---
+sidebar: home_sidebar
+title: LineageSDK API versions
+folder: sdk
+permalink: sdk/api-versions.html
+tags:
+ - sdk
+---
+
+## Overview
+
+Different devices may run different versions of LineageOS. Each successive build may add new APIs not available in the previous version.
+To indicate which set of APIs are available, each platform version specifies an API level.
+For instance, the initial LineageOS 15.1 API level was 8, while after a some releases new APIs were added and so it was bumped to API level 9.
+
+To help decipher which APIs are available to you at any given point (if at all), weâ€™ve created a copy
+of the [Build API](https://lineageos.github.io/android_lineage-sdk/reference/lineageos/os/Build.html) from AOSP allowing you to programmatically
+compare the devices current API version to see if specific features are available or not.
+
+For example, to utilize the Styles functionality on a device, a simple call to retrieve the SDK
+constant and comparing it against the Ilama API level allows you to see if your application is running
+on a LineageOS device that can support the new SDK feature:
+
+### Checking the LineageSDK version using the Build API
+
+**Kotlin**
+{% highlight kotlin %}
+fun setGlobalDarkMode(context: Context): Boolean {
+    if (Build.LINEAGE_VERSION.SDK_INT < Build.LINEAGE_VERSION_CODES.ILAMA) {
+        Log.w(TAG, "This feature requires the LineageSDK API 9 level")
+        return false
+    }
+    val styleInterface = StyleInterface.getInstance(context)
+    return styleInterface.setGlobalStyle(StyleInterface.STYLE_GLOBAL_DARK)
+}
+{% endhighlight %}
+
+**Java**
+{% highlight java %}
+boolean setGlobalDarkMode(Context context) {
+    if (Build.LINEAGE_VERSION.SDK_INT < Build.LINEAGE_VERSION_CODES.ILAMA) {
+        Log.w(TAG, "This feature requires the LineageSDK API 9 level");
+        return false;
+    }
+    StyleInterface styleInterface = StyleInterface.getInstance(context);
+    return styleInterface.setGlobalStyle(StyleInterface.STYLE_GLOBAL_DARK);
+}
+{% endhighlight %}
+
+Likewise, this API also allows you to see if you're running on a LineageOS device at all by seeing if [`SDK_INT`](https://lineageos.github.io/android_lineage-sdk/reference/lineageos/os/Build.LINEAGE_VERSION.html#SDK_INT) returns a value greater than 0.
+
+### Checking the LineageSDK version without the Build API
+
+Some times you may want to check the LineageSDK version to toggle a feature that does not require you to
+include the sdk library itself (such as [tuning the app style basing on the system style]({{ "sdk/api/styles.html#match-the-global-style-1" | relative_url }})).
+In this case adding the sdk library itself would add (almost) zero benefits at the cost of increasing the app size.
+You can check the LineageSDK version using the `getprop` binary, by executing it in a [`Process`](https://docs.oracle.com/javase/8/docs/api/java/lang/Process.html).
+Here you can find a simple method you can copy-paste right into your app to check the LineageSDK version of the device your app is being run on.
+
+**Kotlin**
+{% highlight kotlin %}
+// Returns 0 if no LineageSDK version is found
+fun getLineageSDKVersion() = try {
+    val process = Runtime.getRuntime().exec("getprop ro.lineage.build.version.plat.sdk")
+    val reader = BufferedReader(InputStreamReader(process.inputStream))
+    val output = StringBuilder()
+    var line = reader.readLine()
+    while (line != null) {
+        output.append(line)
+        line = reader.readLine()
+    }
+
+    val result = output.toString()
+    if (result.isEmpty()) 0 else result.toInt()
+} catch (e: IOException) {
+    0.also { e.printStackTrace() }
+} catch (ignored: NumberFormatException) {
+    // This is not what we're looking for, fallback to default
+    0
+}
+{% endhighlight %}
+
+**Java**
+{% highlight java %}
+// Returns "" if no LineageSDK version is found
+int getLineageSDKVersion() {
+    try {
+        Process process = Runtime.getRuntime().exec("getprop ro.lineage.build.version.plat.sdk");
+        BufferedReader reader = new BufferedReader(
+                    new InputStreamReader(process.getInputStream()));
+        StringBuilder output = new StringBuilder();
+        String line;
+        while ((line = reader.readLine()) != null) {
+            output.append(line);
+        }
+
+        String result = output.toString();
+        return TextUtils.isEmpty(result) ? 0 : Integer.parseInt(result);
+    } catch (IOException e) {
+        e.printStackTrace();
+    } catch (NumberFormatException ignored) {
+        // This is not what we're looking for, fallback to default
+    }
+
+    return 0;
+}
+{% endhighlight %}
+
+
+
+## Get assistance
+
+If you have any questions or get stuck on any of the steps, feel free to ask on [our subreddit](https://reddit.com/r/LineageOS) or in
+[#LineageOS on freenode](https://webchat.freenode.net/?channels=LineageOS).
+
+You can also find more information in the [LineageSDK javadoc](https://lineageos.github.io/android_lineage-sdk).
diff --git a/pages/sdk/profiles_api.md b/pages/sdk/profiles_api.md
new file mode 100644
index 0000000..0a46361
--- /dev/null
+++ b/pages/sdk/profiles_api.md
@@ -0,0 +1,129 @@
+---
+sidebar: home_sidebar
+title: Profiles API
+folder: sdk
+permalink: sdk/api/profiles.html
+tags:
+ - sdk
+---
+
+## Overview
+
+A Profile is a device state which can be created, modified, or activated for a user based off of an environmental trigger.
+When you tell the system to create a profile, it will be populated within the system settings application's Profile viewer.
+This hub can both be controlled by the Settings application and by a 3rd party application.
+
+### Creating a Profile
+
+You must specify the UI information, actions, and optional environmental triggers for a Profile utilizing the methods available within the [`Profile`](https://lineageos.github.io/android_lineage-sdk/reference/lineageos/app/Profile.html) object.
+To add your created Profile to the system, invoke a call to [`ProfileManager.addProfile(Profile)`](https://lineageos.github.io/android_lineage-sdk/reference/lineageos/app/ProfileManager.html)
+
+### Required Profile contents
+
+A Profile object must contain the following:
+* An identifying name, set by [`setName(String)`](https://lineageos.github.io/android_lineage-sdk/reference/lineageos/app/Profile.html#setName(java.lang.String))
+* A [`Profile.Type`](https://lineageos.github.io/android_lineage-sdk/reference/lineageos/app/Profile.Type.html), set by [`setProfileType(Int)`](https://lineageos.github.io/android_lineage-sdk/reference/lineageos/app/Profile.html#setProfileType(int))
+
+To use these Profiles API, your application must first declare the [write settings permission](http://developer.android.com/reference/android/Manifest.permission.html#WRITE_SETTINGS) in AndroidManifest.xml.
+
+{% highlight xml %}
+<uses-permission android:name="android.permission.WRITE_SETTINGS" />
+{% endhighlight %}
+
+### Creating and adding a simple Profile
+
+The snippet below details how to create a [`Profile`](https://lineageos.github.io/android_lineage-sdk/reference/lineageos/app/Profile.html) object that overrides the devices ring mode settings to be muted.
+
+**Kotlin**
+{% highlight kotlin %}
+fun createProfile(context: Context) {
+    // Create a new Profile object with a label
+    val profile = Profile("My New Profile!")
+
+    // We're a toggle!
+    profile.profileType = Type.TOGGLE
+
+    // Now create a RingModeSettings object and make set the mode to MUTE with an override of TRUE
+    val ringSettings = RingModeSettings(RingModeSettings.RING_MODE_MUTE, true)
+    profile.ringMode = ringSettings
+
+    // Add the Profile to the internal service
+    ProfileManager.getInstance(context).addProfile(profile)
+}
+{% endhighlight %}
+
+**Java**
+{% highlight java %}
+void createProfile(Context context) {
+    // Create a new Profile object with a label
+    Profile profile = new Profile("My New Profile!");
+
+    // We're a toggle!
+    profile.setProfileType(Type.TOGGLE);
+
+    // Now create a RingModeSettings object and make set the mode to MUTE with an override of TRUE
+    RingModeSettings ringSettings = new RingModeSettings(RingModeSettings.RING_MODE_MUTE, true);
+    profile.setRingMode(ringSettings);
+
+    // Add the Profile to the internal service
+    ProfileManager.getInstance(context).addProfile(profile);
+}
+{% endhighlight %}
+
+To set the profile to be the primary active profile, you can trigger this by calling [`setActiveProfile(UUID)`](https://lineageos.github.io/android_lineage-sdk/reference/lineageos/app/ProfileManager.html#setActiveProfile(java.util.UUID))
+by passing the UUID of the created Profile object.
+
+**Kotlin**
+{% highlight kotlin %}
+fun enableProfile(profile: Profile, context: Context) {
+    val profileUuid = profile.uuid
+    ProfileManager.getInstance(context).setActiveProfile(profileUuid)
+}
+{% endhighlight %}
+
+**Java**
+{% highlight java %}
+void enableProfile(Profile profile, Context context) {
+    UUID profileUuid = profile.getUuid();
+    ProfileManager.getInstance(context).setActiveProfile(profileUuid);
+}
+{% endhighlight %}
+
+## Leveraging a ProfileTrigger
+
+For the instances where you want to trigger a Profile based off of an environment change as defined by [`Profile.TriggerType`](https://lineageos.github.io/android_lineage-sdk/reference/lineageos/app/Profile.TriggerType.html)
+you can set a specific [`Profile.ProfileTrigger`](https://lineageos.github.io/android_lineage-sdk/reference/lineageos/app/Profile.ProfileTrigger.html) on your Profile.
+
+To create a ProfileTrigger you'll need to populate 4 parameters, for something like a trigger based off of a WiFi access point, you can follow the model below:
+
+**Kotlin**
+{% highlight kotlin %}
+fun getTrigger(triggerName: String): Profile.ProfileTrigger {
+    val triggerType = Profile.TriggerType.WIFI          // This is a wifi trigger
+    val triggerId = trigger.getSSID()                   // Use the AP's SSID as identifier
+    val triggerState = Profile.TriggerState.ON_CONNECT  // On Connect of this, trigger
+
+    return Profile.ProfileTrigger(triggerType, triggerId, triggerState, triggerName)
+}
+{% endhighlight %}
+
+**Java**
+{% highlight java %}
+Profile.ProfileTrigger getTrigger(String triggerName) {
+    int triggerType = Profile.TriggerType.WIFI;         // This is a wifi trigger
+    int triggerId = trigger.getSSID();                  // Use the AP's SSID as identifier
+    int triggerState = Profile.TriggerState.ON_CONNECT; // On Connect of this, trigger
+
+    return new Profile.ProfileTrigger(triggerType, triggerId, triggerState, triggerName);
+}
+{% endhighlight %}
+
+As you can see we set the TriggerType as WiFI, set the SSID as the triggerId (for tracking), set the title of the access point as the triggerName,
+and then finally declare that we want to be "triggered" when an ON_CONNECT is given for the access point.
+
+## Get assistance
+
+If you have any questions or get stuck on any of the steps, feel free to ask on [our subreddit](https://reddit.com/r/LineageOS) or in
+[#LineageOS on freenode](https://webchat.freenode.net/?channels=LineageOS).
+
+You can also find more information in the [LineageSDK javadoc](https://lineageos.github.io/android_lineage-sdk).
diff --git a/pages/sdk/styles_api.md b/pages/sdk/styles_api.md
new file mode 100644
index 0000000..bed0d91
--- /dev/null
+++ b/pages/sdk/styles_api.md
@@ -0,0 +1,156 @@
+---
+sidebar: home_sidebar
+title: Styles API
+folder: sdk
+permalink: sdk/api/styles.html
+tags:
+ - sdk
+---
+
+## Overview
+
+The styles API allows applications to both change and get changed colors. This has been introduced in LineageSDK API 9 (March 2018).
+
+## Tune the app style basing on system
+
+Changing the app style basing on the system configuration only requires the [appcompat-v7](https://developer.android.com/topic/libraries/support-library/packages.html#v7-appcompat) library.
+The LineageSDK is not needed to customize the app basing on the system style, because the styles API hooks itself into standard android APIs.
+
+### Match the global style
+
+In order for your app to match the global style, you need to make your application theme a child of [`Theme.AppCompat.DayNight`](https://developer.android.com/reference/android/support/v7/appcompat/R.style.html#Theme_AppCompat_DayNight).
+This theme allows to create a dark mode using the `-night` resources modifier. In day/light mode it inherits from the
+[`Theme.AppCompat.Light`](https://developer.android.com/reference/android/support/v7/appcompat/R.style.html#Theme_AppCompat_Theme_AppCompat_Light) theme,
+in night/dark mode it inherits from the [`Theme.AppCompat`](https://developer.android.com/reference/android/support/v7/appcompat/R.style.html#Theme_AppCompat_Theme_AppCompat) theme.
+The LineageSDK library is not needed in order to make the app follow the system global style.
+
+Here's an example of how to make your app follow the LineageOS global style:
+
+**res/values/styles.xml**
+{% highlight xml %}
+<style name="AppTheme" parent="Theme.AppCompat.DayNight">
+    <!-- Use the light statusbar only when in day/light mode -->
+    <item name="android:windowLightStatusBar">@bool/is_theme_light</item>
+</style>
+{% endhighlight %}
+
+**res/values/bools.xml**
+{% highlight xml %}
+<bool name="is_theme_light">true</bool>
+{% endhighlight %}
+
+**res/values-night/bools.xml**
+{% highlight xml %}
+<bool name="is_theme_light">false</bool>
+{% endhighlight %}
+
+### Get the current system default accent color
+
+There's no way to reference this value in a xml resource, but it's possible to get the system's
+accent color using this method:
+
+**Kotlin**
+{% highlight kotlin %}
+@ColorInt
+private fun getAccentColor(): Int {
+    val attr = intArrayOf(android.R.attr.colorAccent)
+    val typedArray = obtainStyledAttributes(android.R.style.Theme_DeviceDefault, attr)
+    return typedArray.getColor(0, Color.BLACK)
+            .also { typedArray.recycle() }
+}
+{% endhighlight %}
+
+**Java**
+{% highlight java %}
+@ColorInt
+private int getAccentColor() {
+    int[] attr = { android.R.attr.colorAccent };
+    TypedArray typedArray = obtainStyledAttributes(android.R.style.Theme_DeviceDefault, attr);
+    int color = typedArray.getColor(0, Color.BLACK);
+    typedArray.recycle();
+    return color;
+}
+{% endhighlight %}
+
+### Handling non-LineageOS devices cases
+
+When your app is running on non-LineageOS devices it will use the light style unless you
+change it using the [`AppCompatDelegate`](https://developer.android.com/reference/android/support/v7/app/AppCompatDelegate.html)'s
+[`setDefaultNightMode(Int)`](https://developer.android.com/reference/android/support/v7/app/AppCompatDelegate.html#setDefaultNightMode(int)) method at runtime passing
+one of those as argument:
+  - [`AppCompatDelegate.MODE_NIGHT_FOLLOW_SYSTEM`]((https://developer.android.com/reference/android/support/v7/app/AppCompatDelegate.html#MODE_NIGHT_FOLLOW_SYSTEM)): Follow system style (works only on LineageOS devices, on others it fallbacks to light)
+  - [`AppCompatDelegate.MODE_NIGHT_NO`](https://developer.android.com/reference/android/support/v7/app/AppCompatDelegate.html#MODE_NIGHT_NO): Light mode is enforced (only for the app)
+  - [`AppCompatDelegate.MODE_NIGHT_YES`]((https://developer.android.com/reference/android/support/v7/app/AppCompatDelegate.html#MODE_NIGHT_YES)) : Dark mode is enforced (only for the app)
+
+#### Checking if `MODE_NIGHT_FOLLOW_SYSTEM` is supported
+
+You can find out whether the app can follow the system style by checking the installed LineageSDK version (if any) is at least
+[`9`](https://lineageos.github.io/android_lineage-sdk/reference/lineageos/os/Build.LINEAGE_VERSION_CODES.html#ILAMA).
+On the [LineageSDK API versions]({{ "sdk/api-versions.html" | relative_url }}) page you can find out how to get the current SDK API level, even
+[without importing the Lineage SDK library itself]({{ "sdk/api-versions.html#checking-the-lineagesdk-version-without-the-build-api-1" | relative_url }}).
+
+## Tune the system style from an app
+
+By importing the [LineageSDK library]({{ "sdk/add-to-your-app.html" | relative_url }}) you can access
+the [StyleInterface API](https://lineageos.github.io/android_lineage-sdk/reference/lineageos/style/StyleInterface.html) that will allow you to set the system global style and accent.
+
+### Requesting the permission
+
+In order to be able to use this API you need to get your app granted the `lineageos.permission.CHANGE_STYLE` permission.
+This is marked as a [_dangerous_ permission](https://developer.android.com/guide/topics/permissions/overview.html#dangerous_permissions)
+so you'll have to both declare it in the manifest and [request it at runtime](https://developer.android.com/training/permissions/requesting.html#make-the-request).
+
+{% highlight xml %}
+<uses-permission android:name="lineageos.permission.CHANGE_STYLE" />
+{% endhighlight %}
+
+### Changing the global style
+
+In order to change the global style you need to get the [StyleInterface](https://lineageos.github.io/android_lineage-sdk/reference/lineageos/style/StyleInterface.html) instance by using [`StyleInterface.getInstance(Context)`](https://lineageos.github.io/android_lineage-sdk/reference/lineageos/style/StyleInterface.html#getInstance(android.content.Context)).
+Once you've got an instance and you made sure the app has been granted the permission to change styles,
+you can set the global style choosing one of the 4 possible configurations using the [`setGlobalStyle(Int, String)`](https://lineageos.github.io/android_lineage-sdk/reference/lineageos/style/StyleInterface.html#setGlobalStyle(int, java.lang.String))
+method passing one of those as the first argument (the second one is your app's packageName):
+
+  - [`StyleInterface.STYLE_GLOBAL_AUTO_WALLPAPER`](https://lineageos.github.io/android_lineage-sdk/reference/lineageos/style/StyleInterface.html#STYLE_GLOBAL_AUTO_WALLPAPER): Style is based on the user wallpaper
+  - [`StyleInterface.STYLE_GLOBAL_AUTO_DAYTIME`](https://lineageos.github.io/android_lineage-sdk/reference/lineageos/style/StyleInterface.html#STYLE_GLOBAL_AUTO_DAYTIME): Style is based on the day time
+  - [`StyleInterface.STYLE_GLOBAL_LIGHT`](https://lineageos.github.io/android_lineage-sdk/reference/lineageos/style/StyleInterface.html#STYLE_GLOBAL_LIGHT): Light style is enforced
+  - [`StyleInterface.STYLE_GLOBAL_DARK`](https://lineageos.github.io/android_lineage-sdk/reference/lineageos/style/StyleInterface.html#STYLE_GLOBAL_DARK): Dark is enforced
+
+**Kotlin**
+{% highlight kotlin %}
+private fun setGlobalStyle(context: Context, turnDark: Boolean) {
+    val styleInterface = StyleInterface.getInstance(context)
+    // [...] check for permission
+    styleInterface.setGlobalStyle(
+            if (turnDark) StyleInterface.STYLE_GLOBAL_DARK
+            else StyleInterface.STYLE_GLOBAL_LIGHT,
+            context.packageName)
+}
+{% endhighlight %}
+
+**Java**
+{% highlight java %}
+private void setGlobalStyle(Context context, boolean turnDark) {
+    StyleInterface styleInterface = StyleInterface.getInstance(context);
+    // [...] check for permission
+    styleInterface.setGlobalStyle(turnDark ?
+            StyleInterface.STYLE_GLOBAL_DARK : StyleInterface.STYLE_GLOBAL_LIGHT,
+            context.getPackageName());
+}
+{% endhighlight %}
+
+### Changing the accent style
+
+In order to change the global style you need to get the [StyleInterface](https://lineageos.github.io/android_lineage-sdk/reference/lineageos/style/StyleInterface.html) instance by using [`StyleInterface.getInstance(Context)`](https://lineageos.github.io/android_lineage-sdk/reference/lineageos/style/StyleInterface.html#getInstance(android.content.Context)).
+Once you've got an instance and you made sure the app has been granted the permission to change styles,
+you can set the global accent choosing one of the 4 possible configurations using the [`setAccent(String)`](https://lineageos.github.io/android_lineage-sdk/reference/lineageos/style/StyleInterface.html#setAccent(java.lang.String))
+method passing the accent overlay package name as argument.
+
+You can get a list of trusted accent packages names with the [StyleInterface](https://lineageos.github.io/android_lineage-sdk/reference/lineageos/style/StyleInterface.html)'s [`getTrustedAccents()`](https://lineageos.github.io/android_lineage-sdk/reference/lineageos/style/StyleInterface.html#getTrustedAccents()) method.
+
+## Get assistance
+
+If you have any questions or get stuck on any of the steps, feel free to ask on [our subreddit](https://reddit.com/r/LineageOS) or in
+[#LineageOS on freenode](https://webchat.freenode.net/?channels=LineageOS).
+
+You can also find more information in the [LineageSDK javadoc](https://lineageos.github.io/android_lineage-sdk).
-- 
2.17.1

