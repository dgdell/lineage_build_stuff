From 10ad333164f77c4460b50e1583f3a12ae4cc301c Mon Sep 17 00:00:00 2001
From: Sam Mortimer <sam@mortimer.me.uk>
Date: Sat, 21 Apr 2018 11:28:54 -0700
Subject: [PATCH 2/6] NetworkTraffic: Include tethering traffic statistics

*) Add a helper getTetheringStats() that uses NetworkManagementService
   getNetworkStatsTethering() to retrieve realtime tethering stats.

*) Enable collection of tethering stats only when tethering
   is actively enabled.

Change-Id: I9994aa37ce2e27171022f6aae4627fe27cabccbe
---
 .../internal/statusbar/NetworkTraffic.java    | 70 +++++++++++++++++--
 1 file changed, 66 insertions(+), 4 deletions(-)

diff --git a/sdk/src/java/org/lineageos/internal/statusbar/NetworkTraffic.java b/sdk/src/java/org/lineageos/internal/statusbar/NetworkTraffic.java
index 8bed2f2..36d1d2e 100644
--- a/sdk/src/java/org/lineageos/internal/statusbar/NetworkTraffic.java
+++ b/sdk/src/java/org/lineageos/internal/statusbar/NetworkTraffic.java
@@ -29,11 +29,15 @@ import android.graphics.drawable.Drawable;
 import android.graphics.PorterDuff;
 import android.graphics.Rect;
 import android.net.ConnectivityManager;
+import android.net.NetworkStats;
 import android.net.TrafficStats;
 import android.os.Handler;
-import android.os.UserHandle;
+import android.os.INetworkManagementService;
 import android.os.Message;
+import android.os.RemoteException;
+import android.os.ServiceManager;
 import android.os.SystemClock;
+import android.os.UserHandle;
 import android.util.AttributeSet;
 import android.util.Log;
 import android.util.TypedValue;
@@ -44,6 +48,8 @@ import lineageos.providers.LineageSettings;
 
 import org.lineageos.platform.internal.R;
 
+import java.util.ArrayList;
+
 public class NetworkTraffic extends TextView {
     private static final String TAG = "NetworkTraffic";
 
@@ -87,6 +93,11 @@ public class NetworkTraffic extends TextView {
     private SettingsObserver mObserver;
     private Drawable mDrawable;
 
+    private boolean mTetheringActive;
+    private TetheringStats mTetheringStats;
+
+    private INetworkManagementService mNetworkManagementService;
+
     public NetworkTraffic(Context context) {
         this(context, null);
     }
@@ -98,12 +109,18 @@ public class NetworkTraffic extends TextView {
     public NetworkTraffic(Context context, AttributeSet attrs, int defStyle) {
         super(context, attrs, defStyle);
 
+        mNetworkManagementService = INetworkManagementService.Stub.asInterface(
+                    ServiceManager.getService(Context.NETWORKMANAGEMENT_SERVICE));
+
         final Resources resources = getResources();
         mTextSizeSingle = resources.getDimensionPixelSize(R.dimen.net_traffic_single_text_size);
         mTextSizeMulti = resources.getDimensionPixelSize(R.dimen.net_traffic_multi_text_size);
 
         mNetworkTrafficIsVisible = false;
 
+        mTetheringActive = false;
+        mTetheringStats = getTetheringStats();
+
         mObserver = new SettingsObserver(mTrafficHandler);
     }
 
@@ -140,8 +157,11 @@ public class NetworkTraffic extends TextView {
         manager.addDarkReceiver(mDarkReceiver);
         manager.addVisibilityReceiver(mVisibilityReceiver);
 
+        mContext.registerReceiver(mIntentReceiver,
+                new IntentFilter(ConnectivityManager.ACTION_TETHER_STATE_CHANGED));
         mContext.registerReceiver(mIntentReceiver,
                 new IntentFilter(ConnectivityManager.CONNECTIVITY_ACTION));
+
         mObserver.observe();
         updateSettings();
     }
@@ -162,8 +182,15 @@ public class NetworkTraffic extends TextView {
                     && timeDelta >= REFRESH_INTERVAL * 0.95f) {
                 // Update counters
                 mLastUpdateTime = now;
-                long txBytes = TrafficStats.getTotalTxBytes() - mLastTxBytesTotal;
-                long rxBytes = TrafficStats.getTotalRxBytes() - mLastRxBytesTotal;
+                // Only update tethering stats if
+                // tethering is active.
+                if (mTetheringActive) {
+                    mTetheringStats = getTetheringStats();
+                }
+                long txBytes = TrafficStats.getTotalTxBytes() + mTetheringStats.txBytes
+                        - mLastTxBytesTotal;
+                long rxBytes = TrafficStats.getTotalRxBytes() + mTetheringStats.rxBytes
+                        - mLastRxBytesTotal;
                 mTxKbps = (long) (txBytes * 8f / (timeDelta / 1000f) / 1000f);
                 mRxKbps = (long) (rxBytes * 8f / (timeDelta / 1000f) / 1000f);
                 mLastTxBytesTotal += txBytes;
@@ -256,7 +283,11 @@ public class NetworkTraffic extends TextView {
         @Override
         public void onReceive(Context context, Intent intent) {
             String action = intent.getAction();
-            if (ConnectivityManager.CONNECTIVITY_ACTION.equals(action)) {
+            if (ConnectivityManager.ACTION_TETHER_STATE_CHANGED.equals(action)) {
+                ArrayList<String> tetherArray =
+                        intent.getStringArrayListExtra(ConnectivityManager.EXTRA_ACTIVE_TETHER);
+                mTetheringActive = (tetherArray.size() > 0);
+            } else if (ConnectivityManager.CONNECTIVITY_ACTION.equals(action)) {
                 updateViewState();
             }
         }
@@ -299,6 +330,37 @@ public class NetworkTraffic extends TextView {
         return cm.getActiveNetworkInfo() != null;
     }
 
+    private class TetheringStats {
+        long txBytes;
+        long rxBytes;
+    }
+
+    private TetheringStats getTetheringStats() {
+        TetheringStats tetheringStats = new TetheringStats();
+
+        NetworkStats stats = null;
+        try {
+            stats = mNetworkManagementService.getNetworkStatsTethering(NetworkStats.STATS_PER_UID);
+        } catch (RemoteException e) {
+        }
+        if (stats == null) {
+            // stats will be zero
+            return tetheringStats;
+        }
+
+        // The API permits passing stats for multiple
+        // tethered interface pairings.
+        NetworkStats.Entry entry = null;
+        for (int i = 0; i < stats.size(); i++) {
+            entry = stats.getValues(i, entry);
+            if (entry.uid == TrafficStats.UID_TETHERING) {
+                tetheringStats.txBytes += entry.txBytes;
+                tetheringStats.rxBytes += entry.rxBytes;
+            }
+        }
+        return tetheringStats;
+    }
+
     private void updateSettings() {
         ContentResolver resolver = mContext.getContentResolver();
 
-- 
2.17.0

