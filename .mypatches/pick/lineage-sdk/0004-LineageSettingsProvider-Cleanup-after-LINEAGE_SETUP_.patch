From f3ae51e83bdbd883d6a0143b088ab206cc47c59e Mon Sep 17 00:00:00 2001
From: Sam Mortimer <sam@mortimer.me.uk>
Date: Tue, 14 Aug 2018 19:33:50 -0700
Subject: [PATCH 4/6] LineageSettingsProvider: Cleanup after
 LINEAGE_SETUP_WIZARD_COMPLETED deprecation

Change-Id: I997759d1f79fae514566e6474ea7802c2c7d1f53
---
 .../LineageDatabaseHelper.java                | 37 +++++++++++--------
 .../tests/LineageSettingsProviderTest.java    | 25 -------------
 2 files changed, 21 insertions(+), 41 deletions(-)

diff --git a/packages/LineageSettingsProvider/src/org/lineageos/lineagesettings/LineageDatabaseHelper.java b/packages/LineageSettingsProvider/src/org/lineageos/lineagesettings/LineageDatabaseHelper.java
index 5bf49f0..e40c11e 100644
--- a/packages/LineageSettingsProvider/src/org/lineageos/lineagesettings/LineageDatabaseHelper.java
+++ b/packages/LineageSettingsProvider/src/org/lineageos/lineagesettings/LineageDatabaseHelper.java
@@ -51,7 +51,7 @@ public class LineageDatabaseHelper extends SQLiteOpenHelper{
     private static final boolean LOCAL_LOGV = false;
 
     private static final String DATABASE_NAME = "lineagesettings.db";
-    private static final int DATABASE_VERSION = 9;
+    private static final int DATABASE_VERSION = 10;
 
     private static final String DATABASE_NAME_OLD = "cmsettings.db";
 
@@ -232,21 +232,9 @@ public class LineageDatabaseHelper extends SQLiteOpenHelper{
         }
 
         if (upgradeVersion < 4) {
-            if (mUserHandle == UserHandle.USER_OWNER) {
-                db.beginTransaction();
-                SQLiteStatement stmt = null;
-                try {
-                    stmt = db.compileStatement("INSERT INTO secure(name,value)"
-                            + " VALUES(?,?);");
-                    final String provisionedFlag = Settings.Global.getString(
-                            mContext.getContentResolver(), Settings.Global.DEVICE_PROVISIONED);
-                    loadSetting(stmt, LineageSettings.Secure.LINEAGE_SETUP_WIZARD_COMPLETED, provisionedFlag);
-                    db.setTransactionSuccessful();
-                } finally {
-                    if (stmt != null) stmt.close();
-                    db.endTransaction();
-                }
-            }
+            /* Was set LineageSettings.Secure.LINEAGE_SETUP_WIZARD_COMPLETE
+             * but this is no longer used
+             */
             upgradeVersion = 4;
         }
 
@@ -336,6 +324,23 @@ public class LineageDatabaseHelper extends SQLiteOpenHelper{
             }
             upgradeVersion = 9;
         }
+
+        if (upgradeVersion < 10) {
+            if (mUserHandle == UserHandle.USER_OWNER) {
+                db.beginTransaction();
+                SQLiteStatement stmt = null;
+                try {
+                    stmt = db.compileStatement("DELETE FROM secure WHERE name=?");
+                    stmt.bindString(1, LineageSettings.Secure.LINEAGE_SETUP_WIZARD_COMPLETED);
+                    stmt.execute();
+                    db.setTransactionSuccessful();
+                } finally {
+                    if (stmt != null) stmt.close();
+                    db.endTransaction();
+                }
+            }
+            upgradeVersion = 10;
+        }
         // *** Remember to update DATABASE_VERSION above!
 
         if (upgradeVersion < newVersion) {
diff --git a/packages/LineageSettingsProvider/tests/src/org/lineageos/lineagesettings/tests/LineageSettingsProviderTest.java b/packages/LineageSettingsProvider/tests/src/org/lineageos/lineagesettings/tests/LineageSettingsProviderTest.java
index 17908ff..28079cf 100644
--- a/packages/LineageSettingsProvider/tests/src/org/lineageos/lineagesettings/tests/LineageSettingsProviderTest.java
+++ b/packages/LineageSettingsProvider/tests/src/org/lineageos/lineagesettings/tests/LineageSettingsProviderTest.java
@@ -119,31 +119,6 @@ import java.util.Map;
          assertEquals(lineageProviderValue, settingsProviderValue);
      }
 
-     /**
-      * The new {@link LineageSettings.Secure#LINEAGE_SETUP_WIZARD_COMPLETED} lineage specific provisioned flag
-      * should be equal to the old {@link Settings.Global#DEVICE_PROVISIONED} flag on boot, or on
-      * upgrade. These flags will almost always be equal, except during the provisioning process,
-      * they may change at slightly different times.
-      *
-      * Test whether the setting was properly set and is not null.
-      *
-      * @deprecated Replaced by {@link Settings.Global#DEVICE_PROVISIONED}
-      *             or {@link Settings.Secure#USER_SETUP_COMPLETE}
-      */
-     @Deprecated
-     @SmallTest
-     public void testLineageProvisionedFlagFallbackSet() {
-         final String newLineageFlag = LineageSettings.Secure.getStringForUser(
-                 getContext().getContentResolver(), LineageSettings.Secure.LINEAGE_SETUP_WIZARD_COMPLETED,
-                 UserHandle.USER_OWNER);
-         assertNotNull(newLineageFlag);
-
-         final String previousFlag = Settings.Global.getStringForUser(
-                 getContext().getContentResolver(), Settings.Global.DEVICE_PROVISIONED,
-                 UserHandle.USER_OWNER);
-         assertEquals(previousFlag, newLineageFlag);
-     }
-
      private void testMigrateSettingsForUser(int userId) {
          // Setup values in Settings
          /*final String expectedPullDownValue = "testQuickPullDownValue";
-- 
2.17.1

