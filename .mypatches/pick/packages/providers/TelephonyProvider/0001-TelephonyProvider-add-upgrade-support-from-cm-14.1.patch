From ab560879ad53db03380b1bb54d6ce669bd603d9d Mon Sep 17 00:00:00 2001
From: Simon Shields <simon@lineageos.org>
Date: Wed, 29 Nov 2017 00:18:17 +1100
Subject: [PATCH] TelephonyProvider: add upgrade support from cm-14.1

* only support upgrades from the latest 14.1 db schema

Change-Id: I2bd6b121b098f1074b77b7f5c5e811775738502a
---
 .../telephony/MmsSmsDatabaseHelper.java       | 71 +++++++++++++++++--
 .../telephony/TelephonyProvider.java          | 17 ++---
 2 files changed, 73 insertions(+), 15 deletions(-)

diff --git a/src/com/android/providers/telephony/MmsSmsDatabaseHelper.java b/src/com/android/providers/telephony/MmsSmsDatabaseHelper.java
index 75885bd..04ffa20 100644
--- a/src/com/android/providers/telephony/MmsSmsDatabaseHelper.java
+++ b/src/com/android/providers/telephony/MmsSmsDatabaseHelper.java
@@ -240,7 +240,7 @@ public class MmsSmsDatabaseHelper extends SQLiteOpenHelper {
     private static boolean sFakeLowStorageTest = false;     // for testing only
 
     static final String DATABASE_NAME = "mmssms.db";
-    static final int DATABASE_VERSION = 67;
+    static final int DATABASE_VERSION = 68;
     private static final int IDLE_CONNECTION_TIMEOUT_MS = 30000;
 
     private final Context mContext;
@@ -928,10 +928,16 @@ public class MmsSmsDatabaseHelper extends SQLiteOpenHelper {
             "display_originating_addr TEXT);";
     // email address if from an email gateway, otherwise same as address
     private void createSmsTables(SQLiteDatabase db) {
+        createSmsTables(db, false);
+    }
+
+    private void createSmsTables(SQLiteDatabase db, boolean onlySMS) {
         // N.B.: Whenever the columns here are changed, the columns in
         // {@ref MmsSmsProvider} must be changed to match.
         db.execSQL(CREATE_SMS_TABLE_STRING);
 
+        if (onlySMS) return;
+
         db.execSQL(CREATE_RAW_TABLE_STRING);
 
         db.execSQL(CREATE_ATTACHMENTS_TABLE_STRING);
@@ -954,6 +960,10 @@ public class MmsSmsDatabaseHelper extends SQLiteOpenHelper {
     }
 
     private void createCommonTables(SQLiteDatabase db) {
+        createCommonTables(db, false);
+    }
+
+    private void createCommonTables(SQLiteDatabase db, boolean threadsOnly) {
         // TODO Ensure that each entry is removed when the last use of
         // any address equivalent to its address is removed.
 
@@ -966,9 +976,10 @@ public class MmsSmsDatabaseHelper extends SQLiteOpenHelper {
          * will be used. The _id is created with AUTOINCREMENT so it
          * will never be reused again if a recipient is deleted.
          */
-        db.execSQL("CREATE TABLE canonical_addresses (" +
-                   "_id INTEGER PRIMARY KEY AUTOINCREMENT," +
-                   "address TEXT);");
+        if (!threadsOnly)
+            db.execSQL("CREATE TABLE canonical_addresses (" +
+                       "_id INTEGER PRIMARY KEY AUTOINCREMENT," +
+                       "address TEXT);");
 
         /**
          * This table maps the subject and an ordered set of recipient
@@ -991,6 +1002,8 @@ public class MmsSmsDatabaseHelper extends SQLiteOpenHelper {
                    Threads.ERROR + " INTEGER DEFAULT 0," +
                    Threads.HAS_ATTACHMENT + " INTEGER DEFAULT 0);");
 
+        if (threadsOnly)
+            return;
         /**
          * This table stores the queue of messages to be sent/downloaded.
          */
@@ -1522,6 +1535,23 @@ public class MmsSmsDatabaseHelper extends SQLiteOpenHelper {
             } finally {
                 db.endTransaction();
             }
+            // fall through
+        case 67:
+            // fall through - version not used by AOSP
+        case 68:
+            // upgrade from 14.1
+            if (currentVersion <= 68) {
+                return;
+            }
+            try {
+                upgradeDatabaseToVersion68(db);
+                db.setTransactionSuccessful();
+            } catch (Throwable ex) {
+                Log.e(TAG, ex.getMessage(), ex);
+                break;
+            } finally {
+                db.endTransaction();
+            }
             return;
         }
 
@@ -1824,6 +1854,39 @@ public class MmsSmsDatabaseHelper extends SQLiteOpenHelper {
         }
     }
 
+    private void upgradeDatabaseToVersion68(SQLiteDatabase db) {
+        try {
+            // back up and recreate sms table to drop priority column
+            db.execSQL("DROP TABLE IF EXISTS sms_tmp;");
+            db.execSQL("ALTER TABLE sms RENAME TO sms_tmp;");
+            createSmsTables(db, true);
+            final String columns = "_id, thread_id, address, person, date, date_sent, " +
+                    "protocol, read, status, type, reply_path_present, subject, body, service_center" +
+                    "locked, sub_id, error_code, creator, seen";
+            db.execSQL("INSERT INTO sms (" + columns + ") SELECT " + columns + " FROM sms_tmp");
+            db.execSQL("DROP TABLE sms_tmp;");
+        } catch (SQLiteException e) {
+            Log.e(TAG, "[upgradeDatabaseToVersion68] Exception removing column "
+                    + "priority; " + e);
+        }
+
+        // now do attachment_info and notification sections
+        try {
+            db.execSQL("DROP TABLE IF EXISTS threads_tmp;");
+            db.execSQL("ALTER TABLE threads RENAME TO threads_tmp;");
+            createCommonTables(db, true);
+            final String columns = Threads._ID + ", " + Threads.DATE + ", " + Threads.MESSAGE_COUNT +
+                ", " + Threads.RECIPIENT_IDS + ", " + Threads.SNIPPET + ", " + Threads.SNIPPET_CHARSET + ", " +
+                Threads.READ + ", " + Threads.ARCHIVED + ", " + Threads.TYPE + ", " + Threads.ERROR + ", " +
+                Threads.HAS_ATTACHMENT;
+            db.execSQL("INSERT INTO threads (" + columns + ") SELECT " + columns + " FROM threads_tmp");
+            db.execSQL("DROP TABLE threads_tmp");
+        } catch (SQLiteException e) {
+            Log.e(TAG, "[upgradeDatabaseToVersion68] Exception removing columns "
+                    + "from threads table; " + e);
+        }
+    }
+
     @Override
     public synchronized SQLiteDatabase getWritableDatabase() {
         SQLiteDatabase db = super.getWritableDatabase();
diff --git a/src/com/android/providers/telephony/TelephonyProvider.java b/src/com/android/providers/telephony/TelephonyProvider.java
index df1e58c..c9cd2f6 100644
--- a/src/com/android/providers/telephony/TelephonyProvider.java
+++ b/src/com/android/providers/telephony/TelephonyProvider.java
@@ -133,7 +133,7 @@ public class TelephonyProvider extends ContentProvider
     private static final boolean DBG = true;
     private static final boolean VDBG = false; // STOPSHIP if true
 
-    private static final int DATABASE_VERSION = 26 << 16;
+    private static final int DATABASE_VERSION = 27 << 16;
     private static final int URL_UNKNOWN = 0;
     private static final int URL_TELEPHONY = 1;
     private static final int URL_CURRENT = 2;
@@ -981,7 +981,8 @@ public class TelephonyProvider extends ContentProvider
                 }
                 oldVersion = 23 << 16 | 6;
             }
-            if (oldVersion < (24 << 16 | 6)) {
+            // In Lineage 14.1, we changed the version to 24 so the AOSP version 24 upgrade was skipped
+            if (oldVersion < (27 << 16 | 6)) {
                 Cursor c = null;
                 String[] proj = {"_id"};
                 recreateDB(c, db, proj, /* version */24);
@@ -995,16 +996,13 @@ public class TelephonyProvider extends ContentProvider
                             + NETWORK_TYPE_BITMASK + ": " + c.getCount());
                     c.close();
                 }
-                oldVersion = 24 << 16 | 6;
-            }
-            if (oldVersion < (25 << 16 | 6)) {
                 // Add a new column SubscriptionManager.CARD_ID into the database and set the value
                 // to be the same as the existing column SubscriptionManager.ICC_ID. In order to do
                 // this, we need to first make a copy of the existing SIMINFO_TABLE, set the value
                 // of the new column SubscriptionManager.CARD_ID, and replace the SIMINFO_TABLE with
                 // the new table.
-                Cursor c = null;
-                String[] proj = {SubscriptionManager.UNIQUE_KEY_SUBSCRIPTION_ID};
+                c = null;
+                proj = new String[] {SubscriptionManager.UNIQUE_KEY_SUBSCRIPTION_ID};
                 recreateSimInfoDB(c, db, proj);
                 if (VDBG) {
                     c = db.query(SIMINFO_TABLE, proj, null, null, null, null, null);
@@ -1017,9 +1015,6 @@ public class TelephonyProvider extends ContentProvider
                             + SubscriptionManager.CARD_ID + ": " + c.getCount());
                     c.close();
                 }
-                oldVersion = 25 << 16 | 6;
-            }
-            if (oldVersion < (26 << 16 | 6)) {
                 // Add a new column Carriers.APN_SET_ID into the database and set the value to
                 // Carriers.NO_SET_SET by default.
                 try {
@@ -1031,7 +1026,7 @@ public class TelephonyProvider extends ContentProvider
                                 "The table will get created in onOpen.");
                     }
                 }
-                oldVersion = 26 << 16 | 6;
+                oldVersion = 27 << 16 | 6;
             }
             if (DBG) {
                 log("dbh.onUpgrade:- db=" + db + " oldV=" + oldVersion + " newV=" + newVersion);
-- 
2.17.1

