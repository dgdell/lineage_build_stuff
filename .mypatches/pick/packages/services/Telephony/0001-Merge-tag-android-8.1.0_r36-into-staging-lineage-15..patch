From 89c9313e7941e686b712a57a6addbeac834b46c8 Mon Sep 17 00:00:00 2001
From: Luca Stefani <luca.stefani.ge1@gmail.com>
Date: Fri, 6 Jul 2018 12:31:38 +0200
Subject: [PATCH 1/3] Merge tag 'android-8.1.0_r36' into
 staging/lineage-15.1-android-8.1.0_r36

Android 8.1.0 Release 36 (OPM2.171026.006.H1)

* tag 'android-8.1.0_r36':
  DO NOT MERGE Add Safety Net Log for getForbiddenPlmns security hole
  Fix broken permission check for TelephonyManager#getForbiddenPlmns
  Enhanced permission checks for TelephonyManager#endCall() API.

Change-Id: I90a9020e8eac33a5e78904a51702a9bec58720a0
---
 .../android/phone/PhoneInterfaceManager.java  | 21 ++++++++++++++++---
 1 file changed, 18 insertions(+), 3 deletions(-)

diff --git a/src/com/android/phone/PhoneInterfaceManager.java b/src/com/android/phone/PhoneInterfaceManager.java
index 36d84b70b..7fb7e2815 100644
--- a/src/com/android/phone/PhoneInterfaceManager.java
+++ b/src/com/android/phone/PhoneInterfaceManager.java
@@ -2506,9 +2506,24 @@ public class PhoneInterfaceManager extends ITelephony.Stub {
      * Get the forbidden PLMN List from the given app type (ex APPTYPE_USIM)
      * on a particular subscription
      */
-    public String[] getForbiddenPlmns(int subId, int appType) {
-        mApp.enforceCallingOrSelfPermission(android.Manifest.permission.READ_PHONE_STATE,
-                "Requires READ_PHONE_STATE");
+    public String[] getForbiddenPlmns(int subId, int appType, String callingPackage) {
+
+        if ((mApp.checkCallingOrSelfPermission(
+                android.Manifest.permission.READ_PRIVILEGED_PHONE_STATE)
+                == PackageManager.PERMISSION_GRANTED
+                || mApp.checkCallingOrSelfPermission(
+                android.Manifest.permission.READ_PHONE_STATE)
+                == PackageManager.PERMISSION_GRANTED)
+                && mAppOps.noteOp(
+                AppOpsManager.OP_READ_PHONE_STATE, Binder.getCallingUid(), callingPackage)
+                != AppOpsManager.MODE_ALLOWED) {
+            EventLog.writeEvent(0x534e4554, "73884967", Binder.getCallingUid(),
+                "getForbiddenPlmns calllingPackage: " + callingPackage);
+        }
+
+        if (!canReadPhoneState(callingPackage, "getForbiddenPlmns")) {
+            return null;
+        }
         if (appType != TelephonyManager.APPTYPE_USIM && appType != TelephonyManager.APPTYPE_SIM) {
             loge("getForbiddenPlmnList(): App Type must be USIM or SIM");
             return null;
-- 
2.17.1

