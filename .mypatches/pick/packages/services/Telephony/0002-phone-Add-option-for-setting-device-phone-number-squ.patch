From 41d3698a3e5499ff0d9e56d1acf399df717b6207 Mon Sep 17 00:00:00 2001
From: Pawit Pornkitprasan <p.pawit@gmail.com>
Date: Sun, 29 Dec 2013 16:21:15 +0100
Subject: [PATCH 2/3] phone: Add option for setting device phone number
 (squashed)

Squashed commit of the following, with some more cleanup :)
(from gingerbread)

commit 53aaa90d95c83fff8f869c187cc291f51d3be6a6
Author: Pawit Pornkitprasan <p.pawit@gmail.com>
Date:   Thu Nov 24 12:01:03 2011 +0700

    Whitespace fixes

commit d98314c62fa371c7a8bbcda0d5221eb1b72cd639
Author: Pawit Pornkitprasan <p.pawit@gmail.com>
Date:   Tue Aug 30 23:15:07 2011 +0700

    Phone: Set MSISDN on boot from saved setting if SIM returned empty "My Phone Number"

    Some carriers don't set the MSISDN (My Phone Number) and CM remedied
    that by adding a setting in "Additional settings" in Call Settings
    which saves a new MSISDN to the SIM. However, some phones fails to
    save the MSISDN to the SIM and another remedy was added to set it
    every boot from the stored value. However, the current implementation
    only sets it if the framework returns a null value. This patch also
    sets it if the framework returns an empty string.

    Patch Set 3:
    - Fixed simstate checking as the intent extra is a string not an
      integer
    - Removed airplane mode checking as simstate will be triggered anyway

    Change-Id: If8875b841d2029be12f367ab6f309bbfb81fc330
    (cherry picked from commit 4045310b01b3c74fb06be69809f57be7d85dd32a)

commit 10959fc16e91bff31ed136fc609b6035777efacf
Author: Ricardo Cerqueira <cyanogenmod@cerqueira.org>
Date:   Sat Aug 27 00:35:25 2011 +0100

    Phone: Fix race condition in BOOT_COMPLETED intent

    BOOT_COMPLETED was triggering a read (and write) of SIM extra
    fields, regardless of whether the SIM was actually ready for it
    or not.
    If the boot happened to complete before the radio layer
    was ready, we were trying to do iccIO before we were allowed to.
    This resulted in errors for most phones, but on at least one it caused
    the whole iccIO interface to lock up until the next reboot (where the
    same would probably happen again)

    So... trigger the write with the SIM_READY intent itself instead of
    using BOOT_COMPLETED

    Change-Id: I027fab6000cae0ed94ea1513553d883fde99ca75
    (cherry picked from commit 495628ca2852aa5cde792f7c38f4b26ed8a6d2cf)

commit c9601d4df39cd2afbe2ffc864e5fe7a36c94ddd9
Author: Peter Fares <mrpeter05@gmail.com>
Date:   Wed Jan 19 02:00:38 2011 -0600

    Restore unknown phone number after toggling airplane mode

    Change-Id: I1a92422c3cddb93d356f2a28041df8550bee8f7a
    (cherry picked from commit c9639061dcc6ae167e736e5dbd34ede1621edaa1)

commit fe5042c3c29fb01bc6a4a3680b506840a8c36bad
Author: Jiri Tyr <jiri.tyr@gmail.com>
Date:   Sun Jan 16 23:52:01 2011 +0100

    Save phone numbert when entered and set it again when boot completed.

    Change-Id: Id51da585c9ceb5071bf49e880ddb12cd6f70023c
    (cherry picked from commit 9648847f060d8a267fa4600c9754e827b3b93550)

commit 32bc75569d6df75b14447c3215c0e29e7fe6d3f5
Author: Steve Kondik <shade@chemlab.org>
Date:   Fri Aug 20 19:35:17 2010 -0400

    phone: Fix case where MSISDN alpha tag is not set

    The new "My phone number" option was not being saved to the SIM because
    the alpha tag was not previously set. This change externalizes the
    preference code and defaults the alpha tag to "Voice Line 1".

    Change-Id: I15d4b08eeb026e0fdc32bebd7e315eed251061c9

commit 50a25fa4a0c11c4c00bd41094ae2796efe71123c
Author: Steve Kondik <shade@chemlab.org>
Date:   Sun Aug 15 20:19:42 2010 -0400

    phone: Add option for setting device phone number

    Change-Id: I4ce4ced23b3fa9803fae4f1725ef21b01a25e149

Signed-off-by: Chirayu Desai <cdesai@cyanogenmod.org>
Signed-off-by: Adnan Begovic <adnan@cyngn.com>
JIRA: BASH-82
Change-Id: I4ce4ced23b3fa9803fae4f1725ef21b01a25e149

Telephony: Create MSISDNEditPreference per active phone.

Change-Id: I32b0a3df1c1282252492811392e582caecc6bb9a

MyPhoneNumber: Handle msim sim state changed broadcast.

Change-Id: I5c7998e092376905e818f46ec2c3632f015b69c4

phone: Fix crash in MSISDNEditPreference when changing phone num.

When GsmUmtsAdditionalCallOptions's onCreate is called w/o a
Bundle handle, mMSISDNButton.init won't get called, hence
MSISDNEditPreference's mPhone is not initialized, which causes a
crash when onDialogClosed accesses mPhone.

* mMSISDNButton was not initialized, retrieve handle from prefSet
* Call mMSISDNButton.init to make sure mPhone is initialized

Change-Id: Ia0b629dab69edbc76d542dc603251f4d98715227

Telephony: change input type to phone for my phone no.

The my phone number (msisdn) is only accept phone digits.
Change the input type to prevent launch full keyboard
for input it.

Also add a prompt if set my phone number failed.
(Possibly due to length limit in SIM, however there is no
standard on maximum length, so we cannot limit it on input,
must set and check)

FEIJ-1219

Change-Id: I06ed2a4b325ba9475476bdbaeefd22154632863c
---
 AndroidManifest.xml                           |   7 +
 res/values/cm_strings.xml                     |   6 +
 res/xml/gsm_umts_additional_options.xml       |  10 ++
 .../phone/GsmUmtsAdditionalCallOptions.java   |   9 +
 .../android/phone/MSISDNEditPreference.java   | 161 ++++++++++++++++++
 src/com/android/phone/MyPhoneNumber.java      |  95 +++++++++++
 6 files changed, 288 insertions(+)
 create mode 100644 src/com/android/phone/MSISDNEditPreference.java
 create mode 100644 src/com/android/phone/MyPhoneNumber.java

diff --git a/AndroidManifest.xml b/AndroidManifest.xml
index cf3300c81..e750eb9a8 100644
--- a/AndroidManifest.xml
+++ b/AndroidManifest.xml
@@ -193,6 +193,13 @@
                 android:readPermission="android.permission.READ_CONTACTS"
                 android:writePermission="android.permission.WRITE_CONTACTS" />
 
+        <!-- Workaround for non saved phone number -->
+        <receiver android:name=".MyPhoneNumber">
+            <intent-filter>
+                <action android:name="android.intent.action.SIM_STATE_CHANGED" />
+            </intent-filter>
+        </receiver>
+
         <!-- Dialer UI that only allows emergency calls -->
         <activity android:name="EmergencyDialer"
             android:label="@string/emergencyDialerIconLabel"
diff --git a/res/values/cm_strings.xml b/res/values/cm_strings.xml
index f75c966a9..6ead12d5b 100644
--- a/res/values/cm_strings.xml
+++ b/res/values/cm_strings.xml
@@ -39,4 +39,10 @@
 
     <!-- Emergency Calling -->
     <string name="emergency_unsupported_dialer_message">Unable to complete emergency call, no suitable app found</string>
+
+    <!-- My Phone Number -->
+    <string name="phone_number_label">My phone number</string>
+    <string name="phone_number_summary">Set the phone number for this device</string>
+    <string name="set_my_number_failed">Failed to set phone number</string>
+    <string name="msisdn_alpha_tag" translatable="false">Voice Line 1</string>
 </resources>
diff --git a/res/xml/gsm_umts_additional_options.xml b/res/xml/gsm_umts_additional_options.xml
index 33b076968..8b1f9bdbe 100644
--- a/res/xml/gsm_umts_additional_options.xml
+++ b/res/xml/gsm_umts_additional_options.xml
@@ -22,4 +22,14 @@
         android:summaryOff="@string/sum_cw_disabled"
         android:enabled="false"/>
 
+    <com.android.phone.MSISDNEditPreference
+        android:key="button_pn_key"
+        android:title="@string/phone_number_label"
+        android:summary="@string/phone_number_summary"
+        android:inputType="phone"
+        android:dialogTitle="@string/phone_number_label"
+        android:dialogMessage="@string/phone_number_summary"
+        android:negativeButtonText="@string/cancel"
+        android:positiveButtonText="@string/ok" />
+
 </PreferenceScreen>
diff --git a/src/com/android/phone/GsmUmtsAdditionalCallOptions.java b/src/com/android/phone/GsmUmtsAdditionalCallOptions.java
index 082eaa9e2..a5cfafe07 100644
--- a/src/com/android/phone/GsmUmtsAdditionalCallOptions.java
+++ b/src/com/android/phone/GsmUmtsAdditionalCallOptions.java
@@ -17,9 +17,11 @@ public class GsmUmtsAdditionalCallOptions extends TimeConsumingPreferenceActivit
 
     private static final String BUTTON_CLIR_KEY  = "button_clir_key";
     private static final String BUTTON_CW_KEY    = "button_cw_key";
+    private static final String BUTTON_PN_KEY    = "button_pn_key";
 
     private CLIRListPreference mCLIRButton;
     private CallWaitingSwitchPreference mCWButton;
+    private MSISDNEditPreference mMSISDNButton;
 
     private final ArrayList<Preference> mPreferences = new ArrayList<Preference>();
     private int mInitIndex = 0;
@@ -40,18 +42,23 @@ public class GsmUmtsAdditionalCallOptions extends TimeConsumingPreferenceActivit
         PreferenceScreen prefSet = getPreferenceScreen();
         mCLIRButton = (CLIRListPreference) prefSet.findPreference(BUTTON_CLIR_KEY);
         mCWButton = (CallWaitingSwitchPreference) prefSet.findPreference(BUTTON_CW_KEY);
+        mMSISDNButton = (MSISDNEditPreference) prefSet.findPreference(BUTTON_PN_KEY);
 
         mPreferences.add(mCLIRButton);
         mPreferences.add(mCWButton);
+        mPreferences.add(mMSISDNButton);
 
         if (icicle == null) {
             if (DBG) Log.d(LOG_TAG, "start to init ");
             mCLIRButton.init(this, false, mPhone);
+            mMSISDNButton.init(this, false, mPhone);
         } else {
             if (DBG) Log.d(LOG_TAG, "restore stored states");
             mInitIndex = mPreferences.size();
             mCLIRButton.init(this, true, mPhone);
             mCWButton.init(this, true, mPhone);
+            mMSISDNButton.init(this, true, mPhone);
+
             int[] clirArray = icicle.getIntArray(mCLIRButton.getKey());
             if (clirArray != null) {
                 if (DBG) Log.d(LOG_TAG, "onCreate:  clirArray[0]="
@@ -85,6 +92,8 @@ public class GsmUmtsAdditionalCallOptions extends TimeConsumingPreferenceActivit
             Preference pref = mPreferences.get(mInitIndex);
             if (pref instanceof CallWaitingSwitchPreference) {
                 ((CallWaitingSwitchPreference) pref).init(this, false, mPhone);
+            } else if (pref instanceof MSISDNEditPreference) {
+                ((MSISDNEditPreference) pref).init(this, false, mPhone);
             }
         }
         super.onFinished(preference, reading);
diff --git a/src/com/android/phone/MSISDNEditPreference.java b/src/com/android/phone/MSISDNEditPreference.java
new file mode 100644
index 000000000..876fac000
--- /dev/null
+++ b/src/com/android/phone/MSISDNEditPreference.java
@@ -0,0 +1,161 @@
+/*
+ * Copyright (C) 2010-2013 The CyanogenMod Project
+ * Copyright (C) 2018 The LineageOS Project
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.android.phone;
+
+import android.content.Context;
+import android.content.SharedPreferences;
+import android.content.SharedPreferences.Editor;
+import android.os.AsyncResult;
+import android.os.Handler;
+import android.os.Message;
+import android.preference.EditTextPreference;
+import android.text.TextUtils;
+import android.util.AttributeSet;
+import android.util.Log;
+import android.widget.Toast;
+
+import com.android.internal.telephony.Phone;
+
+public class MSISDNEditPreference extends EditTextPreference {
+
+    private static final String LOG_TAG = "MSISDNListPreference";
+    public static final String PHONE_NUMBER = "phone_number";
+
+    private static final boolean DBG = (PhoneGlobals.DBG_LEVEL >= 2);
+
+    private MyHandler mHandler = new MyHandler();
+
+    private Phone mPhone;
+    private Context mContext;
+
+    private TimeConsumingPreferenceListener mTcpListener;
+
+    public MSISDNEditPreference(Context context, AttributeSet attrs) {
+        super(context, attrs);
+        mContext = context;
+    }
+
+    public MSISDNEditPreference(Context context) {
+        this(context, null);
+    }
+
+    @Override
+    protected void onDialogClosed(boolean positiveResult) {
+        super.onDialogClosed(positiveResult);
+
+        if (positiveResult && mPhone != null) {
+            String alphaTag = mPhone.getLine1AlphaTag();
+            if (TextUtils.isEmpty(alphaTag)) {
+                // No tag, set it
+                alphaTag = getContext().getString(R.string.msisdn_alpha_tag);
+            }
+
+            // Trim phone number from all spaces and hyphens
+            String phoneText = getText();
+            String phoneNum = phoneText.replaceAll("[\\s\\-\\.]", "");
+            if (!TextUtils.equals(phoneNum, phoneText)) {
+                setText(phoneNum);
+            }
+
+            if (!mPhone.setLine1Number(alphaTag, phoneNum,
+                    mHandler.obtainMessage(MyHandler.MESSAGE_SET_MSISDN))) {
+                // Unknown failure returned from setLine1Number
+                Toast.makeText(getContext(), getContext().getString(R.string.set_my_number_failed),
+                        Toast.LENGTH_LONG).show();
+                return;
+            }
+            if (mTcpListener != null) {
+                mTcpListener.onStarted(this, false);
+            }
+
+            // Save the number
+            SharedPreferences prefs = getSharedPreferences();
+            Editor editor = prefs.edit();
+
+            String savedNum = prefs.getString(PHONE_NUMBER, null);
+
+            // If there is no string, treat it as null
+            if (phoneNum.length() == 0) {
+                phoneNum = null;
+            }
+
+            if (phoneNum == null && savedNum == null) {
+                Log.d(LOG_TAG, "No phone number set yet");
+            } else if (TextUtils.equals(phoneNum, savedNum)) {
+                /* Save phone number only if there is some number set and
+                   it is not equal to the already saved one */
+                if (DBG) {
+                    Log.d(LOG_TAG, "Saving phone number: " + phoneNum);
+                }
+
+                editor.putString(PHONE_NUMBER, phoneNum);
+                editor.commit();
+            } else if (phoneNum == null && savedNum != null) {
+                /* Remove saved number only if there is some saved and
+                   there is no number set */
+                if (DBG) {
+                    Log.d(LOG_TAG, "Removing phone number");
+                }
+
+                editor.remove(PHONE_NUMBER);
+                editor.commit();
+            } else if (DBG) {
+                Log.d(LOG_TAG, "No change");
+            }
+        }
+    }
+
+    void init(TimeConsumingPreferenceListener listener, boolean skipReading, Phone phone) {
+        mPhone = phone;
+        mTcpListener = listener;
+        if (!skipReading) {
+            setText(mPhone.getLine1Number());
+        }
+    }
+
+    private class MyHandler extends Handler {
+        private static final int MESSAGE_SET_MSISDN = 0;
+
+        @Override
+        public void handleMessage(Message msg) {
+            switch (msg.what) {
+                case MESSAGE_SET_MSISDN:
+                    handleSetMSISDNResponse(msg);
+                    break;
+            }
+        }
+
+        private void handleSetMSISDNResponse(Message msg) {
+            AsyncResult ar = (AsyncResult) msg.obj;
+
+            if (ar.exception != null) {
+                if (DBG) {
+                    Log.d(LOG_TAG, "handleSetMSISDNResponse: ar.exception=" + ar.exception);
+                }
+                // setEnabled(false);
+                Toast.makeText(getContext(), getContext().getString(R.string.set_my_number_failed),
+                        Toast.LENGTH_LONG).show();
+            }
+            if (DBG) {
+                Log.d(LOG_TAG, "handleSetMSISDNResponse: re get");
+            }
+
+            mTcpListener.onFinished(MSISDNEditPreference.this, false);
+        }
+    }
+}
diff --git a/src/com/android/phone/MyPhoneNumber.java b/src/com/android/phone/MyPhoneNumber.java
new file mode 100644
index 000000000..6ed05d680
--- /dev/null
+++ b/src/com/android/phone/MyPhoneNumber.java
@@ -0,0 +1,95 @@
+/*
+ * Copyright (C) 2010-2013 The CyanogenMod Project
+ * Copyright (C) 2018 The LineageOS Project
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.android.phone;
+
+import android.content.BroadcastReceiver;
+import android.content.Context;
+import android.content.Intent;
+import android.content.SharedPreferences;
+import android.preference.PreferenceManager;
+import android.telephony.SubscriptionManager;
+import android.telephony.TelephonyManager;
+import android.text.TextUtils;
+import android.util.Log;
+
+import com.android.internal.telephony.IccCardConstants;
+import com.android.internal.telephony.Phone;
+import com.android.internal.telephony.PhoneConstants;
+import com.android.internal.telephony.PhoneFactory;
+
+public class MyPhoneNumber extends BroadcastReceiver {
+    private static final String LOG_TAG = "MyPhoneNumber";
+    private static final boolean DBG = false;
+
+    @Override
+    public void onReceive(Context context, Intent intent) {
+        TelephonyManager telephonyMgr =
+                (TelephonyManager) context.getSystemService(Context.TELEPHONY_SERVICE);
+        SharedPreferences prefs = PreferenceManager.getDefaultSharedPreferences(context);
+
+        String phoneNum = telephonyMgr.getLine1Number();
+        final int slot = intent.getIntExtra(PhoneConstants.SLOT_KEY, 0);
+        String savedNum = prefs.getString(MSISDNEditPreference.PHONE_NUMBER, null);
+        String simState = intent.getStringExtra(IccCardConstants.INTENT_KEY_ICC_STATE);
+
+        // Get the sub from the slot
+        final int[] subIdForSlot = SubscriptionManager.getSubId(slot);
+        if (subIdForSlot == null) {
+            if (DBG) {
+                Log.w(LOG_TAG, "subIdForSlot: " + slot + " returned null; sub not yet ready");
+            }
+            return;
+        }
+        final int subId = subIdForSlot[0];
+        // Get the phone id from the sub
+        final int phoneId = SubscriptionManager.getPhoneId(subId);
+
+        if (!IccCardConstants.INTENT_VALUE_ICC_LOADED.equals(simState)) {
+            /* Don't set line 1 number unless SIM_STATE is LOADED
+             * (We're not using READY because the MSISDN record is not yet loaded on READY)
+             */
+            if (DBG) {
+                Log.d(LOG_TAG, "Invalid simState: " + simState + ". Phone number not set.");
+            }
+        } else if (TextUtils.isEmpty(phoneNum)) {
+            if (DBG) {
+                Log.d(LOG_TAG, "Trying to read the phone number from file");
+            }
+
+            if (savedNum != null) {
+                Phone mPhone = PhoneFactory.getPhone(phoneId);
+                String alphaTag = mPhone.getLine1AlphaTag();
+
+                if (TextUtils.isEmpty(alphaTag)) {
+                    // No tag, set it
+                    alphaTag = context.getString(R.string.msisdn_alpha_tag);
+                }
+
+                mPhone.setLine1Number(alphaTag, savedNum, null);
+
+                if (DBG) {
+                    Log.d(LOG_TAG, "Phone number set to: " + savedNum);
+                }
+            } else if (DBG) {
+                Log.d(LOG_TAG, "No phone number set yet");
+            }
+        } else if (DBG) {
+            Log.d(LOG_TAG, "Phone number exists. No need to read it from file.");
+        }
+    }
+}
-- 
2.17.1

