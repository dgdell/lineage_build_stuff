From f43a1b80053a4a02debd2b8ebba2706f74bce9fb Mon Sep 17 00:00:00 2001
From: monojp <martin@herndl.org>
Date: Fri, 6 Apr 2018 20:00:00 +0200
Subject: [PATCH] Email: bring up changes from cm14.1 migrate to lineage-sdk
 LightsCapabilities revert parts from acc49fed1 to handle database upgrades
 fix broken createAccountTable sql statements

Squash of the following commits:
83a242bbb 91eb00b05 7e788f247 afc4a05b8 cab3390e2 921358d86 ab6d422f8
5eaf48b6d a3e320b67 e21c18dc0 681e0ed20 5b4cc0897 39a76c2db a699f40f9
dfcd1bc60 3e1ce60be bc03e5ec5 dffda326b 41d601b94 5e0bb5994 f3ac77aa9
1bee58238 457c43ea1 1fb2482a7 0ca4f802b 7c457dca4 41fe70d88 c8dd3476c
5fcbaf9b4 56bf7a10e f48ece688 d4c3e86dc fd21ebe3c 3a51e3f6e 63d0d7c58
6f4c675cd d8546653e 6fb0b9f34 b25395d09 c1f42968d b9a4a7385 bde2458db
bab7ef2ab b5915a85a 887f11524 1099eb6d2 8e31b7311 7f56908bc 80d901071
5df44de2d 6991e08a7 60ed0c8f0 f0bfa399b 3c49a4088 a4b35689e a5bd1dbe4
040de6852 871107699 41be2e541 05ed34b80 c3bbb3c82 f16fa4155 95af43373
73a652adc c1a7b251a aa9780e07 29e484a78 33d09b0e1 590d79d45 64034171e
89c4845ea 95248505e d662af06b 2f619a631 53ba5883e 5a910ea03 b45a27e40
ed6d6928b 5a25e00ab 651366bd0 ddbed0923 e44e69533 951613f8b dad8f249b
4006d20ab 0950e58e4 1f145fb27 6152f569d c0e5d54c0 c43715b87 70ccb25cd
b76ada5c5 ea4eb75bf

Change-Id: Ie079ba834b1c76eb75bc0df8433916a7bb75b3a9
---
 Android.mk                                    |    3 +-
 AndroidManifest.xml                           |  892 ++++++++++-
 emailcommon/Android.mk                        |    2 +-
 emailcommon/res/values/strings.xml            |    2 +
 .../emailcommon/internet/Rfc822Output.java    |    9 +
 .../android/emailcommon/provider/Account.java |  103 +-
 .../emailcommon/provider/EmailContent.java    |   35 +-
 .../android/emailcommon/provider/Mailbox.java |   20 +
 .../provider/SuggestedContact.java            |   48 +
 .../service/EmailServiceProxy.java            |   35 +
 .../emailcommon/service/IEmailService.aidl    |    3 +
 .../emailcommon/service/ServiceProxy.java     |   69 +-
 .../android/emailcommon/service/SyncSize.java |   49 +
 .../emailcommon/service/SyncWindow.java       |    2 +-
 .../utility/AttachmentUtilities.java          |   49 +-
 .../emailcommon/utility/SSLSocketFactory.java |   41 +
 .../android/emailcommon/utility/Utility.java  |   45 +
 .../com/android/email/AttachmentInfo.java     |   33 +-
 .../email/EmailConnectivityManager.java       |    7 +
 .../com/android/email/LegacyConversions.java  |    5 +-
 .../activity/setup/AccountSettingsUtils.java  |    4 +-
 .../email/mail/store/ImapConnection.java      |  101 +-
 .../android/email/mail/store/ImapFolder.java  |  496 +++++-
 .../android/email/mail/store/ImapStore.java   |   19 +-
 .../android/email/mail/store/Pop3Store.java   |    4 +
 .../email/mail/store/imap/ImapConstants.java  |    4 +
 .../email/mail/store/imap/ImapList.java       |    2 +-
 .../email/mail/store/imap/ImapResponse.java   |    7 +
 .../mail/store/imap/ImapResponseParser.java   |   51 +-
 .../email/mail/transport/MailTransport.java   |   30 +-
 .../email/provider/AccountReconciler.java     |    4 +-
 .../com/android/email/provider/DBHelper.java  |   84 +-
 .../android/email/provider/EmailProvider.java |  416 ++++-
 .../com/android/email/provider/Utilities.java |   33 +-
 .../service/AliceAuthenticatorService.java    |   36 +
 .../service/AolAuthenticatorService.java      |   36 +
 .../service/BelgacomAuthenticatorService.java |   36 +
 .../BluetoothEmailBroadcastReceiver.java      |  184 +++
 .../email/service/BluetoothImapService.java   |  322 ++++
 .../email/service/BluetoothPop3Service.java   |  108 ++
 .../service/BruteleAuthenticatorService.java  |   36 +
 .../service/ClixAuthenticatorService.java     |   36 +
 .../CorreoOrangeAuthenticatorService.java     |   36 +
 .../EmailBroadcastProcessorService.java       |    4 +
 .../email/service/EmailServiceStub.java       |   13 +-
 .../email/service/EmailServiceUtils.java      |    4 +
 .../service/EuphonyAuthenticatorService.java  |   36 +
 .../service/FreeAuthenticatorService.java     |   36 +
 .../service/GmailAuthenticatorService.java    |   36 +
 .../service/HotmailAuthenticatorService.java  |   36 +
 .../android/email/service/ImapService.java    | 1381 ++++++++++++++++-
 .../service/LaposteAuthenticatorService.java  |   36 +
 .../service/LegacyImapSyncAdapterService.java |  122 +-
 .../service/MobistarAuthenticatorService.java |   36 +
 .../service/MultiBoxAuthenticatorService.java |   36 +
 .../service/NetcaboAuthenticatorService.java  |   36 +
 .../service/NoosAuthenticatorService.java     |   36 +
 .../service/OrangeAuthenticatorService.java   |   36 +
 .../OrangeMailAuthenticatorService.java       |   36 +
 .../OrangeMobileAuthenticatorService.java     |   36 +
 .../service/OutLookAuthenticatorService.java  |   36 +
 .../android/email/service/Pop3Service.java    |   86 +-
 .../service/PopImapSyncAdapterService.java    |  116 +-
 .../service/SapoAuthenticatorService.java     |   36 +
 .../service/ScarletAuthenticatorService.java  |   36 +
 .../service/SfrAuthenticatorService.java      |   36 +
 .../service/SkynetAuthenticatorService.java   |   36 +
 .../service/SwingAuthenticatorService.java    |   36 +
 .../TVCableNetAuthenticatorService.java       |   36 +
 .../service/Tele2AuthenticatorService.java    |   36 +
 .../TeledisnetAuthenticatorService.java       |   36 +
 .../service/TelenetAuthenticatorService.java  |   36 +
 .../service/TiscaliAuthenticatorService.java  |   36 +
 .../VersatelADSLAuthenticatorService.java     |   36 +
 .../service/VersatelAuthenticatorService.java |   36 +
 .../service/VodafoneAuthenticatorService.java |   36 +
 .../service/VooAuthenticatorService.java      |   36 +
 .../service/WanadooAuthenticatorService.java  |   36 +
 .../service/YahooAuthenticatorService.java    |   36 +
 res/drawable-nodpi/mail_widget_preview.png    |  Bin 56185 -> 76351 bytes
 .../account_setup_options_fragment.xml        |   24 +
 res/layout/account_settings_buttons.xml       |    1 +
 res/layout/account_setup_options_fragment.xml |   18 +
 res/layout/preference_mailbox_item.xml        |   58 +
 res/mipmap-hdpi/ic_alice_email.png            |  Bin 0 -> 7324 bytes
 res/mipmap-mdpi/ic_alice_email.png            |  Bin 0 -> 3675 bytes
 res/mipmap-xhdpi/ic_alice_email.png           |  Bin 0 -> 12003 bytes
 res/mipmap-xxhdpi/ic_alice_email.png          |  Bin 0 -> 23823 bytes
 res/mipmap-xxxhdpi/ic_alice_email.png         |  Bin 0 -> 39692 bytes
 res/values-zh-rCN/strings.xml                 |   13 +
 res/values-zh-rHK/strings.xml                 |   13 +
 res/values-zh-rTW/strings.xml                 |   13 +
 res/values/arrays.xml                         |   20 +
 res/values/cm_dimens.xml                      |   20 +
 res/values/cm_strings.xml                     |   34 +
 res/values/constants.xml                      |   11 +-
 res/values/strings.xml                        |  101 +-
 res/xml/account_settings_preferences.xml      |   26 +
 res/xml/authenticator_alice.xml               |   40 +
 res/xml/authenticator_aol.xml                 |   40 +
 res/xml/authenticator_belgacom.xml            |   40 +
 res/xml/authenticator_brutele.xml             |   40 +
 res/xml/authenticator_clix.xml                |   40 +
 res/xml/authenticator_correoorange.xml        |   40 +
 res/xml/authenticator_euphony.xml             |   40 +
 res/xml/authenticator_free.xml                |   40 +
 res/xml/authenticator_gmail.xml               |   40 +
 res/xml/authenticator_hotmail.xml             |   40 +
 res/xml/authenticator_laposte.xml             |   40 +
 res/xml/authenticator_legacy_email.xml        |    2 +-
 res/xml/authenticator_mobistar.xml            |   40 +
 res/xml/authenticator_multibox.xml            |   40 +
 res/xml/authenticator_netcabo.xml             |   40 +
 res/xml/authenticator_noos.xml                |   40 +
 res/xml/authenticator_orange.xml              |   40 +
 res/xml/authenticator_orangemail.xml          |   40 +
 res/xml/authenticator_orangemobile.xml        |   40 +
 res/xml/authenticator_outlook.xml             |   40 +
 res/xml/authenticator_sapo.xml                |   40 +
 res/xml/authenticator_scarlet.xml             |   40 +
 res/xml/authenticator_sfr.xml                 |   40 +
 res/xml/authenticator_skynet.xml              |   40 +
 res/xml/authenticator_swing.xml               |   40 +
 res/xml/authenticator_tele2.xml               |   40 +
 res/xml/authenticator_teledisnet.xml          |   40 +
 res/xml/authenticator_telenet.xml             |   40 +
 res/xml/authenticator_tiscali.xml             |   40 +
 res/xml/authenticator_tvcablenet.xml          |   40 +
 res/xml/authenticator_versatel.xml            |   40 +
 res/xml/authenticator_versatelasdl.xml        |   40 +
 res/xml/authenticator_vodafone.xml            |   40 +
 res/xml/authenticator_voo.xml                 |   40 +
 res/xml/authenticator_wanadoo.xml             |   40 +
 res/xml/authenticator_yahoo.xml               |   40 +
 res/xml/mailbox_notifications_preferences.xml |   42 +
 res/xml/services.xml                          |    8 +-
 res/xml/syncadapter_legacy_imap.xml           |    1 +
 .../email/EmailNotificationController.java    |  101 +-
 .../activity/RequestPermissionsActivity.java  |   63 +
 .../RequestPermissionsActivityBase.java       |  156 ++
 .../setup/AccountCheckSettingsFragment.java   |   19 +-
 .../setup/AccountCreationFragment.java        |    4 +-
 .../setup/AccountServerBaseFragment.java      |   10 +
 ...untSettingsEditQuickResponsesFragment.java |    7 +
 .../setup/AccountSettingsFragment.java        |  357 ++++-
 .../activity/setup/AccountSetupFinal.java     |   39 +-
 .../setup/AccountSetupIncomingFragment.java   |   11 +
 .../setup/AccountSetupOptionsFragment.java    |   96 +-
 .../setup/EmailPreferenceActivity.java        |    4 +
 .../email/activity/setup/MailboxSettings.java |  604 ++++++-
 .../activity/setup/SetupDataFragment.java     |   16 +
 .../email/mail/transport/SmtpSender.java      |    7 +
 .../android/email2/ui/MailActivityEmail.java  |    4 +
 .../android/email/LegacyConversionsTests.java |    2 +-
 .../email/mail/store/ImapStoreUnitTests.java  |    2 +-
 .../provider/AccountBackupRestoreTests.java   |    2 +-
 .../email/provider/ProviderTestUtils.java     |    4 +-
 .../emailcommon/internet/MimeUtilityTest.java |   22 +-
 158 files changed, 9241 insertions(+), 401 deletions(-)
 mode change 100644 => 100755 AndroidManifest.xml
 mode change 100644 => 100755 emailcommon/src/com/android/emailcommon/internet/Rfc822Output.java
 create mode 100644 emailcommon/src/com/android/emailcommon/provider/SuggestedContact.java
 create mode 100644 emailcommon/src/com/android/emailcommon/service/SyncSize.java
 mode change 100644 => 100755 emailcommon/src/com/android/emailcommon/utility/Utility.java
 create mode 100644 provider_src/com/android/email/service/AliceAuthenticatorService.java
 create mode 100644 provider_src/com/android/email/service/AolAuthenticatorService.java
 create mode 100644 provider_src/com/android/email/service/BelgacomAuthenticatorService.java
 create mode 100644 provider_src/com/android/email/service/BluetoothEmailBroadcastReceiver.java
 create mode 100644 provider_src/com/android/email/service/BluetoothImapService.java
 create mode 100644 provider_src/com/android/email/service/BluetoothPop3Service.java
 create mode 100644 provider_src/com/android/email/service/BruteleAuthenticatorService.java
 create mode 100644 provider_src/com/android/email/service/ClixAuthenticatorService.java
 create mode 100644 provider_src/com/android/email/service/CorreoOrangeAuthenticatorService.java
 create mode 100644 provider_src/com/android/email/service/EuphonyAuthenticatorService.java
 create mode 100644 provider_src/com/android/email/service/FreeAuthenticatorService.java
 create mode 100644 provider_src/com/android/email/service/GmailAuthenticatorService.java
 create mode 100644 provider_src/com/android/email/service/HotmailAuthenticatorService.java
 mode change 100644 => 100755 provider_src/com/android/email/service/ImapService.java
 create mode 100644 provider_src/com/android/email/service/LaposteAuthenticatorService.java
 create mode 100644 provider_src/com/android/email/service/MobistarAuthenticatorService.java
 create mode 100644 provider_src/com/android/email/service/MultiBoxAuthenticatorService.java
 create mode 100644 provider_src/com/android/email/service/NetcaboAuthenticatorService.java
 create mode 100644 provider_src/com/android/email/service/NoosAuthenticatorService.java
 create mode 100644 provider_src/com/android/email/service/OrangeAuthenticatorService.java
 create mode 100644 provider_src/com/android/email/service/OrangeMailAuthenticatorService.java
 create mode 100644 provider_src/com/android/email/service/OrangeMobileAuthenticatorService.java
 create mode 100644 provider_src/com/android/email/service/OutLookAuthenticatorService.java
 mode change 100644 => 100755 provider_src/com/android/email/service/Pop3Service.java
 create mode 100644 provider_src/com/android/email/service/SapoAuthenticatorService.java
 create mode 100644 provider_src/com/android/email/service/ScarletAuthenticatorService.java
 create mode 100644 provider_src/com/android/email/service/SfrAuthenticatorService.java
 create mode 100644 provider_src/com/android/email/service/SkynetAuthenticatorService.java
 create mode 100644 provider_src/com/android/email/service/SwingAuthenticatorService.java
 create mode 100644 provider_src/com/android/email/service/TVCableNetAuthenticatorService.java
 create mode 100644 provider_src/com/android/email/service/Tele2AuthenticatorService.java
 create mode 100644 provider_src/com/android/email/service/TeledisnetAuthenticatorService.java
 create mode 100644 provider_src/com/android/email/service/TelenetAuthenticatorService.java
 create mode 100644 provider_src/com/android/email/service/TiscaliAuthenticatorService.java
 create mode 100644 provider_src/com/android/email/service/VersatelADSLAuthenticatorService.java
 create mode 100644 provider_src/com/android/email/service/VersatelAuthenticatorService.java
 create mode 100644 provider_src/com/android/email/service/VodafoneAuthenticatorService.java
 create mode 100644 provider_src/com/android/email/service/VooAuthenticatorService.java
 create mode 100644 provider_src/com/android/email/service/WanadooAuthenticatorService.java
 create mode 100644 provider_src/com/android/email/service/YahooAuthenticatorService.java
 create mode 100644 res/layout/preference_mailbox_item.xml
 create mode 100644 res/mipmap-hdpi/ic_alice_email.png
 create mode 100644 res/mipmap-mdpi/ic_alice_email.png
 create mode 100644 res/mipmap-xhdpi/ic_alice_email.png
 create mode 100644 res/mipmap-xxhdpi/ic_alice_email.png
 create mode 100644 res/mipmap-xxxhdpi/ic_alice_email.png
 create mode 100644 res/values/cm_dimens.xml
 create mode 100644 res/values/cm_strings.xml
 create mode 100644 res/xml/authenticator_alice.xml
 create mode 100644 res/xml/authenticator_aol.xml
 create mode 100644 res/xml/authenticator_belgacom.xml
 create mode 100644 res/xml/authenticator_brutele.xml
 create mode 100644 res/xml/authenticator_clix.xml
 create mode 100644 res/xml/authenticator_correoorange.xml
 create mode 100644 res/xml/authenticator_euphony.xml
 create mode 100644 res/xml/authenticator_free.xml
 create mode 100644 res/xml/authenticator_gmail.xml
 create mode 100644 res/xml/authenticator_hotmail.xml
 create mode 100644 res/xml/authenticator_laposte.xml
 create mode 100644 res/xml/authenticator_mobistar.xml
 create mode 100644 res/xml/authenticator_multibox.xml
 create mode 100644 res/xml/authenticator_netcabo.xml
 create mode 100644 res/xml/authenticator_noos.xml
 create mode 100644 res/xml/authenticator_orange.xml
 create mode 100644 res/xml/authenticator_orangemail.xml
 create mode 100644 res/xml/authenticator_orangemobile.xml
 create mode 100644 res/xml/authenticator_outlook.xml
 create mode 100644 res/xml/authenticator_sapo.xml
 create mode 100644 res/xml/authenticator_scarlet.xml
 create mode 100644 res/xml/authenticator_sfr.xml
 create mode 100644 res/xml/authenticator_skynet.xml
 create mode 100644 res/xml/authenticator_swing.xml
 create mode 100644 res/xml/authenticator_tele2.xml
 create mode 100644 res/xml/authenticator_teledisnet.xml
 create mode 100644 res/xml/authenticator_telenet.xml
 create mode 100644 res/xml/authenticator_tiscali.xml
 create mode 100644 res/xml/authenticator_tvcablenet.xml
 create mode 100644 res/xml/authenticator_versatel.xml
 create mode 100644 res/xml/authenticator_versatelasdl.xml
 create mode 100644 res/xml/authenticator_vodafone.xml
 create mode 100644 res/xml/authenticator_voo.xml
 create mode 100644 res/xml/authenticator_wanadoo.xml
 create mode 100644 res/xml/authenticator_yahoo.xml
 create mode 100644 res/xml/mailbox_notifications_preferences.xml
 create mode 100644 src/com/android/email/activity/RequestPermissionsActivity.java
 create mode 100644 src/com/android/email/activity/RequestPermissionsActivityBase.java
 mode change 100644 => 100755 src/com/android/email/mail/transport/SmtpSender.java

diff --git a/Android.mk b/Android.mk
index b6a4bd90d..143f76002 100644
--- a/Android.mk
+++ b/Android.mk
@@ -55,6 +55,7 @@ LOCAL_STATIC_JAVA_LIBRARIES += android-support-v13
 LOCAL_STATIC_JAVA_LIBRARIES += android-opt-bitmap
 LOCAL_STATIC_JAVA_LIBRARIES += android-opt-datetimepicker
 LOCAL_STATIC_JAVA_LIBRARIES += owasp-html-sanitizer
+LOCAL_STATIC_JAVA_LIBRARIES += org.lineageos.platform.internal
 
 LOCAL_JAVA_LIBRARIES := org.apache.http.legacy
 
@@ -65,8 +66,6 @@ ifeq (eng,$(TARGET_BUILD_VARIANT))
   LOCAL_PROGUARD_FLAG_FILES += proguard-test.flags
 endif
 
-LOCAL_SDK_VERSION := current
-
 include $(BUILD_PACKAGE)
 
 # only include rules to build other stuff for the original package, not the derived package.
diff --git a/AndroidManifest.xml b/AndroidManifest.xml
old mode 100644
new mode 100755
index 199afe8dd..702854941
--- a/AndroidManifest.xml
+++ b/AndroidManifest.xml
@@ -35,7 +35,6 @@
     <uses-permission android:name="android.permission.AUTHENTICATE_ACCOUNTS" />
     <uses-permission android:name="android.permission.READ_SYNC_SETTINGS" />
     <uses-permission android:name="android.permission.WRITE_SYNC_SETTINGS"/>
-    <uses-permission android:name="android.permission.WRITE_CONTACTS"/>
     <uses-permission android:name="android.permission.READ_CONTACTS"/>
     <uses-permission android:name="android.permission.WRITE_CONTACTS"/>
     <uses-permission android:name="android.permission.READ_CALENDAR"/>
@@ -47,7 +46,7 @@
     <uses-permission android:name="android.permission.DOWNLOAD_WITHOUT_NOTIFICATION" />
 
     <!-- This needs to be present when we are doing unbundled releases. -->
-    <uses-sdk android:targetSdkVersion="21" android:minSdkVersion="14" />
+    <uses-sdk android:targetSdkVersion="23" android:minSdkVersion="14" />
 
     <!-- additional uses -->
 
@@ -80,8 +79,8 @@
         android:name=".EmailApplication"
         android:icon="@mipmap/ic_launcher"
         android:label="@string/app_name"
-        android:requiredAccountType="com.android.exchange,com.android.email"
-        android:theme="@style/UnifiedEmailTheme"
+        android:requiredAccountType="com.android.exchange,com.android.email.imap,com.android.email.pop3,com.android.email.legacy.imap"
+        android:theme="@style/UnifiedEmailTheme.Appcompat"
         android:hardwareAccelerated="true"
         android:allowBackup="false"
         android:supportsRtl="true"
@@ -280,7 +279,7 @@
         <activity
             android:name=".activity.setup.EmailPreferenceActivity"
             android:label="@string/activity_preferences"
-            android:exported="false" >
+            android:exported="true" >
             <intent-filter>
                 <action android:name="android.intent.action.EDIT" />
                 <action android:name="android.intent.action.VIEW" />
@@ -318,12 +317,13 @@
         Incoming Account Settings fragment -->
         <activity
             android:name=".activity.setup.HeadlessAccountSettingsLoader"
-            android:theme="@android:style/Theme.NoDisplay"
+            android:theme="@android:style/Theme.Translucent.NoTitleBar"
             >
             <intent-filter>
                 <action android:name="android.intent.action.VIEW" />
                 <category android:name="android.intent.category.DEFAULT" />
                 <data android:host="com.android.email.ACCOUNT_SETTINGS" />
+                <data android:host="com.android.email.ACCOUNT_SECURITY" />
                 <data android:scheme="auth"/>
             </intent-filter>
         </activity>
@@ -345,6 +345,12 @@
             android:name=".activity.setup.AccountSecurity"
             android:label="@string/account_security_title"
             >
+            <intent-filter>
+                <action android:name="android.intent.action.VIEW" />
+                <category android:name="android.intent.category.DEFAULT" />
+                <data android:host="com.android.email.ACCOUNT_SECURITY" />
+                <data android:scheme="auth"/>
+            </intent-filter>
         </activity>
 
         <activity
@@ -361,7 +367,7 @@
         <activity
                 android:name="com.android.mail.browse.EmlViewerActivity"
                 android:label="@string/app_name"
-                android:theme="@style/UnifiedEmailTheme" >
+                android:theme="@style/UnifiedEmailTheme.Appcompat" >
             <intent-filter>
                 <action android:name="android.intent.action.VIEW" />
                 <category android:name="android.intent.category.DEFAULT" />
@@ -380,6 +386,11 @@
             android:label="@string/open_source_licenses">
         </activity>
 
+        <activity android:name="com.android.email.activity.RequestPermissionsActivity" >
+        </activity>
+        <activity android:name="com.android.email.activity.RequestPermissionsActivityBase" >
+        </activity>
+
         <!-- additional activities -->
 
         <provider
@@ -472,6 +483,42 @@
                     android:host="36245" />
             </intent-filter>
         </receiver>
+        <receiver
+            android:name=".service.BluetoothEmailBroadcastReceiver"
+            android:enabled="true"
+            android:permission="com.android.email.permission.ACCESS_PROVIDER">
+            <intent-filter>
+                <action android:name="android.intent.action.BOOT_COMPLETED" />
+                <action android:name="android.intent.action.DEVICE_STORAGE_LOW" />
+                <action android:name="android.intent.action.DEVICE_STORAGE_OK" />
+                <action android:name="android.intent.action.LOCALE_CHANGED"/>
+                <action android:name="android.accounts.LOGIN_ACCOUNTS_CHANGED" />
+                <action android:name="org.codeaurora.email.intent.action.MAIL_SERVICE_WAKEUP" />
+                <action
+                    android:name="org.codeaurora.email.intent.action.MAIL_SERVICE_DELETE_MESSAGE" />
+                <action
+                    android:name="org.codeaurora.email.intent.action.MAIL_SERVICE_MOVE_MESSAGE" />
+                <action
+                    android:name="org.codeaurora.email.intent.action.MAIL_SERVICE_MESSAGE_READ" />
+                <action
+                    android:name="org.codeaurora.email.intent.action.MAIL_SERVICE_SEND_PENDING" />
+            </intent-filter>
+            <!-- To handle new message notifications -->
+            <intent-filter>
+                <action android:name="com.android.mail.action.update_notification"
+                        android:priority="-10" />
+                <data android:mimeType="@string/application_mime_type" />
+            </intent-filter>
+            <!-- To handle secret code to activate the debug screen. -->
+            <intent-filter>
+                <action
+                    android:name="android.provider.Telephony.SECRET_CODE" />
+                <!-- "36245" = "email" -->
+                <data
+                    android:scheme="android_secret_code"
+                    android:host="36245" />
+            </intent-filter>
+        </receiver>
         <service
             android:name=".service.EmailBroadcastProcessorService" />
 
@@ -583,6 +630,24 @@
                     android:name="com.android.email.IMAP_INTENT" />
             </intent-filter>
         </service>
+        <service
+            android:name=".service.BluetoothImapService"
+            android:enabled="true"
+            android:permission="com.android.email.permission.ACCESS_PROVIDER"
+            >
+            <intent-filter>
+                <action
+                    android:name="com.android.email.IMAP_INTENT" />
+                <action
+                    android:name="org.codeaurora.email.intent.action.MAIL_SERVICE_DELETE_MESSAGE" />
+                <action
+                    android:name="org.codeaurora.email.intent.action.MAIL_SERVICE_MOVE_MESSAGE" />
+                <action
+                    android:name="org.codeaurora.email.intent.action.MAIL_SERVICE_MESSAGE_READ" />
+                <action
+                    android:name="org.codeaurora.email.intent.action.MAIL_SERVICE_SEND_PENDING" />
+            </intent-filter>
+        </service>
 
         <service
             android:name=".service.Pop3Service"
@@ -594,6 +659,16 @@
                     android:name="com.android.email.POP3_INTENT" />
             </intent-filter>
         </service>
+        <service
+            android:name=".service.BluetoothPop3Service"
+            android:enabled="true"
+            android:permission="com.android.email.permission.ACCESS_PROVIDER"
+            >
+            <intent-filter>
+                <action
+                    android:name="com.android.email.POP3_INTENT" />
+            </intent-filter>
+        </service>
 
         <!--Required stanza to register the EasAuthenticatorService with AccountManager -->
         <service
@@ -610,6 +685,809 @@
                 android:resource="@xml/authenticator_eas"
                 />
         </service>
+
+        <service
+            android:name=".service.MobistarAuthenticatorService"
+            android:exported="true"
+            android:enabled="true"
+            >
+            <intent-filter>
+                <action
+                    android:name="android.accounts.AccountAuthenticator" />
+            </intent-filter>
+            <meta-data
+                android:name="android.accounts.AccountAuthenticator"
+                android:resource="@xml/authenticator_mobistar"
+                />
+        </service>
+
+        <service
+            android:name=".service.WanadooAuthenticatorService"
+            android:exported="true"
+            android:enabled="true"
+            >
+            <intent-filter>
+                <action
+                    android:name="android.accounts.AccountAuthenticator" />
+            </intent-filter>
+            <meta-data
+                android:name="android.accounts.AccountAuthenticator"
+                android:resource="@xml/authenticator_wanadoo"
+                />
+        </service>
+
+        <service
+            android:name=".service.OrangeMailAuthenticatorService"
+            android:exported="true"
+            android:enabled="true"
+            >
+            <intent-filter>
+                <action
+                    android:name="android.accounts.AccountAuthenticator" />
+            </intent-filter>
+            <meta-data
+                android:name="android.accounts.AccountAuthenticator"
+                android:resource="@xml/authenticator_orangemail"
+                />
+        </service>
+
+        <service
+            android:name=".service.CorreoOrangeAuthenticatorService"
+            android:exported="true"
+            android:enabled="true"
+            >
+            <intent-filter>
+                <action
+                    android:name="android.accounts.AccountAuthenticator" />
+            </intent-filter>
+            <meta-data
+                android:name="android.accounts.AccountAuthenticator"
+                android:resource="@xml/authenticator_correoorange"
+                />
+        </service>
+
+        <service
+            android:name=".service.OrangeMobileAuthenticatorService"
+            android:exported="true"
+            android:enabled="true"
+            >
+            <intent-filter>
+                <action
+                    android:name="android.accounts.AccountAuthenticator" />
+            </intent-filter>
+            <meta-data
+                android:name="android.accounts.AccountAuthenticator"
+                android:resource="@xml/authenticator_orangemobile"
+                />
+        </service>
+
+        <service
+            android:name=".service.MultiBoxAuthenticatorService"
+            android:exported="true"
+            android:enabled="true"
+            >
+            <intent-filter>
+                <action
+                    android:name="android.accounts.AccountAuthenticator" />
+            </intent-filter>
+            <meta-data
+                android:name="android.accounts.AccountAuthenticator"
+                android:resource="@xml/authenticator_multibox"
+                />
+        </service>
+
+        <service
+            android:name=".service.BelgacomAuthenticatorService"
+            android:exported="true"
+            android:enabled="true"
+            >
+            <intent-filter>
+                <action
+                    android:name="android.accounts.AccountAuthenticator" />
+            </intent-filter>
+            <meta-data
+                android:name="android.accounts.AccountAuthenticator"
+                android:resource="@xml/authenticator_belgacom"
+                />
+        </service>
+
+        <service
+            android:name=".service.SkynetAuthenticatorService"
+            android:exported="true"
+            android:enabled="true"
+            >
+            <intent-filter>
+                <action
+                    android:name="android.accounts.AccountAuthenticator" />
+            </intent-filter>
+            <meta-data
+                android:name="android.accounts.AccountAuthenticator"
+                android:resource="@xml/authenticator_skynet"
+                />
+        </service>
+
+        <service
+            android:name=".service.TelenetAuthenticatorService"
+            android:exported="true"
+            android:enabled="true"
+            >
+            <intent-filter>
+                <action
+                    android:name="android.accounts.AccountAuthenticator" />
+            </intent-filter>
+            <meta-data
+                android:name="android.accounts.AccountAuthenticator"
+                android:resource="@xml/authenticator_telenet"
+                />
+        </service>
+
+        <service
+            android:name=".service.ScarletAuthenticatorService"
+            android:exported="true"
+            android:enabled="true"
+            >
+            <intent-filter>
+                <action
+                    android:name="android.accounts.AccountAuthenticator" />
+            </intent-filter>
+            <meta-data
+                android:name="android.accounts.AccountAuthenticator"
+                android:resource="@xml/authenticator_scarlet"
+                />
+        </service>
+
+        <service
+            android:name=".service.EuphonyAuthenticatorService"
+            android:exported="true"
+            android:enabled="true"
+            >
+            <intent-filter>
+                <action
+                    android:name="android.accounts.AccountAuthenticator" />
+            </intent-filter>
+            <meta-data
+                android:name="android.accounts.AccountAuthenticator"
+                android:resource="@xml/authenticator_euphony"
+                />
+        </service>
+
+        <service
+            android:name=".service.VooAuthenticatorService"
+            android:exported="true"
+            android:enabled="true"
+            >
+            <intent-filter>
+                <action
+                    android:name="android.accounts.AccountAuthenticator" />
+            </intent-filter>
+            <meta-data
+                android:name="android.accounts.AccountAuthenticator"
+                android:resource="@xml/authenticator_voo"
+                />
+        </service>
+
+        <service
+            android:name=".service.Tele2AuthenticatorService"
+            android:exported="true"
+            android:enabled="true"
+            >
+            <intent-filter>
+                <action
+                    android:name="android.accounts.AccountAuthenticator" />
+            </intent-filter>
+            <meta-data
+                android:name="android.accounts.AccountAuthenticator"
+                android:resource="@xml/authenticator_tele2"
+                />
+        </service>
+
+        <service
+            android:name=".service.VersatelAuthenticatorService"
+            android:exported="true"
+            android:enabled="true"
+            >
+            <intent-filter>
+                <action
+                    android:name="android.accounts.AccountAuthenticator" />
+            </intent-filter>
+            <meta-data
+                android:name="android.accounts.AccountAuthenticator"
+                android:resource="@xml/authenticator_versatel"
+                />
+        </service>
+
+        <service
+            android:name=".service.TiscaliAuthenticatorService"
+            android:exported="true"
+            android:enabled="true"
+            >
+            <intent-filter>
+                <action
+                    android:name="android.accounts.AccountAuthenticator" />
+            </intent-filter>
+            <meta-data
+                android:name="android.accounts.AccountAuthenticator"
+                android:resource="@xml/authenticator_tiscali"
+                />
+        </service>
+
+        <service
+            android:name=".service.SwingAuthenticatorService"
+            android:exported="true"
+            android:enabled="true"
+            >
+            <intent-filter>
+                <action
+                    android:name="android.accounts.AccountAuthenticator" />
+            </intent-filter>
+            <meta-data
+                android:name="android.accounts.AccountAuthenticator"
+                android:resource="@xml/authenticator_swing"
+                />
+        </service>
+
+        <service
+            android:name=".service.VersatelADSLAuthenticatorService"
+            android:exported="true"
+            android:enabled="true"
+            >
+            <intent-filter>
+                <action
+                    android:name="android.accounts.AccountAuthenticator" />
+            </intent-filter>
+            <meta-data
+                android:name="android.accounts.AccountAuthenticator"
+                android:resource="@xml/authenticator_versatelasdl"
+                />
+        </service>
+
+        <service
+            android:name=".service.BruteleAuthenticatorService"
+            android:exported="true"
+            android:enabled="true"
+            >
+            <intent-filter>
+                <action
+                    android:name="android.accounts.AccountAuthenticator" />
+            </intent-filter>
+            <meta-data
+                android:name="android.accounts.AccountAuthenticator"
+                android:resource="@xml/authenticator_brutele"
+                />
+        </service>
+
+        <service
+            android:name=".service.TeledisnetAuthenticatorService"
+            android:exported="true"
+            android:enabled="true"
+            >
+            <intent-filter>
+                <action
+                    android:name="android.accounts.AccountAuthenticator" />
+            </intent-filter>
+            <meta-data
+                android:name="android.accounts.AccountAuthenticator"
+                android:resource="@xml/authenticator_teledisnet"
+                />
+        </service>
+
+        <service
+            android:name=".service.TVCableNetAuthenticatorService"
+            android:exported="true"
+            android:enabled="true"
+            >
+            <intent-filter>
+                <action
+                    android:name="android.accounts.AccountAuthenticator" />
+            </intent-filter>
+            <meta-data
+                android:name="android.accounts.AccountAuthenticator"
+                android:resource="@xml/authenticator_tvcablenet"
+                />
+        </service>
+
+        <service
+            android:name=".service.WanadooAuthenticatorService"
+            android:exported="true"
+            android:enabled="true"
+            >
+            <intent-filter>
+                <action
+                    android:name="android.accounts.AccountAuthenticator" />
+            </intent-filter>
+            <meta-data
+                android:name="android.accounts.AccountAuthenticator"
+                android:resource="@xml/authenticator_wanadoo"
+                />
+        </service>
+
+        <service
+            android:name=".service.OrangeMailAuthenticatorService"
+            android:exported="true"
+            android:enabled="true"
+            >
+            <intent-filter>
+                <action
+                    android:name="android.accounts.AccountAuthenticator" />
+            </intent-filter>
+            <meta-data
+                android:name="android.accounts.AccountAuthenticator"
+                android:resource="@xml/authenticator_orangemail"
+                />
+        </service>
+
+        <service
+            android:name=".service.CorreoOrangeAuthenticatorService"
+            android:exported="true"
+            android:enabled="true"
+            >
+            <intent-filter>
+                <action
+                    android:name="android.accounts.AccountAuthenticator" />
+            </intent-filter>
+            <meta-data
+                android:name="android.accounts.AccountAuthenticator"
+                android:resource="@xml/authenticator_correoorange"
+                />
+        </service>
+
+        <service
+            android:name=".service.OrangeMobileAuthenticatorService"
+            android:exported="true"
+            android:enabled="true"
+            >
+            <intent-filter>
+                <action
+                    android:name="android.accounts.AccountAuthenticator" />
+            </intent-filter>
+            <meta-data
+                android:name="android.accounts.AccountAuthenticator"
+                android:resource="@xml/authenticator_orangemobile"
+                />
+        </service>
+
+        <service
+            android:name=".service.MultiBoxAuthenticatorService"
+            android:exported="true"
+            android:enabled="true"
+            >
+            <intent-filter>
+                <action
+                    android:name="android.accounts.AccountAuthenticator" />
+            </intent-filter>
+            <meta-data
+                android:name="android.accounts.AccountAuthenticator"
+                android:resource="@xml/authenticator_multibox"
+                />
+        </service>
+
+        <service
+            android:name=".service.BelgacomAuthenticatorService"
+            android:exported="true"
+            android:enabled="true"
+            >
+            <intent-filter>
+                <action
+                    android:name="android.accounts.AccountAuthenticator" />
+            </intent-filter>
+            <meta-data
+                android:name="android.accounts.AccountAuthenticator"
+                android:resource="@xml/authenticator_belgacom"
+                />
+        </service>
+
+        <service
+            android:name=".service.SkynetAuthenticatorService"
+            android:exported="true"
+            android:enabled="true"
+            >
+            <intent-filter>
+                <action
+                    android:name="android.accounts.AccountAuthenticator" />
+            </intent-filter>
+            <meta-data
+                android:name="android.accounts.AccountAuthenticator"
+                android:resource="@xml/authenticator_skynet"
+                />
+        </service>
+
+        <service
+            android:name=".service.TelenetAuthenticatorService"
+            android:exported="true"
+            android:enabled="true"
+            >
+            <intent-filter>
+                <action
+                    android:name="android.accounts.AccountAuthenticator" />
+            </intent-filter>
+            <meta-data
+                android:name="android.accounts.AccountAuthenticator"
+                android:resource="@xml/authenticator_telenet"
+                />
+        </service>
+
+        <service
+            android:name=".service.ScarletAuthenticatorService"
+            android:exported="true"
+            android:enabled="true"
+            >
+            <intent-filter>
+                <action
+                    android:name="android.accounts.AccountAuthenticator" />
+            </intent-filter>
+            <meta-data
+                android:name="android.accounts.AccountAuthenticator"
+                android:resource="@xml/authenticator_scarlet"
+                />
+        </service>
+
+        <service
+            android:name=".service.EuphonyAuthenticatorService"
+            android:exported="true"
+            android:enabled="true"
+            >
+            <intent-filter>
+                <action
+                    android:name="android.accounts.AccountAuthenticator" />
+            </intent-filter>
+            <meta-data
+                android:name="android.accounts.AccountAuthenticator"
+                android:resource="@xml/authenticator_euphony"
+                />
+        </service>
+
+        <service
+            android:name=".service.VooAuthenticatorService"
+            android:exported="true"
+            android:enabled="true"
+            >
+            <intent-filter>
+                <action
+                    android:name="android.accounts.AccountAuthenticator" />
+            </intent-filter>
+            <meta-data
+                android:name="android.accounts.AccountAuthenticator"
+                android:resource="@xml/authenticator_voo"
+                />
+        </service>
+
+        <service
+            android:name=".service.Tele2AuthenticatorService"
+            android:exported="true"
+            android:enabled="true"
+            >
+            <intent-filter>
+                <action
+                    android:name="android.accounts.AccountAuthenticator" />
+            </intent-filter>
+            <meta-data
+                android:name="android.accounts.AccountAuthenticator"
+                android:resource="@xml/authenticator_tele2"
+                />
+        </service>
+
+        <service
+            android:name=".service.VersatelAuthenticatorService"
+            android:exported="true"
+            android:enabled="true"
+            >
+            <intent-filter>
+                <action
+                    android:name="android.accounts.AccountAuthenticator" />
+            </intent-filter>
+            <meta-data
+                android:name="android.accounts.AccountAuthenticator"
+                android:resource="@xml/authenticator_versatel"
+                />
+        </service>
+
+        <service
+            android:name=".service.TiscaliAuthenticatorService"
+            android:exported="true"
+            android:enabled="true"
+            >
+            <intent-filter>
+                <action
+                    android:name="android.accounts.AccountAuthenticator" />
+            </intent-filter>
+            <meta-data
+                android:name="android.accounts.AccountAuthenticator"
+                android:resource="@xml/authenticator_tiscali"
+                />
+        </service>
+
+        <service
+            android:name=".service.SwingAuthenticatorService"
+            android:exported="true"
+            android:enabled="true"
+            >
+            <intent-filter>
+                <action
+                    android:name="android.accounts.AccountAuthenticator" />
+            </intent-filter>
+            <meta-data
+                android:name="android.accounts.AccountAuthenticator"
+                android:resource="@xml/authenticator_swing"
+                />
+        </service>
+
+        <service
+            android:name=".service.VersatelADSLAuthenticatorService"
+            android:exported="true"
+            android:enabled="true"
+            >
+            <intent-filter>
+                <action
+                    android:name="android.accounts.AccountAuthenticator" />
+            </intent-filter>
+            <meta-data
+                android:name="android.accounts.AccountAuthenticator"
+                android:resource="@xml/authenticator_versatelasdl"
+                />
+        </service>
+
+        <service
+            android:name=".service.BruteleAuthenticatorService"
+            android:exported="true"
+            android:enabled="true"
+            >
+            <intent-filter>
+                <action
+                    android:name="android.accounts.AccountAuthenticator" />
+            </intent-filter>
+            <meta-data
+                android:name="android.accounts.AccountAuthenticator"
+                android:resource="@xml/authenticator_brutele"
+                />
+        </service>
+
+        <service
+            android:name=".service.TeledisnetAuthenticatorService"
+            android:exported="true"
+            android:enabled="true"
+            >
+            <intent-filter>
+                <action
+                    android:name="android.accounts.AccountAuthenticator" />
+            </intent-filter>
+            <meta-data
+                android:name="android.accounts.AccountAuthenticator"
+                android:resource="@xml/authenticator_teledisnet"
+                />
+        </service>
+
+        <service
+            android:name=".service.TVCableNetAuthenticatorService"
+            android:exported="true"
+            android:enabled="true"
+            >
+            <intent-filter>
+                <action
+                    android:name="android.accounts.AccountAuthenticator" />
+            </intent-filter>
+            <meta-data
+                android:name="android.accounts.AccountAuthenticator"
+                android:resource="@xml/authenticator_tvcablenet"
+                />
+        </service>
+
+        <service
+            android:name=".service.AliceAuthenticatorService"
+            android:exported="true"
+            android:enabled="true"
+            >
+            <intent-filter>
+                <action
+                    android:name="android.accounts.AccountAuthenticator" />
+            </intent-filter>
+            <meta-data
+                android:name="android.accounts.AccountAuthenticator"
+                android:resource="@xml/authenticator_alice"
+                />
+        </service>
+
+        <service
+            android:name=".service.YahooAuthenticatorService"
+            android:exported="true"
+            android:enabled="true"
+            >
+            <intent-filter>
+                <action
+                    android:name="android.accounts.AccountAuthenticator" />
+            </intent-filter>
+            <meta-data
+                android:name="android.accounts.AccountAuthenticator"
+                android:resource="@xml/authenticator_yahoo"
+                />
+        </service>
+
+        <service
+            android:name=".service.OutLookAuthenticatorService"
+            android:exported="true"
+            android:enabled="true"
+            >
+            <intent-filter>
+                <action
+                    android:name="android.accounts.AccountAuthenticator" />
+            </intent-filter>
+            <meta-data
+                android:name="android.accounts.AccountAuthenticator"
+                android:resource="@xml/authenticator_outlook"
+                />
+        </service>
+
+        <service
+            android:name=".service.GmailAuthenticatorService"
+            android:exported="true"
+            android:enabled="true"
+            >
+            <intent-filter>
+                <action
+                    android:name="android.accounts.AccountAuthenticator" />
+            </intent-filter>
+            <meta-data
+                android:name="android.accounts.AccountAuthenticator"
+                android:resource="@xml/authenticator_gmail"
+                />
+        </service>
+
+        <service
+            android:name=".service.SfrAuthenticatorService"
+            android:exported="true"
+            android:enabled="true"
+            >
+            <intent-filter>
+                <action
+                    android:name="android.accounts.AccountAuthenticator" />
+            </intent-filter>
+            <meta-data
+                android:name="android.accounts.AccountAuthenticator"
+                android:resource="@xml/authenticator_sfr"
+                />
+        </service>
+
+        <service
+            android:name=".service.AolAuthenticatorService"
+            android:exported="true"
+            android:enabled="true"
+            >
+            <intent-filter>
+                <action
+                    android:name="android.accounts.AccountAuthenticator" />
+            </intent-filter>
+            <meta-data
+                android:name="android.accounts.AccountAuthenticator"
+                android:resource="@xml/authenticator_aol"
+                />
+        </service>
+
+        <service
+            android:name=".service.LaposteAuthenticatorService"
+            android:exported="true"
+            android:enabled="true"
+            >
+            <intent-filter>
+                <action
+                    android:name="android.accounts.AccountAuthenticator" />
+            </intent-filter>
+            <meta-data
+                android:name="android.accounts.AccountAuthenticator"
+                android:resource="@xml/authenticator_laposte"
+                />
+        </service>
+
+        <service
+            android:name=".service.NoosAuthenticatorService"
+            android:exported="true"
+            android:enabled="true"
+            >
+            <intent-filter>
+                <action
+                    android:name="android.accounts.AccountAuthenticator" />
+            </intent-filter>
+            <meta-data
+                android:name="android.accounts.AccountAuthenticator"
+                android:resource="@xml/authenticator_noos"
+                />
+        </service>
+        <service
+            android:name=".service.VodafoneAuthenticatorService"
+            android:exported="true"
+            android:enabled="true"
+        >
+            <intent-filter>
+                <action
+                    android:name="android.accounts.AccountAuthenticator" />
+            </intent-filter>
+            <meta-data
+                android:name="android.accounts.AccountAuthenticator"
+                android:resource="@xml/authenticator_vodafone"
+            />
+        </service>
+        <service
+            android:name=".service.HotmailAuthenticatorService"
+            android:exported="true"
+            android:enabled="true"
+        >
+            <intent-filter>
+                <action
+                    android:name="android.accounts.AccountAuthenticator" />
+            </intent-filter>
+            <meta-data
+                android:name="android.accounts.AccountAuthenticator"
+                android:resource="@xml/authenticator_hotmail"
+            />
+        </service>
+        <service
+            android:name=".service.SapoAuthenticatorService"
+            android:exported="true"
+            android:enabled="true"
+        >
+            <intent-filter>
+                <action
+                    android:name="android.accounts.AccountAuthenticator" />
+            </intent-filter>
+            <meta-data
+                android:name="android.accounts.AccountAuthenticator"
+                android:resource="@xml/authenticator_sapo"
+            />
+        </service>
+        <service
+            android:name=".service.NetcaboAuthenticatorService"
+            android:exported="true"
+            android:enabled="true"
+        >
+            <intent-filter>
+                <action
+                    android:name="android.accounts.AccountAuthenticator" />
+            </intent-filter>
+            <meta-data
+                android:name="android.accounts.AccountAuthenticator"
+                android:resource="@xml/authenticator_netcabo"
+            />
+        </service>
+        <service
+            android:name=".service.ClixAuthenticatorService"
+            android:exported="true"
+            android:enabled="true"
+        >
+            <intent-filter>
+                <action
+                    android:name="android.accounts.AccountAuthenticator" />
+            </intent-filter>
+            <meta-data
+                android:name="android.accounts.AccountAuthenticator"
+                android:resource="@xml/authenticator_clix"
+            />
+        </service>
+        <service
+            android:name=".service.OrangeAuthenticatorService"
+            android:exported="true"
+            android:enabled="true"
+            >
+            <intent-filter>
+                <action
+                    android:name="android.accounts.AccountAuthenticator" />
+            </intent-filter>
+            <meta-data
+                android:name="android.accounts.AccountAuthenticator"
+                android:resource="@xml/authenticator_orange"
+                />
+        </service>
+        <service
+            android:name=".service.FreeAuthenticatorService"
+            android:exported="true"
+            android:enabled="true"
+            >
+            <intent-filter>
+                <action
+                    android:name="android.accounts.AccountAuthenticator" />
+            </intent-filter>
+            <meta-data
+                android:name="android.accounts.AccountAuthenticator"
+                android:resource="@xml/authenticator_free"
+                />
+        </service>
         <!--Required stanza to register the EasTestAuthenticatorService with AccountManager -->
         <service
             android:name=".service.EasTestAuthenticatorService"
diff --git a/emailcommon/Android.mk b/emailcommon/Android.mk
index 654e20d60..14ea55078 100644
--- a/emailcommon/Android.mk
+++ b/emailcommon/Android.mk
@@ -42,7 +42,7 @@ LOCAL_SRC_FILES += $(call all-java-files-under, $(apache_src_dir))
 LOCAL_SRC_FILES += $(imported_unified_email_files)
 LOCAL_SRC_FILES += $(call all-java-files-under, $(unified_email_src_dir)/com/android/emailcommon)
 
-LOCAL_SDK_VERSION := 14
+LOCAL_SDK_VERSION := 17
 
 LOCAL_RESOURCE_DIR := $(LOCAL_PATH)/res
 
diff --git a/emailcommon/res/values/strings.xml b/emailcommon/res/values/strings.xml
index a13f4c78c..fa126bb76 100644
--- a/emailcommon/res/values/strings.xml
+++ b/emailcommon/res/values/strings.xml
@@ -41,4 +41,6 @@
 
     <!-- Do Not Translate.  This is the authority for the email package name -->
     <string name="email_package_name" translatable="false">com.android.email</string>
+
+    <string name="missed_exchange_required_permission">Click Permissions,add Required Permissions</string>
 </resources>
diff --git a/emailcommon/src/com/android/emailcommon/internet/Rfc822Output.java b/emailcommon/src/com/android/emailcommon/internet/Rfc822Output.java
old mode 100644
new mode 100755
index d7486eec7..d3fbddfd5
--- a/emailcommon/src/com/android/emailcommon/internet/Rfc822Output.java
+++ b/emailcommon/src/com/android/emailcommon/internet/Rfc822Output.java
@@ -282,6 +282,15 @@ public class Rfc822Output {
                     "when sending attachment");
             throw new MessagingException("Invalid attachment.", ioe);
         }
+        finally {
+           try {
+               if (inStream != null) {
+                   inStream.close();
+               }
+           } catch (IOException e) {
+               LogUtils.e(TAG, e, "Failed to close stream");
+           }
+        }
     }
 
     /**
diff --git a/emailcommon/src/com/android/emailcommon/provider/Account.java b/emailcommon/src/com/android/emailcommon/provider/Account.java
index 5a3ab7f3a..1f0c909c9 100755
--- a/emailcommon/src/com/android/emailcommon/provider/Account.java
+++ b/emailcommon/src/com/android/emailcommon/provider/Account.java
@@ -31,6 +31,8 @@ import android.os.Parcel;
 import android.os.Parcelable;
 import android.os.RemoteException;
 
+import com.android.emailcommon.service.EmailServiceProxy;
+import com.android.emailcommon.service.SyncSize;
 import com.android.emailcommon.utility.Utility;
 import com.android.mail.utils.LogUtils;
 import com.google.common.annotations.VisibleForTesting;
@@ -111,22 +113,26 @@ public final class Account extends EmailContent implements Parcelable {
     // Sentinel values for the mSyncInterval field of both Account records
     public static final int CHECK_INTERVAL_NEVER = -1;
     public static final int CHECK_INTERVAL_PUSH = -2;
+    public static final int CHECK_INTERVAL_DEFAULT_PULL = 15;
 
     public static Uri CONTENT_URI;
     public static Uri RESET_NEW_MESSAGE_COUNT_URI;
     public static Uri NOTIFIER_URI;
+    public static Uri SYNC_SETTING_CHANGED_URI;
 
     public static void initAccount() {
         CONTENT_URI = Uri.parse(EmailContent.CONTENT_URI + "/account");
         RESET_NEW_MESSAGE_COUNT_URI = Uri.parse(EmailContent.CONTENT_URI + "/resetNewMessageCount");
         NOTIFIER_URI = Uri.parse(EmailContent.CONTENT_NOTIFIER_URI + "/account");
+        SYNC_SETTING_CHANGED_URI = Uri.parse(
+                EmailContent.CONTENT_SYNC_SETTING_CHANGED_URI + "/account");
     }
 
     public String mDisplayName;
     public String mEmailAddress;
     public String mSyncKey;
     public int mSyncLookback;
-    public int mSyncInterval;
+    private int mSyncInterval;
     public long mHostAuthKeyRecv;
     public long mHostAuthKeySend;
     public int mFlags;
@@ -139,6 +145,7 @@ public final class Account extends EmailContent implements Parcelable {
     public String mSignature;
     public long mPolicyKey;
     public long mPingDuration;
+    public int mCapabilities;
 
     @VisibleForTesting
     static final String JSON_TAG_HOST_AUTH_RECV = "hostAuthRecv";
@@ -150,6 +157,10 @@ public final class Account extends EmailContent implements Parcelable {
     public transient HostAuth mHostAuthSend;
     public transient Policy mPolicy;
 
+    // To save the sync size of this account.
+    public int mSetSyncSizeEnabled;
+    public int mSyncSize;
+
     // Marks this account as being a temporary entry, so we know to use it directly and not go
     // through the database or any caches
     private transient boolean mTemporary;
@@ -171,6 +182,9 @@ public final class Account extends EmailContent implements Parcelable {
     public static final int CONTENT_POLICY_KEY_COLUMN = 14;
     public static final int CONTENT_PING_DURATION_COLUMN = 15;
     public static final int CONTENT_MAX_ATTACHMENT_SIZE_COLUMN = 16;
+    public static final int CONTENT_SET_SYNC_SIZE_ENABLED_COLUMN = 17;
+    public static final int CONTENT_SYNC_SIZE_COLUMN = 18;
+    public static final int CONTENT_CAPABILITIES_COLUMN = 19;
 
     public static final String[] CONTENT_PROJECTION = {
         AttachmentColumns._ID, AccountColumns.DISPLAY_NAME,
@@ -181,7 +195,8 @@ public final class Account extends EmailContent implements Parcelable {
         AccountColumns.RINGTONE_URI, AccountColumns.PROTOCOL_VERSION,
         AccountColumns.SECURITY_SYNC_KEY,
         AccountColumns.SIGNATURE, AccountColumns.POLICY_KEY, AccountColumns.PING_DURATION,
-        AccountColumns.MAX_ATTACHMENT_SIZE
+        AccountColumns.MAX_ATTACHMENT_SIZE, AccountColumns.SET_SYNC_SIZE_ENABLED,
+        AccountColumns.SYNC_SIZE, AccountColumns.CAPABILITIES
     };
 
     public static final int ACCOUNT_FLAGS_COLUMN_ID = 0;
@@ -204,6 +219,8 @@ public final class Account extends EmailContent implements Parcelable {
         mSyncInterval = -1;
         mSyncLookback = -1;
         mFlags = 0;
+        mSetSyncSizeEnabled = SyncSize.ENABLED_DEFAULT_VALUE;
+        mSyncSize = SyncSize.SYNC_SIZE_ENTIRE_MAIL;
     }
 
     public static Account restoreAccountWithId(Context context, long id) {
@@ -279,6 +296,9 @@ public final class Account extends EmailContent implements Parcelable {
         mSignature = cursor.getString(CONTENT_SIGNATURE_COLUMN);
         mPolicyKey = cursor.getLong(CONTENT_POLICY_KEY_COLUMN);
         mPingDuration = cursor.getLong(CONTENT_PING_DURATION_COLUMN);
+        mSetSyncSizeEnabled = cursor.getInt(CONTENT_SET_SYNC_SIZE_ENABLED_COLUMN);
+        mSyncSize = cursor.getInt(CONTENT_SYNC_SIZE_COLUMN);
+        mCapabilities = cursor.getInt(CONTENT_CAPABILITIES_COLUMN);
     }
 
     public boolean isTemporary() {
@@ -358,6 +378,11 @@ public final class Account extends EmailContent implements Parcelable {
      * TODO define sentinel values for "never", "push", etc.  See Account.java
      */
     public int getSyncInterval() {
+        // Fixed unsynced value and account capability. Change to default pull value
+        if (!hasCapability(EmailServiceProxy.CAPABILITY_PUSH)
+                && mSyncInterval == CHECK_INTERVAL_PUSH) {
+            return CHECK_INTERVAL_DEFAULT_PULL;
+        }
         return mSyncInterval;
     }
 
@@ -367,7 +392,13 @@ public final class Account extends EmailContent implements Parcelable {
      * @param minutes the number of minutes between polling checks
      */
     public void setSyncInterval(int minutes) {
-        mSyncInterval = minutes;
+        // Fixed unsynced value and account capability. Change to default pull value
+        if (!hasCapability(EmailServiceProxy.CAPABILITY_PUSH)
+                && mSyncInterval == CHECK_INTERVAL_PUSH) {
+            mSyncInterval = CHECK_INTERVAL_DEFAULT_PULL;
+        } else {
+            mSyncInterval = minutes;
+        }
     }
 
     /**
@@ -402,6 +433,53 @@ public final class Account extends EmailContent implements Parcelable {
         mPingDuration = value;
     }
 
+    /**
+     * @return If this account enabled the sync size function, return true.
+     */
+    public boolean isSetSyncSizeEnabled() {
+        return mSetSyncSizeEnabled == SyncSize.ENABLED ? true : false;
+    }
+
+    /**
+     * Set the sync size function if enabled for this account.
+     * @param enabled the state of sync size function for this account.
+     */
+    public void setSyncSizeEnabled(boolean enabled) {
+        mSetSyncSizeEnabled = enabled ? SyncSize.ENABLED : SyncSize.DISABLED;
+    }
+
+    /**
+     * @return The max size per mail will be sync from service
+     * TODO define the values for "all", "20KB", "100KB", etc. See arrays.xml
+     */
+    public int getSyncSize() {
+        return mSyncSize;
+    }
+
+    /**
+     * Set the max size per mail will be sync from service. Be sure to call save() to
+     * commit to database.
+     * TODO define the values for "all", "20KB", "100KB", etc. See arrays.xml
+     * @param size the max size per mail would be sync from service.
+     */
+    public void setSyncSize(int size) {
+        mSyncSize = size;
+    }
+
+    /**
+     * @return the current account capabilities.
+     */
+    public int getCapabilities() {
+        return mCapabilities;
+    }
+
+    /**
+     * Set the account capabilities.  Be sure to call save() to commit to database.
+     */
+    public void setCapabilities(int value) {
+        mCapabilities = value;
+    }
+
     /**
      * @return the flags for this account
      */
@@ -749,6 +827,9 @@ public final class Account extends EmailContent implements Parcelable {
         values.put(AccountColumns.SIGNATURE, mSignature);
         values.put(AccountColumns.POLICY_KEY, mPolicyKey);
         values.put(AccountColumns.PING_DURATION, mPingDuration);
+        values.put(AccountColumns.SET_SYNC_SIZE_ENABLED, mSetSyncSizeEnabled);
+        values.put(AccountColumns.SYNC_SIZE, mSyncSize);
+        values.put(AccountColumns.CAPABILITIES, mCapabilities);
         return values;
     }
 
@@ -779,6 +860,7 @@ public final class Account extends EmailContent implements Parcelable {
             json.putOpt(AccountColumns.PROTOCOL_VERSION, mProtocolVersion);
             json.putOpt(AccountColumns.SIGNATURE, mSignature);
             json.put(AccountColumns.PING_DURATION, mPingDuration);
+            json.put(AccountColumns.CAPABILITIES, mCapabilities);
             return json;
         } catch (final JSONException e) {
             LogUtils.d(LogUtils.TAG, e, "Exception while serializing Account");
@@ -817,6 +899,7 @@ public final class Account extends EmailContent implements Parcelable {
             a.mSignature = json.optString(AccountColumns.SIGNATURE);
             // POLICY_KEY is not stored
             a.mPingDuration = json.optInt(AccountColumns.PING_DURATION, 0);
+            a.mCapabilities = json.optInt(AccountColumns.CAPABILITIES, 0);
             return a;
         } catch (final JSONException e) {
             LogUtils.d(LogUtils.TAG, e, "Exception while deserializing Account");
@@ -842,6 +925,14 @@ public final class Account extends EmailContent implements Parcelable {
         }
     }
 
+    /**
+     * Returns whether or not the capability is supported by the account.
+     * @see EmailServiceProxy#CAPABILITY_*
+     */
+    public boolean hasCapability(int capability) {
+        return (mCapabilities & capability) != 0;
+    }
+
     /**
      * Supports Parcelable
      */
@@ -889,6 +980,8 @@ public final class Account extends EmailContent implements Parcelable {
         dest.writeString(mSecuritySyncKey);
         dest.writeString(mSignature);
         dest.writeLong(mPolicyKey);
+        dest.writeInt(mSetSyncSizeEnabled);
+        dest.writeInt(mSyncSize);
 
         if (mHostAuthRecv != null) {
             dest.writeByte((byte)1);
@@ -903,6 +996,7 @@ public final class Account extends EmailContent implements Parcelable {
         } else {
             dest.writeByte((byte)0);
         }
+        dest.writeInt(mCapabilities);
     }
 
     /**
@@ -927,6 +1021,8 @@ public final class Account extends EmailContent implements Parcelable {
         mSecuritySyncKey = in.readString();
         mSignature = in.readString();
         mPolicyKey = in.readLong();
+        mSetSyncSizeEnabled = in.readInt();
+        mSyncSize = in.readInt();
 
         mHostAuthRecv = null;
         if (in.readByte() == 1) {
@@ -937,6 +1033,7 @@ public final class Account extends EmailContent implements Parcelable {
         if (in.readByte() == 1) {
             mHostAuthSend = new HostAuth(in);
         }
+        mCapabilities = in.readInt();
     }
 
     /**
diff --git a/emailcommon/src/com/android/emailcommon/provider/EmailContent.java b/emailcommon/src/com/android/emailcommon/provider/EmailContent.java
index 19805884e..f4bbf8248 100755
--- a/emailcommon/src/com/android/emailcommon/provider/EmailContent.java
+++ b/emailcommon/src/com/android/emailcommon/provider/EmailContent.java
@@ -34,6 +34,7 @@ import android.os.Parcel;
 import android.os.Parcelable;
 import android.os.RemoteException;
 import android.provider.BaseColumns;
+import android.text.TextUtils;
 
 import com.android.emailcommon.Logging;
 import com.android.emailcommon.R;
@@ -145,6 +146,8 @@ public abstract class EmailContent {
     // delete, or update) and is intended as an optimization for use by clients of message list
     // cursors (initially, the email AppWidget).
     public static String NOTIFIER_AUTHORITY;
+    // The sync settings changed authority is used to notify when a sync setting changed (interval)
+    public static String SYNC_SETTING_CHANGED_AUTHORITY;
     public static Uri CONTENT_URI;
     public static final String PARAMETER_LIMIT = "limit";
 
@@ -153,6 +156,7 @@ public abstract class EmailContent {
      */
     public static final String SUPPRESS_COMBINED_ACCOUNT_PARAM = "suppress_combined";
     public static Uri CONTENT_NOTIFIER_URI;
+    public static Uri CONTENT_SYNC_SETTING_CHANGED_URI;
     public static Uri PICK_TRASH_FOLDER_URI;
     public static Uri PICK_SENT_FOLDER_URI;
     public static Uri MAILBOX_NOTIFICATION_URI;
@@ -175,8 +179,11 @@ public abstract class EmailContent {
             AUTHORITY = EMAIL_PACKAGE_NAME + ".provider";
             LogUtils.d("EmailContent", "init for " + AUTHORITY);
             NOTIFIER_AUTHORITY = EMAIL_PACKAGE_NAME + ".notifier";
+            SYNC_SETTING_CHANGED_AUTHORITY = EMAIL_PACKAGE_NAME + ".sync_setting_changed";
             CONTENT_URI = Uri.parse("content://" + AUTHORITY);
             CONTENT_NOTIFIER_URI = Uri.parse("content://" + NOTIFIER_AUTHORITY);
+            CONTENT_SYNC_SETTING_CHANGED_URI = Uri.parse(
+                    "content://" + SYNC_SETTING_CHANGED_AUTHORITY);
             PICK_TRASH_FOLDER_URI = Uri.parse("content://" + AUTHORITY + "/pickTrashFolder");
             PICK_SENT_FOLDER_URI = Uri.parse("content://" + AUTHORITY + "/pickSentFolder");
             MAILBOX_NOTIFICATION_URI = Uri.parse("content://" + AUTHORITY + "/mailboxNotification");
@@ -196,6 +203,7 @@ public abstract class EmailContent {
             MessageStateChange.init();
             Body.initBody();
             Attachment.initAttachment();
+            SuggestedContact.initSuggestedContact();
         }
     }
 
@@ -513,8 +521,8 @@ public abstract class EmailContent {
 
             // Assign values for each row.
             values.put(BodyColumns.MESSAGE_KEY, mMessageKey);
-            values.put(BodyColumns.HTML_CONTENT, mHtmlContent);
-            values.put(BodyColumns.TEXT_CONTENT, mTextContent);
+            values.put(BodyColumns.HTML_CONTENT, Utility.compress(mHtmlContent));
+            values.put(BodyColumns.TEXT_CONTENT, Utility.compress(mTextContent));
             values.put(BodyColumns.SOURCE_MESSAGE_KEY, mSourceKey);
             return values;
         }
@@ -827,8 +835,9 @@ public abstract class EmailContent {
          */
         public static final String FLAG_LOADED_SELECTION =
             MessageColumns.FLAG_LOADED + " IN ("
-            +     Message.FLAG_LOADED_PARTIAL + "," + Message.FLAG_LOADED_COMPLETE
-            +     ")";
+            +     Message.FLAG_LOADED_PARTIAL + "," + Message.FLAG_LOADED_COMPLETE + ","
+            +     Message.FLAG_LOADED_PARTIAL_COMPLETE + ","
+            +     Message.FLAG_LOADED_PARTIAL_FETCHING +")";
 
         public static final String ALL_FAVORITE_SELECTION =
             MessageColumns.FLAG_FAVORITE + "=1 AND "
@@ -939,8 +948,10 @@ public abstract class EmailContent {
         public static final int FLAG_LOADED_UNLOADED = 0;
         public static final int FLAG_LOADED_COMPLETE = 1;
         public static final int FLAG_LOADED_PARTIAL = 2;
-        public static final int FLAG_LOADED_DELETED = 3;
-        public static final int FLAG_LOADED_UNKNOWN = 4;
+        public static final int FLAG_LOADED_PARTIAL_COMPLETE = 3;
+        public static final int FLAG_LOADED_PARTIAL_FETCHING = 4;
+        public static final int FLAG_LOADED_DELETED = 5;
+        public static final int FLAG_LOADED_UNKNOWN = 6;
 
         // Bits used in mFlags
         // The following three states are mutually exclusive, and indicate whether the message is an
@@ -1163,10 +1174,10 @@ public abstract class EmailContent {
             // Create and save the body
             ContentValues cv = new ContentValues();
             if (mText != null) {
-                cv.put(BodyColumns.TEXT_CONTENT, mText);
+                cv.put(BodyColumns.TEXT_CONTENT, Utility.compress(mText));
             }
             if (mHtml != null) {
-                cv.put(BodyColumns.HTML_CONTENT, mHtml);
+                cv.put(BodyColumns.HTML_CONTENT, Utility.compress(mHtml));
             }
             if (mSourceKey != 0) {
                 cv.put(BodyColumns.SOURCE_MESSAGE_KEY, mSourceKey);
@@ -1859,4 +1870,12 @@ public abstract class EmailContent {
         public static final String PROTOCOL_POLICIES_ENFORCED = "protocolPoliciesEnforced";
         public static final String PROTOCOL_POLICIES_UNSUPPORTED = "protocolPoliciesUnsupported";
     }
+
+    public interface SuggestedContactColumns extends BaseColumns {
+        static final String ACCOUNT_KEY = "accountKey";
+        static final String ADDRESS = "address";
+        static final String NAME = "name";
+        static final String DISPLAY_NAME = "display_name";
+        static final String LAST_SEEN = "last_seen";
+    }
 }
diff --git a/emailcommon/src/com/android/emailcommon/provider/Mailbox.java b/emailcommon/src/com/android/emailcommon/provider/Mailbox.java
index 952a73147..75f840e64 100644
--- a/emailcommon/src/com/android/emailcommon/provider/Mailbox.java
+++ b/emailcommon/src/com/android/emailcommon/provider/Mailbox.java
@@ -78,10 +78,13 @@ public class Mailbox extends EmailContent implements EmailContent.MailboxColumns
 
     public static Uri CONTENT_URI;
     public static Uri MESSAGE_COUNT_URI;
+    public static Uri SYNC_SETTING_CHANGED_URI;
 
     public static void initMailbox() {
         CONTENT_URI = Uri.parse(EmailContent.CONTENT_URI + "/mailbox");
         MESSAGE_COUNT_URI = Uri.parse(EmailContent.CONTENT_URI + "/mailboxCount");
+        SYNC_SETTING_CHANGED_URI = Uri.parse(
+                EmailContent.CONTENT_SYNC_SETTING_CHANGED_URI + "/mailbox");
     }
 
     private static String formatMailboxIdExtra(final int index) {
@@ -299,6 +302,10 @@ public class Mailbox extends EmailContent implements EmailContent.MailboxColumns
             MailboxColumns.SYNC_INTERVAL + "=1 and " + MailboxColumns.TYPE + "=? and " +
                     MailboxColumns.ACCOUNT_KEY + "=?";
 
+    /** Selection for mailboxes that are configured for sync for an account. */
+    private static final String SYNCING_MAILBOXES_FOR_ACCOUNT_SELECTION =
+            MailboxColumns.SYNC_INTERVAL + "=1 and " + MailboxColumns.ACCOUNT_KEY + "=?";
+
     // Types of mailboxes.  The list is ordered to match a typical UI presentation, e.g.
     // placing the inbox at the top.
     // Arrays of "special_mailbox_display_names" and "special_mailbox_icons" are depends on
@@ -910,6 +917,19 @@ public class Mailbox extends EmailContent implements EmailContent.MailboxColumns
                 new String[] { Integer.toString(mailboxType), Long.toString(accountId) }, null);
     }
 
+    /**
+     * Get the mailbox ids for an account that are configured for sync by the user.
+     * @param cr The {@link ContentResolver}.
+     * @param accountId The id for the account that is syncing.
+     * @return A cursor (with one column, containing ids) with all mailbox ids that match.
+     */
+    public static Cursor getLoopBackMailboxIdsForSync(final ContentResolver cr,
+            final long accountId) {
+        return cr.query(Mailbox.CONTENT_URI, Mailbox.ID_PROJECTION,
+                SYNCING_MAILBOXES_FOR_ACCOUNT_SELECTION,
+                new String[] {Long.toString(accountId) }, null);
+    }
+
     /**
      * Get the account id for a mailbox.
      * @param context The {@link Context}.
diff --git a/emailcommon/src/com/android/emailcommon/provider/SuggestedContact.java b/emailcommon/src/com/android/emailcommon/provider/SuggestedContact.java
new file mode 100644
index 000000000..ef46d9cfb
--- /dev/null
+++ b/emailcommon/src/com/android/emailcommon/provider/SuggestedContact.java
@@ -0,0 +1,48 @@
+/*
+ * Copyright (C) 2014 The CyanogenMod Project
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+
+package com.android.emailcommon.provider;
+
+import android.net.Uri;
+import android.provider.BaseColumns;
+
+import com.android.emailcommon.provider.EmailContent.SuggestedContactColumns;
+
+/**
+ * A suggested contact extracted from sent and received emails to be displayed when the user
+ * compose a message. Tied to a specific account.
+ */
+public abstract class SuggestedContact extends EmailContent
+        implements SuggestedContactColumns {
+    public static final String TABLE_NAME = "SuggestedContact";
+    public static Uri CONTENT_URI;
+    public static Uri ACCOUNT_ID_URI;
+
+    public static final String[] PROJECTION = new String[] {
+            SuggestedContact._ID,
+            SuggestedContact.ACCOUNT_KEY,
+            SuggestedContact.ADDRESS,
+            SuggestedContact.NAME,
+            SuggestedContact.DISPLAY_NAME,
+            SuggestedContact.LAST_SEEN,
+    };
+
+    public static void initSuggestedContact() {
+        CONTENT_URI = Uri.parse(EmailContent.CONTENT_URI + "/suggestedcontact");
+        ACCOUNT_ID_URI = Uri.parse(EmailContent.CONTENT_URI + "/suggestedcontact/account");
+    }
+}
\ No newline at end of file
diff --git a/emailcommon/src/com/android/emailcommon/service/EmailServiceProxy.java b/emailcommon/src/com/android/emailcommon/service/EmailServiceProxy.java
index 36a0d336e..1f74a3f7c 100644
--- a/emailcommon/src/com/android/emailcommon/service/EmailServiceProxy.java
+++ b/emailcommon/src/com/android/emailcommon/service/EmailServiceProxy.java
@@ -18,6 +18,7 @@ package com.android.emailcommon.service;
 
 import android.content.Context;
 import android.content.Intent;
+import android.os.AsyncTask;
 import android.os.Bundle;
 import android.os.IBinder;
 import android.os.RemoteException;
@@ -30,6 +31,7 @@ import com.android.emailcommon.provider.Policy;
 import com.android.mail.utils.LogUtils;
 
 import java.io.IOException;
+import java.util.concurrent.Executor;
 
 /**
  * The EmailServiceProxy class provides a simple interface for the UI to call into the various
@@ -50,6 +52,12 @@ public class EmailServiceProxy extends ServiceProxy implements IEmailService {
     private static final String TAG = "EmailServiceProxy";
 
     public static final String AUTO_DISCOVER_BUNDLE_ERROR_CODE = "autodiscover_error_code";
+    // This extra contains the autodiscovery error translated to a messaging exception
+    // error code. Our autodiscover service fills this code plus the above one, just because
+    // Gmail and others different clients still check the above one. This is only for our
+    // Email internal implementation
+    public static final String AUTO_DISCOVER_BUNDLE_MESSAGING_ERROR_CODE =
+            "autodiscover_messaging_error_code";
     public static final String AUTO_DISCOVER_BUNDLE_HOST_AUTH = "autodiscover_host_auth";
 
     public static final String VALIDATE_BUNDLE_RESULT_CODE = "validate_result_code";
@@ -60,6 +68,12 @@ public class EmailServiceProxy extends ServiceProxy implements IEmailService {
     public static final String VALIDATE_BUNDLE_PROTOCOL_VERSION = "validate_protocol_version";
     public static final String VALIDATE_BUNDLE_REDIRECT_ADDRESS = "validate_redirect_address";
 
+    // Service capabilities
+    public static final String SETTINGS_BUNDLE_CAPABILITIES = "settings_capabilities";
+
+    // List of common interesting services capabilities
+    public static final int CAPABILITY_PUSH = 1 << 0;
+
     private Object mReturn = null;
     private IEmailService mService;
     private final boolean isRemote;
@@ -247,6 +261,22 @@ public class EmailServiceProxy extends ServiceProxy implements IEmailService {
         }, "sendMeetingResponse");
     }
 
+    /**
+     * Request the sync adapter to load a complete message; the service MUST give higher priority
+     * to non-background loading.
+     *
+     * @param messageId the id of the message to be loaded
+     */
+    @Override
+    public void loadMore(final long messageId) throws RemoteException {
+        setTask(new ProxyTask() {
+            @Override
+            public void run() throws RemoteException {
+                mService.loadMore(messageId);
+            }
+        }, "loadMore");
+    }
+
     /**
      * Request the service to delete the account's PIM (personal information management) data. This
      * data includes any data that is 1) associated with the account and 2) created/stored by the
@@ -258,6 +288,11 @@ public class EmailServiceProxy extends ServiceProxy implements IEmailService {
     @Override
     public void deleteExternalAccountPIMData(final String emailAddress) throws RemoteException {
         setTask(new ProxyTask() {
+            @Override
+            public Executor runInExecutor() {
+                return AsyncTask.THREAD_POOL_EXECUTOR;
+            }
+
             @Override
             public void run() throws RemoteException {
                 mService.deleteExternalAccountPIMData(emailAddress);
diff --git a/emailcommon/src/com/android/emailcommon/service/IEmailService.aidl b/emailcommon/src/com/android/emailcommon/service/IEmailService.aidl
index a6f49dc6c..cd0cf758f 100644
--- a/emailcommon/src/com/android/emailcommon/service/IEmailService.aidl
+++ b/emailcommon/src/com/android/emailcommon/service/IEmailService.aidl
@@ -30,6 +30,9 @@ interface IEmailService {
     oneway void loadAttachment(IEmailServiceCallback cb, long accountId, long attachmentId,
             boolean background);
 
+    // Used to load uncompleted message.
+    oneway void loadMore(long messageId);
+
     void updateFolderList(long accountId);
 
     // TODO: For Eas, sync() will also sync the outbox. We should make IMAP and POP work the same
diff --git a/emailcommon/src/com/android/emailcommon/service/ServiceProxy.java b/emailcommon/src/com/android/emailcommon/service/ServiceProxy.java
index 3669345c1..0e723c28c 100644
--- a/emailcommon/src/com/android/emailcommon/service/ServiceProxy.java
+++ b/emailcommon/src/com/android/emailcommon/service/ServiceProxy.java
@@ -17,20 +17,31 @@
 
 package com.android.emailcommon.service;
 
+import android.app.AlertDialog;
 import android.content.ComponentName;
 import android.content.Context;
+import android.content.DialogInterface;
 import android.content.Intent;
 import android.content.ServiceConnection;
 import android.content.pm.ProviderInfo;
+import android.net.Uri;
+import android.os.Build;
+import android.os.Bundle;
 import android.os.AsyncTask;
 import android.os.Debug;
+import android.os.Handler;
 import android.os.IBinder;
 import android.os.Looper;
+import android.os.Message;
 import android.os.RemoteException;
+import android.widget.Toast;
 
+import com.android.emailcommon.R;
 import com.android.emailcommon.provider.EmailContent;
 import com.android.mail.utils.LogUtils;
 
+import java.util.concurrent.Executor;
+
 /**
  * ServiceProxy is a superclass for proxy objects which make a single call to a service. It handles
  * connecting to the service, running a task supplied by the subclass when the connection is ready,
@@ -87,6 +98,8 @@ public abstract class ServiceProxy {
      */
     public abstract void onConnected(IBinder binder);
 
+    private Handler mHandler;
+    private static final int TIPS = 1;
     public ServiceProxy(Context _context, Intent _intent) {
         mContext = _context;
         mIntent = _intent;
@@ -94,6 +107,42 @@ public abstract class ServiceProxy {
         if (Debug.isDebuggerConnected()) {
             mTimeout <<= 2;
         }
+        mHandler = new Handler(Looper.getMainLooper()) {
+            @Override
+            public void handleMessage(Message msg) {
+                switch (msg.what) {
+                    case TIPS:
+                        Toast.makeText(mContext, mContext.getResources()
+                                .getString(R.string.missed_exchange_required_permission),
+                                Toast.LENGTH_LONG).show();
+                        mContext.startActivity(getAppDetailSettingIntent(mContext));
+                        break;
+                    default:
+                        break;
+                }
+            }
+        };
+    }
+
+    private final static String SETTING_ACTION = "android.settings.APPLICATION_DETAILS_SETTINGS";
+    private final static String PACKAGE = "package";
+    private final static String EXCHANGE_PACKAGE_NAME = "com.android.exchange";
+    private final static String SETTING_PACKAGE_NAME = "com.android.settings";
+    private final static String CLASS_INSTALLEDAPPDETAILS = "com.android.settings.InstalledAppDetails";
+    private final static String CLASS_APPLICATIONPKGNAME = "com.android.settings.ApplicationPkgName";
+
+    private Intent getAppDetailSettingIntent(Context context) {
+        Intent localIntent = new Intent();
+        localIntent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
+        if (Build.VERSION.SDK_INT >= 9) {
+            localIntent.setAction(SETTING_ACTION);
+            localIntent.setData(Uri.fromParts(PACKAGE, EXCHANGE_PACKAGE_NAME, null));
+        } else if (Build.VERSION.SDK_INT <= 8) {
+            localIntent.setAction(Intent.ACTION_VIEW);
+            localIntent.setClassName(SETTING_PACKAGE_NAME, CLASS_INSTALLEDAPPDETAILS);
+            localIntent.putExtra(CLASS_APPLICATIONPKGNAME, EXCHANGE_PACKAGE_NAME);
+        }
+        return localIntent;
     }
 
     private class ProxyConnection implements ServiceConnection {
@@ -115,6 +164,8 @@ public abstract class ServiceProxy {
                         mTask.run();
                     } catch (RemoteException e) {
                         LogUtils.e(mTag, e, "RemoteException thrown running mTask!");
+                    } catch (java.lang.SecurityException e) {
+                        mHandler.sendEmptyMessage(TIPS);
                     } finally {
                         // Make sure that we unbind the mConnection even on exceptions in the
                         // task provided by the subclass.
@@ -133,8 +184,8 @@ public abstract class ServiceProxy {
                                     "RuntimeException when trying to unbind from service");
                         }
                     }
-                    mTaskCompleted = true;
                     synchronized(mConnection) {
+                        mTaskCompleted = true;
                         if (DEBUG_PROXY) {
                             LogUtils.v(mTag, "Task " + mName + " completed; disconnecting");
                         }
@@ -142,7 +193,7 @@ public abstract class ServiceProxy {
                     }
                     return null;
                 }
-            }.execute();
+            }.executeOnExecutor(mTask.runInExecutor());
         }
 
         @Override
@@ -154,8 +205,11 @@ public abstract class ServiceProxy {
         }
     }
 
-    protected interface ProxyTask {
-        public void run() throws RemoteException;
+    protected abstract class ProxyTask {
+        public Executor runInExecutor() {
+            return AsyncTask.SERIAL_EXECUTOR;
+        };
+        public abstract void run() throws RemoteException;
     }
 
     public ServiceProxy setTimeout(int secs) {
@@ -178,6 +232,9 @@ public abstract class ServiceProxy {
         if (DEBUG_PROXY) {
             LogUtils.v(mTag, "Bind requested for task " + mName);
         }
+        synchronized (mConnection) {
+            mTaskCompleted = false;
+        }
         return mContext.bindService(mIntent, mConnection, Context.BIND_AUTO_CREATE);
     }
 
@@ -203,7 +260,9 @@ public abstract class ServiceProxy {
                 if (DEBUG_PROXY) {
                     LogUtils.v(mTag, "Waiting for task " + mName + " to complete...");
                 }
-                mConnection.wait(mTimeout * 1000L);
+                if (!mTaskCompleted) {
+                    mConnection.wait(mTimeout * 1000L);
+                }
             } catch (InterruptedException e) {
                 // Can be ignored safely
             }
diff --git a/emailcommon/src/com/android/emailcommon/service/SyncSize.java b/emailcommon/src/com/android/emailcommon/service/SyncSize.java
new file mode 100644
index 000000000..36aea9f15
--- /dev/null
+++ b/emailcommon/src/com/android/emailcommon/service/SyncSize.java
@@ -0,0 +1,49 @@
+/*
+ * Copyright (c) 2013, The Linux Foundation. All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions are
+ * met:
+ *     Redistributions of source code must retain the above copyright
+ *     notice, this list of conditions and the following disclaimer.
+ *     Redistributions in binary form must reproduce the above
+ *     copyright notice, this list of conditions and the following
+ *     disclaimer in the documentation and/or other materials provided
+ *     with the distribution.
+ *     Neither the name of The Linux Foundation nor the names of its
+ *     contributors may be used to endorse or promote products derived
+ *     from this software without specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED "AS IS" AND ANY EXPRESS OR IMPLIED
+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
+ * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT
+ * ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS
+ * BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
+ * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
+ * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
+ * BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
+ * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE
+ * OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN
+ * IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ */
+
+package com.android.emailcommon.service;
+
+public class SyncSize {
+    /**
+     * 1 means the sync size function is enabled, others means the sync size
+     * function is disabled.
+     */
+    public static final int ENABLED = 1;
+    public static final int DISABLED = 0;
+
+    public static final int SYNC_SIZE_ENTIRE_MAIL = Integer.MAX_VALUE;
+    public static final int SYNC_SIZE_20_K = 20480;
+    public static final int SYNC_SIZE_100_K = 102400;
+    public static final int SYNC_SIZE_200_K = 204800;
+    public static final int SYNC_SIZE_500_K = 512000;
+    public static final int SYNC_SIZE_1_M = 1024000;
+
+    public static final int ENABLED_DEFAULT_VALUE = ENABLED;
+    public static final int SYNC_SIZE_DEFAULT_VALUE = SYNC_SIZE_200_K;
+}
diff --git a/emailcommon/src/com/android/emailcommon/service/SyncWindow.java b/emailcommon/src/com/android/emailcommon/service/SyncWindow.java
index 8dfe4ad2e..af1edea7d 100644
--- a/emailcommon/src/com/android/emailcommon/service/SyncWindow.java
+++ b/emailcommon/src/com/android/emailcommon/service/SyncWindow.java
@@ -42,7 +42,7 @@ public class SyncWindow {
                 return 365*10;
             case SYNC_WINDOW_ACCOUNT:
             default:
-                return 14;
+                return 7;
         }
     }
 }
diff --git a/emailcommon/src/com/android/emailcommon/utility/AttachmentUtilities.java b/emailcommon/src/com/android/emailcommon/utility/AttachmentUtilities.java
index 407a9034b..cbc2e2226 100644
--- a/emailcommon/src/com/android/emailcommon/utility/AttachmentUtilities.java
+++ b/emailcommon/src/com/android/emailcommon/utility/AttachmentUtilities.java
@@ -111,8 +111,6 @@ public class AttachmentUtilities {
         "hta", "ins", "isp", "jse", "lib", "mde", "msc", "msp",
         "mst", "pif", "scr", "sct", "shb", "sys", "vb", "vbe",
         "vbs", "vxd", "wsc", "wsf", "wsh",
-        // File types of common compression/container formats (again, to avoid malware)
-        "zip", "gz", "z", "tar", "tgz", "bz2",
     };
     /**
      * Filename extensions of attachments that can be installed.
@@ -398,16 +396,38 @@ public class AttachmentUtilities {
         final ContentValues cv = new ContentValues();
         final long attachmentId = attachment.mId;
         final long accountId = attachment.mAccountKey;
-        final String contentUri;
-        final long size;
+        String contentUri = null;
+        long size = attachment.mSize;
 
         try {
             ContentResolver resolver = context.getContentResolver();
-            if (attachment.mUiDestination == UIProvider.AttachmentDestination.CACHE) {
+            // As we changed the save attachment process to use the cached content first,
+            // if the cached do not exist, we will try to download it. Then under this case
+            // we need save the content to cache and external both.
+            if (attachment.mUiDestination == UIProvider.AttachmentDestination.CACHE
+                    || !Utility.attachmentExists(context, attachment)) {
                 Uri attUri = getAttachmentUri(accountId, attachmentId);
                 size = copyFile(in, resolver.openOutputStream(attUri));
                 contentUri = attUri.toString();
-            } else if (Utility.isExternalStorageMounted()) {
+
+                // Update the attachment
+                cv.put(AttachmentColumns.SIZE, size);
+                cv.put(AttachmentColumns.CONTENT_URI, contentUri);
+                cv.put(AttachmentColumns.UI_STATE, UIProvider.AttachmentState.SAVED);
+                context.getContentResolver().update(uri, cv, null, null);
+            } else {
+                // Do not use the input stream, close it.
+                in.close();
+            }
+
+            // If the destination is external, try to save the content to external.
+            if (attachment.mUiDestination == UIProvider.AttachmentDestination.EXTERNAL) {
+                if (!Utility.isExternalStorageMounted()) {
+                    LogUtils.w(Logging.LOG_TAG,
+                            "Trying to save an attachment without external storage?");
+                    throw new IOException();
+                }
+
                 if (TextUtils.isEmpty(attachment.mFileName)) {
                     // TODO: This will prevent a crash but does not surface the underlying problem
                     // to the user correctly.
@@ -419,7 +439,8 @@ public class AttachmentUtilities {
                         Environment.DIRECTORY_DOWNLOADS);
                 downloads.mkdirs();
                 File file = Utility.createUniqueFile(downloads, attachment.mFileName);
-                size = copyFile(in, new FileOutputStream(file));
+                Uri attUri = getAttachmentUri(accountId, attachmentId);
+                size = copyFile(resolver.openInputStream(attUri), new FileOutputStream(file));
                 String absolutePath = file.getAbsolutePath();
 
                 // Although the download manager can scan media files, scanning only happens
@@ -440,25 +461,17 @@ public class AttachmentUtilities {
                             false /* do not use media scanner */,
                             mimeType, absolutePath, size,
                             true /* show notification */);
-                    contentUri = dm.getUriForDownloadedFile(id).toString();
+                    LogUtils.d(Logging.LOG_TAG, "Save the att to download manager, id = %d", id);
                 } catch (final IllegalArgumentException e) {
                     LogUtils.d(LogUtils.TAG, e, "IAE from DownloadManager while saving attachment");
                     throw new IOException(e);
                 }
-            } else {
-                LogUtils.w(Logging.LOG_TAG,
-                        "Trying to save an attachment without external storage?");
-                throw new IOException();
             }
-
-            // Update the attachment
-            cv.put(AttachmentColumns.SIZE, size);
-            cv.put(AttachmentColumns.CONTENT_URI, contentUri);
-            cv.put(AttachmentColumns.UI_STATE, UIProvider.AttachmentState.SAVED);
         } catch (IOException e) {
             // Handle failures here...
+            cv.clear();
             cv.put(AttachmentColumns.UI_STATE, UIProvider.AttachmentState.FAILED);
+            context.getContentResolver().update(uri, cv, null, null);
         }
-        context.getContentResolver().update(uri, cv, null, null);
     }
 }
diff --git a/emailcommon/src/com/android/emailcommon/utility/SSLSocketFactory.java b/emailcommon/src/com/android/emailcommon/utility/SSLSocketFactory.java
index b7a59b81d..7a0c24c1c 100644
--- a/emailcommon/src/com/android/emailcommon/utility/SSLSocketFactory.java
+++ b/emailcommon/src/com/android/emailcommon/utility/SSLSocketFactory.java
@@ -33,6 +33,8 @@
 
 package com.android.emailcommon.utility;
 
+import com.android.mail.utils.LogUtils;
+
 import org.apache.http.conn.scheme.HostNameResolver;
 import org.apache.http.conn.scheme.LayeredSocketFactory;
 import org.apache.http.conn.ssl.AllowAllHostnameVerifier;
@@ -49,7 +51,10 @@ import javax.net.ssl.SSLContext;
 import javax.net.ssl.SSLSocket;
 import javax.net.ssl.TrustManager;
 import javax.net.ssl.TrustManagerFactory;
+
 import java.io.IOException;
+import java.lang.reflect.InvocationTargetException;
+import java.lang.reflect.Method;
 import java.net.InetAddress;
 import java.net.InetSocketAddress;
 import java.net.Socket;
@@ -144,6 +149,9 @@ import java.security.UnrecoverableKeyException;
 
 public class SSLSocketFactory implements LayeredSocketFactory {
 
+    private static final boolean LOG_ENABLED = false;
+    private static final String TAG = "Email.SslFactory";
+
     public static final String TLS   = "TLS";
     public static final String SSL   = "SSL";
     public static final String SSLV2 = "SSLv2";
@@ -323,6 +331,14 @@ public class SSLSocketFactory implements LayeredSocketFactory {
         sslsock.connect(remoteAddress, connTimeout);
 
         sslsock.setSoTimeout(soTimeout);
+
+        // Set Server Name Indication if is available for this socket
+        setSocketHostname(sslsock, host);
+
+        // Start handshake prior to hostname verification to ensure
+        // handshake exceptions do not get silenced by hostname verification.
+        sslsock.startHandshake();
+
         try {
             hostnameVerifier.verify(host, sslsock);
             // verifyHostName() didn't blowup - good!
@@ -386,6 +402,14 @@ public class SSLSocketFactory implements LayeredSocketFactory {
               port,
               autoClose
         );
+
+        // Set Server Name Indication if it's available for this socket
+        setSocketHostname(sslSocket, host);
+
+        // Start handshake prior to hostname verification to ensure
+        // handshake exceptions do not get silenced by hostname verification.
+        sslSocket.startHandshake();
+
         hostnameVerifier.verify(host, sslSocket);
         // verifyHostName() didn't blowup - good!
         return sslSocket;
@@ -402,4 +426,21 @@ public class SSLSocketFactory implements LayeredSocketFactory {
         return hostnameVerifier;
     }
 
+    private void setSocketHostname(SSLSocket sslSocket, String hostname) {
+        try {
+            Method method = sslSocket.getClass().getMethod("setHostname", String.class);
+            method.invoke(sslSocket, hostname);
+            return;
+        } catch (NoSuchMethodException ex) {
+            // Ignore
+        } catch (InvocationTargetException ex) {
+            // Ignore
+        } catch (IllegalAccessException ex) {
+            // Ignore
+        }
+        if (LOG_ENABLED) {
+            LogUtils.i(TAG, "setHostname isn't available for this socket.");
+        }
+    }
+
 }
diff --git a/emailcommon/src/com/android/emailcommon/utility/Utility.java b/emailcommon/src/com/android/emailcommon/utility/Utility.java
old mode 100644
new mode 100755
index 55ac448dc..1e38542ad
--- a/emailcommon/src/com/android/emailcommon/utility/Utility.java
+++ b/emailcommon/src/com/android/emailcommon/utility/Utility.java
@@ -44,6 +44,7 @@ import com.android.mail.utils.LogUtils;
 import com.google.common.annotations.VisibleForTesting;
 
 import java.io.ByteArrayInputStream;
+import java.io.ByteArrayOutputStream;
 import java.io.File;
 import java.io.FileNotFoundException;
 import java.io.IOException;
@@ -62,6 +63,8 @@ import java.util.Date;
 import java.util.GregorianCalendar;
 import java.util.TimeZone;
 import java.util.regex.Pattern;
+import java.util.zip.GZIPInputStream;
+import java.util.zip.GZIPOutputStream;
 
 public class Utility {
     public static final Charset UTF_8 = Charset.forName("UTF-8");
@@ -73,6 +76,8 @@ public class Utility {
     private static final Pattern DATE_CLEANUP_PATTERN_WRONG_TIMEZONE =
             Pattern.compile("GMT([-+]\\d{4})$");
 
+    // the temp encode for compress and decompress
+    private static final String TEMP_ENCODE = "ISO-8859-1";
     private static Handler sMainThreadHandler;
 
     /**
@@ -788,4 +793,44 @@ public class Utility {
                 ? new StrictMode.VmPolicy.Builder().detectAll().build()
                 : StrictMode.VmPolicy.LAX);
     }
+
+    public static String compress(String str) {
+        if (str == null || str.length() == 0) {
+            return str;
+        }
+        try {
+            ByteArrayOutputStream out = new ByteArrayOutputStream();
+            GZIPOutputStream gzip = new GZIPOutputStream(out);
+            gzip.write(str.getBytes());
+            gzip.close();
+            return out.toString(TEMP_ENCODE);
+        } catch (IOException e) {
+            e.printStackTrace();
+        }
+        return str;
+    }
+
+    public static String uncompress(String str) {
+        if (str == null || str.length() == 0) {
+            return str;
+        }
+        try {
+            ByteArrayOutputStream out = new ByteArrayOutputStream();
+            ByteArrayInputStream in = new ByteArrayInputStream(str
+                    .getBytes(TEMP_ENCODE));
+            GZIPInputStream gunzip = new GZIPInputStream(in);
+            byte[] buffer = new byte[256];
+            int n;
+            while ((n = gunzip.read(buffer)) >= 0) {
+                out.write(buffer, 0, n);
+            }
+            if (gunzip != null) {
+                gunzip.close();
+            }
+            return out.toString();
+        } catch (IOException e) {
+            e.printStackTrace();
+        }
+        return str;
+    }
 }
diff --git a/provider_src/com/android/email/AttachmentInfo.java b/provider_src/com/android/email/AttachmentInfo.java
index 13ff068f7..a4d28fbe3 100644
--- a/provider_src/com/android/email/AttachmentInfo.java
+++ b/provider_src/com/android/email/AttachmentInfo.java
@@ -132,13 +132,7 @@ public class AttachmentInfo {
 
         // Check for unacceptable attachments by filename extension
         String extension = AttachmentUtilities.getFilenameExtension(mName);
-        if (!TextUtils.isEmpty(extension) &&
-                Utility.arrayContains(AttachmentUtilities.UNACCEPTABLE_ATTACHMENT_EXTENSIONS,
-                        extension)) {
-            canView = false;
-            canSave = false;
-            denyFlags |= DENY_MALWARE;
-        }
+
 
         // Check for policy restrictions on download
         if ((flags & Attachment.FLAG_POLICY_DISALLOWS_DOWNLOAD) != 0) {
@@ -147,21 +141,8 @@ public class AttachmentInfo {
             denyFlags |= DENY_POLICY;
         }
 
-        // Check for installable attachments by filename extension
-        extension = AttachmentUtilities.getFilenameExtension(mName);
-        if (!TextUtils.isEmpty(extension) &&
-                Utility.arrayContains(AttachmentUtilities.INSTALLABLE_ATTACHMENT_EXTENSIONS,
-                        extension)) {
-            boolean sideloadEnabled;
-            sideloadEnabled = Settings.Secure.getInt(context.getContentResolver(),
-                    Settings.Secure.INSTALL_NON_MARKET_APPS, 0 /* sideload disabled */) == 1;
-            canSave &= sideloadEnabled;
-            canView = canSave;
-            canInstall = canSave;
-            if (!sideloadEnabled) {
-                denyFlags |= DENY_NOSIDELOAD;
-            }
-        }
+
+
 
         // Check for file size exceeded
         // The size limit is overridden when on a wifi connection - any size is OK
@@ -178,11 +159,7 @@ public class AttachmentInfo {
         Intent intent = getAttachmentIntent(context, 0);
         PackageManager pm = context.getPackageManager();
         List<ResolveInfo> activityList = pm.queryIntentActivities(intent, 0 /*no account*/);
-        if (activityList.isEmpty()) {
-            canView = false;
-            canSave = false;
-            denyFlags |= DENY_NOINTENT;
-        }
+
 
         mAllowView = canView;
         mAllowSave = canSave;
@@ -221,7 +198,7 @@ public class AttachmentInfo {
      * @return whether the attachment is eligible for download
      */
     public boolean isEligibleForDownload() {
-        return mAllowView || mAllowSave;
+        return mAllowView || mAllowSave || mAllowInstall;
     }
 
     @Override
diff --git a/provider_src/com/android/email/EmailConnectivityManager.java b/provider_src/com/android/email/EmailConnectivityManager.java
index 90a511f06..be930c910 100644
--- a/provider_src/com/android/email/EmailConnectivityManager.java
+++ b/provider_src/com/android/email/EmailConnectivityManager.java
@@ -165,6 +165,13 @@ public class EmailConnectivityManager extends BroadcastReceiver {
         return info.getType();
     }
 
+    static public boolean isConnected(Context context) {
+        ConnectivityManager cm =
+                (ConnectivityManager)context.getSystemService(Context.CONNECTIVITY_SERVICE);
+        NetworkInfo info = cm.getActiveNetworkInfo();
+        return info != null && info.isConnected();
+    }
+
     public void waitForConnectivity() {
         // If we're unregistered, throw an exception
         if (!mRegistered) {
diff --git a/provider_src/com/android/email/LegacyConversions.java b/provider_src/com/android/email/LegacyConversions.java
index 3de9b68cc..7b2f15b35 100644
--- a/provider_src/com/android/email/LegacyConversions.java
+++ b/provider_src/com/android/email/LegacyConversions.java
@@ -310,7 +310,10 @@ public class LegacyConversions {
             localMessage.mAttachments = new ArrayList<Attachment>();
         }
         localMessage.mAttachments.add(localAttachment);
-        localMessage.mFlagAttachment = true;
+        if (TextUtils.isEmpty(localAttachment.mContentId)) {
+            // This isn't the viewable part, set the local message has attachment.
+            localMessage.mFlagAttachment = true;
+        }
     }
 
     /**
diff --git a/provider_src/com/android/email/activity/setup/AccountSettingsUtils.java b/provider_src/com/android/email/activity/setup/AccountSettingsUtils.java
index dbbd51ee7..0a7223800 100644
--- a/provider_src/com/android/email/activity/setup/AccountSettingsUtils.java
+++ b/provider_src/com/android/email/activity/setup/AccountSettingsUtils.java
@@ -107,10 +107,12 @@ public class AccountSettingsUtils {
         cv.put(AccountColumns.DISPLAY_NAME, account.getDisplayName());
         cv.put(AccountColumns.SENDER_NAME, account.getSenderName());
         cv.put(AccountColumns.SIGNATURE, account.getSignature());
-        cv.put(AccountColumns.SYNC_INTERVAL, account.mSyncInterval);
+        cv.put(AccountColumns.SYNC_INTERVAL, account.getSyncInterval());
         cv.put(AccountColumns.FLAGS, account.mFlags);
         cv.put(AccountColumns.SYNC_LOOKBACK, account.mSyncLookback);
         cv.put(AccountColumns.SECURITY_SYNC_KEY, account.mSecuritySyncKey);
+        cv.put(AccountColumns.SET_SYNC_SIZE_ENABLED, account.mSetSyncSizeEnabled);
+        cv.put(AccountColumns.SYNC_SIZE, account.mSyncSize);
         return cv;
     }
 
diff --git a/provider_src/com/android/email/mail/store/ImapConnection.java b/provider_src/com/android/email/mail/store/ImapConnection.java
index bf4bb2a4c..7bb604e02 100644
--- a/provider_src/com/android/email/mail/store/ImapConnection.java
+++ b/provider_src/com/android/email/mail/store/ImapConnection.java
@@ -36,6 +36,7 @@ import com.android.emailcommon.mail.MessagingException;
 import com.android.mail.utils.LogUtils;
 
 import java.io.IOException;
+import java.net.SocketTimeoutException;
 import java.util.ArrayList;
 import java.util.Collections;
 import java.util.List;
@@ -50,6 +51,15 @@ class ImapConnection {
     // Always check in FALSE
     private static final boolean DEBUG_FORCE_SEND_ID = false;
 
+    // RFC 2177 defines that IDLE connections must be refreshed at least every 29 minutes
+    public static final int PING_IDLE_TIMEOUT = 29 * 60 * 1000;
+
+    // Special timeout for DONE operations
+    public static final int DONE_TIMEOUT = 5 * 1000;
+
+    // Time to wait between the first idle message and triggering the changes
+    private static final int IDLE_OP_READ_TIMEOUT = 500;
+
     /** ID capability per RFC 2971*/
     public static final int CAPABILITY_ID        = 1 << 0;
     /** NAMESPACE capability per RFC 2342 */
@@ -58,6 +68,8 @@ class ImapConnection {
     public static final int CAPABILITY_STARTTLS  = 1 << 2;
     /** UIDPLUS capability per RFC 4315 */
     public static final int CAPABILITY_UIDPLUS   = 1 << 3;
+    /** IDLE capability per RFC 2177 */
+    public static final int CAPABILITY_IDLE      = 1 << 4;
 
     /** The capabilities supported; a set of CAPABILITY_* values. */
     private int mCapabilities;
@@ -69,6 +81,8 @@ class ImapConnection {
     private String mAccessToken;
     private String mIdPhrase = null;
 
+    private boolean mIdling = false;
+
     /** # of command/response lines to log upon crash. */
     private static final int DISCOURSE_LOGGER_SIZE = 64;
     private final DiscourseLogger mDiscourse = new DiscourseLogger(DISCOURSE_LOGGER_SIZE);
@@ -80,6 +94,8 @@ class ImapConnection {
      */
     private final AtomicInteger mNextCommandTag = new AtomicInteger(0);
 
+    private String mTransportTag;
+
     // Keep others from instantiating directly
     ImapConnection(ImapStore store) {
         setStore(store);
@@ -93,6 +109,16 @@ class ImapConnection {
         mLoginPhrase = null;
     }
 
+    void setTransportTag(String tag) {
+        mTransportTag = tag;
+        if (mTransport != null) {
+            mTransport.setTag(tag);
+        }
+        if (mParser != null) {
+            mParser.setTag(tag);
+        }
+    }
+
     /**
      * Generates and returns the phrase to be used for authentication. This will be a LOGIN with
      * username and password, or an OAUTH authentication string, with username and access token.
@@ -138,6 +164,7 @@ class ImapConnection {
             // copy configuration into a clean transport, if necessary
             if (mTransport == null) {
                 mTransport = mImapStore.cloneTransport();
+                mTransport.setTag(mTransportTag);
             }
 
             mTransport.open();
@@ -208,12 +235,26 @@ class ImapConnection {
         destroyResponses();
         mParser = null;
         mImapStore = null;
+        mIdling = false;
+    }
+
+    int getReadTimeout() throws IOException {
+        if (mTransport == null) {
+            return MailTransport.SOCKET_READ_TIMEOUT;
+        }
+        return mTransport.getReadTimeout();
+    }
+
+    void setReadTimeout(int timeout) throws IOException {
+        if (mTransport != null) {
+            mTransport.setReadTimeout(timeout);
+        }
     }
 
     /**
      * Returns whether or not the specified capability is supported by the server.
      */
-    private boolean isCapable(int capability) {
+    public boolean isCapable(int capability) {
         return (mCapabilities & capability) != 0;
     }
 
@@ -235,6 +276,9 @@ class ImapConnection {
         if (capabilities.contains(ImapConstants.STARTTLS)) {
             mCapabilities |= CAPABILITY_STARTTLS;
         }
+        if (capabilities.contains(ImapConstants.IDLE)) {
+            mCapabilities |= CAPABILITY_IDLE;
+        }
     }
 
     /**
@@ -247,6 +291,7 @@ class ImapConnection {
     private void createParser() {
         destroyResponses();
         mParser = new ImapResponseParser(mTransport.getInputStream(), mDiscourse);
+        mParser.setTag(mTransportTag);
     }
 
     void destroyResponses() {
@@ -273,6 +318,12 @@ class ImapConnection {
      */
     String sendCommand(String command, boolean sensitive)
             throws MessagingException, IOException {
+        // Don't allow any command other than DONE when idling
+        if (mIdling && !command.equals(ImapConstants.DONE)) {
+            return null;
+        }
+        mIdling = command.equals(ImapConstants.IDLE);
+
         LogUtils.d(Logging.LOG_TAG, "sendCommand %s", (sensitive ? IMAP_REDACTED_LOG : command));
         open();
         return sendCommandInternal(command, sensitive);
@@ -284,7 +335,13 @@ class ImapConnection {
             throw new IOException("Null transport");
         }
         String tag = Integer.toString(mNextCommandTag.incrementAndGet());
-        String commandToSend = tag + " " + command;
+        final String commandToSend;
+        if (command.equals(ImapConstants.DONE)) {
+            // Do not send a tag for DONE command
+            commandToSend = command;
+        } else {
+            commandToSend = tag + " " + command;
+        }
         mTransport.writeLine(commandToSend, sensitive ? IMAP_REDACTED_LOG : null);
         mDiscourse.addSentCommand(sensitive ? IMAP_REDACTED_LOG : commandToSend);
         return tag;
@@ -327,6 +384,11 @@ class ImapConnection {
         return executeSimpleCommand(command, false);
     }
 
+    List<ImapResponse> executeIdleCommand() throws IOException, MessagingException {
+        mParser.expectIdlingResponse();
+        return executeSimpleCommand(ImapConstants.IDLE, false);
+    }
+
     /**
      * Read and return all of the responses from the most recent command sent to the server
      *
@@ -336,13 +398,36 @@ class ImapConnection {
      */
     List<ImapResponse> getCommandResponses() throws IOException, MessagingException {
         final List<ImapResponse> responses = new ArrayList<ImapResponse>();
-        ImapResponse response;
-        do {
-            response = mParser.readResponse();
-            responses.add(response);
-        } while (!response.isTagged());
+        final ImapResponseParser parser = mParser; // might get reset during idling
+        ImapResponse response = null;
+        boolean idling = false;
+        boolean throwSocketTimeoutEx = true;
+        final int lastSocketTimeout = getReadTimeout();
+        try {
+            do {
+                response = parser.readResponse();
+                if (idling) {
+                    setReadTimeout(IDLE_OP_READ_TIMEOUT);
+                    throwSocketTimeoutEx = false;
+                }
+                responses.add(response);
+                if (response.isIdling()) {
+                    idling = true;
+                }
+            } while (idling || !response.isTagged());
+        } catch (SocketTimeoutException ex) {
+            if (throwSocketTimeoutEx) {
+                throw ex;
+            }
+        } finally {
+            parser.resetIdlingStatus();
+            if (lastSocketTimeout != getReadTimeout()) {
+                setReadTimeout(lastSocketTimeout);
+            }
+        }
 
-        if (!response.isOk()) {
+        // When idling, any response is valid; otherwise it must be OK
+        if (!response.isOk() && !idling) {
             final String toString = response.toString();
             final String status = response.getStatusOrEmpty().getString();
             final String alert = response.getAlertTextOrEmpty().getString();
diff --git a/provider_src/com/android/email/mail/store/ImapFolder.java b/provider_src/com/android/email/mail/store/ImapFolder.java
index 3a9081131..fb18b189a 100644
--- a/provider_src/com/android/email/mail/store/ImapFolder.java
+++ b/provider_src/com/android/email/mail/store/ImapFolder.java
@@ -46,12 +46,15 @@ import com.android.emailcommon.mail.MessagingException;
 import com.android.emailcommon.mail.Part;
 import com.android.emailcommon.provider.Mailbox;
 import com.android.emailcommon.service.SearchParams;
+import com.android.emailcommon.service.SyncSize;
 import com.android.emailcommon.utility.CountingOutputStream;
 import com.android.emailcommon.utility.EOLConvertingOutputStream;
 import com.android.emailcommon.utility.Utility;
 import com.android.mail.utils.LogUtils;
 import com.google.common.annotations.VisibleForTesting;
 
+import static com.android.emailcommon.Logging.LOG_TAG;
+
 import org.apache.commons.io.IOUtils;
 
 import java.io.File;
@@ -60,6 +63,7 @@ import java.io.FileOutputStream;
 import java.io.IOException;
 import java.io.InputStream;
 import java.io.OutputStream;
+import java.net.SocketTimeoutException;
 import java.text.SimpleDateFormat;
 import java.util.ArrayList;
 import java.util.Arrays;
@@ -68,13 +72,43 @@ import java.util.HashMap;
 import java.util.LinkedHashSet;
 import java.util.List;
 import java.util.Locale;
+import java.util.Map;
 import java.util.TimeZone;
 
-class ImapFolder extends Folder {
+public class ImapFolder extends Folder {
     private final static Flag[] PERMANENT_FLAGS =
         { Flag.DELETED, Flag.SEEN, Flag.FLAGGED, Flag.ANSWERED };
     private static final int COPY_BUFFER_SIZE = 16*1024;
 
+    public interface IdleCallback {
+        /**
+         * Invoked when the connection enters idle mode
+         */
+        public void onIdled();
+        /**
+         * Invoked when idle state is left
+         */
+        public void onIdlingDone();
+        /**
+         * Invoked when a new change is communicated by the server.
+         *
+         * @param needSync whether a sync is required
+         * @param fetchMessages list of message UIDs to update
+         */
+        public void onNewServerChange(boolean needSync, List<String> fetchMessages);
+        /**
+         * Connection to socket timed out. The idle connection needs
+         * to be considered broken when this is called.
+         */
+        public void onTimeout();
+        /**
+         * Something went wrong while waiting for push data.
+         *
+         * @param ex the exception detected
+         */
+        public void onException(MessagingException ex);
+    }
+
     private final ImapStore mStore;
     private final String mName;
     private int mMessageCount = -1;
@@ -86,6 +120,22 @@ class ImapFolder extends Folder {
     /** A set of hashes that can be used to track dirtiness */
     Object mHash[];
 
+    private final Object mIdleSync = new Object();
+    private boolean mIdling;
+    private boolean mIdlingCancelled;
+    private boolean mDiscardIdlingConnection;
+    private Thread mIdleReader;
+
+    private static final String[] IDLE_STATUSES = {
+        ImapConstants.UIDVALIDITY, ImapConstants.UIDNEXT
+    };
+    private Map<String, String> mIdleStatuses = new HashMap<>();
+
+    private static class ImapIdleChanges {
+        public boolean mRequiredSync = false;
+        public ArrayList<String> mMessageToFetch = new ArrayList<>();
+    }
+
     /*package*/ ImapFolder(ImapStore store, String name) {
         mStore = store;
         mName = name;
@@ -132,6 +182,7 @@ class ImapFolder extends Folder {
             // * OK [UIDNEXT 57576] Predicted next UID
             // 2 OK [READ-WRITE] Select completed.
             try {
+                mConnection.setTransportTag(mName + "-" + hashCode());
                 doSelect();
             } catch (IOException ioe) {
                 throw ioExceptionHandler(mConnection, ioe);
@@ -176,6 +227,196 @@ class ImapFolder extends Folder {
         return mName;
     }
 
+    public void startIdling(final IdleCallback callback) throws MessagingException {
+        LogUtils.d(LOG_TAG, "startIdling on folder " + mName);
+        checkOpen();
+        synchronized (mIdleSync) {
+            if (mIdling) {
+                throw new MessagingException("Folder " + mName + " is in IDLE state already.");
+            }
+            mIdling = true;
+            mIdlingCancelled = false;
+            mDiscardIdlingConnection = false;
+        }
+
+        final ImapConnection connection;
+        synchronized (this) {
+            connection = mConnection;
+        }
+
+        // Run idle in background
+        mIdleReader = new Thread() {
+            @Override
+            public void run() {
+                try {
+                    // Get some info before start idling
+                    mIdleStatuses = getStatuses(IDLE_STATUSES);
+
+                    // We setup the max time specified in RFC 2177 to re-issue
+                    // an idle request to the server
+                    connection.setReadTimeout(ImapConnection.PING_IDLE_TIMEOUT);
+                    connection.destroyResponses();
+
+                    // Enter now in idle status (we hold a connection with
+                    // the server to listen for new changes)
+                    synchronized (mIdleSync) {
+                        if (mIdlingCancelled) {
+                            mIdling = false;
+                            return;
+                        }
+                    }
+
+                    if (callback != null) {
+                        callback.onIdled();
+                    }
+                    List<ImapResponse> responses = connection.executeIdleCommand();
+
+                    // Check whether IDLE was successful (first response is an idling response)
+                    if (responses.isEmpty() || (mIdling && !responses.get(0).isIdling())) {
+                        if (callback != null) {
+                            callback.onException(new MessagingException(
+                                            MessagingException.SERVER_ERROR, "Cannot idle"));
+                        }
+                        synchronized (mIdleSync) {
+                            mIdling = false;
+                        }
+                        return;
+                    }
+
+                    // Exit idle if we are still in that state
+                    boolean cancelled = false;
+                    boolean discardConnection = false;
+                    synchronized (mIdleSync) {
+                        if (!mIdlingCancelled) {
+                            try {
+                                connection.setReadTimeout(ImapConnection.DONE_TIMEOUT);
+                                connection.executeSimpleCommand(ImapConstants.DONE);
+                            } catch (MessagingException me) {
+                                // Ignore this exception caused by messages in the queue
+                            }
+                        }
+
+                        cancelled = mIdlingCancelled;
+                        discardConnection = mDiscardIdlingConnection;
+                    }
+
+                    if (!cancelled && callback != null) {
+                        // Notify that new changes exists in the server. Remove
+                        // the idling status response since is only relevant for the protocol
+                        // We have to enter in idle
+                        ImapIdleChanges changes = extractImapChanges(
+                                new ArrayList<Object>(responses.subList(1, responses.size())));
+                        callback.onNewServerChange(changes.mRequiredSync, changes.mMessageToFetch);
+                    }
+
+                    if (discardConnection) {
+                        // Return the connection to the pool
+                        cleanupConnection(connection, false);
+                    }
+
+                    synchronized (mIdleSync) {
+                        mIdling = false;
+                    }
+
+                    if (callback != null) {
+                        callback.onIdlingDone();
+                    }
+                } catch (MessagingException me) {
+                    cleanupConnection(connection, false);
+                    synchronized (mIdleSync) {
+                        mIdling = false;
+                    }
+                    if (callback != null) {
+                        callback.onException(me);
+                    }
+
+                } catch (SocketTimeoutException ste) {
+                    cleanupConnection(connection, false);
+                    synchronized (mIdleSync) {
+                        mIdling = false;
+                    }
+                    if (callback != null) {
+                        callback.onTimeout();
+                    }
+
+                } catch (IOException ioe) {
+                    synchronized (mIdleSync) {
+                        mIdling = false;
+                    }
+                    if (callback != null) {
+                        callback.onException(ioExceptionHandler(connection, ioe));
+                    } else {
+                        cleanupConnection(connection, false);
+                    }
+
+                }
+            }
+        };
+        mIdleReader.setName("IdleReader " + mStore.getAccount().mId + ":" + mName);
+        mIdleReader.start();
+    }
+
+    public void stopIdling(boolean discardConnection) throws MessagingException {
+        LogUtils.d(LOG_TAG, "stopIdling on folder " + mName);
+        if (!isOpen()) {
+            throw new MessagingException("Folder " + mName + " is not open.");
+        }
+
+        final ImapConnection connection;
+        synchronized (this) {
+            connection = mConnection;
+        }
+
+        synchronized (mIdleSync) {
+            if (!mIdling) {
+                throw new MessagingException("Folder " + mName + " isn't in IDLE state.");
+            }
+            try {
+                mIdlingCancelled = true;
+                mDiscardIdlingConnection = discardConnection;
+                // Send the DONE command to make the idle reader thread exit. Shorten
+                // the read timeout for doing that in order to not wait indefinitely,
+                // the server should respond to the DONE command quickly anyway
+                connection.sendCommand(ImapConstants.DONE, false);
+
+            } catch (MessagingException me) {
+                // Treat IOERROR messaging exception as IOException
+                if (me.getExceptionType() == MessagingException.IOERROR) {
+                    cleanupConnection(connection, false);
+                    throw me;
+                }
+
+            } catch (IOException ioe) {
+                throw ioExceptionHandler(mConnection, ioe);
+
+            }
+        }
+
+        // Try to join the thread, but make sure to not wait indefinitely. This should
+        // be the normal case (server sends the response to DONE quickly)
+        try {
+            mIdleReader.join(1000, 0);
+        } catch (InterruptedException e) {
+            // ignore
+        }
+        // In case the server didn't respond quickly, the connection is likely broken;
+        // close it (which definitely will cause the thread to return) and finally join the thread
+        if (mIdleReader.isAlive()) {
+            cleanupConnection(connection, true);
+            try {
+                mIdleReader.join();
+            } catch (InterruptedException e) {
+                // ignore
+            }
+        }
+    }
+
+    public boolean isIdling() {
+        synchronized (mIdleSync) {
+            return mIdling;
+        }
+    }
+
     @Override
     public boolean exists() throws MessagingException {
         if (mExists) {
@@ -346,7 +587,9 @@ class ImapFolder extends Folder {
 
     @Override
     public int getMessageCount() {
-        return mMessageCount;
+        synchronized (this) {
+            return mMessageCount;
+        }
     }
 
     @Override
@@ -373,6 +616,73 @@ class ImapFolder extends Folder {
         }
     }
 
+    public Map<String, String> getStatuses(String[] statuses) throws MessagingException {
+        checkOpen();
+        Map<String, String> allReturnStatuses = new HashMap<>();
+        try {
+            String flags = TextUtils.join(" ", statuses);
+            final List<ImapResponse> responses = mConnection.executeSimpleCommand(
+                    String.format(Locale.US,
+                            ImapConstants.STATUS + " \"%s\" (%s)",
+                            ImapStore.encodeFolderName(mName, mStore.mPathPrefix), flags));
+            // S: * STATUS mboxname (MESSAGES 231 UIDNEXT 44292)
+            for (ImapResponse response : responses) {
+                if (response.isDataResponse(0, ImapConstants.STATUS)) {
+                    ImapList list = response.getListOrEmpty(2);
+                    int count = list.size();
+                    for (int i = 0; i < count; i += 2) {
+                        String key = list.getStringOrEmpty(i).getString();
+                        String value = list.getStringOrEmpty(i + 1).getString();
+                        allReturnStatuses.put(key, value);
+                    }
+                }
+            }
+        } catch (IOException ioe) {
+            throw ioExceptionHandler(mConnection, ioe);
+        } finally {
+            destroyResponses();
+        }
+        return allReturnStatuses;
+    }
+
+    private void cleanupConnection(ImapConnection connection, boolean close) {
+        if (close) {
+            connection.close();
+        }
+        synchronized (this) {
+            if (connection == mConnection) {
+                if (close) {
+                    // To prevent close() from returning the connection to the pool
+                    mConnection = null;
+                }
+                close(false);
+            }
+        }
+    }
+
+    private List<String> getNewMessagesFromUid(String uid) throws MessagingException {
+        checkOpen();
+        List<String> nextMSNs = new ArrayList<>();
+        try {
+            final List<ImapResponse> responses = mConnection.executeSimpleCommand(
+                    ImapConstants.SEARCH + " " + ImapConstants.UID + " " + uid + ":*");
+            // S: * SEARCH 1 2 3
+            for (ImapResponse response : responses) {
+                if (response.isDataResponse(0, ImapConstants.SEARCH)) {
+                    int count = response.size();
+                    for (int i = 1; i < count; i++) {
+                        nextMSNs.add(response.getStringOrEmpty(i).getString());
+                    }
+                }
+            }
+        } catch (IOException ioe) {
+            throw ioExceptionHandler(mConnection, ioe);
+        } finally {
+            destroyResponses();
+        }
+        return nextMSNs;
+    }
+
     @Override
     public void delete(boolean recurse) {
         throw new Error("ImapStore.delete() not yet implemented");
@@ -557,7 +867,8 @@ class ImapFolder extends Folder {
     public Message[] getMessages(long startDate, long endDate, MessageRetrievalListener listener)
             throws MessagingException {
         String [] uids = null;
-        String command = generateDateRangeCommand(startDate, endDate, false);
+        String command = generateDateRangeCommand(startDate, endDate, false)
+                + " NOT DELETED";
         LogUtils.d(Logging.LOG_TAG, "getMessages dateRange " + command.toString());
 
         try {
@@ -570,7 +881,8 @@ class ImapFolder extends Folder {
             // See b/11183568
             LogUtils.d(Logging.LOG_TAG, e, "query failed %s, trying alternate",
                     command.toString());
-            command = generateDateRangeCommand(startDate, endDate, true);
+            command = generateDateRangeCommand(startDate, endDate, true)
+                    + " NOT DELETED";
             try {
                 uids = searchForUids(command, true);
             } catch (ImapException e2) {
@@ -638,6 +950,9 @@ class ImapFolder extends Folder {
          * BODY_SANE - UID FETCH (BODY.PEEK[]<0.N>) where N = max bytes returned
          * BODY      - UID FETCH (BODY.PEEK[])
          * Part      - UID FETCH (BODY.PEEK[ID]) where ID = mime part ID
+         * Part_SANE - UID FETCH (BODY.PEEK[ID]<0.N>) where ID = mime part ID
+         *                        and N = max bytes returned
+         *           - this is add for sync size.
          */
 
         final LinkedHashSet<String> fetchFields = new LinkedHashSet<String>();
@@ -670,8 +985,12 @@ class ImapFolder extends Folder {
             // TODO Why can a single part have more than one Id? And why should we only fetch
             // the first id if there are more than one?
             if (partIds != null) {
-                fetchFields.add(ImapConstants.FETCH_FIELD_BODY_PEEK_BARE
-                        + "[" + partIds[0] + "]");
+                String fetchFieldCommand = ImapConstants.FETCH_FIELD_BODY_PEEK_BARE
+                        + "[" + partIds[0] + "]";
+                if (fp.getAllowSyncSize() != SyncSize.SYNC_SIZE_ENTIRE_MAIL) {
+                    fetchFieldCommand = fetchFieldCommand + "<0." + fp.getAllowSyncSize() + ">";
+                }
+                fetchFields.add(fetchFieldCommand);
             }
         }
 
@@ -847,7 +1166,9 @@ class ImapFolder extends Folder {
      */
     private void handleUntaggedResponse(ImapResponse response) {
         if (response.isDataResponse(1, ImapConstants.EXISTS)) {
-            mMessageCount = response.getStringOrEmpty(0).getNumberOrZero();
+            synchronized (this) {
+                mMessageCount = response.getStringOrEmpty(0).getNumberOrZero();
+            }
         }
     }
 
@@ -858,6 +1179,7 @@ class ImapFolder extends Folder {
              * This is a multipart/*
              */
             MimeMultipart mp = new MimeMultipart();
+            int textplainIndex = -1;
             for (int i = 0, count = bs.size(); i < count; i++) {
                 ImapElement e = bs.getElementOrNone(i);
                 if (e.isList()) {
@@ -872,6 +1194,16 @@ class ImapFolder extends Folder {
                     } else {
                         parseBodyStructure(bs.getListOrEmpty(i), bp, id + "." + (i + 1));
                     }
+                    /**
+                     * If the MimeMultipart has the TEXT/HTML content and TEXT/PLAIN content,
+                     * we could only download the TEXT/HTML content to save data traffic.
+                     */
+                    if (bp.getMimeType().equals("text/plain")) {
+                        textplainIndex = i;
+                    } else if (textplainIndex != -1 && bp.getMimeType().equals("text/html")) {
+                        mp.removeBodyPart(textplainIndex);
+                    }
+
                     mp.addBodyPart(bp);
 
                 } else {
@@ -896,6 +1228,7 @@ class ImapFolder extends Folder {
              body description
              body encoding
              body size
+             body line
              */
 
             final ImapString type = bs.getStringOrEmpty(0);
@@ -1266,16 +1599,155 @@ class ImapFolder extends Folder {
 
     private MessagingException ioExceptionHandler(ImapConnection connection, IOException ioe) {
         if (DebugUtils.DEBUG) {
-            LogUtils.d(Logging.LOG_TAG, "IO Exception detected: ", ioe);
+            LogUtils.d(Logging.LOG_TAG, ioe, "IO Exception detected: ");
         }
-        connection.close();
-        if (connection == mConnection) {
-            mConnection = null; // To prevent close() from returning the connection to the pool.
-            close(false);
+        if (connection != null) {
+            cleanupConnection(connection, true);
         }
         return new MessagingException(MessagingException.IOERROR, "IO Error", ioe);
     }
 
+    private ImapIdleChanges extractImapChanges(List<Object> changes) throws MessagingException {
+        // Process the changes and fill the idle changes structure.
+        // Basically we should look for the next commands in this method:
+        //
+        //    OK DONE
+        //        No more changes
+        //    n EXISTS
+        //        Indicates the number of messages in the mailbox => handle like
+        //        RECENT if the number increased
+        //    n EXPUNGE
+        //        Indicates a message was completely deleted => a full sync is required
+        //    n RECENT
+        //        New messages waiting in the server => use UIDNEXT to search for the new messages.
+        //        If isn't possible to retrieve the new UID messages, then a full sync is required
+        //    n FETCH (UID X FLAGS (...))
+        //        a message has changed and requires to fetch only X message
+        //        (something change on that item). If UID is not present, a conversion
+        //        from MSN to UID is required
+
+        final ImapIdleChanges imapIdleChanges = new ImapIdleChanges();
+
+        int count = changes.size();
+        if (Logging.LOGD) {
+            for (int i = 0; i < count; i++) {
+                ImapResponse change = (ImapResponse) changes.get(i);
+                if (Logging.LOGD) {
+                    LogUtils.d(Logging.LOG_TAG, "Received: " + change.toString());
+                }
+            }
+        }
+
+        // We can't ask to the server, because the responses will be destroyed. We need
+        // to compute and fetch any related after we have all the responses processed
+        boolean hasNewMessages = false;
+        List<String> msns = new ArrayList<>();
+        for (int i = 0; i < count; i++) {
+            ImapResponse change = (ImapResponse) changes.get(i);
+            if (change.isOk() || change.isNo() || change.isBad()) {
+                // No more processing. DONE included
+                break;
+            }
+            try {
+                ImapElement element = change.getElementOrNone(1);
+                if (element.equals(ImapElement.NONE)) {
+                    continue;
+                }
+                if (!element.isString()) {
+                    continue;
+                }
+
+                ImapString op = (ImapString) element;
+                if (op.is(ImapConstants.DONE)) {
+                    break;
+                } else if (op.is(ImapConstants.EXISTS)) {
+                    int newMessageCount = change.getStringOrEmpty(0).getNumberOrZero();
+                    int oldMessageCount;
+                    synchronized (this) {
+                        oldMessageCount = mMessageCount;
+                        mMessageCount = newMessageCount;
+                    }
+                    if (Logging.LOGD) {
+                        LogUtils.d(LOG_TAG, "Got EXISTS idle response, message count now "
+                                + newMessageCount + ", was " + oldMessageCount);
+                    }
+                    if (newMessageCount > oldMessageCount) {
+                        hasNewMessages = true;
+                    }
+                } else if (op.is(ImapConstants.EXPUNGE)) {
+                    imapIdleChanges.mRequiredSync = true;
+                    synchronized (this) {
+                        mMessageCount--;
+                    }
+                } else if (op.is(ImapConstants.RECENT)) {
+                    hasNewMessages = true;
+                } else if (op.is(ImapConstants.FETCH)
+                        && change.getElementOrNone(2).isList()) {
+                    ImapList messageFlags = (ImapList) change.getElementOrNone(2);
+                    String uid = ((ImapString) messageFlags.getKeyedStringOrEmpty(
+                            ImapConstants.UID, true)).getString();
+                    if (!TextUtils.isEmpty(uid) &&
+                            !imapIdleChanges.mMessageToFetch.contains(uid)) {
+                        imapIdleChanges.mMessageToFetch.add(uid);
+                    } else {
+                        msns.add(change.getStringOrEmpty(0).getString());
+                    }
+                } else {
+                    if (Logging.LOGD) {
+                        LogUtils.w(LOG_TAG, "Unrecognized imap change (" + change
+                                + ") for mailbox " + mName);
+                    }
+                }
+
+            } catch (Exception ex) {
+                if (Logging.LOGD) {
+                    LogUtils.e(LOG_TAG, ex, "Failure processing imap change (" + change
+                            + ") for mailbox " + mName);
+                }
+            }
+        }
+
+        // Check whether UIDVALIDITY changed - if yes, a full sync request is required
+        // NOTE: This needs to happen after parsing all responses; otherwise
+        //       getStatuses will destroy the response
+        Map<String, String> statuses = getStatuses(new String[] { ImapConstants.UIDVALIDITY });
+        String oldUidValidity = mIdleStatuses.get(ImapConstants.UIDVALIDITY);
+        String newUidValidity = statuses.get(ImapConstants.UIDVALIDITY);
+        if (!TextUtils.equals(oldUidValidity, newUidValidity)) {
+            imapIdleChanges.mMessageToFetch.clear();
+            imapIdleChanges.mRequiredSync = true;
+            return imapIdleChanges;
+        }
+
+        // Recover the UIDs of new messages in case we don't do a full sync anyway
+        if (!imapIdleChanges.mRequiredSync) {
+            try {
+                // Retrieve new message UIDs
+                String uidNext = mIdleStatuses.get(ImapConstants.UIDNEXT);
+                if (hasNewMessages && !TextUtils.isEmpty(uidNext)) {
+                    msns.addAll(getNewMessagesFromUid(uidNext));
+                }
+
+                // Transform MSNs to UIDs
+                for (String msn : msns) {
+                    String[] uids = searchForUids(String.format(Locale.US, "%s:%s", msn, msn));
+                    if (uids.length > 0) {
+                        imapIdleChanges.mMessageToFetch.add(uids[0]);
+                    } else {
+                        throw new MessagingException("Server could not resolve MSN " + msn);
+                    }
+                }
+            } catch (MessagingException ex) {
+                // Server doesn't support UID. We have to do a full sync (since
+                // we don't know what message changed)
+                imapIdleChanges.mMessageToFetch.clear();
+                imapIdleChanges.mRequiredSync = true;
+            }
+        }
+
+        return imapIdleChanges;
+    }
+
     @Override
     public boolean equals(Object o) {
         if (o instanceof ImapFolder) {
diff --git a/provider_src/com/android/email/mail/store/ImapStore.java b/provider_src/com/android/email/mail/store/ImapStore.java
index 5fc83e001..6897a3115 100644
--- a/provider_src/com/android/email/mail/store/ImapStore.java
+++ b/provider_src/com/android/email/mail/store/ImapStore.java
@@ -458,15 +458,17 @@ public class ImapStore extends Store {
             // In order to properly map INBOX -> Inbox, handle it as a special case.
             final Mailbox inbox =
                     Mailbox.restoreMailboxOfType(mContext, mAccount.mId, Mailbox.TYPE_INBOX);
-            final ImapFolder newFolder = addMailbox(
-                    mContext, mAccount.mId, inbox.mServerId, '\0', true /*selectable*/, inbox);
-            mailboxes.put(ImapConstants.INBOX, newFolder);
-
+            if (inbox != null) {
+                final ImapFolder newFolder = addMailbox(
+                        mContext, mAccount.mId, inbox.mServerId, '\0', true /*selectable*/, inbox);
+                mailboxes.put(ImapConstants.INBOX, newFolder);
+            }
             createHierarchy(mailboxes);
             saveMailboxList(mContext, mailboxes);
             return mailboxes.values().toArray(new Folder[mailboxes.size()]);
         } catch (IOException ioe) {
             connection.close();
+            connection = null;
             throw new MessagingException("Unable to get folder list", ioe);
         } catch (AuthenticationFailedException afe) {
             // We do NOT want this connection pooled, or we will continue to send NOOP and SELECT
@@ -501,6 +503,14 @@ public class ImapStore extends Store {
             connection.destroyResponses();
         }
         bundle.putInt(EmailServiceProxy.VALIDATE_BUNDLE_RESULT_CODE, result);
+
+        // Shared capabilities (check EmailProxyServices for available shared capabilities)
+        int capabilities = 0;
+        if (connection.isCapable(ImapConnection.CAPABILITY_IDLE)) {
+            capabilities |= EmailServiceProxy.CAPABILITY_PUSH;
+        }
+        bundle.putInt(EmailServiceProxy.SETTINGS_BUNDLE_CAPABILITIES, capabilities);
+
         return bundle;
     }
 
@@ -556,6 +566,7 @@ public class ImapStore extends Store {
         while ((connection = mConnectionPool.poll()) != null) {
             try {
                 connection.setStore(this);
+                connection.setReadTimeout(MailTransport.SOCKET_READ_TIMEOUT);
                 connection.executeSimpleCommand(ImapConstants.NOOP);
                 break;
             } catch (MessagingException e) {
diff --git a/provider_src/com/android/email/mail/store/Pop3Store.java b/provider_src/com/android/email/mail/store/Pop3Store.java
index 4ea75ccf3..b0aa9a2eb 100644
--- a/provider_src/com/android/email/mail/store/Pop3Store.java
+++ b/provider_src/com/android/email/mail/store/Pop3Store.java
@@ -186,6 +186,10 @@ public class Pop3Store extends Store {
                         ioe.getMessage());
             }
             bundle.putInt(EmailServiceProxy.VALIDATE_BUNDLE_RESULT_CODE, result);
+
+            // No special capabilities
+            bundle.putInt(EmailServiceProxy.SETTINGS_BUNDLE_CAPABILITIES, 0);
+
             return bundle;
         }
 
diff --git a/provider_src/com/android/email/mail/store/imap/ImapConstants.java b/provider_src/com/android/email/mail/store/imap/ImapConstants.java
index 9f4d59290..9c94fcf31 100644
--- a/provider_src/com/android/email/mail/store/imap/ImapConstants.java
+++ b/provider_src/com/android/email/mail/store/imap/ImapConstants.java
@@ -46,6 +46,7 @@ public final class ImapConstants {
     public static final String COPYUID = "COPYUID";
     public static final String CREATE = "CREATE";
     public static final String DELETE = "DELETE";
+    public static final String DONE = "DONE";
     public static final String EXAMINE = "EXAMINE";
     public static final String EXISTS = "EXISTS";
     public static final String EXPUNGE = "EXPUNGE";
@@ -58,6 +59,8 @@ public final class ImapConstants {
     public static final String FLAGS = "FLAGS";
     public static final String FLAGS_SILENT = "FLAGS.SILENT";
     public static final String ID = "ID";
+    public static final String IDLE = "IDLE";
+    public static final String IDLING = "idling";
     public static final String INBOX = "INBOX";
     public static final String INTERNALDATE = "INTERNALDATE";
     public static final String LIST = "LIST";
@@ -73,6 +76,7 @@ public final class ImapConstants {
     public static final String PREAUTH = "PREAUTH";
     public static final String READ_ONLY = "READ-ONLY";
     public static final String READ_WRITE = "READ-WRITE";
+    public static final String RECENT = "RECENT";
     public static final String RENAME = "RENAME";
     public static final String RFC822_SIZE = "RFC822.SIZE";
     public static final String SEARCH = "SEARCH";
diff --git a/provider_src/com/android/email/mail/store/imap/ImapList.java b/provider_src/com/android/email/mail/store/imap/ImapList.java
index e28355989..43fd051ab 100644
--- a/provider_src/com/android/email/mail/store/imap/ImapList.java
+++ b/provider_src/com/android/email/mail/store/imap/ImapList.java
@@ -173,7 +173,7 @@ public class ImapList extends ImapElement {
             for (ImapElement e : mList) {
                 e.destroy();
             }
-            mList = null;
+            mList.clear();
         }
         super.destroy();
     }
diff --git a/provider_src/com/android/email/mail/store/imap/ImapResponse.java b/provider_src/com/android/email/mail/store/imap/ImapResponse.java
index 9f975f7bf..292ff92b2 100644
--- a/provider_src/com/android/email/mail/store/imap/ImapResponse.java
+++ b/provider_src/com/android/email/mail/store/imap/ImapResponse.java
@@ -76,6 +76,13 @@ public class ImapResponse extends ImapList {
         return is(0, ImapConstants.NO);
     }
 
+    /**
+     * @return whether it's an IDLE response.
+     */
+    public boolean isIdling() {
+        return is(0, ImapConstants.IDLING);
+    }
+
     /**
      * @return whether it's an {@code responseType} data response.  (i.e. not tagged).
      * @param index where {@code responseType} should appear.  e.g. 1 for "FETCH"
diff --git a/provider_src/com/android/email/mail/store/imap/ImapResponseParser.java b/provider_src/com/android/email/mail/store/imap/ImapResponseParser.java
index 8dd1cf610..fcedea1fc 100644
--- a/provider_src/com/android/email/mail/store/imap/ImapResponseParser.java
+++ b/provider_src/com/android/email/mail/store/imap/ImapResponseParser.java
@@ -66,6 +66,10 @@ public class ImapResponseParser {
      */
     private final ArrayList<ImapResponse> mResponsesToDestroy = new ArrayList<ImapResponse>();
 
+    private boolean mIdling;
+    private boolean mExpectIdlingResponse;
+    private String mTag;
+
     /**
      * Exception thrown when we receive BYE.  It derives from IOException, so it'll be treated
      * in the same way EOF does.
@@ -97,6 +101,10 @@ public class ImapResponseParser {
         mLiteralKeepInMemoryThreshold = literalKeepInMemoryThreshold;
     }
 
+    public void setTag(String tag) {
+        mTag = tag;
+    }
+
     private static IOException newEOSException() {
         final String message = "End of stream reached";
         if (DebugUtils.DEBUG) {
@@ -146,6 +154,13 @@ public class ImapResponseParser {
         mResponsesToDestroy.clear();
     }
 
+    private String getFormattedTag() {
+        if (mTag != null) {
+            return "(" + mTag + ") ";
+        }
+        return "";
+    }
+
     /**
      * Reads the next response available on the stream and returns an
      * {@link ImapResponse} object that represents it.
@@ -162,16 +177,23 @@ public class ImapResponseParser {
         try {
             response = parseResponse();
             if (DebugUtils.DEBUG) {
-                LogUtils.d(Logging.LOG_TAG, "<<< " + response.toString());
+                LogUtils.d(Logging.LOG_TAG, getFormattedTag() + "<<< " + response.toString());
             }
 
         } catch (RuntimeException e) {
             // Parser crash -- log network activities.
             onParseError(e);
+            mIdling = false;
             throw e;
         } catch (IOException e) {
             // Network error, or received an unexpected char.
-            onParseError(e);
+            // If we are idling don't parse the error, just let the upper layers
+            // handle the exception
+            if (!mIdling) {
+                onParseError(e);
+            } else {
+                mIdling = false;
+            }
             throw e;
         }
 
@@ -242,6 +264,14 @@ public class ImapResponseParser {
         return ret;
     }
 
+    public void resetIdlingStatus() {
+        mIdling = false;
+    }
+
+    public void expectIdlingResponse() {
+        mExpectIdlingResponse = true;
+    }
+
     /**
      * Parse and return the response line.
      */
@@ -263,11 +293,26 @@ public class ImapResponseParser {
                 responseToDestroy = new ImapResponse(null, true);
 
                 // If it's continuation request, we don't really care what's in it.
-                responseToDestroy.add(new ImapSimpleString(readUntilEol()));
+                // NOTE: specs say the server is supposed to respond to the IDLE command
+                // with a continuation request response. To simplify internal handling,
+                // we'll always construct same response (ignoring the server text response).
+                // Our implementation always returns "+ idling".
+                if (mExpectIdlingResponse) {
+                    // Discard the server message and put what we expected
+                    readUntilEol();
+                    responseToDestroy.add(new ImapSimpleString(ImapConstants.IDLING));
+                } else {
+                    responseToDestroy.add(new ImapSimpleString(readUntilEol()));
+                }
 
                 // Response has successfully been built.  Let's return it.
                 responseToReturn = responseToDestroy;
                 responseToDestroy = null;
+
+                mIdling = responseToReturn.isIdling();
+                if (mIdling) {
+                    mExpectIdlingResponse = true;
+                }
             } else {
                 // Status response or response data
                 final String tag;
diff --git a/provider_src/com/android/email/mail/transport/MailTransport.java b/provider_src/com/android/email/mail/transport/MailTransport.java
index 26801f93f..c9db45ba8 100644
--- a/provider_src/com/android/email/mail/transport/MailTransport.java
+++ b/provider_src/com/android/email/mail/transport/MailTransport.java
@@ -55,6 +55,7 @@ public class MailTransport {
             HttpsURLConnection.getDefaultHostnameVerifier();
 
     private final String mDebugLabel;
+    private String mDebugTag;
     private final Context mContext;
     protected final HostAuth mHostAuth;
 
@@ -69,6 +70,10 @@ public class MailTransport {
         mHostAuth = hostAuth;
     }
 
+    public void setTag(String tag) {
+        mDebugTag = tag;
+    }
+
    /**
      * Returns a new transport, using the current transport as a model. The new transport is
      * configured identically (as if {@link #setSecurity(int, boolean)}, {@link #setPort(int)}
@@ -191,6 +196,14 @@ public class MailTransport {
         }
     }
 
+    public int getReadTimeout() throws IOException {
+        return mSocket.getSoTimeout();
+    }
+
+    public void setReadTimeout(int timeout) throws IOException {
+        mSocket.setSoTimeout(timeout);
+    }
+
     /**
      * Lightweight version of SSLCertificateSocketFactory.verifyHostname, which provides this
      * service but is not in the public API.
@@ -284,16 +297,21 @@ public class MailTransport {
         return mOut;
     }
 
+    private String getFormattedDebugTag() {
+        if (mDebugTag != null) {
+            return "(" + mDebugTag + ") ";
+        }
+        return "";
+    }
+
     /**
      * Writes a single line to the server using \r\n termination.
      */
     public void writeLine(String s, String sensitiveReplacement) throws IOException {
         if (DebugUtils.DEBUG) {
-            if (sensitiveReplacement != null && !Logging.DEBUG_SENSITIVE) {
-                LogUtils.d(Logging.LOG_TAG, ">>> " + sensitiveReplacement);
-            } else {
-                LogUtils.d(Logging.LOG_TAG, ">>> " + s);
-            }
+            String output = sensitiveReplacement != null && !Logging.DEBUG_SENSITIVE
+                    ? sensitiveReplacement : s;
+            LogUtils.d(Logging.LOG_TAG, getFormattedDebugTag() + ">>> " + output);
         }
 
         OutputStream out = getOutputStream();
@@ -325,7 +343,7 @@ public class MailTransport {
         }
         String ret = sb.toString();
         if (loggable && DebugUtils.DEBUG) {
-            LogUtils.d(Logging.LOG_TAG, "<<< " + ret);
+            LogUtils.d(Logging.LOG_TAG, getFormattedDebugTag() + "<<< " + ret);
         }
         return ret;
     }
diff --git a/provider_src/com/android/email/provider/AccountReconciler.java b/provider_src/com/android/email/provider/AccountReconciler.java
index 8031f17c9..2761372b1 100644
--- a/provider_src/com/android/email/provider/AccountReconciler.java
+++ b/provider_src/com/android/email/provider/AccountReconciler.java
@@ -260,11 +260,11 @@ public class AccountReconciler {
                 final String protocol = EmailServiceUtils.getProtocolFromAccountType(
                         context, accountType);
                 final EmailServiceInfo info = EmailServiceUtils.getServiceInfo(context, protocol);
-                if (info == null || !info.syncCalendar) {
+                if (info != null && !info.syncCalendar) {
                     ContentResolver.setIsSyncable(accountManagerAccount,
                             CalendarContract.AUTHORITY, 0);
                 }
-                if (info == null || !info.syncContacts) {
+                if (info != null && !info.syncContacts) {
                     ContentResolver.setIsSyncable(accountManagerAccount,
                             ContactsContract.AUTHORITY, 0);
                 }
diff --git a/provider_src/com/android/email/provider/DBHelper.java b/provider_src/com/android/email/provider/DBHelper.java
index 490a7316a..42443fbd8 100644
--- a/provider_src/com/android/email/provider/DBHelper.java
+++ b/provider_src/com/android/email/provider/DBHelper.java
@@ -48,6 +48,7 @@ import com.android.emailcommon.provider.EmailContent.Message;
 import com.android.emailcommon.provider.EmailContent.MessageColumns;
 import com.android.emailcommon.provider.EmailContent.PolicyColumns;
 import com.android.emailcommon.provider.EmailContent.QuickResponseColumns;
+import com.android.emailcommon.provider.EmailContent.SuggestedContactColumns;
 import com.android.emailcommon.provider.EmailContent.SyncColumns;
 import com.android.emailcommon.provider.HostAuth;
 import com.android.emailcommon.provider.Mailbox;
@@ -56,7 +57,10 @@ import com.android.emailcommon.provider.MessageMove;
 import com.android.emailcommon.provider.MessageStateChange;
 import com.android.emailcommon.provider.Policy;
 import com.android.emailcommon.provider.QuickResponse;
+import com.android.emailcommon.provider.SuggestedContact;
+import com.android.emailcommon.service.EmailServiceProxy;
 import com.android.emailcommon.service.LegacyPolicySet;
+import com.android.emailcommon.service.SyncSize;
 import com.android.emailcommon.service.SyncWindow;
 import com.android.mail.providers.UIProvider;
 import com.android.mail.utils.LogUtils;
@@ -201,6 +205,11 @@ public final class DBHelper {
     // Version 101: Move body contents to external files
     public static final int BODY_DATABASE_VERSION = 101;
 
+    // Any changes to the database format *must* include update-in-place code.
+    // Original version: 1
+    // Version 1: Suggested contacts
+    public static final int EXTRAS_DATABASE_VERSION = 1;
+
     /*
      * Internal helper method for index creation.
      * Example:
@@ -519,7 +528,7 @@ public final class DBHelper {
             + AccountColumns.SIGNATURE + " text, "
             + AccountColumns.POLICY_KEY + " integer, "
             + AccountColumns.MAX_ATTACHMENT_SIZE + " integer, "
-            + AccountColumns.PING_DURATION + " integer"
+            + AccountColumns.PING_DURATION + " integer, "
             + AccountColumns.SET_SYNC_SIZE_ENABLED + " integer, "
             + AccountColumns.SYNC_SIZE + " integer, "
             + AccountColumns.AUTO_FETCH_ATTACHMENTS + " integer, "
@@ -692,6 +701,24 @@ public final class DBHelper {
         db.execSQL(createIndex(Body.TABLE_NAME, BodyColumns.MESSAGE_KEY));
     }
 
+    private static void createSuggestedContactTable(SQLiteDatabase db) {
+        String s = " (" + SuggestedContactColumns._ID + " integer primary key autoincrement, "
+            + SuggestedContactColumns.ACCOUNT_KEY + " integer, "
+            + SuggestedContactColumns.ADDRESS + " text, "
+            + SuggestedContactColumns.NAME + " text, "
+            + SuggestedContactColumns.DISPLAY_NAME + " text, "
+            + SuggestedContactColumns.LAST_SEEN + " integer"
+            + ");";
+        db.execSQL("create table " + SuggestedContact.TABLE_NAME + s);
+
+        // Create a unique index for account-address
+        String indexDDL = "create unique index " + SuggestedContact.TABLE_NAME.toLowerCase()
+                + "_account_address" + " on " + SuggestedContact.TABLE_NAME
+                + " (" + SuggestedContactColumns.ACCOUNT_KEY + ", "
+                + SuggestedContactColumns.ADDRESS + ");";
+        db.execSQL(indexDDL);
+    }
+
     private static void upgradeBodyToVersion5(final SQLiteDatabase db) {
         try {
             db.execSQL("drop table " + Body.TABLE_NAME);
@@ -830,6 +857,29 @@ public final class DBHelper {
         }
     }
 
+    protected static class ExtrasDatabaseHelper extends SQLiteOpenHelper {
+        final Context mContext;
+
+        ExtrasDatabaseHelper(Context context, String name) {
+            super(context, name, null, EXTRAS_DATABASE_VERSION);
+            mContext = context;
+        }
+
+        @Override
+        public void onCreate(SQLiteDatabase db) {
+            LogUtils.d(TAG, "Creating EmailProviderExtras database");
+            createSuggestedContactTable(db);
+        }
+
+        @Override
+        public void onUpgrade(final SQLiteDatabase db, final int oldVersion, final int newVersion) {
+        }
+
+        @Override
+        public void onOpen(SQLiteDatabase db) {
+        }
+    }
+
     /** Counts the number of messages in each mailbox, and updates the message count column. */
     @VisibleForTesting
     static void recalculateMessageCount(SQLiteDatabase db) {
@@ -875,6 +925,9 @@ public final class DBHelper {
         @Override
         @SuppressWarnings("deprecation")
         public void onUpgrade(SQLiteDatabase db, int oldVersion, int newVersion) {
+
+            boolean fromCM11 = false;
+
             // For versions prior to 5, delete all data
             // Versions >= 5 require that data be preserved!
             if (oldVersion < 5) {
@@ -1460,7 +1513,11 @@ public final class DBHelper {
                 }
             }
 
-            if (oldVersion <= 124) {
+            if (oldVersion == 126) {
+                fromCM11 = true;
+            }
+
+            if (oldVersion <= 124 || fromCM11) {
                 createCredentialsTable(db);
                 // Add the credentialKey column, and set it to -1 for all pre-existing hostAuths.
                 db.execSQL("alter table " + HostAuth.TABLE_NAME
@@ -1469,14 +1526,15 @@ public final class DBHelper {
                         + HostAuthColumns.CREDENTIAL_KEY + "=-1");
             }
 
-            if (oldVersion <= 125) {
+            if (oldVersion <= 125 || fromCM11) {
                 upgradeFromVersion125ToVersion126(db);
             }
 
-            if (oldVersion <= 126) {
+            if (oldVersion <= 126 || fromCM11) {
                 upgradeFromVersion126ToVersion127(mContext, db);
             }
-            if (oldVersion <= 128) {
+
+            if (oldVersion <= 128 && !fromCM11) {
                 try {
                     db.execSQL("alter table " + Account.TABLE_NAME
                             + " add column " + AccountColumns.AUTO_FETCH_ATTACHMENTS
@@ -1520,7 +1578,6 @@ public final class DBHelper {
                             + " add column " + AccountColumns.CAPABILITIES
                             + " integer" + " default 0;");
 
-/* From old email app. We don't have EmailServiceProxy, so leave the default.
                     // Update all accounts with the appropriate capabilities
                     Cursor c = db.rawQuery("select " + Account.TABLE_NAME + "."
                             + AccountColumns._ID + ", " + HostAuth.TABLE_NAME + "."
@@ -1553,7 +1610,6 @@ public final class DBHelper {
                             c.close();
                         }
                     }
-*/
                 } catch (final SQLException e) {
                     // Shouldn't be needed unless we're debugging and interrupt the process
                     LogUtils.w(TAG, "Exception upgrading EmailProvider.db from v129 to v130", e);
@@ -1562,31 +1618,17 @@ public final class DBHelper {
 
             if (oldVersion <= 131) {
                 try {
-/* From old email app. We don't have SyncSize so hard-code the defaults
                     db.execSQL("alter table " + Account.TABLE_NAME
                             + " add column " + AccountColumns.SET_SYNC_SIZE_ENABLED + " integer"
                             + " default " + SyncSize.ENABLED_DEFAULT_VALUE + ";");
                     db.execSQL("alter table " + Account.TABLE_NAME
                             + " add column " + AccountColumns.SYNC_SIZE + " integer"
                             + " default " + SyncSize.SYNC_SIZE_DEFAULT_VALUE + ";");
-*/
-                    db.execSQL("alter table " + Account.TABLE_NAME
-                            + " add column " + AccountColumns.SET_SYNC_SIZE_ENABLED + " integer"
-                            + " default " + 1 + ";");
-                    db.execSQL("alter table " + Account.TABLE_NAME
-                            + " add column " + AccountColumns.SYNC_SIZE + " integer"
-                            + " default " + 204800 + ";");
                 } catch (SQLException e) {
                     // Shouldn't be needed unless we're debugging and interrupt the process
                     LogUtils.w(TAG, "Exception upgrading EmailProvider.db from 130 to 131", e);
                 }
             }
-
-            // Due to a bug in commit 44a064e5f16ddaac25f2acfc03c118f65bc48aec,
-            // AUTO_FETCH_ATTACHMENTS column could not be available in the Account table.
-            // Since cm12 and up doesn't use this column, we are leave as is it. In case
-            // the feature were added, then we need to create a new exception to ensure
-            // that the columns is re-added.
         }
 
         @Override
diff --git a/provider_src/com/android/email/provider/EmailProvider.java b/provider_src/com/android/email/provider/EmailProvider.java
index 4bd9d4d19..96a475f04 100644
--- a/provider_src/com/android/email/provider/EmailProvider.java
+++ b/provider_src/com/android/email/provider/EmailProvider.java
@@ -18,6 +18,7 @@ package com.android.email.provider;
 
 import android.accounts.AccountManager;
 import android.appwidget.AppWidgetManager;
+import android.content.AsyncQueryHandler;
 import android.content.ComponentCallbacks;
 import android.content.ComponentName;
 import android.content.ContentProvider;
@@ -42,6 +43,7 @@ import android.database.CursorWrapper;
 import android.database.DatabaseUtils;
 import android.database.MatrixCursor;
 import android.database.MergeCursor;
+import android.database.SQLException;
 import android.database.sqlite.SQLiteDatabase;
 import android.database.sqlite.SQLiteException;
 import android.database.sqlite.SQLiteStatement;
@@ -100,6 +102,7 @@ import com.android.emailcommon.provider.MessageMove;
 import com.android.emailcommon.provider.MessageStateChange;
 import com.android.emailcommon.provider.Policy;
 import com.android.emailcommon.provider.QuickResponse;
+import com.android.emailcommon.provider.SuggestedContact;
 import com.android.emailcommon.service.EmailServiceProxy;
 import com.android.emailcommon.service.EmailServiceStatus;
 import com.android.emailcommon.service.IEmailService;
@@ -162,6 +165,7 @@ public class EmailProvider extends ContentProvider
     // exposed for testing
     public static final String DATABASE_NAME = "EmailProvider.db";
     public static final String BODY_DATABASE_NAME = "EmailProviderBody.db";
+    public static final String EXTRAS_DATABASE_NAME = "EmailProviderExtras.db";
 
     // We don't back up to the backup database anymore, just keep this constant here so we can
     // delete the old backups and trigger a new backup to the account manager
@@ -186,11 +190,11 @@ public class EmailProvider extends ContentProvider
         "vnd.android.cursor.item/email-attachment";
 
     /** Appended to the notification URI for delete operations */
-    private static final String NOTIFICATION_OP_DELETE = "delete";
+    public static final String NOTIFICATION_OP_DELETE = "delete";
     /** Appended to the notification URI for insert operations */
-    private static final String NOTIFICATION_OP_INSERT = "insert";
+    public static final String NOTIFICATION_OP_INSERT = "insert";
     /** Appended to the notification URI for update operations */
-    private static final String NOTIFICATION_OP_UPDATE = "update";
+    public static final String NOTIFICATION_OP_UPDATE = "update";
 
     /** The query string to trigger a folder refresh. */
     protected static String QUERY_UIREFRESH = "uirefresh";
@@ -276,6 +280,7 @@ public class EmailProvider extends ContentProvider
     private static final int UI_PURGE_FOLDER = UI_BASE + 20;
     private static final int UI_INBOX = UI_BASE + 21;
     private static final int UI_ACCTSETTINGS = UI_BASE + 22;
+    private static final int UI_MESSAGE_LOAD_MORE = UI_BASE + 23;
 
     private static final int BODY_BASE = 0xA000;
     private static final int BODY = BODY_BASE;
@@ -287,11 +292,15 @@ public class EmailProvider extends ContentProvider
     private static final int CREDENTIAL = CREDENTIAL_BASE;
     private static final int CREDENTIAL_ID = CREDENTIAL_BASE + 1;
 
+    private static final int SUGGESTED_CONTACT_BASE = 0xC000;
+    private static final int SUGGESTED_CONTACT= SUGGESTED_CONTACT_BASE;
+    private static final int SUGGESTED_CONTACT_ID = SUGGESTED_CONTACT_BASE + 1;
+
     private static final int BASE_SHIFT = 12;  // 12 bits to the base type: 0, 0x1000, 0x2000, etc.
 
     private static final SparseArray<String> TABLE_NAMES;
     static {
-        SparseArray<String> array = new SparseArray<String>(11);
+        SparseArray<String> array = new SparseArray<String>(12);
         array.put(ACCOUNT_BASE >> BASE_SHIFT, Account.TABLE_NAME);
         array.put(MAILBOX_BASE >> BASE_SHIFT, Mailbox.TABLE_NAME);
         array.put(MESSAGE_BASE >> BASE_SHIFT, Message.TABLE_NAME);
@@ -304,6 +313,7 @@ public class EmailProvider extends ContentProvider
         array.put(UI_BASE >> BASE_SHIFT, null);
         array.put(BODY_BASE >> BASE_SHIFT, Body.TABLE_NAME);
         array.put(CREDENTIAL_BASE >> BASE_SHIFT, Credential.TABLE_NAME);
+        array.put(SUGGESTED_CONTACT_BASE >> BASE_SHIFT, SuggestedContact.TABLE_NAME);
         TABLE_NAMES = array;
     }
 
@@ -384,6 +394,7 @@ public class EmailProvider extends ContentProvider
 
     private SQLiteDatabase mDatabase;
     private SQLiteDatabase mBodyDatabase;
+    private SQLiteDatabase mExtrasDatabase;
 
     private Handler mDelayedSyncHandler;
     private final Set<SyncRequestMessage> mDelayedSyncRequests = new HashSet<SyncRequestMessage>();
@@ -494,6 +505,13 @@ public class EmailProvider extends ContentProvider
                 String bodyFileName = mBodyDatabase.getPath();
                 mDatabase.execSQL("attach \"" + bodyFileName + "\" as BodyDatabase");
             }
+            DBHelper.ExtrasDatabaseHelper extrasHelper =
+                    new DBHelper.ExtrasDatabaseHelper(context, EXTRAS_DATABASE_NAME);
+            mExtrasDatabase = extrasHelper.getWritableDatabase();
+            if (mExtrasDatabase != null) {
+                String extrasFileName = mExtrasDatabase.getPath();
+                mDatabase.execSQL("attach \"" + extrasFileName + "\" as ExtrasDatabase");
+            }
 
             // Restore accounts if the database is corrupted...
             restoreIfNeeded(context, mDatabase);
@@ -575,6 +593,10 @@ public class EmailProvider extends ContentProvider
             mBodyDatabase.close();
             mBodyDatabase = null;
         }
+        if (mExtrasDatabase != null) {
+            mExtrasDatabase.close();
+            mExtrasDatabase = null;
+        }
     }
 
     // exposed for testing
@@ -706,6 +728,7 @@ public class EmailProvider extends ContentProvider
                 case POLICY_ID:
                 case QUICK_RESPONSE_ID:
                 case CREDENTIAL_ID:
+                case SUGGESTED_CONTACT_ID:
                     id = uri.getPathSegments().get(1);
                     if (match == SYNCED_MESSAGE_ID) {
                         // For synced messages, first copy the old message to the deleted table and
@@ -727,6 +750,11 @@ public class EmailProvider extends ContentProvider
                     if (match == ACCOUNT_ID) {
                         notifyUI(UIPROVIDER_ACCOUNT_NOTIFIER, id);
                         notifyUI(UIPROVIDER_ALL_ACCOUNTS_NOTIFIER, null);
+
+                        // Delete account suggested contacts
+                        db.delete(SuggestedContact.TABLE_NAME,
+                                SuggestedContact.ACCOUNT_KEY + " = ?", new String[]{id});
+
                     } else if (match == MAILBOX_ID) {
                         notifyUIFolder(id, accountId);
                     } else if (match == ATTACHMENT_ID) {
@@ -750,7 +778,13 @@ public class EmailProvider extends ContentProvider
                 case ACCOUNT:
                 case HOSTAUTH:
                 case POLICY:
+                case SUGGESTED_CONTACT:
                     result = db.delete(tableName, selection, selectionArgs);
+                    if (match == ACCOUNT) {
+                        // TODO extract account deleted
+                        // As a fallback clean all suggested contacts
+                        db.delete(SuggestedContact.TABLE_NAME, null, null);
+                    }
                     break;
                 case MESSAGE_MOVE:
                     db.delete(MessageMove.TABLE_NAME, selection, selectionArgs);
@@ -801,6 +835,7 @@ public class EmailProvider extends ContentProvider
 
         // Notify all notifier cursors
         sendNotifierChange(getBaseNotificationUri(match), NOTIFICATION_OP_DELETE, id);
+        sendSyncSettingChanged(getBaseSyncSettingChangedUri(match), NOTIFICATION_OP_DELETE, id);
 
         // Notify all email content cursors
         notifyUI(EmailContent.CONTENT_URI, null);
@@ -849,6 +884,10 @@ public class EmailProvider extends ContentProvider
                 return "vnd.android.cursor.dir/email-hostauth";
             case HOSTAUTH_ID:
                 return "vnd.android.cursor.item/email-hostauth";
+            case SUGGESTED_CONTACT:
+                return "vnd.android.cursor.item/email-suggested-contact";
+            case SUGGESTED_CONTACT_ID:
+                return "vnd.android.cursor.dir/email-suggested-contact";
             case ATTACHMENTS_CACHED_FILE_ACCESS: {
                 SQLiteDatabase db = getDatabase(getContext());
                 Cursor c = db.query(Attachment.TABLE_NAME, MIME_TYPE_PROJECTION,
@@ -887,7 +926,7 @@ public class EmailProvider extends ContentProvider
     private static Uri UIPROVIDER_RECENT_FOLDERS_NOTIFIER;
 
     @Override
-    public Uri insert(Uri uri, ContentValues values) {
+    public Uri insert(Uri uri, final ContentValues values) {
         Log.d(TAG, "Insert: " + uri);
         final int match = findMatch(uri, "insert");
         final Context context = getContext();
@@ -935,6 +974,20 @@ public class EmailProvider extends ContentProvider
                 case DELETED_MESSAGE:
                 case MESSAGE:
                     decodeEmailAddresses(values);
+
+                    // Update the suggested contacts of this email in the background
+                    if (!MailPrefs.get(context).getSuggestedContactMode().equals(
+                            MailPrefs.SuggestedContactsMode.NONE)) {
+                        new Thread(new Runnable() {
+                            @Override
+                            public void run() {
+                                if(match == MESSAGE) {
+                                    addOrUpdateSuggestedContactsFromHeaders(values);
+                                }
+                            }
+                        }).start();
+                    }
+
                 case ATTACHMENT:
                 case MAILBOX:
                 case ACCOUNT:
@@ -1025,6 +1078,7 @@ public class EmailProvider extends ContentProvider
 
         // Notify all notifier cursors
         sendNotifierChange(getBaseNotificationUri(match), NOTIFICATION_OP_INSERT, id);
+        sendSyncSettingChanged(getBaseSyncSettingChangedUri(match), NOTIFICATION_OP_INSERT, id);
 
         // Notify all existing cursors.
         notifyUI(EmailContent.CONTENT_URI, null);
@@ -1233,14 +1287,21 @@ public class EmailProvider extends ContentProvider
             sURIMatcher.addURI(EmailContent.AUTHORITY, "pickSentFolder/#",
                     ACCOUNT_PICK_SENT_FOLDER);
             sURIMatcher.addURI(EmailContent.AUTHORITY, "uipurgefolder/#", UI_PURGE_FOLDER);
+            sURIMatcher.addURI(EmailContent.AUTHORITY, "uimessageloadmore/#",
+                    UI_MESSAGE_LOAD_MORE);
+
+            // Suggested Contact
+            sURIMatcher.addURI(EmailContent.AUTHORITY, "suggestedcontact", SUGGESTED_CONTACT);
+            sURIMatcher.addURI(EmailContent.AUTHORITY, "suggestedcontact/#", SUGGESTED_CONTACT_ID);
         }
     }
 
     /**
-     * The idea here is that the two databases (EmailProvider.db and EmailProviderBody.db must
-     * always be in sync (i.e. there are two database or NO databases).  This code will delete
-     * any "orphan" database, so that both will be created together.  Note that an "orphan" database
-     * will exist after either of the individual databases is deleted due to data corruption.
+     * The idea here is that the three databases (EmailProvider.db, EmailProviderBody.db
+     * and EmailProviderExtras.db must always be in sync (i.e. there are three database or
+     * NO databases).  This code will delete any "orphan" database, so that both will be
+     * created together.  Note that an "orphan" database will exist after either of the individual
+     * databases is deleted due to data corruption.
      */
     public void checkDatabases() {
         synchronized (sDatabaseLock) {
@@ -1251,18 +1312,33 @@ public class EmailProvider extends ContentProvider
             if (mBodyDatabase != null) {
                 mBodyDatabase = null;
             }
+            if (mExtrasDatabase != null) {
+                mExtrasDatabase = null;
+            }
             // Look for orphans, and delete as necessary; these must always be in sync
             final File databaseFile = getContext().getDatabasePath(DATABASE_NAME);
             final File bodyFile = getContext().getDatabasePath(BODY_DATABASE_NAME);
+            final File extrasFile = getContext().getDatabasePath(BODY_DATABASE_NAME);
 
             // TODO Make sure attachments are deleted
-            if (databaseFile.exists() && !bodyFile.exists()) {
+            boolean mainDbExists = databaseFile.exists();
+            boolean bodyDbExists = bodyFile.exists();
+            boolean extrasDbExists = extrasFile.exists();
+            boolean extrasDbShouldExists = DBHelper.EXTRAS_DATABASE_VERSION <= 1;
+            if (mainDbExists && (!bodyDbExists || (!extrasDbExists && extrasDbShouldExists))) {
                 LogUtils.w(TAG, "Deleting orphaned EmailProvider database...");
                 getContext().deleteDatabase(DATABASE_NAME);
-            } else if (bodyFile.exists() && !databaseFile.exists()) {
+            }
+            if (bodyDbExists && (!mainDbExists || (!extrasDbExists && extrasDbShouldExists))) {
                 LogUtils.w(TAG, "Deleting orphaned EmailProviderBody database...");
                 getContext().deleteDatabase(BODY_DATABASE_NAME);
             }
+            if (extrasDbExists && (!mainDbExists || !bodyDbExists)) {
+                if (DBHelper.EXTRAS_DATABASE_VERSION > 1) {
+                    LogUtils.w(TAG, "Deleting orphaned EmailProviderExtras database...");
+                    getContext().deleteDatabase(EXTRAS_DATABASE_NAME);
+                }
+            }
         }
     }
 
@@ -1291,6 +1367,7 @@ public class EmailProvider extends ContentProvider
                     case HOSTAUTH_ID:
                     case CREDENTIAL_ID:
                     case POLICY_ID:
+                    case SUGGESTED_CONTACT_ID:
                         return new MatrixCursorWithCachedColumns(projection, 0);
                 }
             }
@@ -1353,6 +1430,9 @@ public class EmailProvider extends ContentProvider
                 case UI_FOLDER_REFRESH:
                     c = uiFolderRefresh(getMailbox(uri), 0);
                     return c;
+                case UI_MESSAGE_LOAD_MORE:
+                    c = uiMessageLoadMore(getMessageFromLastSegment(uri));
+                    return c;
                 case MAILBOX_NOTIFICATION:
                     c = notificationQuery(uri);
                     return c;
@@ -1464,6 +1544,15 @@ public class EmailProvider extends ContentProvider
                     id = uri.getPathSegments().get(2);
                     c = uiQuickResponseAccount(projection, id);
                     break;
+                case SUGGESTED_CONTACT:
+                    c = db.query(tableName, projection,
+                            selection, selectionArgs, null, null, sortOrder, limit);
+                    break;
+                case SUGGESTED_CONTACT_ID:
+                    id = uri.getPathSegments().get(1);
+                    c = db.query(tableName, projection, whereWithId(id, selection),
+                            selectionArgs, null, null, sortOrder, limit);
+                    break;
                 case ATTACHMENTS_CACHED_FILE_ACCESS:
                     if (projection == null) {
                         projection =
@@ -1738,6 +1827,8 @@ public class EmailProvider extends ContentProvider
                 extras.putBoolean(ContentResolver.SYNC_EXTRAS_DO_NOT_RETRY, true);
                 extras.putBoolean(ContentResolver.SYNC_EXTRAS_EXPEDITED, true);
                 ContentResolver.requestSync(amAccount, EmailContent.AUTHORITY, extras);
+                LogUtils.i(TAG, "requestSync EmailProvider restoreAccounts %s, %s",
+                        account.toString(), extras.toString());
                 restoredCount++;
             }
         }
@@ -1844,7 +1935,7 @@ public class EmailProvider extends ContentProvider
     private static final int INDEX_SYNC_KEY = 2;
 
     /**
-     * Restart push if we need it (currently only for Exchange accounts).
+     * Restart push if we need it.
      * @param context A {@link Context}.
      * @param db The {@link SQLiteDatabase}.
      * @param id The id of the thing we're looking for.
@@ -1857,9 +1948,13 @@ public class EmailProvider extends ContentProvider
             try {
                 if (c.moveToFirst()) {
                     final String protocol = c.getString(INDEX_PROTOCOL);
-                    // Only restart push for EAS accounts that have completed initial sync.
-                    if (context.getString(R.string.protocol_eas).equals(protocol) &&
-                            !EmailContent.isInitialSyncKey(c.getString(INDEX_SYNC_KEY))) {
+                    final String syncKey = c.getString(INDEX_SYNC_KEY);
+                    final boolean supportsPush =
+                            context.getString(R.string.protocol_eas).equals(protocol) ||
+                            context.getString(R.string.protocol_legacy_imap).equals(protocol);
+
+                    // Only restart push for EAS or IMAP accounts that have completed initial sync.
+                    if (supportsPush && !EmailContent.isInitialSyncKey(syncKey)) {
                         final String emailAddress = c.getString(INDEX_EMAIL_ADDRESS);
                         final android.accounts.Account account =
                                 getAccountManagerAccount(context, emailAddress, protocol);
@@ -1930,6 +2025,7 @@ public class EmailProvider extends ContentProvider
         final SQLiteDatabase db = getDatabase(context);
         final int table = match >> BASE_SHIFT;
         int result;
+        boolean syncSettingChanged = false;
 
         // We do NOT allow setting of unreadCount/messageCount via the provider
         // These columns are maintained via triggers
@@ -2079,6 +2175,14 @@ public class EmailProvider extends ContentProvider
                         }
                     } else if (match == MESSAGE_ID) {
                         db.execSQL(UPDATED_MESSAGE_DELETE + id);
+                    } else if (match == MAILBOX_ID) {
+                        if (values.containsKey(MailboxColumns.SYNC_INTERVAL)) {
+                            syncSettingChanged = true;
+                        }
+                    } else if (match == ACCOUNT_ID) {
+                        if (values.containsKey(AccountColumns.SYNC_INTERVAL)) {
+                            syncSettingChanged = true;
+                        }
                     }
                     result = db.update(tableName, values, whereWithId(id, selection),
                             selectionArgs);
@@ -2146,7 +2250,22 @@ public class EmailProvider extends ContentProvider
                     updateValues.remove(BodyColumns.HTML_CONTENT);
                     updateValues.remove(BodyColumns.TEXT_CONTENT);
 
-                    result = db.update(tableName, updateValues, selection, selectionArgs);
+                    // Since we removed the html and text values from the update operation,
+                    // db.update() can fail because updateValues is empty. Just to a safe check
+                    // before continue, and in case check if we found at least the selection
+                    // record in db and fill the result variable for later hack check.
+                    if (updateValues.size() == 0) {
+                        final String proj[] = {BaseColumns._ID};
+                        final Cursor c = db.query(Body.TABLE_NAME, proj, selection, selectionArgs,
+                                null, null, null);
+                        try {
+                            result = c.getCount();
+                        } finally {
+                            c.close();
+                        }
+                    } else {
+                        result = db.update(tableName, updateValues, selection, selectionArgs);
+                    }
 
                     if (result == 0 && selection.equals(Body.SELECTION_BY_MESSAGE_KEY)) {
                         // TODO: This is a hack. Notably, the selection equality test above
@@ -2213,6 +2332,10 @@ public class EmailProvider extends ContentProvider
                                 TextUtils.isEmpty(values.getAsString(AttachmentColumns.LOCATION))) {
                             LogUtils.w(TAG, new Throwable(), "attachment with blank location");
                         }
+                    } else if (match == MAILBOX) {
+                        if (values.containsKey(MailboxColumns.SYNC_INTERVAL)) {
+                            syncSettingChanged = true;
+                        }
                     }
                     result = db.update(tableName, values, selection, selectionArgs);
                     break;
@@ -2234,6 +2357,10 @@ public class EmailProvider extends ContentProvider
         // Notify all notifier cursors if some records where changed in the database
         if (result > 0) {
             sendNotifierChange(getBaseNotificationUri(match), NOTIFICATION_OP_UPDATE, id);
+            if (syncSettingChanged) {
+                sendSyncSettingChanged(getBaseSyncSettingChangedUri(match),
+                        NOTIFICATION_OP_UPDATE, id);
+            }
             notifyUI(notificationUri, null);
         }
         return result;
@@ -2331,7 +2458,8 @@ public class EmailProvider extends ContentProvider
     private static void writeBodyFiles(final Context c, final long messageId,
             final ContentValues cv) throws IllegalStateException {
         if (cv.containsKey(BodyColumns.HTML_CONTENT)) {
-            final String htmlContent = cv.getAsString(BodyColumns.HTML_CONTENT);
+            String htmlContent = cv.getAsString(BodyColumns.HTML_CONTENT);
+            htmlContent = Utility.uncompress(htmlContent);
             try {
                 writeBodyFile(c, messageId, "html", htmlContent);
             } catch (final IOException e) {
@@ -2340,7 +2468,8 @@ public class EmailProvider extends ContentProvider
             }
         }
         if (cv.containsKey(BodyColumns.TEXT_CONTENT)) {
-            final String textContent = cv.getAsString(BodyColumns.TEXT_CONTENT);
+            String textContent = cv.getAsString(BodyColumns.TEXT_CONTENT);
+            textContent = Utility.uncompress(textContent);
             try {
                 writeBodyFile(c, messageId, "txt", textContent);
             } catch (final IOException e) {
@@ -2464,6 +2593,21 @@ public class EmailProvider extends ContentProvider
         return baseUri;
     }
 
+    private static Uri getBaseSyncSettingChangedUri(int match) {
+        Uri baseUri = null;
+        switch (match) {
+            case ACCOUNT:
+            case ACCOUNT_ID:
+                baseUri = Account.SYNC_SETTING_CHANGED_URI;
+                break;
+            case MAILBOX:
+            case MAILBOX_ID:
+                baseUri = Mailbox.SYNC_SETTING_CHANGED_URI;
+                break;
+        }
+        return baseUri;
+    }
+
     /**
      * Sends a change notification to any cursors observers of the given base URI. The final
      * notification URI is dynamically built to contain the specified information. It will be
@@ -2502,6 +2646,25 @@ public class EmailProvider extends ContentProvider
         }
     }
 
+    private void sendSyncSettingChanged(Uri baseUri, String op, String id) {
+        if (baseUri == null) return;
+
+        // Append the operation, if specified
+        if (op != null) {
+            baseUri = baseUri.buildUpon().appendEncodedPath(op).build();
+        }
+
+        long longId = 0L;
+        try {
+            longId = Long.valueOf(id);
+        } catch (NumberFormatException ignore) {}
+        if (longId > 0) {
+            notifyUI(baseUri, id);
+        } else {
+            notifyUI(baseUri, null);
+        }
+    }
+
     private void sendMessageListDataChangedNotification() {
         final Context context = getContext();
         final Intent intent = new Intent(ACTION_NOTIFY_MESSAGE_LIST_DATASET_CHANGED);
@@ -2753,6 +2916,10 @@ public class EmailProvider extends ContentProvider
                 .add(UIProvider.MessageColumns.VIA_DOMAIN, null)
                 .add(UIProvider.MessageColumns.CLIPPED, "0")
                 .add(UIProvider.MessageColumns.PERMALINK, null)
+                .add(UIProvider.MessageColumns.MESSAGE_FLAG_LOADED,
+                        EmailContent.MessageColumns.FLAG_LOADED)
+                .add(UIProvider.MessageColumns.MESSAGE_LOAD_MORE_URI,
+                        uriWithFQId("uimessageloadmore", Message.TABLE_NAME))
                 .build();
         }
         return sMessageViewMap;
@@ -2790,6 +2957,7 @@ public class EmailProvider extends ContentProvider
             + " WHEN " + Mailbox.TYPE_SENT    + " THEN " + R.drawable.ic_drawer_sent_24dp
             + " WHEN " + Mailbox.TYPE_TRASH   + " THEN " + R.drawable.ic_drawer_trash_24dp
             + " WHEN " + Mailbox.TYPE_STARRED + " THEN " + R.drawable.ic_drawer_starred_24dp
+            + " WHEN " + Mailbox.TYPE_JUNK    + " THEN " + R.drawable.ic_drawer_junk_24dp
             + " ELSE " + R.drawable.ic_drawer_folder_24dp + " END";
 
     /**
@@ -2951,6 +3119,7 @@ public class EmailProvider extends ContentProvider
                         AttachmentColumns.UI_DOWNLOADED_SIZE)
                 .add(UIProvider.AttachmentColumns.CONTENT_URI, AttachmentColumns.CONTENT_URI)
                 .add(UIProvider.AttachmentColumns.FLAGS, AttachmentColumns.FLAGS)
+                .add(UIProvider.AttachmentColumns.CONTENT_ID, AttachmentColumns.CONTENT_ID)
                 .build();
         }
         return sAttachmentMap;
@@ -3119,6 +3288,7 @@ public class EmailProvider extends ContentProvider
                     uiAtt.size = (int) att.mSize;
                     uiAtt.uri = uiUri("uiattachment", att.mId);
                     uiAtt.flags = att.mFlags;
+                    uiAtt.partId = att.mContentId;
                     uiAtts.add(uiAtt);
                 }
                 values.put(UIProvider.MessageColumns.ATTACHMENTS, "@?"); // @ for literal
@@ -3142,6 +3312,7 @@ public class EmailProvider extends ContentProvider
             final Uri attachmentListUri = uiUri("uiattachments", messageId).buildUpon()
                     .appendQueryParameter("MessageLoaded",
                             msg.mFlagLoaded == Message.FLAG_LOADED_COMPLETE ? "true" : "false")
+                    .appendQueryParameter(AttachmentColumns.CONTENT_ID, "null")
                     .build();
             values.put(UIProvider.MessageColumns.ATTACHMENT_LIST_URI, attachmentListUri.toString());
         }
@@ -3223,7 +3394,8 @@ public class EmailProvider extends ContentProvider
                         "=" + Mailbox.TYPE_INBOX + ")");
                 break;
             case Mailbox.TYPE_STARRED:
-                sb.append(MessageColumns.FLAG_FAVORITE + "=1");
+                sb.append(MessageColumns.FLAG_FAVORITE + "=1 AND "+MessageColumns.MAILBOX_KEY
+                        +"<>5");
                 break;
             case Mailbox.TYPE_UNREAD:
                 sb.append(MessageColumns.FLAG_READ + "=0 AND " + MessageColumns.MAILBOX_KEY +
@@ -3485,7 +3657,8 @@ public class EmailProvider extends ContentProvider
 
         // If the configuration states that feedback is supported, add that capability
         final Resources res = context.getResources();
-        if (res.getBoolean(R.bool.feedback_supported)) {
+        Uri feedbackUri = Utils.getValidUri(res.getString(R.string.email_feedback_uri));
+        if (res.getBoolean(R.bool.feedback_supported) && !Uri.EMPTY.equals(feedbackUri)) {
             capabilities |= AccountCapabilities.SEND_FEEDBACK;
         }
 
@@ -3879,7 +4052,8 @@ public class EmailProvider extends ContentProvider
                 values[i] = combinedUriString("uifolder", idString);
             } else if (column.equals(UIProvider.FolderColumns.NAME)) {
                 // default empty string since all of these should use resource strings
-                values[i] = getFolderDisplayName(getFolderTypeFromMailboxType(mailboxType), "");
+                values[i] = getFolderDisplayName(
+                        getFolderTypeFromMailboxType(mailboxType), "", false);
             } else if (column.equals(UIProvider.FolderColumns.HAS_CHILDREN)) {
                 values[i] = 0;
             } else if (column.equals(UIProvider.FolderColumns.CAPABILITIES)) {
@@ -3922,7 +4096,8 @@ public class EmailProvider extends ContentProvider
                         whereArgs = new String[] { Long.toString(accountId) };
                     }
                     final int starredCount = EmailContent.count(getContext(), Message.CONTENT_URI,
-                            accountKeyClause + MessageColumns.FLAG_FAVORITE + "=1", whereArgs);
+                            accountKeyClause + MessageColumns.FLAG_FAVORITE + "=1 AND "
+                            + MessageColumns.MAILBOX_KEY + "<>5", whereArgs);
                     values[i] = starredCount;
                 }
             } else if (column.equals(UIProvider.FolderColumns.ICON_RES_ID)) {
@@ -4018,7 +4193,7 @@ public class EmailProvider extends ContentProvider
      * @return the SQLite query to be executed on the EmailProvider database
      */
     private static String genQueryAttachments(String[] uiProjection,
-            List<String> contentTypeQueryParameters) {
+            List<String> contentTypeQueryParameters, List<String> contentIdQueryParameters) {
         // MAKE SURE THESE VALUES STAY IN SYNC WITH GEN QUERY ATTACHMENT
         ContentValues values = new ContentValues(1);
         values.put(UIProvider.AttachmentColumns.SUPPORTS_DOWNLOAD_AGAIN, 1);
@@ -4050,6 +4225,27 @@ public class EmailProvider extends ContentProvider
             }
             sb.append(")");
         }
+
+        // Filter for in-line attachments.
+        // The filter works by adding IS operators for each content id you wish to request.
+        if (contentIdQueryParameters != null && !contentIdQueryParameters.isEmpty()) {
+            final int size = contentIdQueryParameters.size();
+            sb.append("AND (");
+            for (int i = 0; i < size; i++) {
+                final String contentId = contentIdQueryParameters.get(i);
+                sb.append(AttachmentColumns.CONTENT_ID + " IS ");
+                if (contentId.toLowerCase().equals("null")) {
+                    sb.append("NULL");
+                } else {
+                    sb.append("'" + contentId + "'");
+                }
+                if (i != size - 1) {
+                    sb.append(" OR ");
+                }
+            }
+            sb.append(")");
+        }
+
         return sb.toString();
     }
 
@@ -4363,7 +4559,7 @@ public class EmailProvider extends ContentProvider
      */
     private Cursor getUiFolderCursorRowFromMailboxCursorRow(
             MatrixCursor mc, int projectionLength, Cursor mailboxCursor,
-            int nameColumn, int typeColumn) {
+            int nameColumn, int typeColumn, int parentUriColumn) {
         final MatrixCursor.RowBuilder builder = mc.newRow();
         for (int i = 0; i < projectionLength; i++) {
             // If we are at the name column, get the type
@@ -4375,7 +4571,9 @@ public class EmailProvider extends ContentProvider
                 // type has also been requested. If not, this will
                 // error in unknown ways.
                 final int type = mailboxCursor.getInt(typeColumn);
-                builder.add(getFolderDisplayName(type, mailboxCursor.getString(i)));
+                final boolean rootFolder = parentUriColumn == -1 ||
+                        TextUtils.isEmpty(mailboxCursor.getString(parentUriColumn));
+                builder.add(getFolderDisplayName(type, mailboxCursor.getString(i), rootFolder));
             } else {
                 builder.add(mailboxCursor.getString(i));
             }
@@ -4411,6 +4609,7 @@ public class EmailProvider extends ContentProvider
         final int idColumn = inputCursor.getColumnIndex(BaseColumns._ID);
         final int typeColumn = inputCursor.getColumnIndex(UIProvider.FolderColumns.TYPE);
         final int nameColumn = inputCursor.getColumnIndex(UIProvider.FolderColumns.NAME);
+        final int parentUriColumn = inputCursor.getColumnIndex(UIProvider.FolderColumns.PARENT_URI);
         final int capabilitiesColumn =
                 inputCursor.getColumnIndex(UIProvider.FolderColumns.CAPABILITIES);
         final int persistentIdColumn =
@@ -4428,6 +4627,7 @@ public class EmailProvider extends ContentProvider
         while (inputCursor.moveToNext()) {
             final MatrixCursor.RowBuilder builder = outputCursor.newRow();
             final int folderType = inputCursor.getInt(typeColumn);
+            final boolean rootFolder = TextUtils.isEmpty(inputCursor.getString(parentUriColumn));
             for (int i = 0; i < uiProjection.length; i++) {
                 // Find the index in the input cursor corresponding the column requested in the
                 // output projection.
@@ -4442,7 +4642,7 @@ public class EmailProvider extends ContentProvider
                 final boolean remapped;
                 if (nameColumn == index) {
                     // Remap folder name for system folders.
-                    builder.add(getFolderDisplayName(folderType, value));
+                    builder.add(getFolderDisplayName(folderType, value, rootFolder));
                     remapped = true;
                 } else if (capabilitiesColumn == index) {
                     // Get the correct capabilities for this folder.
@@ -4492,9 +4692,15 @@ public class EmailProvider extends ContentProvider
      * @param folderType {@link UIProvider.FolderType} value for the folder
      * @param defaultName a {@link String} to use in case the {@link UIProvider.FolderType}
      *                    provided is not a system folder.
+     * @param rootFolder whether the folder is a root folder
      * @return a {@link String} to use as the display name for the folder
      */
-    private String getFolderDisplayName(int folderType, String defaultName) {
+    private String getFolderDisplayName(int folderType, String defaultName, boolean rootFolder) {
+        if (!rootFolder && !TextUtils.isEmpty(defaultName)) {
+            // If the folder is not a root, we must use the provided folder name
+            return defaultName;
+        }
+
         final int resId;
         switch (folderType) {
             case UIProvider.FolderType.INBOX:
@@ -4707,8 +4913,11 @@ public class EmailProvider extends ContentProvider
             case UI_ATTACHMENTS:
                 final List<String> contentTypeQueryParameters =
                         uri.getQueryParameters(PhotoContract.ContentTypeParameters.CONTENT_TYPE);
-                c = db.rawQuery(genQueryAttachments(uiProjection, contentTypeQueryParameters),
-                        new String[] {id});
+                final List<String> contentIdQueryParameters =
+                        uri.getQueryParameters(AttachmentColumns.CONTENT_ID);
+                String sqlAttachments = genQueryAttachments(uiProjection,
+                        contentTypeQueryParameters, contentIdQueryParameters);
+                c = db.rawQuery(sqlAttachments, new String[] {id});
                 c = new AttachmentsCursor(context, c);
                 notifyUri = UIPROVIDER_ATTACHMENTS_NOTIFIER.buildUpon().appendPath(id).build();
                 break;
@@ -4749,12 +4958,15 @@ public class EmailProvider extends ContentProvider
                     final List<String> projectionList = Arrays.asList(uiProjection);
                     final int nameColumn = projectionList.indexOf(UIProvider.FolderColumns.NAME);
                     final int typeColumn = projectionList.indexOf(UIProvider.FolderColumns.TYPE);
+                    final int parentUriColumn =
+                            projectionList.indexOf(UIProvider.FolderColumns.PARENT_URI);
                     if (c.moveToFirst()) {
                         final Cursor closeThis = c;
                         try {
                             c = getUiFolderCursorRowFromMailboxCursorRow(
                                     new MatrixCursorWithCachedColumns(uiProjection),
-                                    uiProjection.length, c, nameColumn, typeColumn);
+                                    uiProjection.length, c, nameColumn,
+                                    typeColumn, parentUriColumn);
                         } finally {
                             closeThis.close();
                         }
@@ -5469,7 +5681,7 @@ public class EmailProvider extends ContentProvider
         if (msg == null) return 0;
         Mailbox mailbox = Mailbox.restoreMailboxWithId(context, msg.mMailboxKey);
         if (mailbox == null) return 0;
-        if (mailbox.mType == Mailbox.TYPE_TRASH || mailbox.mType == Mailbox.TYPE_DRAFTS) {
+        if (mailbox.mType == Mailbox.TYPE_TRASH) {
             // We actually delete these, including attachments
             AttachmentUtilities.deleteAllAttachmentFiles(context, msg.mAccountKey, msg.mId);
             final int r = context.getContentResolver().delete(
@@ -5535,6 +5747,49 @@ public class EmailProvider extends ContentProvider
         return deletedCount;
     }
 
+    private Cursor uiMessageLoadMore(final Message msg) {
+        if (msg == null) return null;
+
+        // Start the fetch process running in the background
+        new AsyncTask<Void, Void, Void>() {
+            @Override
+            public Void doInBackground(Void... params) {
+                LogUtils.d(TAG, "Run load more task. account: " + msg.mAccountKey);
+
+                // Delete the dummy attachment from the database.
+                deleteDummyAttachment(msg.mId);
+                // As the delete action will not notify the UI change.
+                // We will notify it with the message id.
+                notifyUI(UIPROVIDER_ATTACHMENTS_NOTIFIER, msg.mId);
+
+                // Update the message loaded status as partial before load entire content.
+                Utilities.updateMessageLoadStatus(getContext(), msg.mId,
+                        EmailContent.Message.FLAG_LOADED_PARTIAL_FETCHING);
+
+                final EmailServiceProxy service =
+                        EmailServiceUtils.getServiceForAccount(getContext(), msg.mAccountKey);
+                if (service != null) {
+                    try {
+                        service.loadMore(msg.mId);
+                    } catch (RemoteException e) {
+                        LogUtils.e("loadMore", "RemoteException", e);
+                    }
+                }
+                return null;
+            }
+        }.executeOnExecutor(AsyncTask.THREAD_POOL_EXECUTOR);
+
+        return null;
+    }
+
+    private int deleteDummyAttachment(long messageId) {
+        StringBuilder selection = new StringBuilder()
+                .append(AttachmentColumns.MESSAGE_KEY + "=" + messageId)
+                .append(" AND ")
+                .append(AttachmentColumns.FLAGS + "&" + Attachment.FLAG_DUMMY_ATTACHMENT + "!=0");
+        return delete(Attachment.CONTENT_URI, selection.toString(), null);
+    }
+
     public static final String PICKER_UI_ACCOUNT = "picker_ui_account";
     public static final String PICKER_MAILBOX_TYPE = "picker_mailbox_type";
     // Currently unused
@@ -5841,7 +6096,7 @@ public class EmailProvider extends ContentProvider
         extras.putString(EmailServiceStatus.SYNC_EXTRAS_CALLBACK_METHOD,
                 SYNC_STATUS_CALLBACK_METHOD);
         ContentResolver.requestSync(account, EmailContent.AUTHORITY, extras);
-        LogUtils.i(TAG, "requestSync EmailProvider startSync %s, %s", account.toString(),
+        LogUtils.i(TAG, "requestSync EmailProvider restartPush %s, %s", account.toString(),
                 extras.toString());
     }
 
@@ -5950,10 +6205,26 @@ public class EmailProvider extends ContentProvider
     private Cursor uiSearch(Uri uri, String[] projection) {
         LogUtils.d(TAG, "runSearchQuery in search %s", uri);
         final long accountId = Long.parseLong(uri.getLastPathSegment());
+        long folderId = -1;
+
+        try {
+            String folderIdString = uri.getQueryParameter(
+                    UIProvider.SearchQueryParameters.FOLDER_ID);
+            if (folderIdString != null) {
+                folderId = Long.valueOf(folderIdString);
+            }
+        } catch (NumberFormatException e) {
+            // ignore and keep -1
+        }
 
-        // TODO: Check the actual mailbox
-        Mailbox inbox = Mailbox.restoreMailboxOfType(getContext(), accountId, Mailbox.TYPE_INBOX);
-        if (inbox == null) {
+        Mailbox folder = null;
+        if (folderId >= 0) {
+            folder = Mailbox.restoreMailboxWithId(getContext(), folderId);
+        }
+        if (folder == null) {
+            folder = Mailbox.restoreMailboxOfType(getContext(), accountId, Mailbox.TYPE_INBOX);
+        }
+        if (folder == null) {
             LogUtils.w(Logging.LOG_TAG, "In uiSearch, inbox doesn't exist for account "
                     + accountId);
 
@@ -5969,7 +6240,7 @@ public class EmailProvider extends ContentProvider
         Mailbox searchMailbox = getSearchMailbox(accountId);
         final long searchMailboxId = searchMailbox.mId;
 
-        mSearchParams = new SearchParams(inbox.mId, filter, searchMailboxId);
+        mSearchParams = new SearchParams(folder.mId, filter, searchMailboxId);
 
         final Context context = getContext();
         if (mSearchParams.mOffset == 0) {
@@ -6089,6 +6360,79 @@ public class EmailProvider extends ContentProvider
         }
     }
 
+    /**
+     * This method extract the address of a new email to insert in the database
+     * and extract and update he suggested contact table with this addresses.
+     */
+    private void addOrUpdateSuggestedContactsFromHeaders(ContentValues values) {
+        List<Address> suggestedContacts = new ArrayList<>();
+
+        Long accountId = values.getAsLong(MessageColumns.ACCOUNT_KEY);
+        if (accountId == null) {
+            // Ignore the entire content. We don't have enough information to
+            // update the suggested contact
+            return;
+        }
+
+        if (values.containsKey(Message.MessageColumns.TO_LIST)) {
+            final String to = values.getAsString(Message.MessageColumns.TO_LIST);
+            suggestedContacts.addAll(Arrays.asList(Address.fromHeader(to)));
+        }
+
+        if (values.containsKey(Message.MessageColumns.CC_LIST)) {
+            final String cc = values.getAsString(Message.MessageColumns.CC_LIST);
+            suggestedContacts.addAll(Arrays.asList(Address.fromHeader(cc)));
+        }
+
+        if (values.containsKey(Message.MessageColumns.BCC_LIST)) {
+            final String bcc = values.getAsString(Message.MessageColumns.BCC_LIST);
+            suggestedContacts.addAll(Arrays.asList(Address.fromHeader(bcc)));
+        }
+
+        if (values.containsKey(Message.MessageColumns.REPLY_TO_LIST)) {
+            final String replyTo = values.getAsString(Message.MessageColumns.REPLY_TO_LIST);
+            suggestedContacts.addAll(Arrays.asList(Address.fromHeader(replyTo)));
+        }
+
+        // Update or insert every suggested contact
+        for (Address suggestedContact : suggestedContacts) {
+            addOrUpdateSuggestedContact(accountId, suggestedContact);
+        }
+    }
+
+    private void addOrUpdateSuggestedContact(long accountId, Address address) {
+        try {
+            // Update first the suggested contact, and if not exists add a new row
+            if (address == null) {
+                return;
+            }
+
+            // Update
+            String emailAddress = address.getAddress().toLowerCase();
+            String where = SuggestedContact.ACCOUNT_KEY + " = ? and "
+                    + SuggestedContact.ADDRESS + " = ?";
+            String[] args = {String.valueOf(accountId), emailAddress};
+            ContentValues values = new ContentValues();
+            values.put(SuggestedContact.NAME, TextUtils.isEmpty(address.getPersonal())
+                    ? emailAddress : address.getPersonal());
+            values.put(SuggestedContact.DISPLAY_NAME, address.toString());
+            values.put(SuggestedContact.LAST_SEEN, System.currentTimeMillis());
+            long affectedRecords = mDatabase.update(
+                    SuggestedContact.TABLE_NAME, values, where, args);
+
+            // Insert
+            if (affectedRecords == 0) {
+                values.put(SuggestedContact.ACCOUNT_KEY, accountId);
+                values.put(SuggestedContact.ADDRESS, emailAddress);
+                mDatabase.insertOrThrow(SuggestedContact.TABLE_NAME, null, values);
+            }
+
+        } catch (SQLException ex) {
+            Log.w(TAG, "Failed to insert/update suggested contact address: "
+                    + String.valueOf(address), ex);
+        }
+    }
+
     /** Projection used for getting email address for an account. */
     private static final String[] ACCOUNT_EMAIL_PROJECTION = { AccountColumns.EMAIL_ADDRESS };
 
diff --git a/provider_src/com/android/email/provider/Utilities.java b/provider_src/com/android/email/provider/Utilities.java
index c3b7ec93a..bfdf9eb63 100644
--- a/provider_src/com/android/email/provider/Utilities.java
+++ b/provider_src/com/android/email/provider/Utilities.java
@@ -40,10 +40,26 @@ import com.android.emailcommon.utility.ConversionUtilities;
 import com.android.mail.utils.LogUtils;
 import com.android.mail.utils.Utils;
 
+import org.apache.commons.io.IOUtils;
+
+import java.io.InputStream;
 import java.io.IOException;
 import java.util.ArrayList;
 
 public class Utilities {
+    /**
+     * Update the local message's load status.
+     *
+     * @param messageId the local message's id
+     * @param loadStatus the new load status
+     */
+    public static void updateMessageLoadStatus(Context context, long messageId, int loadStatus) {
+        ContentValues cv = new ContentValues();
+        cv.put(EmailContent.MessageColumns.FLAG_LOADED, loadStatus);
+        Uri uri = ContentUris.withAppendedId(EmailContent.Message.CONTENT_URI, messageId);
+        context.getContentResolver().update(uri, cv, null, null);
+    }
+
     /**
      * Copy one downloaded message (which may have partially-loaded sections)
      * into a newly created EmailProvider Message, given the account and mailbox
@@ -118,8 +134,10 @@ public class Utilities {
                 ArrayList<Part> attachments = new ArrayList<Part>();
                 MimeUtility.collectParts(message, viewables, attachments);
 
+                // Don't close the viewables attachment InputStream yet
+                final ArrayList<InputStream> bodyInputStreams = new ArrayList<InputStream>();
                 final ConversionUtilities.BodyFieldData data =
-                        ConversionUtilities.parseBodyFields(viewables);
+                        ConversionUtilities.parseBodyFields(viewables, bodyInputStreams);
 
                 // set body and local message values
                 localMessage.setFlags(data.isQuotedReply, data.isQuotedForward);
@@ -138,7 +156,11 @@ public class Utilities {
                     // TODO(pwestbro): What should happen with unknown status?
                     LegacyConversions.updateAttachments(context, localMessage, attachments);
                     LegacyConversions.updateInlineAttachments(context, localMessage, viewables);
-                } else {
+                }
+
+                // if the message didn't loaded complete, add a dummy attachment.
+                if (loadStatus == EmailContent.Message.FLAG_LOADED_PARTIAL
+                        || loadStatus == EmailContent.Message.FLAG_LOADED_PARTIAL_COMPLETE) {
                     EmailContent.Attachment att = new EmailContent.Attachment();
                     // Since we haven't actually loaded the attachment, we're just putting
                     // a dummy placeholder here. When the user taps on it, we'll load the attachment
@@ -163,7 +185,12 @@ public class Utilities {
                     att.mAccountKey = localMessage.mAccountKey;
                     att.mFlags = Attachment.FLAG_DUMMY_ATTACHMENT;
                     att.save(context);
-                    localMessage.mFlagAttachment = true;
+                    // localMessage.mFlagAttachment = true;
+                }
+
+                // Close any parts that may still be open
+                for (final InputStream is : bodyInputStreams) {
+                    IOUtils.closeQuietly(is);
                 }
 
                 // One last update of message with two updated flags
diff --git a/provider_src/com/android/email/service/AliceAuthenticatorService.java b/provider_src/com/android/email/service/AliceAuthenticatorService.java
new file mode 100644
index 000000000..eb19715c7
--- /dev/null
+++ b/provider_src/com/android/email/service/AliceAuthenticatorService.java
@@ -0,0 +1,36 @@
+/*
+ * Copyright (c) 2016, The Linux Foundation. All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions are
+ * met:
+    * Redistributions of source code must retain the above copyright
+      notice, this list of conditions and the following disclaimer.
+    * Redistributions in binary form must reproduce the above
+      copyright notice, this list of conditions and the following
+      disclaimer in the documentation and/or other materials provided
+      with the distribution.
+    * Neither the name of The Linux Foundation nor the names of its
+      contributors may be used to endorse or promote products derived
+      from this software without specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED "AS IS" AND ANY EXPRESS OR IMPLIED
+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
+ * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT
+ * ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS
+ * BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
+ * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
+ * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
+ * BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
+ * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE
+ * OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN
+ * IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ */
+
+package com.android.email.service;
+
+/**
+ * This service needs to be declared separately from the base service
+ */
+public class AliceAuthenticatorService extends AuthenticatorService {
+}
diff --git a/provider_src/com/android/email/service/AolAuthenticatorService.java b/provider_src/com/android/email/service/AolAuthenticatorService.java
new file mode 100644
index 000000000..0859c0647
--- /dev/null
+++ b/provider_src/com/android/email/service/AolAuthenticatorService.java
@@ -0,0 +1,36 @@
+/*
+ * Copyright (c) 2016, The Linux Foundation. All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions are
+ * met:
+    * Redistributions of source code must retain the above copyright
+      notice, this list of conditions and the following disclaimer.
+    * Redistributions in binary form must reproduce the above
+      copyright notice, this list of conditions and the following
+      disclaimer in the documentation and/or other materials provided
+      with the distribution.
+    * Neither the name of The Linux Foundation nor the names of its
+      contributors may be used to endorse or promote products derived
+      from this software without specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED "AS IS" AND ANY EXPRESS OR IMPLIED
+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
+ * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT
+ * ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS
+ * BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
+ * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
+ * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
+ * BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
+ * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE
+ * OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN
+ * IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ */
+
+package com.android.email.service;
+
+/**
+ * This service needs to be declared separately from the base service
+ */
+public class AolAuthenticatorService extends AuthenticatorService {
+}
diff --git a/provider_src/com/android/email/service/BelgacomAuthenticatorService.java b/provider_src/com/android/email/service/BelgacomAuthenticatorService.java
new file mode 100644
index 000000000..b1e285ba2
--- /dev/null
+++ b/provider_src/com/android/email/service/BelgacomAuthenticatorService.java
@@ -0,0 +1,36 @@
+/*
+ * Copyright (c) 2016, The Linux Foundation. All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions are
+ * met:
+    * Redistributions of source code must retain the above copyright
+      notice, this list of conditions and the following disclaimer.
+    * Redistributions in binary form must reproduce the above
+      copyright notice, this list of conditions and the following
+      disclaimer in the documentation and/or other materials provided
+      with the distribution.
+    * Neither the name of The Linux Foundation nor the names of its
+      contributors may be used to endorse or promote products derived
+      from this software without specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED "AS IS" AND ANY EXPRESS OR IMPLIED
+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
+ * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT
+ * ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS
+ * BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
+ * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
+ * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
+ * BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
+ * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE
+ * OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN
+ * IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ */
+
+package com.android.email.service;
+
+/**
+ * This service needs to be declared separately from the base service
+ */
+public class BelgacomAuthenticatorService extends AuthenticatorService {
+}
diff --git a/provider_src/com/android/email/service/BluetoothEmailBroadcastReceiver.java b/provider_src/com/android/email/service/BluetoothEmailBroadcastReceiver.java
new file mode 100644
index 000000000..ae2408a2d
--- /dev/null
+++ b/provider_src/com/android/email/service/BluetoothEmailBroadcastReceiver.java
@@ -0,0 +1,184 @@
+/*
+ * Copyright (c) 2016, The Linux Foundation. All rights reserved.
+ * Not a Contribution.
+ * Copyright (C) 2010 The Android Open Source Project
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.android.email.service;
+
+import android.content.BroadcastReceiver;
+import android.content.Context;
+import android.content.Intent;
+import com.android.email.Preferences;
+import com.android.email.R;
+import com.android.email.SecurityPolicy;
+import com.android.email.provider.AccountReconciler;
+import com.android.email.provider.EmailProvider;
+import com.android.emailcommon.Logging;
+import com.android.emailcommon.VendorPolicyLoader;
+import com.android.emailcommon.provider.Account;
+import com.android.emailcommon.provider.EmailContent;
+import com.android.emailcommon.provider.EmailContent.AccountColumns;
+import com.android.emailcommon.provider.HostAuth;
+import com.android.emailcommon.provider.Mailbox;
+import com.android.mail.utils.LogUtils;
+import android.util.Log;
+
+
+/**
+ * The broadcast receiver.  The actual job is done in EmailBroadcastProcessor on a worker thread.
+ * Extend EmailBroadcastReceiver to handle Bluetooth MAP relevant intents.
+ */
+public class BluetoothEmailBroadcastReceiver extends EmailBroadcastReceiver {
+
+    private static final String TAG = "BluetoothEmailBroadcastReceiver";
+    private static final String ACTION_CHECK_MAIL =
+            "org.codeaurora.email.intent.action.MAIL_SERVICE_WAKEUP";
+    private static final String EXTRA_ACCOUNT = "org.codeaurora.email.intent.extra.ACCOUNT";
+    private static final String ACTION_DELETE_MESSAGE =
+            "org.codeaurora.email.intent.action.MAIL_SERVICE_DELETE_MESSAGE";
+    private static final String ACTION_MOVE_MESSAGE =
+            "org.codeaurora.email.intent.action.MAIL_SERVICE_MOVE_MESSAGE";
+    private static final String ACTION_MESSAGE_READ =
+            "org.codeaurora.email.intent.action.MAIL_SERVICE_MESSAGE_READ";
+    private static final String ACTION_SEND_PENDING_MAIL =
+            "org.codeaurora.email.intent.action.MAIL_SERVICE_SEND_PENDING";
+    private static final String EXTRA_MESSAGE_ID = "org.codeaurora.email.intent.extra.MESSAGE_ID";
+    private static final String EXTRA_MESSAGE_INFO =
+            "org.codeaurora.email.intent.extra.MESSAGE_INFO";
+
+    @Override
+    public void onReceive(Context context, Intent intent) {
+        String action = intent.getAction();
+        Log.d(TAG,"Received " + action);
+        if (ACTION_CHECK_MAIL.equals(action)) {
+            Intent i;
+            final long accountId = intent.getLongExtra(EXTRA_ACCOUNT, -1);
+            Log.d(TAG, "accountId is " + accountId);
+            final long inboxId = Mailbox.findMailboxOfType(context, accountId,
+                    Mailbox.TYPE_INBOX);
+            Log.d(TAG, "inboxId is " + inboxId);
+            Mailbox mailbox = Mailbox.restoreMailboxWithId(context, inboxId);
+            if (mailbox == null) {
+                return;
+            }
+            Account account = Account.restoreAccountWithId(context, mailbox.mAccountKey);
+            String protocol = account.getProtocol(context);
+            Log.d(TAG, "protocol is " + protocol);
+            String legacyImapProtocol = context.getString(R.string.protocol_legacy_imap);
+            if (protocol.equals(legacyImapProtocol)) {
+                i = new Intent(context, BluetoothImapService.class);
+            } else {
+                i = new Intent(context, BluetoothPop3Service.class);
+            }
+            i.setAction(intent.getAction());
+            i.putExtra(EXTRA_ACCOUNT,
+                    intent.getLongExtra(EXTRA_ACCOUNT, -1));
+            context.startService(i);
+        } else if (ACTION_DELETE_MESSAGE.equals(action)) {
+            Intent i;
+            final long messageId = intent.getLongExtra(EXTRA_MESSAGE_ID, -1);
+            Log.d(TAG, "messageId is " + messageId);
+            Account account = Account.getAccountForMessageId(context, messageId);
+            if (account == null ) {
+                return;
+            }
+            String protocol = account.getProtocol(context);
+            Log.d(TAG, "protocol is " + protocol + " ActId: " + account.getId());
+            String legacyImapProtocol = context.getString(R.string.protocol_legacy_imap);
+            if (protocol.equals(legacyImapProtocol)) {
+                i = new Intent(context, BluetoothImapService.class);
+                i.setAction(intent.getAction());
+                i.putExtra(EXTRA_ACCOUNT,
+                        intent.getLongExtra(EXTRA_ACCOUNT, -1));
+                i.putExtra(EXTRA_MESSAGE_ID,
+                        intent.getLongExtra(EXTRA_MESSAGE_ID, -1));
+                context.startService(i);
+            } else {
+               Log.i(TAG, "DELETE MESSAGE POP3 NOT Implemented");
+            }
+        } else if (ACTION_MESSAGE_READ.equals(action)) {
+            Intent i;
+            final long messageId = intent.getLongExtra(EXTRA_MESSAGE_ID, -1);
+            Log.d(TAG, "messageId is " + messageId);
+            Account account = Account.getAccountForMessageId(context, messageId);
+            if (account == null ) {
+                return;
+            }
+            String protocol = account.getProtocol(context);
+            Log.d(TAG, "protocol is " + protocol + " ActId: " + account.getId());
+            String legacyImapProtocol = context.getString(R.string.protocol_legacy_imap);
+            if (protocol.equals(legacyImapProtocol)) {
+                i = new Intent(context, BluetoothImapService.class);
+                i.setAction(intent.getAction());
+                i.putExtra(EXTRA_ACCOUNT,
+                        intent.getLongExtra(EXTRA_ACCOUNT, -1));
+                i.putExtra(EXTRA_MESSAGE_ID,
+                        intent.getLongExtra(EXTRA_MESSAGE_ID, -1));
+                i.putExtra(EXTRA_MESSAGE_INFO,
+                        intent.getIntExtra(EXTRA_MESSAGE_INFO, 0));
+                context.startService(i);
+            } else {
+                Log.i(TAG, "READ MESSAGE POP3 NOT Implemented");
+            }
+        } else if (ACTION_MOVE_MESSAGE.equals(action)) {
+            Intent i;
+            final long messageId = intent.getLongExtra(EXTRA_MESSAGE_ID, -1);
+            Log.d(TAG, "messageId is " + messageId);
+            Account account = Account.getAccountForMessageId(context, messageId);
+            if (account == null ) {
+                return;
+            }
+            String protocol = account.getProtocol(context);
+            Log.d(TAG, "protocol is " + protocol + " ActId: " + account.getId());
+            String legacyImapProtocol = context.getString(R.string.protocol_legacy_imap);
+            if (protocol.equals(legacyImapProtocol)) {
+                i = new Intent(context, BluetoothImapService.class);
+                i.setAction(intent.getAction());
+                i.putExtra(EXTRA_ACCOUNT,
+                        intent.getLongExtra(EXTRA_ACCOUNT, -1));
+                i.putExtra(EXTRA_MESSAGE_ID,
+                        intent.getLongExtra(EXTRA_MESSAGE_ID, -1));
+                i.putExtra(EXTRA_MESSAGE_INFO,
+                        intent.getIntExtra(EXTRA_MESSAGE_INFO, 0));
+                context.startService(i);
+            } else {
+                Log.i(TAG, "READ MESSAGE POP3 NOT Implemented");
+            }
+        } else if (ACTION_SEND_PENDING_MAIL.equals(action)) {
+            Intent i;
+            final long accountId = intent.getLongExtra(EXTRA_ACCOUNT, -1);
+            Log.d(TAG, "accountId is " + accountId);
+            Account account = Account.restoreAccountWithId(context, accountId);
+            if (account == null ) {
+                return;
+            }
+            String protocol = account.getProtocol(context);
+            Log.d(TAG, "protocol is " + protocol);
+            String legacyImapProtocol = context.getString(R.string.protocol_legacy_imap);
+            if (protocol.equals(legacyImapProtocol)) {
+                i = new Intent(context, BluetoothImapService.class);
+                i.setAction(intent.getAction());
+                i.putExtra(EXTRA_ACCOUNT,
+                        intent.getLongExtra(EXTRA_ACCOUNT, -1));
+                context.startService(i);
+            } else {
+                Log.i(TAG, "SEND MESSAGE POP3 NOT Implemented");
+            }
+        } else {
+            EmailBroadcastProcessorService.processBroadcastIntent(context, intent);
+        }
+    }
+}
diff --git a/provider_src/com/android/email/service/BluetoothImapService.java b/provider_src/com/android/email/service/BluetoothImapService.java
new file mode 100644
index 000000000..bfd49d4ee
--- /dev/null
+++ b/provider_src/com/android/email/service/BluetoothImapService.java
@@ -0,0 +1,322 @@
+/*
+ * Copyright (c) 2016, The Linux Foundation. All rights reserved.
+ * Not a Contribution.
+ * Copyright (C) 2012 The Android Open Source Project
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.android.email.service;
+
+import android.app.Service;
+import android.content.ContentResolver;
+import android.content.ContentUris;
+import android.content.ContentValues;
+import android.content.Context;
+import android.content.Intent;
+import android.database.Cursor;
+import android.net.TrafficStats;
+import android.net.Uri;
+import android.os.IBinder;
+import android.os.RemoteException;
+import android.os.SystemClock;
+import android.text.TextUtils;
+import android.text.format.DateUtils;
+
+import com.android.email.DebugUtils;
+import com.android.email.LegacyConversions;
+import com.android.email.NotificationController;
+import com.android.email.NotificationControllerCreatorHolder;
+import com.android.email.R;
+import com.android.email.mail.Store;
+import com.android.email.provider.Utilities;
+import com.android.emailcommon.Logging;
+import com.android.emailcommon.TrafficFlags;
+import com.android.emailcommon.internet.MimeUtility;
+import com.android.emailcommon.mail.AuthenticationFailedException;
+import com.android.emailcommon.mail.FetchProfile;
+import com.android.emailcommon.mail.Flag;
+import com.android.emailcommon.mail.Folder;
+import com.android.emailcommon.mail.Folder.FolderType;
+import com.android.emailcommon.mail.Folder.MessageRetrievalListener;
+import com.android.emailcommon.mail.Folder.MessageUpdateCallbacks;
+import com.android.emailcommon.mail.Folder.OpenMode;
+import com.android.emailcommon.mail.Message;
+import com.android.emailcommon.mail.MessagingException;
+import com.android.emailcommon.mail.Part;
+import com.android.emailcommon.provider.Account;
+import com.android.emailcommon.provider.EmailContent;
+import com.android.emailcommon.provider.EmailContent.MailboxColumns;
+import com.android.emailcommon.provider.EmailContent.MessageColumns;
+import com.android.emailcommon.provider.EmailContent.SyncColumns;
+import com.android.emailcommon.provider.Mailbox;
+import com.android.emailcommon.service.EmailServiceStatus;
+import com.android.emailcommon.service.SearchParams;
+import com.android.emailcommon.service.SyncWindow;
+import com.android.emailcommon.utility.AttachmentUtilities;
+import com.android.mail.providers.UIProvider;
+import com.android.mail.utils.LogUtils;
+
+import java.util.ArrayList;
+import java.util.Arrays;
+import java.util.Comparator;
+import java.util.Date;
+import java.util.HashMap;
+import java.util.List;
+
+public class BluetoothImapService extends ImapService {
+    private static final String TAG = "BluetoothImapService";
+    private static final String ACTION_CHECK_MAIL =
+            "org.codeaurora.email.intent.action.MAIL_SERVICE_WAKEUP";
+    private static final String EXTRA_ACCOUNT = "org.codeaurora.email.intent.extra.ACCOUNT";
+    private static final String ACTION_DELETE_MESSAGE =
+            "org.codeaurora.email.intent.action.MAIL_SERVICE_DELETE_MESSAGE";
+    private static final String ACTION_MOVE_MESSAGE =
+            "org.codeaurora.email.intent.action.MAIL_SERVICE_MOVE_MESSAGE";
+    private static final String ACTION_MESSAGE_READ =
+            "org.codeaurora.email.intent.action.MAIL_SERVICE_MESSAGE_READ";
+    private static final String ACTION_SEND_PENDING_MAIL =
+            "org.codeaurora.email.intent.action.MAIL_SERVICE_SEND_PENDING";
+    private static final String EXTRA_MESSAGE_ID = "org.codeaurora.email.intent.extra.MESSAGE_ID";
+    private static final String EXTRA_MESSAGE_INFO =
+            "org.codeaurora.email.intent.extra.MESSAGE_INFO";
+
+    @Override
+    public int onStartCommand(Intent intent, int flags, int startId) {
+
+        final String action = intent.getAction();
+        if (Logging.LOGD) {
+            LogUtils.d(Logging.LOG_TAG, "Action: ", action);
+        }
+        final long accountId = intent.getLongExtra(EXTRA_ACCOUNT, -1);
+        Context context = getApplicationContext();
+        if (ACTION_CHECK_MAIL.equals(action)) {
+            final long inboxId = Mailbox.findMailboxOfType(context, accountId,
+                    Mailbox.TYPE_INBOX);
+            if (Logging.LOGD) {
+                LogUtils.d(Logging.LOG_TAG, "accountId is " + accountId);
+                LogUtils.d(Logging.LOG_TAG, "inboxId is " + inboxId);
+            }
+            if (accountId <= -1 || inboxId <= -1 ) {
+                return START_NOT_STICKY;
+            }
+            mBinder.init(context);
+            mBinder.requestSync(inboxId,true,0);
+        } else if (ACTION_DELETE_MESSAGE.equals(action)) {
+            final long messageId = intent.getLongExtra(EXTRA_MESSAGE_ID, -1);
+            if (Logging.LOGD) {
+                LogUtils.d(Logging.LOG_TAG, "action: Delete Message mail");
+                LogUtils.d(Logging.LOG_TAG, "action: delmsg " + messageId);
+            }
+            if (accountId <= -1 || messageId <= -1 ) {
+                return START_NOT_STICKY;
+            }
+            Store remoteStore = null;
+            try {
+                remoteStore = Store.getInstance(Account.getAccountForMessageId(context, messageId),
+                        context);
+                mBinder.init(context);
+                mBinder.deleteMessage(messageId);
+                synchronizePendingActions(context,
+                        Account.getAccountForMessageId(context, messageId), remoteStore, true);
+            } catch (Exception e) {
+                LogUtils.d(Logging.LOG_TAG, "RemoteException " + e);
+            }
+        } else if (ACTION_MESSAGE_READ.equals(action)) {
+            final long messageId = intent.getLongExtra(EXTRA_MESSAGE_ID, -1);
+            final int flagRead = intent.getIntExtra(EXTRA_MESSAGE_INFO, 0);
+            if (Logging.LOGD) {
+                LogUtils.d(Logging.LOG_TAG, "action: Message Mark Read or UnRead ");
+                LogUtils.d(Logging.LOG_TAG, "action: delmsg " + messageId);
+            }
+            if (accountId <= -1 || messageId <= -1 ) {
+                return START_NOT_STICKY;
+            }
+            Store remoteStore = null;
+            try {
+                mBinder.init(context);
+                mBinder.setMessageRead(messageId, (flagRead == 1)? true:false);
+                remoteStore = Store.getInstance(Account.getAccountForMessageId(context, messageId),
+                        context);
+                synchronizePendingActions(context,
+                        Account.getAccountForMessageId(context, messageId), remoteStore, true);
+            } catch (Exception e){
+                LogUtils.d(Logging.LOG_TAG, "RemoteException " + e);
+            }
+        } else if (ACTION_MOVE_MESSAGE.equals(action)) {
+            final long messageId = intent.getLongExtra(EXTRA_MESSAGE_ID, -1);
+            final int  mailboxType = intent.getIntExtra(EXTRA_MESSAGE_INFO, Mailbox.TYPE_INBOX);
+            final long mailboxId = Mailbox.findMailboxOfType(context, accountId, mailboxType);
+            if (Logging.LOGD) {
+                LogUtils.d(Logging.LOG_TAG, "action:  Move Message mail");
+                LogUtils.d(Logging.LOG_TAG, "action: movemsg " + messageId +
+                        "mailbox: " + mailboxType + "accountId: " + accountId + "mailboxId: "
+                        + mailboxId);
+            }
+            if (accountId <= -1 || messageId <= -1 || mailboxId <= -1){
+                return START_NOT_STICKY;
+            }
+            Store remoteStore = null;
+            try {
+                mBinder.init(context);
+                mBinder.MoveMessages(messageId, mailboxId);
+                remoteStore = Store.getInstance(Account.getAccountForMessageId(context, messageId),
+                        context);
+                synchronizePendingActions(context,
+                        Account.getAccountForMessageId(context, messageId),remoteStore, true);
+            } catch (Exception e){
+                LogUtils.d(Logging.LOG_TAG, "RemoteException " + e);
+            }
+        } else if (ACTION_SEND_PENDING_MAIL.equals(action)) {
+            if (Logging.LOGD) {
+                LogUtils.d(Logging.LOG_TAG, "action: Send Pending Mail " + accountId);
+            }
+            if (accountId <= -1 ) {
+                 return START_NOT_STICKY;
+            }
+            try {
+                mBinder.init(context);
+                mBinder.sendMail(accountId);
+            } catch (Exception e) {
+                LogUtils.e(Logging.LOG_TAG, "RemoteException " + e);
+            }
+        }
+
+        return Service.START_STICKY;
+    }
+
+    /*
+      Create our EmailService implementation here.
+     */
+    class BluetoothEmailServiceStub extends EmailServiceStub {
+       @Override
+        public void loadMore(long messageId) throws RemoteException {
+            LogUtils.i("ImapService", "Try to load more content for message: " + messageId);
+        }
+        /**
+         * Delete a single message by moving it to the trash, or really delete it if it's already in
+         * trash or a draft message.
+         *
+         * This function has no callback, no result reporting, because the desired outcome
+         * is reflected entirely by changes to one or more cursors.
+         *
+         * @param messageId The id of the message to "delete".
+         */
+        public void deleteMessage(long messageId) {
+
+            final EmailContent.Message message =
+                    EmailContent.Message.restoreMessageWithId(mContext, messageId);
+            if (message == null) {
+                if (Logging.LOGD) LogUtils.v(Logging.LOG_TAG, "dletMsg message NULL");
+                return;
+            }
+            // 1. Get the message's account
+            final Account account = Account.restoreAccountWithId(mContext, message.mAccountKey);
+            // 2. Get the message's original mailbox
+            final Mailbox mailbox = Mailbox.restoreMailboxWithId(mContext, message.mMailboxKey);
+            if (account == null || mailbox == null) {
+                if (Logging.LOGD) LogUtils.v(Logging.LOG_TAG, "dletMsg account or mailbox NULL");
+                return;
+            }
+            if(Logging.LOGD)
+                LogUtils.d(Logging.LOG_TAG, "AccountKey " + account.mId + "oirigMailbix: "
+                        + mailbox.mId);
+            // 3. Confirm that there is a trash mailbox available.  If not, create one
+            Mailbox trashFolder =  Mailbox.restoreMailboxOfType(mContext, account.mId,
+                    Mailbox.TYPE_TRASH);
+            if (trashFolder == null) {
+                if (Logging.LOGD) LogUtils.v(Logging.LOG_TAG, "dletMsg Trash mailbox NULL");
+            } else {
+                LogUtils.d(Logging.LOG_TAG, "TrasMailbix: " + trashFolder.mId);
+            }
+            // 4.  Drop non-essential data for the message (e.g. attachment files)
+            AttachmentUtilities.deleteAllAttachmentFiles(mContext, account.mId,
+                    messageId);
+
+            Uri uri = ContentUris.withAppendedId(EmailContent.Message.SYNCED_CONTENT_URI,
+                    messageId);
+
+            // 5. Perform "delete" as appropriate
+            if ((mailbox.mId == trashFolder.mId) || (mailbox.mType == Mailbox.TYPE_DRAFTS)) {
+                // 5a. Really delete it
+                mContext.getContentResolver().delete(uri, null, null);
+            } else {
+                // 5b. Move to trash
+                ContentValues cv = new ContentValues();
+                cv.put(EmailContent.MessageColumns.MAILBOX_KEY, trashFolder.mId);
+                mContext.getContentResolver().update(uri, cv, null, null);
+            }
+        }
+
+        /**
+         * Moves messages to a new mailbox.
+         * This function has no callback, no result reporting, because the desired outcome
+         * is reflected entirely by changes to one or more cursors.
+         * Note this method assumes all of the given message and mailbox IDs belong to the same
+         * account.
+         *
+         * @param messageIds IDs of the messages that are to be moved
+         * @param newMailboxId ID of the new mailbox that the messages will be moved to
+         * @return an asynchronous task that executes the move (for testing only)
+         */
+         public void MoveMessages(long messageId, long newMailboxId) {
+             Account account = Account.getAccountForMessageId(mContext, messageId);
+            if (account != null) {
+                if (Logging.LOGD) {
+                   LogUtils.d(Logging.LOG_TAG, "moveMessage Acct " + account.mId);
+                   LogUtils.d(Logging.LOG_TAG, "moveMessage messageId:" + messageId);
+                }
+               ContentValues cv = new ContentValues();
+               cv.put(EmailContent.MessageColumns.MAILBOX_KEY, newMailboxId);
+               ContentResolver resolver = mContext.getContentResolver();
+               Uri uri = ContentUris.withAppendedId(
+                    EmailContent.Message.SYNCED_CONTENT_URI, messageId);
+               resolver.update(uri, cv, null, null);
+           } else {
+               LogUtils.d(Logging.LOG_TAG, "moveMessage Cannot find account");
+           }
+       }
+
+       /**
+        * Set/clear boolean columns of a message
+        * @param messageId the message to update
+        * @param columnName the column to update
+        * @param columnValue the new value for the column
+        */
+        private void setMessageBoolean(long messageId, String columnName, boolean columnValue) {
+           ContentValues cv = new ContentValues();
+           cv.put(columnName, columnValue);
+           Uri uri = ContentUris.withAppendedId(EmailContent.Message.SYNCED_CONTENT_URI, messageId);
+           mContext.getContentResolver().update(uri, cv, null, null);
+       }
+
+       /**
+        * Set/clear the unread status of a message
+        *
+        * @param messageId the message to update
+        * @param isRead the new value for the isRead flag
+        */
+        public void setMessageRead(long messageId, boolean isRead) {
+           setMessageBoolean(messageId, EmailContent.MessageColumns.FLAG_READ, isRead);
+        }
+
+    };
+
+    private final BluetoothEmailServiceStub mBinder = new BluetoothEmailServiceStub ();
+
+       @Override
+       public IBinder onBind(Intent intent) {
+          mBinder.init(this);
+          return mBinder;
+      }
+    }
diff --git a/provider_src/com/android/email/service/BluetoothPop3Service.java b/provider_src/com/android/email/service/BluetoothPop3Service.java
new file mode 100644
index 000000000..b8470bc91
--- /dev/null
+++ b/provider_src/com/android/email/service/BluetoothPop3Service.java
@@ -0,0 +1,108 @@
+/*
+ * Copyright (c) 2016, The Linux Foundation. All rights reserved.
+ * Not a Contribution.
+ * Copyright (C) 2012 The Android Open Source Project
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.android.email.service;
+
+import android.app.Service;
+import android.content.ContentResolver;
+import android.content.ContentUris;
+import android.content.ContentValues;
+import android.content.Context;
+import android.content.Intent;
+import android.database.Cursor;
+import android.net.TrafficStats;
+import android.net.Uri;
+import android.os.IBinder;
+import android.os.RemoteException;
+
+import com.android.email.DebugUtils;
+import com.android.email.NotificationController;
+import com.android.email.NotificationControllerCreatorHolder;
+import com.android.email.mail.Store;
+import com.android.email.mail.store.Pop3Store;
+import com.android.email.mail.store.Pop3Store.Pop3Folder;
+import com.android.email.mail.store.Pop3Store.Pop3Message;
+import com.android.email.provider.Utilities;
+import com.android.emailcommon.Logging;
+import com.android.emailcommon.TrafficFlags;
+import com.android.emailcommon.mail.AuthenticationFailedException;
+import com.android.emailcommon.mail.Folder.OpenMode;
+import com.android.emailcommon.mail.MessagingException;
+import com.android.emailcommon.provider.Account;
+import com.android.emailcommon.provider.EmailContent;
+import com.android.emailcommon.provider.EmailContent.Attachment;
+import com.android.emailcommon.provider.EmailContent.AttachmentColumns;
+import com.android.emailcommon.provider.EmailContent.Message;
+import com.android.emailcommon.provider.EmailContent.MessageColumns;
+import com.android.emailcommon.provider.EmailContent.SyncColumns;
+import com.android.emailcommon.provider.Mailbox;
+import com.android.emailcommon.service.EmailServiceStatus;
+import com.android.emailcommon.service.IEmailServiceCallback;
+import com.android.emailcommon.utility.AttachmentUtilities;
+import com.android.mail.providers.UIProvider;
+import com.android.mail.providers.UIProvider.AttachmentState;
+import com.android.mail.utils.LogUtils;
+
+import org.apache.james.mime4j.EOLConvertingInputStream;
+
+import java.io.IOException;
+import java.util.ArrayList;
+import java.util.HashMap;
+import java.util.HashSet;
+import android.util.Log;
+
+public class BluetoothPop3Service extends Pop3Service {
+    private static final String TAG = "BluetoothPop3Service";
+    private static final String ACTION_CHECK_MAIL =
+            "org.codeaurora.email.intent.action.MAIL_SERVICE_WAKEUP";
+    private static final String EXTRA_ACCOUNT = "org.codeaurora.email.intent.extra.ACCOUNT";
+
+    @Override
+    public int onStartCommand(Intent intent, int flags, int startId) {
+        if (intent == null) return Service.START_STICKY;
+
+        final String action = intent.getAction();
+        Log.d(TAG, "action is " + action);
+        Context context = getApplicationContext();
+        if (ACTION_CHECK_MAIL.equals(action)) {
+            final long accountId = intent.getLongExtra(EXTRA_ACCOUNT, -1);
+            final long inboxId = Mailbox.findMailboxOfType(context, accountId, Mailbox.TYPE_INBOX);
+            Log.d(TAG, "accountId is " + accountId + ", inboxId is " + inboxId);
+            mBinder.init(context);
+            mBinder.requestSync(inboxId, true, 0);
+        }
+        return Service.START_STICKY;
+    }
+
+    /**
+     * Create our EmailService implementation here.
+     */
+    private final EmailServiceStub mBinder = new EmailServiceStub() {
+        @Override
+        public void loadMore(long messageId) throws RemoteException {
+            LogUtils.i(TAG, "Try to load more content for message: " + messageId);
+        }
+    };
+
+    @Override
+    public IBinder onBind(Intent intent) {
+        mBinder.init(this);
+        return mBinder;
+    }
+
+    }
diff --git a/provider_src/com/android/email/service/BruteleAuthenticatorService.java b/provider_src/com/android/email/service/BruteleAuthenticatorService.java
new file mode 100644
index 000000000..61e3ce96c
--- /dev/null
+++ b/provider_src/com/android/email/service/BruteleAuthenticatorService.java
@@ -0,0 +1,36 @@
+/*
+ * Copyright (c) 2016, The Linux Foundation. All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions are
+ * met:
+    * Redistributions of source code must retain the above copyright
+      notice, this list of conditions and the following disclaimer.
+    * Redistributions in binary form must reproduce the above
+      copyright notice, this list of conditions and the following
+      disclaimer in the documentation and/or other materials provided
+      with the distribution.
+    * Neither the name of The Linux Foundation nor the names of its
+      contributors may be used to endorse or promote products derived
+      from this software without specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED "AS IS" AND ANY EXPRESS OR IMPLIED
+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
+ * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT
+ * ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS
+ * BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
+ * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
+ * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
+ * BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
+ * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE
+ * OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN
+ * IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ */
+
+package com.android.email.service;
+
+/**
+ * This service needs to be declared separately from the base service
+ */
+public class BruteleAuthenticatorService extends AuthenticatorService {
+}
diff --git a/provider_src/com/android/email/service/ClixAuthenticatorService.java b/provider_src/com/android/email/service/ClixAuthenticatorService.java
new file mode 100644
index 000000000..46a27ccee
--- /dev/null
+++ b/provider_src/com/android/email/service/ClixAuthenticatorService.java
@@ -0,0 +1,36 @@
+/*
+ * Copyright (c) 2016, The Linux Foundation. All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions are
+ * met:
+    * Redistributions of source code must retain the above copyright
+      notice, this list of conditions and the following disclaimer.
+    * Redistributions in binary form must reproduce the above
+      copyright notice, this list of conditions and the following
+      disclaimer in the documentation and/or other materials provided
+      with the distribution.
+    * Neither the name of The Linux Foundation nor the names of its
+      contributors may be used to endorse or promote products derived
+      from this software without specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED "AS IS" AND ANY EXPRESS OR IMPLIED
+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
+ * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT
+ * ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS
+ * BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
+ * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
+ * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
+ * BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
+ * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE
+ * OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN
+ * IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ */
+
+package com.android.email.service;
+
+/**
+ * This service needs to be declared separately from the base service
+ */
+public class ClixAuthenticatorService extends AuthenticatorService {
+}
diff --git a/provider_src/com/android/email/service/CorreoOrangeAuthenticatorService.java b/provider_src/com/android/email/service/CorreoOrangeAuthenticatorService.java
new file mode 100644
index 000000000..9f0cfaf3e
--- /dev/null
+++ b/provider_src/com/android/email/service/CorreoOrangeAuthenticatorService.java
@@ -0,0 +1,36 @@
+/*
+ * Copyright (c) 2016, The Linux Foundation. All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions are
+ * met:
+    * Redistributions of source code must retain the above copyright
+      notice, this list of conditions and the following disclaimer.
+    * Redistributions in binary form must reproduce the above
+      copyright notice, this list of conditions and the following
+      disclaimer in the documentation and/or other materials provided
+      with the distribution.
+    * Neither the name of The Linux Foundation nor the names of its
+      contributors may be used to endorse or promote products derived
+      from this software without specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED "AS IS" AND ANY EXPRESS OR IMPLIED
+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
+ * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT
+ * ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS
+ * BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
+ * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
+ * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
+ * BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
+ * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE
+ * OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN
+ * IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ */
+
+package com.android.email.service;
+
+/**
+ * This service needs to be declared separately from the base service
+ */
+public class CorreoOrangeAuthenticatorService extends AuthenticatorService {
+}
diff --git a/provider_src/com/android/email/service/EmailBroadcastProcessorService.java b/provider_src/com/android/email/service/EmailBroadcastProcessorService.java
index 7aa54673e..e91a49ea1 100644
--- a/provider_src/com/android/email/service/EmailBroadcastProcessorService.java
+++ b/provider_src/com/android/email/service/EmailBroadcastProcessorService.java
@@ -293,6 +293,10 @@ public class EmailBroadcastProcessorService extends IntentService {
     private void onBootCompleted() {
         performOneTimeInitialization();
         reconcileAndStartServices();
+
+        // This is an special case to start IMAP PUSH via its adapter
+        Intent imap = new Intent(this, LegacyImapSyncAdapterService.class);
+        startService(imap);
     }
 
     private void reconcileAndStartServices() {
diff --git a/provider_src/com/android/email/service/EmailServiceStub.java b/provider_src/com/android/email/service/EmailServiceStub.java
index 055c36004..c7c40ffa4 100644
--- a/provider_src/com/android/email/service/EmailServiceStub.java
+++ b/provider_src/com/android/email/service/EmailServiceStub.java
@@ -177,6 +177,12 @@ public abstract class EmailServiceStub extends IEmailService.Stub implements IEm
                 mailbox = Mailbox.restoreMailboxWithId(mContext, message.mMainMailboxKey);
             }
 
+            if (message.mServerId == null) {
+                cb.loadAttachmentStatus(messageId, attachmentId,
+                        EmailServiceStatus.MESSAGE_NOT_FOUND, 0);
+                return;
+            }
+
             if (account == null || mailbox == null) {
                 // If the account/mailbox are gone, just report success; the UI handles this
                 cb.loadAttachmentStatus(messageId, attachmentId,
@@ -305,10 +311,15 @@ public abstract class EmailServiceStub extends IEmailService.Stub implements IEm
                         // actually occurs.
                         mailbox.mUiSyncStatus = Mailbox.SYNC_STATUS_INITIAL_SYNC_NEEDED;
                     }
-                    mailbox.save(mContext);
                     if (type == Mailbox.TYPE_INBOX) {
                         inboxId = mailbox.mId;
+
+                        // In a clean start we must mark the Inbox mailbox as syncable. This
+                        // is required by the new multiple mailboxes sync. Initially Inbox
+                        // should start marked
+                        mailbox.mSyncInterval = 1;
                     }
+                    mailbox.save(mContext);
                 }
             }
 
diff --git a/provider_src/com/android/email/service/EmailServiceUtils.java b/provider_src/com/android/email/service/EmailServiceUtils.java
index 3532689c4..4b93d1ef7 100644
--- a/provider_src/com/android/email/service/EmailServiceUtils.java
+++ b/provider_src/com/android/email/service/EmailServiceUtils.java
@@ -702,6 +702,10 @@ public class EmailServiceUtils {
                 final long attachmentId, final boolean background) throws RemoteException {
         }
 
+        @Override
+        public void loadMore(long arg0) throws RemoteException {
+        }
+
         @Override
         public void updateFolderList(long accountId) throws RemoteException {}
 
diff --git a/provider_src/com/android/email/service/EuphonyAuthenticatorService.java b/provider_src/com/android/email/service/EuphonyAuthenticatorService.java
new file mode 100644
index 000000000..2e4b3c214
--- /dev/null
+++ b/provider_src/com/android/email/service/EuphonyAuthenticatorService.java
@@ -0,0 +1,36 @@
+/*
+ * Copyright (c) 2016, The Linux Foundation. All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions are
+ * met:
+    * Redistributions of source code must retain the above copyright
+      notice, this list of conditions and the following disclaimer.
+    * Redistributions in binary form must reproduce the above
+      copyright notice, this list of conditions and the following
+      disclaimer in the documentation and/or other materials provided
+      with the distribution.
+    * Neither the name of The Linux Foundation nor the names of its
+      contributors may be used to endorse or promote products derived
+      from this software without specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED "AS IS" AND ANY EXPRESS OR IMPLIED
+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
+ * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT
+ * ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS
+ * BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
+ * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
+ * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
+ * BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
+ * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE
+ * OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN
+ * IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ */
+
+package com.android.email.service;
+
+/**
+ * This service needs to be declared separately from the base service
+ */
+public class EuphonyAuthenticatorService extends AuthenticatorService {
+}
diff --git a/provider_src/com/android/email/service/FreeAuthenticatorService.java b/provider_src/com/android/email/service/FreeAuthenticatorService.java
new file mode 100644
index 000000000..e44431051
--- /dev/null
+++ b/provider_src/com/android/email/service/FreeAuthenticatorService.java
@@ -0,0 +1,36 @@
+/*
+ * Copyright (c) 2016, The Linux Foundation. All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions are
+ * met:
+    * Redistributions of source code must retain the above copyright
+      notice, this list of conditions and the following disclaimer.
+    * Redistributions in binary form must reproduce the above
+      copyright notice, this list of conditions and the following
+      disclaimer in the documentation and/or other materials provided
+      with the distribution.
+    * Neither the name of The Linux Foundation nor the names of its
+      contributors may be used to endorse or promote products derived
+      from this software without specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED "AS IS" AND ANY EXPRESS OR IMPLIED
+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
+ * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT
+ * ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS
+ * BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
+ * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
+ * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
+ * BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
+ * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE
+ * OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN
+ * IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ */
+
+package com.android.email.service;
+
+/**
+ * This service needs to be declared separately from the base service
+ */
+public class FreeAuthenticatorService extends AuthenticatorService {
+}
diff --git a/provider_src/com/android/email/service/GmailAuthenticatorService.java b/provider_src/com/android/email/service/GmailAuthenticatorService.java
new file mode 100644
index 000000000..87d57f6c5
--- /dev/null
+++ b/provider_src/com/android/email/service/GmailAuthenticatorService.java
@@ -0,0 +1,36 @@
+/*
+ * Copyright (c) 2016, The Linux Foundation. All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions are
+ * met:
+    * Redistributions of source code must retain the above copyright
+      notice, this list of conditions and the following disclaimer.
+    * Redistributions in binary form must reproduce the above
+      copyright notice, this list of conditions and the following
+      disclaimer in the documentation and/or other materials provided
+      with the distribution.
+    * Neither the name of The Linux Foundation nor the names of its
+      contributors may be used to endorse or promote products derived
+      from this software without specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED "AS IS" AND ANY EXPRESS OR IMPLIED
+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
+ * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT
+ * ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS
+ * BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
+ * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
+ * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
+ * BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
+ * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE
+ * OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN
+ * IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ */
+
+package com.android.email.service;
+
+/**
+ * This service needs to be declared separately from the base service
+ */
+public class GmailAuthenticatorService extends AuthenticatorService {
+}
diff --git a/provider_src/com/android/email/service/HotmailAuthenticatorService.java b/provider_src/com/android/email/service/HotmailAuthenticatorService.java
new file mode 100644
index 000000000..3b1179708
--- /dev/null
+++ b/provider_src/com/android/email/service/HotmailAuthenticatorService.java
@@ -0,0 +1,36 @@
+/*
+ * Copyright (c) 2016, The Linux Foundation. All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions are
+ * met:
+    * Redistributions of source code must retain the above copyright
+      notice, this list of conditions and the following disclaimer.
+    * Redistributions in binary form must reproduce the above
+      copyright notice, this list of conditions and the following
+      disclaimer in the documentation and/or other materials provided
+      with the distribution.
+    * Neither the name of The Linux Foundation nor the names of its
+      contributors may be used to endorse or promote products derived
+      from this software without specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED "AS IS" AND ANY EXPRESS OR IMPLIED
+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
+ * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT
+ * ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS
+ * BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
+ * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
+ * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
+ * BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
+ * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE
+ * OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN
+ * IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ */
+
+package com.android.email.service;
+
+/**
+ * This service needs to be declared separately from the base service
+ */
+public class HotmailAuthenticatorService extends AuthenticatorService {
+}
diff --git a/provider_src/com/android/email/service/ImapService.java b/provider_src/com/android/email/service/ImapService.java
old mode 100644
new mode 100755
index d2dcd5469..bef3c8f6b
--- a/provider_src/com/android/email/service/ImapService.java
+++ b/provider_src/com/android/email/service/ImapService.java
@@ -16,28 +16,46 @@
 
 package com.android.email.service;
 
+import android.app.AlarmManager;
+import android.app.PendingIntent;
 import android.app.Service;
 import android.content.ContentResolver;
 import android.content.ContentUris;
 import android.content.ContentValues;
 import android.content.Context;
 import android.content.Intent;
+import android.database.ContentObserver;
 import android.database.Cursor;
+import android.net.ConnectivityManager;
+import android.net.NetworkInfo;
 import android.net.TrafficStats;
 import android.net.Uri;
+import android.os.Bundle;
+import android.os.Handler;
 import android.os.IBinder;
+import android.os.PowerManager;
+import android.os.RemoteException;
 import android.os.SystemClock;
+import android.provider.BaseColumns;
 import android.text.TextUtils;
 import android.text.format.DateUtils;
+import android.util.SparseArray;
+import android.util.SparseLongArray;
 
 import com.android.email.DebugUtils;
+import com.android.email.EmailConnectivityManager;
 import com.android.email.LegacyConversions;
 import com.android.email.NotificationController;
 import com.android.email.NotificationControllerCreatorHolder;
 import com.android.email.R;
 import com.android.email.mail.Store;
+import com.android.email.mail.store.ImapFolder;
+import com.android.email.provider.EmailProvider;
 import com.android.email.provider.Utilities;
 import com.android.emailcommon.Logging;
+
+import static com.android.emailcommon.Logging.LOG_TAG;
+
 import com.android.emailcommon.TrafficFlags;
 import com.android.emailcommon.internet.MimeUtility;
 import com.android.emailcommon.mail.AuthenticationFailedException;
@@ -58,7 +76,9 @@ import com.android.emailcommon.provider.EmailContent.MessageColumns;
 import com.android.emailcommon.provider.EmailContent.SyncColumns;
 import com.android.emailcommon.provider.Mailbox;
 import com.android.emailcommon.service.EmailServiceStatus;
+import com.android.emailcommon.service.IEmailService;
 import com.android.emailcommon.service.SearchParams;
+import com.android.emailcommon.service.SyncSize;
 import com.android.emailcommon.service.SyncWindow;
 import com.android.emailcommon.utility.AttachmentUtilities;
 import com.android.mail.providers.UIProvider;
@@ -70,11 +90,12 @@ import java.util.Comparator;
 import java.util.Date;
 import java.util.HashMap;
 import java.util.List;
+import java.util.concurrent.ExecutorService;
+import java.util.concurrent.Executors;
 
 public class ImapService extends Service {
     // TODO get these from configurations or settings.
     private static final long QUICK_SYNC_WINDOW_MILLIS = DateUtils.DAY_IN_MILLIS;
-    private static final long FULL_SYNC_WINDOW_MILLIS = 7 * DateUtils.DAY_IN_MILLIS;
     private static final long FULL_SYNC_INTERVAL_MILLIS = 4 * DateUtils.HOUR_IN_MILLIS;
 
     // The maximum number of messages to fetch in a single command.
@@ -88,6 +109,14 @@ public class ImapService extends Service {
     private static final Flag[] FLAG_LIST_FLAGGED = new Flag[] { Flag.FLAGGED };
     private static final Flag[] FLAG_LIST_ANSWERED = new Flag[] { Flag.ANSWERED };
 
+    // Kick idle connection every ~25 minutes (in a window between 25 and 28 minutes)
+    private static final int KICK_IDLE_CONNECTION_TIMEOUT = 25 * 60 * 1000;
+    private static final int KICK_IDLE_CONNECTION_MAX_DELAY = 3 * 60 * 1000;
+
+    // Restart idle connection between 30 seconds and 1 minute after re-gaining connectivity
+    private static final int RESTART_IDLE_DELAY_MIN = 30 * 1000;
+    private static final int RESTART_IDLE_DELAY_MAX = 60 * 1000;
+
     /**
      * Simple cache for last search result mailbox by account and serverId, since the most common
      * case will be repeated use of the same mailbox
@@ -104,38 +133,834 @@ public class ImapService extends Service {
     private static final HashMap<Long, SortableMessage[]> sSearchResults =
             new HashMap<Long, SortableMessage[]>();
 
+    private static final ExecutorService sExecutor = Executors.newCachedThreadPool();
+
     /**
      * We write this into the serverId field of messages that will never be upsynced.
      */
     private static final String LOCAL_SERVERID_PREFIX = "Local-";
+    private static final String ACTION_RESTART_IDLE_CONNECTION =
+            "com.android.email.intent.action.RESTART_IDLE_CONNECTION";
+    private static final String ACTION_RESTART_ALL_IDLE_CONNECTIONS =
+            "com.android.email.intent.action.RESTART_ALL_IDLE_CONNECTIONS";
+    private static final String ACTION_KICK_IDLE_CONNECTION =
+            "com.android.email.intent.action.KICK_IDLE_CONNECTION";
+    private static final String EXTRA_MAILBOX = "com.android.email.intent.extra.MAILBOX";
+
+    private static final long RESCHEDULE_PING_DELAY = 500L;
+    private static final long MAX_PING_DELAY = 30 * 60 * 1000L;
+
+    private static String sLegacyImapProtocol;
 
     private static String sMessageDecodeErrorString;
 
+    private static boolean mSyncLock;
+
     /**
      * Used in ImapFolder for base64 errors. Cached here because ImapFolder does not have access
      * to a Context object.
+     *
      * @return Error string or empty string
      */
     public static String getMessageDecodeErrorString() {
         return sMessageDecodeErrorString == null ? "" : sMessageDecodeErrorString;
     }
 
-    @Override
-    public void onCreate() {
-        super.onCreate();
+    private static class ImapIdleListener implements ImapFolder.IdleCallback {
+        private static final SparseLongArray sPingDelay = new SparseLongArray();
+        private final Context mContext;
+
+        private final Account mAccount;
+        private final Mailbox mMailbox;
+
+        public ImapIdleListener(Context context, Account account, Mailbox mailbox) {
+            super();
+            mContext = context;
+            mAccount = account;
+            mMailbox = mailbox;
+        }
+
+        @Override
+        public void onIdled() {
+            scheduleKickIdleConnection();
+        }
+
+        @Override
+        public void onIdlingDone() {
+            cancelKickIdleConnection();
+            cancelPing();
+            resetPingDelay();
+        }
+
+        @Override
+        public void onNewServerChange(final boolean needSync, final List<String> fetchMessages) {
+            // Instead of checking every received change, request a sync of the mailbox
+            if (Logging.LOGD) {
+                LogUtils.d(LOG_TAG, "Server notified new changes for mailbox " + mMailbox.mId);
+            }
+            cancelKickIdleConnection();
+            cancelPing();
+            resetPingDelay();
+
+            // Request a sync but wait a bit for new incoming messages from server
+            sExecutor.execute(new Runnable() {
+                @Override
+                public void run() {
+                    // Selectively process all the retrieved changes
+                    processImapIdleChangesLocked(mContext, mAccount, mMailbox,
+                            needSync, fetchMessages);
+                }
+            });
+        }
+
+        @Override
+        public void onTimeout() {
+            // Timeout reschedule a new ping
+            LogUtils.i(LOG_TAG, "Ping timeout for mailbox " + mMailbox.mId + ". Reschedule.");
+            cancelKickIdleConnection();
+            internalUnregisterFolderIdle();
+            reschedulePing(RESCHEDULE_PING_DELAY);
+            resetPingDelay();
+        }
+
+        @Override
+        public void onException(MessagingException ex) {
+            // Reschedule a new ping
+            LogUtils.e(LOG_TAG, ex, "Ping exception for mailbox " + mMailbox.mId);
+            cancelKickIdleConnection();
+            internalUnregisterFolderIdle();
+            reschedulePing(increasePingDelay());
+        }
+
+        private void internalUnregisterFolderIdle() {
+            ImapIdleFolderHolder holder = ImapIdleFolderHolder.getInstance();
+            synchronized (holder.mIdledFolders) {
+                holder.mIdledFolders.remove((int) mMailbox.mId);
+            }
+        }
+
+        private void reschedulePing(long delay) {
+            // Check for connectivity before reschedule
+            ConnectivityManager cm =
+                    (ConnectivityManager) mContext.getSystemService(Context.CONNECTIVITY_SERVICE);
+            NetworkInfo activeNetwork = cm.getActiveNetworkInfo();
+            if (activeNetwork == null || !activeNetwork.isConnected()) {
+                cancelPing();
+            } else {
+                PendingIntent pi = getIdleRefreshIntent();
+                AlarmManager am = (AlarmManager) mContext.getSystemService(Context.ALARM_SERVICE);
+                am.set(AlarmManager.RTC_WAKEUP, delay, pi);
+            }
+        }
+
+        private void cancelPing() {
+            AlarmManager am = (AlarmManager) mContext.getSystemService(Context.ALARM_SERVICE);
+            am.cancel(getIdleRefreshIntent());
+        }
+
+        private void resetPingDelay() {
+            synchronized (sPingDelay) {
+                int index = sPingDelay.indexOfKey((int) mMailbox.mId);
+                if (index >= 0) {
+                    sPingDelay.removeAt(index);
+                }
+            }
+        }
+
+        private long increasePingDelay() {
+            synchronized (sPingDelay) {
+                long delay = Math.max(RESCHEDULE_PING_DELAY, sPingDelay.get((int) mMailbox.mId));
+                delay = Math.min(MAX_PING_DELAY, delay * 2);
+                sPingDelay.put((int) mMailbox.mId, delay);
+                return delay;
+            }
+        }
+
+        private PendingIntent getIdleRefreshIntent() {
+            Intent i = new Intent(mContext, ImapService.class);
+            i.setAction(ACTION_RESTART_IDLE_CONNECTION);
+            i.putExtra(EXTRA_MAILBOX, mMailbox.mId);
+            return PendingIntent.getService(mContext, (int) mMailbox.mId, i,
+                    PendingIntent.FLAG_UPDATE_CURRENT);
+        }
+
+        private void scheduleKickIdleConnection() {
+            PendingIntent pi = getKickIdleConnectionPendingIntent();
+            long due = SystemClock.elapsedRealtime() + KICK_IDLE_CONNECTION_TIMEOUT;
+            long windowLength = KICK_IDLE_CONNECTION_MAX_DELAY;
+            AlarmManager am = (AlarmManager) mContext.getSystemService(Context.ALARM_SERVICE);
+            am.setWindow(AlarmManager.ELAPSED_REALTIME_WAKEUP, due, windowLength, pi);
+        }
+
+        private void cancelKickIdleConnection() {
+            AlarmManager am = (AlarmManager) mContext.getSystemService(Context.ALARM_SERVICE);
+            am.cancel(getKickIdleConnectionPendingIntent());
+        }
+
+        private PendingIntent getKickIdleConnectionPendingIntent() {
+            Intent i = new Intent(mContext, ImapService.class);
+            i.setAction(ACTION_KICK_IDLE_CONNECTION);
+            i.putExtra(EXTRA_MAILBOX, mMailbox.mId);
+            return PendingIntent.getService(mContext, (int) mMailbox.mId,
+                    i, PendingIntent.FLAG_UPDATE_CURRENT);
+        }
+    }
+
+    private static class ImapIdleFolderHolder {
+        private static ImapIdleFolderHolder sInstance;
+        private SparseArray<ImapFolder> mIdledFolders = new SparseArray<>();
+
+        private static ImapIdleFolderHolder getInstance() {
+            if (sInstance == null) {
+                sInstance = new ImapIdleFolderHolder();
+            }
+            return sInstance;
+        }
+
+        private ImapFolder getIdledMailbox(long mailboxId) {
+            synchronized (mIdledFolders) {
+                ImapFolder folder = mIdledFolders.get((int) mailboxId);
+                return folder != null && folder.isIdling() ? folder : null;
+            }
+        }
+
+        private boolean isMailboxIdled(long mailboxId) {
+            return getIdledMailbox(mailboxId) != null;
+        }
+
+        private boolean registerMailboxForIdle(Context context, Account account, Mailbox mailbox)
+                throws MessagingException {
+            synchronized (mIdledFolders) {
+                if (mailbox.mType == Mailbox.TYPE_DRAFTS || mailbox.mType == Mailbox.TYPE_OUTBOX) {
+                    LogUtils.i(LOG_TAG, "Mailbox is not a valid idle folder: " + mailbox.mId);
+                    return false;
+                }
+
+                // Check that the account is ready for push
+                if (account.getSyncInterval() != Account.CHECK_INTERVAL_PUSH) {
+                    LogUtils.d(LOG_TAG, "Account is not configured as push: " + account.mId);
+                    return false;
+                }
+
+                // Check that the folder isn't already registered
+                if (isMailboxIdled(mailbox.mId)) {
+                    LogUtils.i(LOG_TAG, "Mailbox is idled already: " + mailbox.mId);
+                    return true;
+                }
+
+                if (!EmailConnectivityManager.isConnected(context)) {
+                    LogUtils.i(LOG_TAG, "No available connection to register "
+                            + "mailbox for idle: " + mailbox.mId);
+                    return false;
+                }
+
+                // And now just idle the folder
+                try {
+                    Store remoteStore = Store.getInstance(account, context);
+                    ImapFolder folder = mIdledFolders.get((int) mailbox.mId);
+                    if (folder == null) {
+                        folder = (ImapFolder) remoteStore.getFolder(mailbox.mServerId);
+                        mIdledFolders.put((int) mailbox.mId, folder);
+                    }
+                    folder.open(OpenMode.READ_WRITE);
+                    folder.startIdling(new ImapIdleListener(context,
+                            remoteStore.getAccount(), mailbox));
+
+                    LogUtils.i(LOG_TAG, "Registered idle for mailbox " + mailbox.mId);
+                    return true;
+                } catch (Exception ex) {
+                    LogUtils.i(LOG_TAG, ex, "Failed to register idle for mailbox " + mailbox.mId);
+                }
+                return false;
+            }
+        }
+
+        private void unregisterIdledMailbox(long mailboxId, boolean remove)
+                throws MessagingException {
+            final ImapFolder folder;
+            synchronized (mIdledFolders) {
+                folder = unregisterIdledMailboxLocked(mailboxId, remove);
+            }
+            if (folder != null) {
+                folder.stopIdling(remove);
+            }
+        }
+
+        private ImapFolder unregisterIdledMailboxLocked(long mailboxId, boolean remove)
+                throws MessagingException {
+            // Check that the folder is already registered
+            ImapFolder folder = mIdledFolders.get((int) mailboxId);
+            if (folder == null || !folder.isIdling()) {
+                LogUtils.i(LOG_TAG, "Mailbox isn't idled yet: " + mailboxId);
+                return null;
+            }
+
+            if (remove) {
+                mIdledFolders.remove((int) mailboxId);
+            }
+
+            LogUtils.i(LOG_TAG, "Unregistered idle for mailbox " + mailboxId);
+            return folder;
+        }
+
+        private void registerAccountForIdle(Context context, Account account)
+                throws MessagingException {
+            // Check that the account is ready for push
+            if (account.getSyncInterval() != Account.CHECK_INTERVAL_PUSH) {
+                LogUtils.d(LOG_TAG, "Account is not configured as push: " + account.mId);
+                return;
+            }
+
+            LogUtils.i(LOG_TAG, "Register idle for account " + account.mId);
+            Cursor c = Mailbox.getLoopBackMailboxIdsForSync(
+                    context.getContentResolver(), account.mId);
+            if (c != null) {
+                try {
+                    boolean hasSyncMailboxes = false;
+                    while (c.moveToNext()) {
+                        long mailboxId = c.getLong(c.getColumnIndex(BaseColumns._ID));
+                        final Mailbox mailbox = Mailbox.restoreMailboxWithId(context, mailboxId);
+                        boolean registered = isMailboxIdled(mailboxId);
+                        if (!registered) {
+                            registered = registerMailboxForIdle(context, account, mailbox);
+                        }
+                        hasSyncMailboxes |= registered;
+                    }
+
+                    // Sync the inbox
+                    if (!hasSyncMailboxes) {
+                        final long inboxId = Mailbox.findMailboxOfType(
+                                context, account.mId, Mailbox.TYPE_INBOX);
+                        if (inboxId != Mailbox.NO_MAILBOX) {
+                            final Mailbox inbox = Mailbox.restoreMailboxWithId(context, inboxId);
+                            if (!isMailboxIdled(inbox.mId)) {;
+                                registerMailboxForIdle(context, account, inbox);
+                            }
+                        }
+                    }
+                } finally {
+                    c.close();
+                }
+            }
+        }
+
+        private void kickAccountIdledMailboxes(Context context, Account account)
+                throws MessagingException {
+            synchronized (mIdledFolders) {
+                unregisterAccountIdledMailboxes(context, account.mId, true);
+                registerAccountForIdle(context, account);
+            }
+        }
+
+        private void kickIdledMailbox(Context context, Mailbox mailbox, Account account)
+                throws MessagingException {
+            final ImapFolder folder = getIdledMailbox((int) mailbox.mId);
+            if (folder != null) {
+                folder.stopIdling(false);
+                folder.startIdling(new ImapIdleListener(context, account, mailbox));
+            }
+        }
+
+        private void unregisterAccountIdledMailboxes(Context context, long accountId,
+                boolean remove) {
+            LogUtils.i(LOG_TAG, "Unregister idle for account " + accountId);
+            final ArrayList<ImapFolder> foldersToStop = new ArrayList<>();
+
+            synchronized (mIdledFolders) {
+                int count = mIdledFolders.size() - 1;
+                for (int index = count; index >= 0; index--) {
+                    long mailboxId = mIdledFolders.keyAt(index);
+                    try {
+                        Mailbox mailbox = Mailbox.restoreMailboxWithId(context, mailboxId);
+                        if (mailbox == null || mailbox.mAccountKey == accountId) {
+                            ImapFolder folder = unregisterIdledMailboxLocked(mailboxId, remove);
+                            if (folder != null) {
+                                foldersToStop.add(folder);
+                                LogUtils.i(LOG_TAG, "Unregister idle for mailbox " + mailboxId);
+                            }
+                        }
+                    } catch (MessagingException ex) {
+                        LogUtils.w(LOG_TAG, "Failed to unregister mailbox "
+                                + mailboxId + " for account " + accountId);
+                    }
+                }
+            }
+            stopIdlingForFoldersInBackground(foldersToStop);
+        }
+
+        private void unregisterAllIdledMailboxes(final boolean disconnect) {
+            final ArrayList<ImapFolder> foldersToStop = new ArrayList<>();
+            synchronized (mIdledFolders) {
+                LogUtils.i(LOG_TAG, "Unregister all idle mailboxes");
+
+                if (disconnect) {
+                    int count = mIdledFolders.size();
+                    for (int i = 0; i < count; i++) {
+                        ImapFolder folder = mIdledFolders.get(mIdledFolders.keyAt(i));
+                        if (folder != null && folder.isIdling()) {
+                            foldersToStop.add(folder);
+                        }
+                    }
+                }
+                mIdledFolders.clear();
+            }
+            stopIdlingForFoldersInBackground(foldersToStop);
+        }
+
+        private void stopIdlingForFoldersInBackground(final List<ImapFolder> folders) {
+            if (folders.isEmpty()) {
+                return;
+            }
+            sExecutor.execute(new Runnable() {
+                @Override
+                public void run() {
+                    for (ImapFolder folder : folders) {
+                        try {
+                            folder.stopIdling(true);
+                        } catch (MessagingException me) {
+                            // ignored
+                        }
+                    }
+                }
+            });
+        }
+    }
+
+    private static class ImapEmailConnectivityManager extends EmailConnectivityManager {
+        private final Context mContext;
+
+        public ImapEmailConnectivityManager(Context context) {
+            super(context, LOG_TAG);
+            mContext = context;
+        }
+
+        public void destroy() {
+            cancelIdleConnectionRestart();
+        }
+
+        @Override
+        public void onConnectivityRestored(int networkType) {
+            if (Logging.LOGD) {
+                LogUtils.d(Logging.LOG_TAG, "onConnectivityRestored ("
+                        + "networkType=" + networkType + ")");
+            }
+
+            scheduleIdleConnectionRestart();
+        }
+
+        @Override
+        public void onConnectivityLost(int networkType) {
+            if (Logging.LOGD) {
+                LogUtils.d(Logging.LOG_TAG, "onConnectivityLost ("
+                        + "networkType=" + networkType + ")");
+            }
+            // Only remove references. We have no network to kill idled connections
+            ImapIdleFolderHolder.getInstance().unregisterAllIdledMailboxes(false);
+            cancelIdleConnectionRestart();
+        }
+
+        private void scheduleIdleConnectionRestart() {
+            PendingIntent pi = getIdleConnectionRestartIntent();
+            long due = SystemClock.elapsedRealtime() + RESTART_IDLE_DELAY_MIN;
+            long windowLength = RESTART_IDLE_DELAY_MAX - RESTART_IDLE_DELAY_MIN;
+            AlarmManager am = (AlarmManager) mContext.getSystemService(Context.ALARM_SERVICE);
+            am.setWindow(AlarmManager.ELAPSED_REALTIME_WAKEUP, due, windowLength, pi);
+        }
+
+        private void cancelIdleConnectionRestart() {
+            AlarmManager am = (AlarmManager) mContext.getSystemService(Context.ALARM_SERVICE);
+            am.cancel(getIdleConnectionRestartIntent());
+        }
+
+        private PendingIntent getIdleConnectionRestartIntent() {
+            Intent i = new Intent(mContext, ImapService.class);
+            i.setAction(ACTION_RESTART_ALL_IDLE_CONNECTIONS);
+            return PendingIntent.getService(mContext, 0, i, 0);
+        }
+    }
+
+    private static class LocalChangesContentObserver extends ContentObserver {
+        private Context mContext;
+
+        public LocalChangesContentObserver(Context context, Handler handler) {
+            super(handler);
+            mContext = context;
+        }
+
+        @Override
+        public void onChange(boolean selfChange, Uri uri) {
+            // what changed?
+            try {
+                List<String> segments = uri.getPathSegments();
+                final String type = segments.get(0);
+                final String op = segments.get(1);
+                final long id = Long.parseLong(uri.getLastPathSegment());
+
+                // Run the changes processor outside the ui thread
+                sExecutor.execute(new Runnable() {
+                    @Override
+                    public void run() {
+                        // Apply the change
+                        if (type.equals("account")) {
+                            processAccountChanged(op, id);
+                        } else if (type.equals("mailbox")) {
+                            processMailboxChanged(op, id);
+                        } else if (type.equals("message")) {
+                            processMessageChanged(op, id);
+                        }
+                    }
+                });
+            } catch (Exception ex) {
+                return;
+            }
+        }
+
+        private void processAccountChanged(String op, long id) {
+            // For delete operations we can't fetch the account, so process it first
+            if (op.equals(EmailProvider.NOTIFICATION_OP_DELETE)) {
+                ImapIdleFolderHolder.getInstance()
+                        .unregisterAccountIdledMailboxes(mContext, id, true);
+                stopImapPushServiceIfNecessary(mContext);
+                return;
+            }
+
+            Account account = Account.restoreAccountWithId(mContext, id);
+            if (account == null) {
+                return;
+            }
+            if (!isLegacyImapProtocol(mContext, account)) {
+                // The account isn't an imap account
+                return;
+            }
+
+            try {
+                final ImapIdleFolderHolder holder = ImapIdleFolderHolder.getInstance();
+                if (op.equals(EmailProvider.NOTIFICATION_OP_UPDATE)) {
+                    holder.kickAccountIdledMailboxes(mContext, account);
+                } else if (op.equals(EmailProvider.NOTIFICATION_OP_INSERT)) {
+                    if (account.getSyncInterval() == Account.CHECK_INTERVAL_PUSH) {
+                        holder.registerAccountForIdle(mContext, account);
+                    }
+                }
+            } catch (MessagingException me) {
+                LogUtils.e(LOG_TAG, me, "Failed to process imap account " + id + " changes.");
+            }
+
+            // Check if service should be started/stopped
+            stopImapPushServiceIfNecessary(mContext);
+        }
+
+        private void processMailboxChanged(String op, long id) {
+            // For delete operations we can't fetch the mailbox, so process it first
+            if (op.equals(EmailProvider.NOTIFICATION_OP_DELETE)) {
+                try {
+                    ImapIdleFolderHolder.getInstance().unregisterIdledMailbox(id, true);
+                } catch (MessagingException me) {
+                    LogUtils.e(LOG_TAG, me, "Failed to process imap mailbox " + id + " changes.");
+                }
+                return;
+            }
+
+            Mailbox mailbox = Mailbox.restoreMailboxWithId(mContext, id);
+            if (mailbox == null) {
+                return;
+            }
+            Account account = Account.restoreAccountWithId(mContext, mailbox.mAccountKey);
+            if (account == null) {
+                return;
+            }
+            if (!isLegacyImapProtocol(mContext, account)) {
+                // The account isn't an imap account
+                return;
+            }
+
+            try {
+                final ImapIdleFolderHolder holder = ImapIdleFolderHolder.getInstance();
+                if (op.equals(EmailProvider.NOTIFICATION_OP_UPDATE)) {
+                    // Only apply if syncInterval has changed
+                    boolean registered = holder.isMailboxIdled(id);
+                    boolean toRegister = mailbox.mSyncInterval == 1
+                            && account.getSyncInterval() == Account.CHECK_INTERVAL_PUSH;
+                    if (registered != toRegister) {
+                        if (registered) {
+                            holder.unregisterIdledMailbox(id, true);
+                        }
+                        if (toRegister) {
+                            holder.registerMailboxForIdle(mContext, account, mailbox);
+                        }
+                    }
+                } else if (op.equals(EmailProvider.NOTIFICATION_OP_INSERT)) {
+                    if (account.getSyncInterval() == Account.CHECK_INTERVAL_PUSH) {
+                        holder.registerMailboxForIdle(mContext, account, mailbox);
+                    }
+                }
+            } catch (MessagingException me) {
+                LogUtils.e(LOG_TAG, me, "Failed to process imap mailbox " + id + " changes.");
+            }
+        }
+
+        private void processMessageChanged(String op, long id) {
+            if (mSyncLock) {
+                return;
+            }
+            EmailContent.Message msg = EmailContent.Message.restoreMessageWithId(mContext, id);
+            if (msg == null) {
+                return;
+            }
+            Account account = Account.restoreAccountWithId(mContext, msg.mAccountKey);
+            if (account == null) {
+                return;
+            }
+            if (!isLegacyImapProtocol(mContext, account)) {
+                // The account isn't an imap account
+                return;
+            }
+            if (account.getSyncInterval() != Account.CHECK_INTERVAL_PUSH) {
+                return;
+            }
+
+            try {
+                Store remoteStore = Store.getInstance(account, mContext);
+                processPendingActionsSynchronous(mContext, account, remoteStore, false);
+            } catch (MessagingException me) {
+                LogUtils.e(LOG_TAG, me, "Failed to process imap message " + id + " changes.");
+            }
+        }
+    }
+
+    private ImapEmailConnectivityManager mConnectivityManager;
+    private LocalChangesContentObserver mLocalChangesObserver;
+    private Handler mServiceHandler;
+    private PowerManager.WakeLock mIdleRefreshWakeLock;
+
+    @Override
+    public void onCreate() {
+        super.onCreate();
+
+        sMessageDecodeErrorString = getString(R.string.message_decode_error);
+        mServiceHandler = new Handler();
+
+        // Initialize the email provider and the listeners/observers
+        EmailContent.init(this);
+        mConnectivityManager = new ImapEmailConnectivityManager(this);
+        mLocalChangesObserver = new LocalChangesContentObserver(this, mServiceHandler);
+
+        // Initialize wake locks
+        PowerManager pm = (PowerManager) getSystemService(Context.POWER_SERVICE);
+        mIdleRefreshWakeLock = pm.newWakeLock(PowerManager.PARTIAL_WAKE_LOCK, "Imap IDLE Refresh");
+        mIdleRefreshWakeLock.setReferenceCounted(true);
+
+        // Register observers
+        getContentResolver().registerContentObserver(
+                Account.SYNC_SETTING_CHANGED_URI, true, mLocalChangesObserver);
+        getContentResolver().registerContentObserver(
+                Mailbox.SYNC_SETTING_CHANGED_URI, true, mLocalChangesObserver);
+        getContentResolver().registerContentObserver(
+                EmailContent.Message.NOTIFIER_URI, true, mLocalChangesObserver);
+    }
+
+    @Override
+    public void onDestroy() {
+        // Unregister services
+        ImapIdleFolderHolder.getInstance().unregisterAllIdledMailboxes(true);
+        mConnectivityManager.unregister();
+        getContentResolver().unregisterContentObserver(mLocalChangesObserver);
+        mConnectivityManager.destroy();
+
+        super.onDestroy();
+    }
+
+    @Override
+    public int onStartCommand(Intent intent, int flags, int startId) {
+        if (intent == null) {
+            return Service.START_STICKY;
+        }
+
+        final String action = intent.getAction();
+        if (Logging.LOGD) {
+            LogUtils.d(Logging.LOG_TAG, "Action: ", action);
+        }
+        final Context context = getApplicationContext();
+
+        if (ACTION_RESTART_ALL_IDLE_CONNECTIONS.equals(action)) {
+            // Initiate a sync for all IDLEd accounts, since there might have
+            // been changes while we lost connectivity. At the end of the sync
+            // the IDLE connection will be re-established.
+
+            mIdleRefreshWakeLock.acquire();
+
+            sExecutor.execute(new Runnable() {
+                @Override
+                public void run() {
+                    ContentResolver cr = context.getContentResolver();
+                    Cursor c = null;
+                    try {
+                        c = cr.query(Account.CONTENT_URI, Account.CONTENT_PROJECTION,
+                                null, null, null);
+                        if (c == null) {
+                            return;
+                        }
+                        while (c.moveToNext()) {
+                            final Account account = new Account();
+                            account.restore(c);
+
+                            // Only imap push accounts
+                            if (account.getSyncInterval() == Account.CHECK_INTERVAL_PUSH
+                                    && isLegacyImapProtocol(context, account)) {
+                                requestSyncForAccountMailboxesIfNotIdled(account);
+                            }
+                        }
+                    } finally {
+                        if (c != null) {
+                            c.close();
+                        }
+                        mIdleRefreshWakeLock.release();
+                    }
+                }
+            });
+        } else if (ACTION_RESTART_IDLE_CONNECTION.equals(action)) {
+            final long mailboxId = intent.getLongExtra(EXTRA_MAILBOX, -1);
+            if (mailboxId < 0) {
+                 return START_NOT_STICKY;
+            }
+
+            mIdleRefreshWakeLock.acquire();
+
+            sExecutor.execute(new Runnable() {
+                @Override
+                public void run() {
+                    try {
+                        // Check that the account is ready for push
+                        Mailbox mailbox = Mailbox.restoreMailboxWithId(context, mailboxId);
+                        if (mailbox == null) {
+                            return;
+                        }
+                        Account account = Account.restoreAccountWithId(context,
+                                mailbox.mAccountKey);
+                        if (account == null) {
+                            return;
+                        }
+
+                        if (account.getSyncInterval() != Account.CHECK_INTERVAL_PUSH) {
+                            LogUtils.i(LOG_TAG, "Account isn't declared for push: " + account.mId);
+                            return;
+                        }
+
+                        // Request a quick sync to make sure we didn't lose any new mails
+                        // during the failure time; IDLE will restart afterwards
+                        ImapService.requestSync(context, account, mailboxId, false);
+                        LogUtils.d(LOG_TAG, "requestSync after reschedulePing for account %s (%s)",
+                                account.toString(), mailbox.mDisplayName);
+                    } finally {
+                        mIdleRefreshWakeLock.release();
+                    }
+                }
+            });
+        } else if (ACTION_KICK_IDLE_CONNECTION.equals(action)) {
+            final long mailboxId = intent.getLongExtra(EXTRA_MAILBOX, -1);
+            if (mailboxId <= -1) {
+                 return START_NOT_STICKY;
+            }
+
+            mIdleRefreshWakeLock.acquire();
+
+            sExecutor.execute(new Runnable() {
+                @Override
+                public void run() {
+                    try {
+                        Mailbox mailbox = Mailbox.restoreMailboxWithId(context, mailboxId);
+                        if (mailbox == null) {
+                            return;
+                        }
+                        Account account = Account.restoreAccountWithId(context,
+                                mailbox.mAccountKey);
+                        if (account == null) {
+                            return;
+                        }
+
+                        ImapIdleFolderHolder holder = ImapIdleFolderHolder.getInstance();
+                        holder.kickIdledMailbox(context, mailbox, account);
+                    } catch (Exception e) {
+                       LogUtils.e(Logging.LOG_TAG, e, "Failed to kick idled connection "
+                               + "for mailbox " + mailboxId);
+                    } finally {
+                        mIdleRefreshWakeLock.release();
+                    }
+                }
+            });
+        }
 
-        sMessageDecodeErrorString = getString(R.string.message_decode_error);
+        return Service.START_STICKY;
     }
 
-    @Override
-    public int onStartCommand(Intent intent, int flags, int startId) {
-        return Service.START_STICKY;
+    private void requestSyncForAccountMailboxesIfNotIdled(Account account) {
+        Cursor c = Mailbox.getLoopBackMailboxIdsForSync(getContentResolver(), account.mId);
+        if (c == null) {
+            return;
+        }
+
+        ImapIdleFolderHolder holder = ImapIdleFolderHolder.getInstance();
+        try {
+            while (c.moveToNext()) {
+                long mailboxId = c.getLong(c.getColumnIndex(BaseColumns._ID));
+                if (!holder.isMailboxIdled(mailboxId)) {
+                    final Mailbox mailbox = Mailbox.restoreMailboxWithId(this, mailboxId);
+                    requestSync(this, account, mailboxId, false);
+                    LogUtils.d(LOG_TAG, "requestSync after restarting IDLE for account %s (%s)",
+                            account.toString(), mailbox.mDisplayName);
+                }
+            }
+        } finally {
+            c.close();
+        }
     }
 
     /**
      * Create our EmailService implementation here.
      */
     private final EmailServiceStub mBinder = new EmailServiceStub() {
+        @Override
+        public void loadMore(long messageId) throws RemoteException {
+            LogUtils.i("ImapService", "Try to load more content for message: " + messageId);
+            try {
+                final EmailContent.Message message =
+                        EmailContent.Message.restoreMessageWithId(mContext, messageId);
+                if (message == null
+                        || message.mFlagLoaded == EmailContent.Message.FLAG_LOADED_COMPLETE) {
+                    return;
+                }
+
+                // Open the remote folder.
+                final Account account = Account.restoreAccountWithId(mContext, message.mAccountKey);
+                final Mailbox mailbox = Mailbox.restoreMailboxWithId(mContext, message.mMailboxKey);
+                if (account == null || mailbox == null) {
+                    return;
+                }
+                TrafficStats.setThreadStatsTag(TrafficFlags.getSyncFlags(mContext, account));
+
+                final Store remoteStore = Store.getInstance(account, mContext);
+                final String remoteServerId;
+                // If this is a search result, use the protocolSearchInfo field to get the
+                // correct remote location
+                if (!TextUtils.isEmpty(message.mProtocolSearchInfo)) {
+                    remoteServerId = message.mProtocolSearchInfo;
+                } else {
+                    remoteServerId = mailbox.mServerId;
+                }
+                final Folder remoteFolder = remoteStore.getFolder(remoteServerId);
+                remoteFolder.open(OpenMode.READ_WRITE);
+
+                // Download the entire message
+                final Message remoteMessage = remoteFolder.getMessage(message.mServerId);
+                loadEntireViewableContent(mContext, account, remoteFolder, remoteMessage, mailbox,
+                        message.mFlagSeen);
+            } catch (MessagingException me) {
+                LogUtils.v(Logging.LOG_TAG, "ImapService loadMore: ", me);
+            } catch (RuntimeException rte) {
+                LogUtils.d(Logging.LOG_TAG, "ImapService loadMore: ", rte);
+            }
+        }
+
         @Override
         public int searchMessages(long accountId, SearchParams searchParams, long destMailboxId) {
             try {
@@ -146,6 +971,26 @@ public class ImapService extends Service {
             }
             return 0;
         }
+
+        @Override
+        public void pushModify(long accountId) throws RemoteException {
+            final Context context = ImapService.this;
+            final Account account = Account.restoreAccountWithId(context, accountId);
+            if (account.getSyncInterval() != Account.CHECK_INTERVAL_PUSH) {
+                LogUtils.i(LOG_TAG,"Idle (pushModify) isn't avaliable for account " + accountId);
+                ImapIdleFolderHolder holder = ImapIdleFolderHolder.getInstance();
+                holder.unregisterAccountIdledMailboxes(context, account.mId, true);
+                return;
+            }
+
+            LogUtils.i(LOG_TAG,"Register idle (pushModify) account " + accountId);
+            try {
+                ImapIdleFolderHolder holder = ImapIdleFolderHolder.getInstance();
+                holder.registerAccountForIdle(context, account);
+            } catch (MessagingException ex) {
+                LogUtils.d(LOG_TAG, "Failed to modify push for account " + accountId);
+            }
+        }
     };
 
     @Override
@@ -154,6 +999,56 @@ public class ImapService extends Service {
         return mBinder;
     }
 
+    private static void requestSync(Context context, Account account, long mailbox, boolean full) {
+        final EmailServiceUtils.EmailServiceInfo info = EmailServiceUtils.getServiceInfoForAccount(
+                context, account.mId);
+        final android.accounts.Account acct = new android.accounts.Account(
+                account.mEmailAddress, info.accountType);
+        Bundle extras = null;
+        if (mailbox != Mailbox.NO_MAILBOX) {
+            extras = Mailbox.createSyncBundle(mailbox);
+        } else {
+            extras = new Bundle();
+        }
+        extras.putBoolean(ContentResolver.SYNC_EXTRAS_MANUAL, false);
+        extras.putBoolean(ContentResolver.SYNC_EXTRAS_DO_NOT_RETRY, true);
+        extras.putBoolean(ContentResolver.SYNC_EXTRAS_EXPEDITED, full);
+        ContentResolver.requestSync(acct, EmailContent.AUTHORITY, extras);
+    }
+
+    protected static final void stopImapPushServiceIfNecessary(Context context) {
+        ContentResolver cr = context.getContentResolver();
+        Cursor c = cr.query(Account.CONTENT_URI, Account.CONTENT_PROJECTION,null, null, null);
+        if (c != null) {
+            try {
+                while (c.moveToNext()) {
+                    final Account account = new Account();
+                    account.restore(c);
+
+                    // Only imap push accounts
+                    if (account.getSyncInterval() != Account.CHECK_INTERVAL_PUSH ||
+                            !ImapService.isLegacyImapProtocol(context, account)) {
+                        continue;
+                    }
+
+                    return;
+                }
+            } finally {
+                c.close();
+            }
+        }
+
+        // Stop the service
+        context.stopService(new Intent(context, LegacyImapSyncAdapterService.class));
+    }
+
+    public static boolean isLegacyImapProtocol(Context ctx, Account acct) {
+        if (sLegacyImapProtocol == null) {
+            sLegacyImapProtocol = ctx.getString(R.string.protocol_legacy_imap);
+        }
+        return acct.getProtocol(ctx).equals(sLegacyImapProtocol);
+    }
+
     /**
      * Start foreground synchronization of the specified folder. This is called by
      * synchronizeMailbox or checkMail.
@@ -165,13 +1060,23 @@ public class ImapService extends Service {
             final Account account, final Mailbox folder, final boolean loadMore,
             final boolean uiRefresh) throws MessagingException {
         TrafficStats.setThreadStatsTag(TrafficFlags.getSyncFlags(context, account));
-        final NotificationController nc =
-                NotificationControllerCreatorHolder.getInstance(context);
+        final NotificationController nc = NotificationControllerCreatorHolder.getInstance(context);
         Store remoteStore = null;
+        ImapIdleFolderHolder imapHolder = ImapIdleFolderHolder.getInstance();
         try {
+            mSyncLock = true;
+
+            // Unregister the imap idle
+            if (account.getSyncInterval() == Account.CHECK_INTERVAL_PUSH) {
+                imapHolder.unregisterIdledMailbox(folder.mId, false);
+            } else {
+                imapHolder.unregisterAccountIdledMailboxes(context, account.mId, false);
+            }
+
             remoteStore = Store.getInstance(account, context);
             processPendingActionsSynchronous(context, account, remoteStore, uiRefresh);
             synchronizeMailboxGeneric(context, account, remoteStore, folder, loadMore, uiRefresh);
+
             // Clear authentication notification for this account
             nc.cancelLoginFailedNotification(account.mId);
         } catch (MessagingException e) {
@@ -184,9 +1089,16 @@ public class ImapService extends Service {
             }
             throw e;
         } finally {
+            mSyncLock = false;
+
             if (remoteStore != null) {
                 remoteStore.closeConnections();
             }
+
+            // Register the imap idle again
+            if (account.getSyncInterval() == Account.CHECK_INTERVAL_PUSH) {
+                imapHolder.registerMailboxForIdle(context, account, folder);
+            }
         }
         // TODO: Rather than use exceptions as logic above, return the status and handle it
         // correctly in caller.
@@ -243,6 +1155,44 @@ public class ImapService extends Service {
         };
     }
 
+    /**
+     * Load the structure and body of messages
+     * @param account the account we're syncing
+     * @param remoteFolder the (open) Folder we're working on
+     * @param message the message we've got entire viewable content for
+     * @param toMailbox the destination mailbox we're syncing
+     * @throws MessagingException
+     */
+    static void loadEntireViewableContent(final Context context, final Account account,
+                Folder remoteFolder, Message message, final Mailbox toMailbox, boolean seen)
+                throws MessagingException {
+        FetchProfile fp = new FetchProfile();
+        fp.add(FetchProfile.Item.STRUCTURE);
+        Message [] oneMessageArray = new Message[] { message };
+        remoteFolder.fetch(oneMessageArray, fp, null);
+        // Build a list of parts we are interested in. Text parts will be downloaded
+        // right now, attachments will be left for later.
+        ArrayList<Part> viewables = new ArrayList<Part>();
+        ArrayList<Part> attachments = new ArrayList<Part>();
+        MimeUtility.collectParts(message, viewables, attachments);
+        // Download the viewables immediately
+        for (Part part : viewables) {
+            if (part.getMimeType().startsWith("text")) {
+                fp.clear();
+                fp.add(part);
+                remoteFolder.fetch(oneMessageArray, fp, null);
+            }
+        }
+
+        if (seen) {
+            // Set the SEEN flag to this message as it must be read.
+            message.setFlag(Flag.SEEN, true);
+        }
+        // Store the updated message locally and mark it fully loaded
+        Utilities.copyOneMessageToProvider(context, message, account, toMailbox,
+                EmailContent.Message.FLAG_LOADED_COMPLETE);
+    }
+
     /**
      * Load the structure and body of messages not yet synced
      * @param account the account we're syncing
@@ -267,14 +1217,39 @@ public class ImapService extends Service {
             MimeUtility.collectParts(message, viewables, attachments);
             // Download the viewables immediately
             oneMessageArray[0] = message;
+            boolean syncedEntireMail = true;
+            int allowSyncSize;
+            if (account.isSetSyncSizeEnabled()) {
+                allowSyncSize = account.getSyncSize();
+            } else {
+                allowSyncSize = SyncSize.SYNC_SIZE_ENTIRE_MAIL;
+            }
             for (Part part : viewables) {
                 fp.clear();
                 fp.add(part);
+                // We will only try to limit the sync size for text part.
+                if (account.getSyncSize() != SyncSize.SYNC_SIZE_ENTIRE_MAIL
+                        && part.getMimeType().startsWith("text")) {
+                    LogUtils.d(Logging.LOG_TAG, "Try to fetch the text part as limit the size"
+                            + ", part size: " + part.getSize()
+                            + ", allow sync size: " + allowSyncSize);
+                    // If the part's size is larger than allow sync size, it means this part
+                    // couldn't get the entire content.
+                    if (part.getSize() > allowSyncSize) {
+                        syncedEntireMail = false;
+                        // If the allow sync size is less than 0, it means this part needn't sync.
+                        if (allowSyncSize <= 0) continue;
+                    }
+                    // Try to sync the viewable part, we need set the allow sync size for fp.
+                    fp.setAllowSyncSize(allowSyncSize);
+                    allowSyncSize = allowSyncSize - part.getSize();
+                }
                 remoteFolder.fetch(oneMessageArray, fp, null);
             }
             // Store the updated message locally and mark it fully loaded
             Utilities.copyOneMessageToProvider(context, message, account, toMailbox,
-                    EmailContent.Message.FLAG_LOADED_COMPLETE);
+                    syncedEntireMail ? EmailContent.Message.FLAG_LOADED_COMPLETE
+                            : EmailContent.Message.FLAG_LOADED_PARTIAL_COMPLETE);
         }
     }
 
@@ -389,38 +1364,12 @@ public class ImapService extends Service {
         final boolean fullSync = (uiRefresh || loadMore ||
                 timeSinceLastFullSync >= FULL_SYNC_INTERVAL_MILLIS || timeSinceLastFullSync < 0);
 
-        if (account.mSyncLookback == SyncWindow.SYNC_WINDOW_ALL) {
-            // This is really for testing. There is no UI that allows setting the sync window for
-            // IMAP, but it can be set by sending a special intent to AccountSetupFinal activity.
-            endDate = 0;
-        } else if (fullSync) {
-            // Find the oldest message in the local store. We need our time window to include
-            // all messages that are currently present locally.
-            endDate = System.currentTimeMillis() - FULL_SYNC_WINDOW_MILLIS;
-            Cursor localOldestCursor = null;
-            try {
-                // b/11520812 Ignore message with timestamp = 0 (which includes NULL)
-                localOldestCursor = resolver.query(EmailContent.Message.CONTENT_URI,
-                        OldestTimestampInfo.PROJECTION,
-                        EmailContent.MessageColumns.ACCOUNT_KEY + "=?" + " AND " +
-                                MessageColumns.MAILBOX_KEY + "=? AND " +
-                                MessageColumns.TIMESTAMP + "!=0",
-                        new String[] {String.valueOf(account.mId), String.valueOf(mailbox.mId)},
-                        null);
-                if (localOldestCursor != null && localOldestCursor.moveToFirst()) {
-                    long oldestLocalMessageDate = localOldestCursor.getLong(
-                            OldestTimestampInfo.COLUMN_OLDEST_TIMESTAMP);
-                    if (oldestLocalMessageDate > 0) {
-                        endDate = Math.min(endDate, oldestLocalMessageDate);
-                        LogUtils.d(
-                                Logging.LOG_TAG, "oldest local message " + oldestLocalMessageDate);
-                    }
-                }
-            } finally {
-                if (localOldestCursor != null) {
-                    localOldestCursor.close();
-                }
-            }
+        if (fullSync) {
+            int syncLookBack = mailbox.mSyncLookback == SyncWindow.SYNC_WINDOW_ACCOUNT
+                    ? account.mSyncLookback
+                    : mailbox.mSyncLookback;
+            endDate = System.currentTimeMillis() -
+                    (SyncWindow.toDays(syncLookBack) * DateUtils.DAY_IN_MILLIS);
             LogUtils.d(Logging.LOG_TAG, "full sync: original window: now - " + endDate);
         } else {
             // We are doing a frequent, quick sync. This only syncs a small time window, so that
@@ -737,6 +1686,284 @@ public class ImapService extends Service {
         // 14. Clean up and report results
         remoteFolder.close(false);
     }
+    /**
+     * Find messages in the updated table that need to be written back to server.
+     * This is called from Intent methods to support Bluetooth MAP email sharing functionality.
+     * Handles:
+     *   Read/Unread
+     *   Flagged
+     *   Append (upload)
+     *   Move To Trash
+     *   Empty trash
+     * TODO:
+     *   Move
+     *
+     * @param account the account to scan for pending actions
+     * @throws MessagingException
+     */
+    public static void synchronizePendingActions(Context context, Account account,
+            Store remoteStore, boolean manualSync)
+            throws MessagingException {
+        processPendingActionsSynchronous(context, account, remoteStore, manualSync);
+    }
+
+    private synchronized static void processImapFetchChanges(Context ctx, Account acct,
+            Mailbox mailbox, List<String> uids) throws MessagingException {
+
+        PowerManager pm = (PowerManager) ctx.getSystemService(Context.POWER_SERVICE);
+        PowerManager.WakeLock wl = pm.newWakeLock(PowerManager.PARTIAL_WAKE_LOCK,
+                "Imap IDLE Sync WakeLock");
+
+        NotificationController nc = null;
+        Store remoteStore = null;
+        final ImapIdleFolderHolder imapHolder = ImapIdleFolderHolder.getInstance();
+
+        try {
+            mSyncLock = true;
+            wl.acquire();
+
+            TrafficStats.setThreadStatsTag(TrafficFlags.getSyncFlags(ctx, acct));
+            nc = NotificationControllerCreatorHolder.getInstance(ctx);
+
+            remoteStore = Store.getInstance(acct, ctx);
+
+            final ContentResolver resolver = ctx.getContentResolver();
+
+            // Don't sync if account is not set to idled
+            if (acct.getSyncInterval() != Account.CHECK_INTERVAL_PUSH) {
+                return;
+            }
+
+            // 1. Open the remote store & folder
+            ImapFolder remoteFolder;
+            synchronized (imapHolder.mIdledFolders) {
+                remoteFolder = imapHolder.mIdledFolders.get((int) mailbox.mId);
+            }
+            if (remoteFolder == null || remoteFolder.isIdling()) {
+                remoteFolder = (ImapFolder) remoteStore.getFolder(mailbox.mServerId);
+            }
+            if (!remoteFolder.exists()) {
+                return;
+            }
+            remoteFolder.open(OpenMode.READ_WRITE);
+            if (remoteFolder.getMode() != OpenMode.READ_WRITE) {
+                return;
+            }
+
+            // 1.- Retrieve the messages
+            Message[] remoteMessages = remoteFolder.getMessages(
+                    uids.toArray(new String[uids.size()]), null);
+
+            // 2.- Refresh flags
+            FetchProfile fp = new FetchProfile();
+            fp.add(FetchProfile.Item.FLAGS);
+            remoteFolder.fetch(remoteMessages, fp, null);
+
+            boolean remoteSupportsSeen = false;
+            boolean remoteSupportsFlagged = false;
+            boolean remoteSupportsAnswered = false;
+            for (Flag flag : remoteFolder.getPermanentFlags()) {
+                if (flag == Flag.SEEN) {
+                    remoteSupportsSeen = true;
+                }
+                if (flag == Flag.FLAGGED) {
+                    remoteSupportsFlagged = true;
+                }
+                if (flag == Flag.ANSWERED) {
+                    remoteSupportsAnswered = true;
+                }
+            }
+
+            // 3.- Retrieve a reference of the local messages
+            HashMap<String, LocalMessageInfo> localMessageMap = new HashMap<>();
+            for (Message remoteMessage : remoteMessages) {
+                Cursor localUidCursor = null;
+                try {
+                    localUidCursor = resolver.query(
+                            EmailContent.Message.CONTENT_URI,
+                            LocalMessageInfo.PROJECTION,
+                            EmailContent.MessageColumns.ACCOUNT_KEY + "=?"
+                                    + " AND " + MessageColumns.MAILBOX_KEY + "=?"
+                                    + " AND " + MessageColumns.SERVER_ID + "=?",
+                            new String[] {
+                                    String.valueOf(acct.mId),
+                                    String.valueOf(mailbox.mId),
+                                    String.valueOf(remoteMessage.getUid()) },
+                            null);
+                    if (localUidCursor != null && localUidCursor.moveToNext()) {
+                        LocalMessageInfo info = new LocalMessageInfo(localUidCursor);
+                        localMessageMap.put(info.mServerId, info);
+                    }
+                } finally {
+                    if (localUidCursor != null) {
+                        localUidCursor.close();
+                    }
+                }
+            }
+
+            // 5.- Add to the list of new messages
+            final ArrayList<Long> unseenMessages = new ArrayList<Long>();
+            final ArrayList<Message> unsyncedMessages = new ArrayList<Message>();
+            for (Message remoteMessage : remoteMessages) {
+                LocalMessageInfo localMessage = localMessageMap.get(remoteMessage.getUid());
+
+                // localMessage == null -> message has never been created (not even headers)
+                // mFlagLoaded = UNLOADED -> message created, but none of body loaded
+                // mFlagLoaded = PARTIAL -> message created, a "sane" amt of body has been loaded
+                // mFlagLoaded = COMPLETE -> message body has been completely loaded
+                // mFlagLoaded = DELETED -> message has been deleted
+                // Only the first two of these are "unsynced", so let's retrieve them
+                if (localMessage == null ||
+                        (localMessage.mFlagLoaded == EmailContent.Message.FLAG_LOADED_UNLOADED) ||
+                        (localMessage.mFlagLoaded == EmailContent.Message.FLAG_LOADED_PARTIAL)) {
+                    unsyncedMessages.add(remoteMessage);
+                }
+            }
+
+            // 6. Download basic info about the new/unloaded messages (if any)
+            /*
+             * Fetch the flags and envelope only of the new messages. This is intended to get us
+             * critical data as fast as possible, and then we'll fill in the details.
+             */
+            if (unsyncedMessages.size() > 0) {
+                downloadFlagAndEnvelope(ctx, acct, mailbox, remoteFolder, unsyncedMessages,
+                        localMessageMap, unseenMessages);
+            }
+
+            // 7. Update SEEN/FLAGGED/ANSWERED (star) flags
+            if (remoteSupportsSeen || remoteSupportsFlagged || remoteSupportsAnswered) {
+                for (Message remoteMessage : remoteMessages) {
+                    LocalMessageInfo localMessageInfo = localMessageMap.get(remoteMessage.getUid());
+                    if (localMessageInfo == null) {
+                        continue;
+                    }
+                    boolean localSeen = localMessageInfo.mFlagRead;
+                    boolean remoteSeen = remoteMessage.isSet(Flag.SEEN);
+                    boolean newSeen = (remoteSupportsSeen && (remoteSeen != localSeen));
+                    boolean localFlagged = localMessageInfo.mFlagFavorite;
+                    boolean remoteFlagged = remoteMessage.isSet(Flag.FLAGGED);
+                    boolean newFlagged = (remoteSupportsFlagged && (localFlagged != remoteFlagged));
+                    int localFlags = localMessageInfo.mFlags;
+                    boolean localAnswered = (localFlags &
+                            EmailContent.Message.FLAG_REPLIED_TO) != 0;
+                    boolean remoteAnswered = remoteMessage.isSet(Flag.ANSWERED);
+                    boolean newAnswered = (remoteSupportsAnswered &&
+                            (localAnswered != remoteAnswered));
+                    if (newSeen || newFlagged || newAnswered) {
+                        Uri uri = ContentUris.withAppendedId(
+                                EmailContent.Message.CONTENT_URI, localMessageInfo.mId);
+                        ContentValues updateValues = new ContentValues();
+                        updateValues.put(MessageColumns.FLAG_READ, remoteSeen);
+                        updateValues.put(MessageColumns.FLAG_FAVORITE, remoteFlagged);
+                        if (remoteAnswered) {
+                            localFlags |= EmailContent.Message.FLAG_REPLIED_TO;
+                        } else {
+                            localFlags &= ~EmailContent.Message.FLAG_REPLIED_TO;
+                        }
+                        updateValues.put(MessageColumns.FLAGS, localFlags);
+                        resolver.update(uri, updateValues, null, null);
+                    }
+                }
+            }
+
+            // 8.- Remove remote deleted messages
+            for (final Message remoteMessage : remoteMessages) {
+                if (!remoteMessage.isSet(Flag.DELETED)) {
+                    continue;
+                }
+
+                // Make sure we don't sync messages (again) that we deleted locally
+                // before and now get a flag update (DELETED being set) for now.
+                unsyncedMessages.remove(remoteMessage);
+
+                LocalMessageInfo info = localMessageMap.get(remoteMessage.getUid());
+                if (info == null) {
+                    continue;
+                }
+
+                // Delete associated data (attachment files)
+                // Attachment & Body records are auto-deleted when we delete the Message record
+                AttachmentUtilities.deleteAllAttachmentFiles(ctx, acct.mId, info.mId);
+
+                // Delete the message itself
+                final Uri uriToDelete = ContentUris.withAppendedId(
+                        EmailContent.Message.CONTENT_URI, info.mId);
+                resolver.delete(uriToDelete, null, null);
+
+                // Delete extra rows (e.g. updated or deleted)
+                final Uri updateRowToDelete = ContentUris.withAppendedId(
+                        EmailContent.Message.UPDATED_CONTENT_URI, info.mId);
+                resolver.delete(updateRowToDelete, null, null);
+                final Uri deleteRowToDelete = ContentUris.withAppendedId(
+                        EmailContent.Message.DELETED_CONTENT_URI, info.mId);
+                resolver.delete(deleteRowToDelete, null, null);
+            }
+
+            // 9.- Load unsynced messages
+            loadUnsyncedMessages(ctx, acct, remoteFolder, unsyncedMessages, mailbox);
+
+            // 10. Remove messages that are in the local store but no in the current sync window
+            int syncLookBack = mailbox.mSyncLookback == SyncWindow.SYNC_WINDOW_ACCOUNT
+                    ? acct.mSyncLookback
+                    : mailbox.mSyncLookback;
+            long endDate = System.currentTimeMillis() -
+                    (SyncWindow.toDays(syncLookBack) * DateUtils.DAY_IN_MILLIS);
+            LogUtils.d(Logging.LOG_TAG, "full sync: original window: now - " + endDate);
+            for (final LocalMessageInfo info : localMessageMap.values()) {
+                // If this message is inside our sync window, and we cannot find it in our list
+                // of remote messages, then we know it's been deleted from the server.
+                if (info.mTimestamp < endDate) {
+                    // Delete associated data (attachment files)
+                    // Attachment & Body records are auto-deleted when we delete the Message record
+                    AttachmentUtilities.deleteAllAttachmentFiles(ctx, acct.mId, info.mId);
+
+                    // Delete the message itself
+                    final Uri uriToDelete = ContentUris.withAppendedId(
+                            EmailContent.Message.CONTENT_URI, info.mId);
+                    resolver.delete(uriToDelete, null, null);
+
+                    // Delete extra rows (e.g. updated or deleted)
+                    final Uri updateRowToDelete = ContentUris.withAppendedId(
+                            EmailContent.Message.UPDATED_CONTENT_URI, info.mId);
+                    resolver.delete(updateRowToDelete, null, null);
+                    final Uri deleteRowToDelete = ContentUris.withAppendedId(
+                            EmailContent.Message.DELETED_CONTENT_URI, info.mId);
+                    resolver.delete(deleteRowToDelete, null, null);
+                }
+            }
+
+            // Clear authentication notification for this account
+            nc.cancelLoginFailedNotification(acct.mId);
+
+        } catch (MessagingException ex) {
+            if (Logging.LOGD) {
+                LogUtils.d(Logging.LOG_TAG, ex, "processImapFetchChanges");
+            }
+            if (ex instanceof AuthenticationFailedException) {
+                // Generate authentication notification
+                if (nc != null) {
+                    nc.showLoginFailedNotificationSynchronous(acct.mId, true /* incoming */);
+                }
+            }
+            throw ex;
+        } finally {
+            mSyncLock = false;
+            wl.release();
+
+            if (remoteStore != null) {
+                remoteStore.closeConnections();
+
+                final boolean registered;
+                synchronized (imapHolder.mIdledFolders) {
+                    registered = imapHolder.mIdledFolders.indexOfKey((int) mailbox.mId) >= 0;
+                }
+                // Register the imap idle again
+                if (registered && acct.getSyncInterval() == Account.CHECK_INTERVAL_PUSH) {
+                    imapHolder.registerMailboxForIdle(ctx, acct, mailbox);
+                }
+            }
+        }
+    }
 
     /**
      * Find messages in the updated table that need to be written back to server.
@@ -1614,4 +2841,72 @@ public class ImapService extends Service {
 
         return numSearchResults;
     }
+
+    private static synchronized void processImapIdleChangesLocked(Context context, Account account,
+            Mailbox mailbox, boolean needSync, List<String> fetchMessages) {
+
+        // Process local to server changes first
+        Store remoteStore = null;
+        try {
+            remoteStore = Store.getInstance(account, context);
+            processPendingActionsSynchronous(context, account, remoteStore, false);
+        } catch (MessagingException me) {
+            // Ignore
+        } finally {
+            if (remoteStore != null) {
+                remoteStore.closeConnections();
+            }
+        }
+
+        // If the request rebased the maximum time without a full sync, then instead of fetch
+        // the changes just perform a full sync
+        final long timeSinceLastFullSync = SystemClock.elapsedRealtime() -
+                mailbox.mLastFullSyncTime;
+        final boolean forceSync = timeSinceLastFullSync >= FULL_SYNC_INTERVAL_MILLIS
+                || timeSinceLastFullSync < 0;
+        if (forceSync) {
+            needSync = true;
+            fetchMessages.clear();
+
+            if (Logging.LOGD) {
+                LogUtils.d(LOG_TAG, "Full sync required for mailbox " + mailbox.mId
+                        + " because is exceded the maximum time without a full sync.");
+            }
+        }
+
+        final int msgToFetchSize = fetchMessages.size();
+        if (Logging.LOGD) {
+            LogUtils.d(LOG_TAG, "Processing IDLE changes for mailbox " + mailbox.mId
+                    + ": need sync " + needSync + ", " + msgToFetchSize + " fetch messages");
+        }
+
+        if (msgToFetchSize > 0) {
+            if (!needSync && msgToFetchSize <= MAX_MESSAGES_TO_FETCH) {
+                try {
+                    processImapFetchChanges(context, account, mailbox, fetchMessages);
+                } catch (MessagingException ex) {
+                    LogUtils.w(LOG_TAG,
+                            "Failed to process imap idle changes for mailbox " + mailbox.mId);
+                    needSync = true;
+                }
+            } else {
+                needSync = true;
+            }
+        }
+
+        if (needSync) {
+            requestSync(context, account, mailbox.mId, true);
+        } else {
+            // In case no sync happens, re-add idle status
+            try {
+                if (account.getSyncInterval() == Account.CHECK_INTERVAL_PUSH) {
+                    final ImapIdleFolderHolder holder = ImapIdleFolderHolder.getInstance();
+                    holder.registerMailboxForIdle(context, account, mailbox);
+                }
+            } catch (MessagingException ex) {
+                LogUtils.w(LOG_TAG, "Failed to readd imap idle after no sync " +
+                        "for mailbox " + mailbox.mId);
+            }
+        }
+    }
 }
diff --git a/provider_src/com/android/email/service/LaposteAuthenticatorService.java b/provider_src/com/android/email/service/LaposteAuthenticatorService.java
new file mode 100644
index 000000000..2151d4c74
--- /dev/null
+++ b/provider_src/com/android/email/service/LaposteAuthenticatorService.java
@@ -0,0 +1,36 @@
+/*
+ * Copyright (c) 2016, The Linux Foundation. All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions are
+ * met:
+    * Redistributions of source code must retain the above copyright
+      notice, this list of conditions and the following disclaimer.
+    * Redistributions in binary form must reproduce the above
+      copyright notice, this list of conditions and the following
+      disclaimer in the documentation and/or other materials provided
+      with the distribution.
+    * Neither the name of The Linux Foundation nor the names of its
+      contributors may be used to endorse or promote products derived
+      from this software without specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED "AS IS" AND ANY EXPRESS OR IMPLIED
+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
+ * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT
+ * ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS
+ * BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
+ * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
+ * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
+ * BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
+ * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE
+ * OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN
+ * IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ */
+
+package com.android.email.service;
+
+/**
+ * This service needs to be declared separately from the base service
+ */
+public class LaposteAuthenticatorService extends AuthenticatorService {
+}
diff --git a/provider_src/com/android/email/service/LegacyImapSyncAdapterService.java b/provider_src/com/android/email/service/LegacyImapSyncAdapterService.java
index 1f6b6195e..2cb0e3743 100644
--- a/provider_src/com/android/email/service/LegacyImapSyncAdapterService.java
+++ b/provider_src/com/android/email/service/LegacyImapSyncAdapterService.java
@@ -16,5 +16,125 @@
 
 package com.android.email.service;
 
+import static com.android.emailcommon.Logging.LOG_TAG;
+
+import android.content.AbstractThreadedSyncAdapter;
+import android.content.ComponentName;
+import android.content.ContentProviderClient;
+import android.content.Context;
+import android.content.Intent;
+import android.content.ServiceConnection;
+import android.content.SyncResult;
+import android.os.AsyncTask;
+import android.os.Bundle;
+import android.os.IBinder;
+import android.os.PowerManager;
+import android.text.format.DateUtils;
+
+import com.android.emailcommon.Logging;
+import com.android.emailcommon.provider.Mailbox;
+import com.android.emailcommon.service.IEmailService;
+import com.android.mail.utils.LogUtils;
+
 public class LegacyImapSyncAdapterService extends PopImapSyncAdapterService {
-}
\ No newline at end of file
+
+    // The call to ServiceConnection.onServiceConnected is asynchronous to bindService. It's
+    // possible for that to be delayed if, in which case, a call to onPerformSync
+    // could occur before we have a connection to the service.
+    // In onPerformSync, if we don't yet have our ImapService, we will wait for up to 10
+    // seconds for it to appear. If it takes longer than that, we will fail the sync.
+    private static final long MAX_WAIT_FOR_SERVICE_MS = 10 * DateUtils.SECOND_IN_MILLIS;
+
+    private IEmailService mImapService;
+
+    private final ServiceConnection mConnection = new ServiceConnection() {
+        @Override
+        public void onServiceConnected(ComponentName name,  IBinder binder) {
+            if (Logging.LOGD) {
+                LogUtils.v(LOG_TAG, "onServiceConnected");
+            }
+            synchronized (mConnection) {
+                mImapService = IEmailService.Stub.asInterface(binder);
+                mConnection.notify();
+            }
+        }
+
+        @Override
+        public void onServiceDisconnected(ComponentName name) {
+            mImapService = null;
+        }
+    };
+
+    protected class ImapSyncAdapterImpl extends SyncAdapterImpl {
+        public ImapSyncAdapterImpl(Context context) {
+            super(context);
+        }
+
+        @Override
+        public void onPerformSync(android.accounts.Account account, Bundle extras,
+                String authority, ContentProviderClient provider, SyncResult syncResult) {
+
+            final Context context = LegacyImapSyncAdapterService.this;
+            PowerManager pm = (PowerManager) context.getSystemService(Context.POWER_SERVICE);
+            PowerManager.WakeLock wl = pm.newWakeLock(PowerManager.PARTIAL_WAKE_LOCK,
+                    "Imap Sync WakeLock");
+            try {
+                wl.acquire();
+
+                if (!waitForService()) {
+                    // The service didn't connect, nothing we can do.
+                    return;
+                }
+
+                if (!Mailbox.isPushOnlyExtras(extras)) {
+                    super.onPerformSync(account, extras, authority, provider, syncResult);
+                }
+
+                // Check if IMAP push service is necessary
+                ImapService.stopImapPushServiceIfNecessary(context);
+
+            } finally {
+                wl.release();
+            }
+        }
+    }
+
+    public AbstractThreadedSyncAdapter getSyncAdapter() {
+        return new ImapSyncAdapterImpl(getApplicationContext());
+    }
+
+    @Override
+    public void onCreate() {
+        super.onCreate();
+        bindService(new Intent(this, ImapService.class), mConnection, Context.BIND_AUTO_CREATE);
+        startService(new Intent(this, LegacyImapSyncAdapterService.class));
+    }
+
+    @Override
+    public void onDestroy() {
+        unbindService(mConnection);
+        super.onDestroy();
+    }
+
+    private final boolean waitForService() {
+        synchronized(mConnection) {
+            if (mImapService == null) {
+                if (Logging.LOGD) {
+                    LogUtils.v(LOG_TAG, "ImapService not yet connected");
+                }
+                try {
+                    mConnection.wait(MAX_WAIT_FOR_SERVICE_MS);
+                } catch (InterruptedException e) {
+                    LogUtils.wtf(LOG_TAG, "InterrupedException waiting for ImapService to connect");
+                    return false;
+                }
+                if (mImapService == null) {
+                    LogUtils.wtf(LOG_TAG, "timed out waiting for ImapService to connect");
+                    return false;
+                }
+            }
+        }
+        return true;
+    }
+
+}
diff --git a/provider_src/com/android/email/service/MobistarAuthenticatorService.java b/provider_src/com/android/email/service/MobistarAuthenticatorService.java
new file mode 100644
index 000000000..9bec64f68
--- /dev/null
+++ b/provider_src/com/android/email/service/MobistarAuthenticatorService.java
@@ -0,0 +1,36 @@
+/*
+ * Copyright (c) 2016, The Linux Foundation. All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions are
+ * met:
+    * Redistributions of source code must retain the above copyright
+      notice, this list of conditions and the following disclaimer.
+    * Redistributions in binary form must reproduce the above
+      copyright notice, this list of conditions and the following
+      disclaimer in the documentation and/or other materials provided
+      with the distribution.
+    * Neither the name of The Linux Foundation nor the names of its
+      contributors may be used to endorse or promote products derived
+      from this software without specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED "AS IS" AND ANY EXPRESS OR IMPLIED
+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
+ * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT
+ * ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS
+ * BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
+ * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
+ * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
+ * BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
+ * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE
+ * OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN
+ * IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ */
+
+package com.android.email.service;
+
+/**
+ * This service needs to be declared separately from the base service
+ */
+public class MobistarAuthenticatorService extends AuthenticatorService {
+}
diff --git a/provider_src/com/android/email/service/MultiBoxAuthenticatorService.java b/provider_src/com/android/email/service/MultiBoxAuthenticatorService.java
new file mode 100644
index 000000000..cf60569cc
--- /dev/null
+++ b/provider_src/com/android/email/service/MultiBoxAuthenticatorService.java
@@ -0,0 +1,36 @@
+/*
+ * Copyright (c) 2016, The Linux Foundation. All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions are
+ * met:
+    * Redistributions of source code must retain the above copyright
+      notice, this list of conditions and the following disclaimer.
+    * Redistributions in binary form must reproduce the above
+      copyright notice, this list of conditions and the following
+      disclaimer in the documentation and/or other materials provided
+      with the distribution.
+    * Neither the name of The Linux Foundation nor the names of its
+      contributors may be used to endorse or promote products derived
+      from this software without specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED "AS IS" AND ANY EXPRESS OR IMPLIED
+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
+ * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT
+ * ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS
+ * BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
+ * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
+ * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
+ * BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
+ * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE
+ * OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN
+ * IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ */
+
+package com.android.email.service;
+
+/**
+ * This service needs to be declared separately from the base service
+ */
+public class MultiBoxAuthenticatorService extends AuthenticatorService {
+}
diff --git a/provider_src/com/android/email/service/NetcaboAuthenticatorService.java b/provider_src/com/android/email/service/NetcaboAuthenticatorService.java
new file mode 100644
index 000000000..bd421a7ff
--- /dev/null
+++ b/provider_src/com/android/email/service/NetcaboAuthenticatorService.java
@@ -0,0 +1,36 @@
+/*
+ * Copyright (c) 2016, The Linux Foundation. All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions are
+ * met:
+    * Redistributions of source code must retain the above copyright
+      notice, this list of conditions and the following disclaimer.
+    * Redistributions in binary form must reproduce the above
+      copyright notice, this list of conditions and the following
+      disclaimer in the documentation and/or other materials provided
+      with the distribution.
+    * Neither the name of The Linux Foundation nor the names of its
+      contributors may be used to endorse or promote products derived
+      from this software without specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED "AS IS" AND ANY EXPRESS OR IMPLIED
+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
+ * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT
+ * ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS
+ * BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
+ * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
+ * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
+ * BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
+ * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE
+ * OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN
+ * IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ */
+
+package com.android.email.service;
+
+/**
+ * This service needs to be declared separately from the base service
+ */
+public class NetcaboAuthenticatorService extends AuthenticatorService {
+}
diff --git a/provider_src/com/android/email/service/NoosAuthenticatorService.java b/provider_src/com/android/email/service/NoosAuthenticatorService.java
new file mode 100644
index 000000000..cc4c43a5c
--- /dev/null
+++ b/provider_src/com/android/email/service/NoosAuthenticatorService.java
@@ -0,0 +1,36 @@
+/*
+ * Copyright (c) 2016, The Linux Foundation. All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions are
+ * met:
+    * Redistributions of source code must retain the above copyright
+      notice, this list of conditions and the following disclaimer.
+    * Redistributions in binary form must reproduce the above
+      copyright notice, this list of conditions and the following
+      disclaimer in the documentation and/or other materials provided
+      with the distribution.
+    * Neither the name of The Linux Foundation nor the names of its
+      contributors may be used to endorse or promote products derived
+      from this software without specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED "AS IS" AND ANY EXPRESS OR IMPLIED
+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
+ * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT
+ * ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS
+ * BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
+ * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
+ * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
+ * BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
+ * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE
+ * OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN
+ * IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ */
+
+package com.android.email.service;
+
+/**
+ * This service needs to be declared separately from the base service
+ */
+public class NoosAuthenticatorService extends AuthenticatorService {
+}
diff --git a/provider_src/com/android/email/service/OrangeAuthenticatorService.java b/provider_src/com/android/email/service/OrangeAuthenticatorService.java
new file mode 100644
index 000000000..0d18b977d
--- /dev/null
+++ b/provider_src/com/android/email/service/OrangeAuthenticatorService.java
@@ -0,0 +1,36 @@
+/*
+ * Copyright (c) 2016, The Linux Foundation. All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions are
+ * met:
+    * Redistributions of source code must retain the above copyright
+      notice, this list of conditions and the following disclaimer.
+    * Redistributions in binary form must reproduce the above
+      copyright notice, this list of conditions and the following
+      disclaimer in the documentation and/or other materials provided
+      with the distribution.
+    * Neither the name of The Linux Foundation nor the names of its
+      contributors may be used to endorse or promote products derived
+      from this software without specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED "AS IS" AND ANY EXPRESS OR IMPLIED
+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
+ * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT
+ * ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS
+ * BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
+ * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
+ * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
+ * BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
+ * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE
+ * OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN
+ * IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ */
+
+package com.android.email.service;
+
+/**
+ * This service needs to be declared separately from the base service
+ */
+public class OrangeAuthenticatorService extends AuthenticatorService {
+}
diff --git a/provider_src/com/android/email/service/OrangeMailAuthenticatorService.java b/provider_src/com/android/email/service/OrangeMailAuthenticatorService.java
new file mode 100644
index 000000000..40a6183a6
--- /dev/null
+++ b/provider_src/com/android/email/service/OrangeMailAuthenticatorService.java
@@ -0,0 +1,36 @@
+/*
+ * Copyright (c) 2016, The Linux Foundation. All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions are
+ * met:
+    * Redistributions of source code must retain the above copyright
+      notice, this list of conditions and the following disclaimer.
+    * Redistributions in binary form must reproduce the above
+      copyright notice, this list of conditions and the following
+      disclaimer in the documentation and/or other materials provided
+      with the distribution.
+    * Neither the name of The Linux Foundation nor the names of its
+      contributors may be used to endorse or promote products derived
+      from this software without specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED "AS IS" AND ANY EXPRESS OR IMPLIED
+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
+ * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT
+ * ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS
+ * BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
+ * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
+ * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
+ * BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
+ * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE
+ * OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN
+ * IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ */
+
+package com.android.email.service;
+
+/**
+ * This service needs to be declared separately from the base service
+ */
+public class OrangeMailAuthenticatorService extends AuthenticatorService {
+}
diff --git a/provider_src/com/android/email/service/OrangeMobileAuthenticatorService.java b/provider_src/com/android/email/service/OrangeMobileAuthenticatorService.java
new file mode 100644
index 000000000..644bf3ee9
--- /dev/null
+++ b/provider_src/com/android/email/service/OrangeMobileAuthenticatorService.java
@@ -0,0 +1,36 @@
+/*
+ * Copyright (c) 2016, The Linux Foundation. All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions are
+ * met:
+    * Redistributions of source code must retain the above copyright
+      notice, this list of conditions and the following disclaimer.
+    * Redistributions in binary form must reproduce the above
+      copyright notice, this list of conditions and the following
+      disclaimer in the documentation and/or other materials provided
+      with the distribution.
+    * Neither the name of The Linux Foundation nor the names of its
+      contributors may be used to endorse or promote products derived
+      from this software without specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED "AS IS" AND ANY EXPRESS OR IMPLIED
+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
+ * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT
+ * ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS
+ * BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
+ * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
+ * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
+ * BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
+ * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE
+ * OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN
+ * IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ */
+
+package com.android.email.service;
+
+/**
+ * This service needs to be declared separately from the base service
+ */
+public class OrangeMobileAuthenticatorService extends AuthenticatorService {
+}
diff --git a/provider_src/com/android/email/service/OutLookAuthenticatorService.java b/provider_src/com/android/email/service/OutLookAuthenticatorService.java
new file mode 100644
index 000000000..044f509ee
--- /dev/null
+++ b/provider_src/com/android/email/service/OutLookAuthenticatorService.java
@@ -0,0 +1,36 @@
+/*
+ * Copyright (c) 2016, The Linux Foundation. All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions are
+ * met:
+    * Redistributions of source code must retain the above copyright
+      notice, this list of conditions and the following disclaimer.
+    * Redistributions in binary form must reproduce the above
+      copyright notice, this list of conditions and the following
+      disclaimer in the documentation and/or other materials provided
+      with the distribution.
+    * Neither the name of The Linux Foundation nor the names of its
+      contributors may be used to endorse or promote products derived
+      from this software without specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED "AS IS" AND ANY EXPRESS OR IMPLIED
+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
+ * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT
+ * ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS
+ * BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
+ * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
+ * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
+ * BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
+ * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE
+ * OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN
+ * IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ */
+
+package com.android.email.service;
+
+/**
+ * This service needs to be declared separately from the base service
+ */
+public class OutLookAuthenticatorService extends AuthenticatorService {
+}
diff --git a/provider_src/com/android/email/service/Pop3Service.java b/provider_src/com/android/email/service/Pop3Service.java
old mode 100644
new mode 100755
index 36e88d705..bd2fcd8d2
--- a/provider_src/com/android/email/service/Pop3Service.java
+++ b/provider_src/com/android/email/service/Pop3Service.java
@@ -27,6 +27,7 @@ import android.net.TrafficStats;
 import android.net.Uri;
 import android.os.IBinder;
 import android.os.RemoteException;
+import android.text.TextUtils;
 
 import com.android.email.DebugUtils;
 import com.android.email.NotificationController;
@@ -39,6 +40,7 @@ import com.android.email.provider.Utilities;
 import com.android.emailcommon.Logging;
 import com.android.emailcommon.TrafficFlags;
 import com.android.emailcommon.mail.AuthenticationFailedException;
+import com.android.emailcommon.mail.Flag;
 import com.android.emailcommon.mail.Folder.OpenMode;
 import com.android.emailcommon.mail.MessagingException;
 import com.android.emailcommon.provider.Account;
@@ -51,6 +53,7 @@ import com.android.emailcommon.provider.EmailContent.SyncColumns;
 import com.android.emailcommon.provider.Mailbox;
 import com.android.emailcommon.service.EmailServiceStatus;
 import com.android.emailcommon.service.IEmailServiceCallback;
+import com.android.emailcommon.service.SyncSize;
 import com.android.emailcommon.utility.AttachmentUtilities;
 import com.android.mail.providers.UIProvider;
 import com.android.mail.providers.UIProvider.AttachmentState;
@@ -62,13 +65,30 @@ import java.io.IOException;
 import java.util.ArrayList;
 import java.util.HashMap;
 import java.util.HashSet;
+import android.util.Log;
 
 public class Pop3Service extends Service {
     private static final String TAG = "Pop3Service";
     private static final int DEFAULT_SYNC_COUNT = 100;
 
+    private static final String ACTION_CHECK_MAIL =
+         "com.android.email.intent.action.MAIL_SERVICE_WAKEUP";
+    private static final String EXTRA_ACCOUNT = "com.android.email.intent.extra.ACCOUNT";
+
     @Override
     public int onStartCommand(Intent intent, int flags, int startId) {
+        if (intent == null) return Service.START_STICKY;
+
+        final String action = intent.getAction();
+        Log.d(TAG, "action is " + action);
+        Context context = getApplicationContext();
+        if (ACTION_CHECK_MAIL.equals(action)) {
+            final long accountId = intent.getLongExtra(EXTRA_ACCOUNT, -1);
+            final long inboxId = Mailbox.findMailboxOfType(context, accountId, Mailbox.TYPE_INBOX);
+            Log.d(TAG, "accountId is " + accountId + ", inboxId is " + inboxId);
+            mBinder.init(context);
+            mBinder.requestSync(inboxId, true, 0);
+        }
         return Service.START_STICKY;
     }
 
@@ -86,6 +106,56 @@ public class Pop3Service extends Service {
             // We load attachments during a sync
             requestSync(inboxId, true, 0);
         }
+
+        @Override
+        public void loadMore(long messageId) throws RemoteException {
+            LogUtils.i(TAG, "Try to load more content for message: " + messageId);
+            try {
+                final Message message = Message.restoreMessageWithId(mContext, messageId);
+                if (message == null || message.mFlagLoaded == Message.FLAG_LOADED_COMPLETE) {
+                    return;
+                }
+
+                // Open the remote folder.
+                final Account account = Account.restoreAccountWithId(mContext, message.mAccountKey);
+                final Mailbox mailbox = Mailbox.restoreMailboxWithId(mContext, message.mMailboxKey);
+                if (account == null || mailbox == null) {
+                    return;
+                }
+                TrafficStats.setThreadStatsTag(TrafficFlags.getSyncFlags(mContext, account));
+
+                final Pop3Store remoteStore = (Pop3Store) Store.getInstance(account, mContext);
+                final String remoteServerId;
+                // If this is a search result, use the protocolSearchInfo field to get the
+                // correct remote location
+                if (!TextUtils.isEmpty(message.mProtocolSearchInfo)) {
+                    remoteServerId = message.mProtocolSearchInfo;
+                } else {
+                    remoteServerId = mailbox.mServerId;
+                }
+                final Pop3Folder remoteFolder = (Pop3Folder) remoteStore.getFolder(remoteServerId);
+                remoteFolder.open(OpenMode.READ_WRITE);
+
+                // Download the entire message
+                final Pop3Message remoteMessage = (Pop3Message) remoteFolder
+                        .getMessage(message.mServerId);
+                remoteFolder.fetchBody(remoteMessage, -1 /* entire mail */, null);
+
+                if (message.mFlagSeen) {
+                    // Set the SEEN flag to this message as it must be read.
+                    remoteMessage.setFlag(Flag.SEEN, true);
+                }
+                // Store the updated message locally and mark it fully loaded
+                Utilities.copyOneMessageToProvider(mContext, remoteMessage, account, mailbox,
+                        EmailContent.Message.FLAG_LOADED_COMPLETE);
+            } catch (MessagingException me) {
+                LogUtils.d(Logging.LOG_TAG, "Pop3Service loadMore: ", me);
+            } catch (RuntimeException rte) {
+                LogUtils.d(Logging.LOG_TAG, "Pop3Service loadMore: ", rte);
+            } catch (IOException ioe) {
+                LogUtils.d(Logging.LOG_TAG, "Pop3Service loadMore: ", ioe);
+            }
+        }
     };
 
     @Override
@@ -179,8 +249,18 @@ public class Pop3Service extends Service {
             // They are in most recent to least recent order, process them that way.
             for (int i = 0; i < cnt; i++) {
                 final Pop3Message message = unsyncedMessages.get(i);
-                remoteFolder.fetchBody(message, Pop3Store.FETCH_BODY_SANE_SUGGESTED_SIZE / 76,
-                        null);
+
+                // Get the sync lines of this account's message.
+                int allowSyncLines = -1;
+                if (account.isSetSyncSizeEnabled()) {
+                    if (account.getSyncSize() != SyncSize.SYNC_SIZE_ENTIRE_MAIL) {
+                        allowSyncLines = account.getSyncSize() / 76;
+                    }
+                } else {
+                    allowSyncLines = Pop3Store.FETCH_BODY_SANE_SUGGESTED_SIZE / 76;
+                }
+
+                remoteFolder.fetchBody(message, allowSyncLines, null);
                 int flag = EmailContent.Message.FLAG_LOADED_COMPLETE;
                 if (!message.isComplete()) {
                     // TODO: when the message is not complete, this should mark the message as
@@ -188,7 +268,7 @@ public class Pop3Service extends Service {
                     // 1) Partial messages are shown in the conversation list
                     // 2) We are able to download the rest of the message/attachment when the
                     //    user requests it.
-                     flag = EmailContent.Message.FLAG_LOADED_PARTIAL;
+                     flag = EmailContent.Message.FLAG_LOADED_PARTIAL_COMPLETE;
                 }
                 if (DebugUtils.DEBUG) {
                     LogUtils.d(TAG, "Message is " + (message.isComplete() ? "" : "NOT ")
diff --git a/provider_src/com/android/email/service/PopImapSyncAdapterService.java b/provider_src/com/android/email/service/PopImapSyncAdapterService.java
index 08a6f3adb..92f9f2679 100644
--- a/provider_src/com/android/email/service/PopImapSyncAdapterService.java
+++ b/provider_src/com/android/email/service/PopImapSyncAdapterService.java
@@ -31,6 +31,7 @@ import android.os.Bundle;
 import android.os.IBinder;
 
 import com.android.email.R;
+import com.android.email.service.EmailServiceUtils.EmailServiceInfo;
 import com.android.emailcommon.TempDirectory;
 import com.android.emailcommon.mail.MessagingException;
 import com.android.emailcommon.provider.Account;
@@ -48,13 +49,16 @@ import java.util.ArrayList;
 
 public class PopImapSyncAdapterService extends Service {
     private static final String TAG = "PopImapSyncService";
-    private SyncAdapterImpl mSyncAdapter = null;
+    private AbstractThreadedSyncAdapter mSyncAdapter = null;
+
+    private static String sPop3Protocol;
+    private static String sLegacyImapProtocol;
 
     public PopImapSyncAdapterService() {
         super();
     }
 
-    private static class SyncAdapterImpl extends AbstractThreadedSyncAdapter {
+    static class SyncAdapterImpl extends AbstractThreadedSyncAdapter {
         public SyncAdapterImpl(Context context) {
             super(context, true /* autoInitialize */);
         }
@@ -67,10 +71,14 @@ public class PopImapSyncAdapterService extends Service {
         }
     }
 
+    public AbstractThreadedSyncAdapter getSyncAdapter() {
+        return new SyncAdapterImpl(getApplicationContext());
+    }
+
     @Override
     public void onCreate() {
         super.onCreate();
-        mSyncAdapter = new SyncAdapterImpl(getApplicationContext());
+        mSyncAdapter = getSyncAdapter();
     }
 
     @Override
@@ -82,40 +90,37 @@ public class PopImapSyncAdapterService extends Service {
      * @return whether or not this mailbox retrieves its data from the server (as opposed to just
      *     a local mailbox that is never synced).
      */
-    private static boolean loadsFromServer(Context context, Mailbox m, String protocol) {
-        String legacyImapProtocol = context.getString(R.string.protocol_legacy_imap);
-        String pop3Protocol = context.getString(R.string.protocol_pop3);
-        if (legacyImapProtocol.equals(protocol)) {
+    private static boolean loadsFromServer(Context context, Mailbox m, Account acct) {
+        if (isLegacyImapProtocol(context, acct)) {
             // TODO: actually use a sync flag when creating the mailboxes. Right now we use an
             // approximation for IMAP.
             return m.mType != Mailbox.TYPE_DRAFTS
                     && m.mType != Mailbox.TYPE_OUTBOX
                     && m.mType != Mailbox.TYPE_SEARCH;
 
-        } else if (pop3Protocol.equals(protocol)) {
+        } else if (isPop3Protocol(context, acct)) {
             return Mailbox.TYPE_INBOX == m.mType;
         }
 
         return false;
     }
 
-    private static void sync(final Context context, final long mailboxId,
+    private static boolean sync(final Context context, final long mailboxId,
             final Bundle extras, final SyncResult syncResult, final boolean uiRefresh,
             final int deltaMessageCount) {
         TempDirectory.setTempDirectory(context);
         Mailbox mailbox = Mailbox.restoreMailboxWithId(context, mailboxId);
-        if (mailbox == null) return;
+        if (mailbox == null) return false;
         Account account = Account.restoreAccountWithId(context, mailbox.mAccountKey);
-        if (account == null) return;
+        if (account == null) return false;
         ContentResolver resolver = context.getContentResolver();
-        String protocol = account.getProtocol(context);
         if ((mailbox.mType != Mailbox.TYPE_OUTBOX) &&
-                !loadsFromServer(context, mailbox, protocol)) {
+                !loadsFromServer(context, mailbox, account)) {
             // This is an update to a message in a non-syncing mailbox; delete this from the
             // updates table and return
             resolver.delete(Message.UPDATED_CONTENT_URI, MessageColumns.MAILBOX_KEY + "=?",
                     new String[] {Long.toString(mailbox.mId)});
-            return;
+            return true;
         }
         LogUtils.d(TAG, "About to sync mailbox: " + mailbox.mDisplayName);
 
@@ -129,7 +134,6 @@ public class PopImapSyncAdapterService extends Service {
         try {
             int lastSyncResult;
             try {
-                String legacyImapProtocol = context.getString(R.string.protocol_legacy_imap);
                 if (mailbox.mType == Mailbox.TYPE_OUTBOX) {
                     EmailServiceStub.sendMailImpl(context, account.mId);
                 } else {
@@ -138,7 +142,7 @@ public class PopImapSyncAdapterService extends Service {
                     EmailServiceStatus.syncMailboxStatus(resolver, extras, mailboxId,
                             EmailServiceStatus.IN_PROGRESS, 0, lastSyncResult);
                     final int status;
-                    if (protocol.equals(legacyImapProtocol)) {
+                    if (isLegacyImapProtocol(context, account)) {
                         status = ImapService.synchronizeMailboxSynchronous(context, account,
                                 mailbox, deltaMessageCount != 0, uiRefresh);
                     } else {
@@ -147,6 +151,7 @@ public class PopImapSyncAdapterService extends Service {
                     }
                     EmailServiceStatus.syncMailboxStatus(resolver, extras, mailboxId, status, 0,
                             lastSyncResult);
+                    return true;
                 }
             } catch (MessagingException e) {
                 final int type = e.getExceptionType();
@@ -186,6 +191,7 @@ public class PopImapSyncAdapterService extends Service {
             values.put(Mailbox.SYNC_TIME, System.currentTimeMillis());
             resolver.update(mailboxUri, values, null, null);
         }
+        return false;
     }
 
     /**
@@ -240,13 +246,21 @@ public class PopImapSyncAdapterService extends Service {
                     // Get the id for the mailbox we want to sync.
                     long [] mailboxIds = Mailbox.getMailboxIdsFromBundle(extras);
                     if (mailboxIds == null || mailboxIds.length == 0) {
-                        // No mailbox specified, just sync the inbox.
-                        // TODO: IMAP may eventually want to allow multiple auto-sync mailboxes.
-                        final long inboxId = Mailbox.findMailboxOfType(context, acct.mId,
-                                Mailbox.TYPE_INBOX);
-                        if (inboxId != Mailbox.NO_MAILBOX) {
-                            mailboxIds = new long[1];
-                            mailboxIds[0] = inboxId;
+                        EmailServiceInfo info = EmailServiceUtils.getServiceInfo(
+                                context, acct.getProtocol(context));
+                        // No mailbox specified, check if the protocol support auto-sync
+                        // multiple mailboxes. In that case retrieve the mailboxes to sync
+                        // from the account settings. Otherwise just sync the inbox.
+                        if (info.offerLookback) {
+                            mailboxIds = getLoopBackMailboxIdsForSync(context, acct);
+                        }
+                        if (mailboxIds == null || mailboxIds.length == 0) {
+                            final long inboxId = Mailbox.findMailboxOfType(context, acct.mId,
+                                    Mailbox.TYPE_INBOX);
+                            if (inboxId != Mailbox.NO_MAILBOX) {
+                                mailboxIds = new long[1];
+                                mailboxIds[0] = inboxId;
+                            }
                         }
                     }
 
@@ -255,9 +269,20 @@ public class PopImapSyncAdapterService extends Service {
                             extras.getBoolean(ContentResolver.SYNC_EXTRAS_EXPEDITED, false);
                         int deltaMessageCount =
                                 extras.getInt(Mailbox.SYNC_EXTRA_DELTA_MESSAGE_COUNT, 0);
+                        boolean success = mailboxIds.length > 0;
                         for (long mailboxId : mailboxIds) {
-                            sync(context, mailboxId, extras, syncResult, uiRefresh,
-                                    deltaMessageCount);
+                            boolean result = sync(context, mailboxId, extras, syncResult,
+                                    uiRefresh, deltaMessageCount);
+                            if (!result) {
+                                success = false;
+                            }
+                        }
+
+                        // Initial sync performed?
+                        if (success) {
+                            // All mailboxes (that need a sync) are now synced. Assume we
+                            // have a valid sync key, in case this account has push support
+                            markAsInitialSyncKey(context, acct.mId);
                         }
                     }
                 }
@@ -270,4 +295,45 @@ public class PopImapSyncAdapterService extends Service {
             }
         }
     }
+
+    private static void markAsInitialSyncKey(Context context, long accountId) {
+        ContentResolver resolver = context.getContentResolver();
+        Uri accountUri = ContentUris.withAppendedId(Account.CONTENT_URI, accountId);
+        ContentValues values = new ContentValues();
+        values.put(AccountColumns.SYNC_KEY, "1");
+        resolver.update(accountUri, values, null, null);
+    }
+
+    private static boolean isLegacyImapProtocol(Context ctx, Account acct) {
+        if (sLegacyImapProtocol == null) {
+            sLegacyImapProtocol = ctx.getString(R.string.protocol_legacy_imap);
+        }
+        return acct.getProtocol(ctx).equals(sLegacyImapProtocol);
+    }
+
+    private static boolean isPop3Protocol(Context ctx, Account acct) {
+        if (sPop3Protocol == null) {
+            sPop3Protocol = ctx.getString(R.string.protocol_pop3);
+        }
+        return acct.getProtocol(ctx).equals(sPop3Protocol);
+    }
+
+    private static long[] getLoopBackMailboxIdsForSync(Context ctx, Account acct) {
+        final Cursor c = Mailbox.getLoopBackMailboxIdsForSync(ctx.getContentResolver(), acct.mId);
+        if (c == null) {
+            // No mailboxes
+            return null;
+        }
+        long[] mailboxes = new long[c.getCount()];
+        try {
+            int i = 0;
+            while (c.moveToNext()) {
+                mailboxes[i] = c.getLong(Mailbox.CONTENT_ID_COLUMN);
+                i++;
+            }
+        } finally {
+            c.close();
+        }
+        return mailboxes;
+    }
 }
diff --git a/provider_src/com/android/email/service/SapoAuthenticatorService.java b/provider_src/com/android/email/service/SapoAuthenticatorService.java
new file mode 100644
index 000000000..33519dc05
--- /dev/null
+++ b/provider_src/com/android/email/service/SapoAuthenticatorService.java
@@ -0,0 +1,36 @@
+/*
+ * Copyright (c) 2016, The Linux Foundation. All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions are
+ * met:
+    * Redistributions of source code must retain the above copyright
+      notice, this list of conditions and the following disclaimer.
+    * Redistributions in binary form must reproduce the above
+      copyright notice, this list of conditions and the following
+      disclaimer in the documentation and/or other materials provided
+      with the distribution.
+    * Neither the name of The Linux Foundation nor the names of its
+      contributors may be used to endorse or promote products derived
+      from this software without specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED "AS IS" AND ANY EXPRESS OR IMPLIED
+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
+ * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT
+ * ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS
+ * BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
+ * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
+ * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
+ * BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
+ * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE
+ * OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN
+ * IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ */
+
+package com.android.email.service;
+
+/**
+ * This service needs to be declared separately from the base service
+ */
+public class SapoAuthenticatorService extends AuthenticatorService {
+}
diff --git a/provider_src/com/android/email/service/ScarletAuthenticatorService.java b/provider_src/com/android/email/service/ScarletAuthenticatorService.java
new file mode 100644
index 000000000..7d950314f
--- /dev/null
+++ b/provider_src/com/android/email/service/ScarletAuthenticatorService.java
@@ -0,0 +1,36 @@
+/*
+ * Copyright (c) 2016, The Linux Foundation. All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions are
+ * met:
+    * Redistributions of source code must retain the above copyright
+      notice, this list of conditions and the following disclaimer.
+    * Redistributions in binary form must reproduce the above
+      copyright notice, this list of conditions and the following
+      disclaimer in the documentation and/or other materials provided
+      with the distribution.
+    * Neither the name of The Linux Foundation nor the names of its
+      contributors may be used to endorse or promote products derived
+      from this software without specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED "AS IS" AND ANY EXPRESS OR IMPLIED
+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
+ * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT
+ * ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS
+ * BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
+ * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
+ * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
+ * BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
+ * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE
+ * OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN
+ * IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ */
+
+package com.android.email.service;
+
+/**
+ * This service needs to be declared separately from the base service
+ */
+public class ScarletAuthenticatorService extends AuthenticatorService {
+}
diff --git a/provider_src/com/android/email/service/SfrAuthenticatorService.java b/provider_src/com/android/email/service/SfrAuthenticatorService.java
new file mode 100644
index 000000000..ead60b938
--- /dev/null
+++ b/provider_src/com/android/email/service/SfrAuthenticatorService.java
@@ -0,0 +1,36 @@
+/*
+ * Copyright (c) 2016, The Linux Foundation. All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions are
+ * met:
+    * Redistributions of source code must retain the above copyright
+      notice, this list of conditions and the following disclaimer.
+    * Redistributions in binary form must reproduce the above
+      copyright notice, this list of conditions and the following
+      disclaimer in the documentation and/or other materials provided
+      with the distribution.
+    * Neither the name of The Linux Foundation nor the names of its
+      contributors may be used to endorse or promote products derived
+      from this software without specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED "AS IS" AND ANY EXPRESS OR IMPLIED
+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
+ * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT
+ * ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS
+ * BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
+ * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
+ * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
+ * BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
+ * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE
+ * OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN
+ * IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ */
+
+package com.android.email.service;
+
+/**
+ * This service needs to be declared separately from the base service
+ */
+public class SfrAuthenticatorService extends AuthenticatorService {
+}
diff --git a/provider_src/com/android/email/service/SkynetAuthenticatorService.java b/provider_src/com/android/email/service/SkynetAuthenticatorService.java
new file mode 100644
index 000000000..817609140
--- /dev/null
+++ b/provider_src/com/android/email/service/SkynetAuthenticatorService.java
@@ -0,0 +1,36 @@
+/*
+ * Copyright (c) 2016, The Linux Foundation. All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions are
+ * met:
+    * Redistributions of source code must retain the above copyright
+      notice, this list of conditions and the following disclaimer.
+    * Redistributions in binary form must reproduce the above
+      copyright notice, this list of conditions and the following
+      disclaimer in the documentation and/or other materials provided
+      with the distribution.
+    * Neither the name of The Linux Foundation nor the names of its
+      contributors may be used to endorse or promote products derived
+      from this software without specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED "AS IS" AND ANY EXPRESS OR IMPLIED
+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
+ * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT
+ * ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS
+ * BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
+ * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
+ * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
+ * BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
+ * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE
+ * OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN
+ * IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ */
+
+package com.android.email.service;
+
+/**
+ * This service needs to be declared separately from the base service
+ */
+public class SkynetAuthenticatorService extends AuthenticatorService {
+}
diff --git a/provider_src/com/android/email/service/SwingAuthenticatorService.java b/provider_src/com/android/email/service/SwingAuthenticatorService.java
new file mode 100644
index 000000000..627841677
--- /dev/null
+++ b/provider_src/com/android/email/service/SwingAuthenticatorService.java
@@ -0,0 +1,36 @@
+/*
+ * Copyright (c) 2016, The Linux Foundation. All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions are
+ * met:
+    * Redistributions of source code must retain the above copyright
+      notice, this list of conditions and the following disclaimer.
+    * Redistributions in binary form must reproduce the above
+      copyright notice, this list of conditions and the following
+      disclaimer in the documentation and/or other materials provided
+      with the distribution.
+    * Neither the name of The Linux Foundation nor the names of its
+      contributors may be used to endorse or promote products derived
+      from this software without specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED "AS IS" AND ANY EXPRESS OR IMPLIED
+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
+ * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT
+ * ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS
+ * BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
+ * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
+ * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
+ * BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
+ * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE
+ * OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN
+ * IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ */
+
+package com.android.email.service;
+
+/**
+ * This service needs to be declared separately from the base service
+ */
+public class SwingAuthenticatorService extends AuthenticatorService {
+}
diff --git a/provider_src/com/android/email/service/TVCableNetAuthenticatorService.java b/provider_src/com/android/email/service/TVCableNetAuthenticatorService.java
new file mode 100644
index 000000000..2259f4260
--- /dev/null
+++ b/provider_src/com/android/email/service/TVCableNetAuthenticatorService.java
@@ -0,0 +1,36 @@
+/*
+ * Copyright (c) 2016, The Linux Foundation. All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions are
+ * met:
+    * Redistributions of source code must retain the above copyright
+      notice, this list of conditions and the following disclaimer.
+    * Redistributions in binary form must reproduce the above
+      copyright notice, this list of conditions and the following
+      disclaimer in the documentation and/or other materials provided
+      with the distribution.
+    * Neither the name of The Linux Foundation nor the names of its
+      contributors may be used to endorse or promote products derived
+      from this software without specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED "AS IS" AND ANY EXPRESS OR IMPLIED
+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
+ * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT
+ * ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS
+ * BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
+ * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
+ * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
+ * BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
+ * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE
+ * OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN
+ * IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ */
+
+package com.android.email.service;
+
+/**
+ * This service needs to be declared separately from the base service
+ */
+public class TVCableNetAuthenticatorService extends AuthenticatorService {
+}
diff --git a/provider_src/com/android/email/service/Tele2AuthenticatorService.java b/provider_src/com/android/email/service/Tele2AuthenticatorService.java
new file mode 100644
index 000000000..3b589c47c
--- /dev/null
+++ b/provider_src/com/android/email/service/Tele2AuthenticatorService.java
@@ -0,0 +1,36 @@
+/*
+ * Copyright (c) 2016, The Linux Foundation. All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions are
+ * met:
+    * Redistributions of source code must retain the above copyright
+      notice, this list of conditions and the following disclaimer.
+    * Redistributions in binary form must reproduce the above
+      copyright notice, this list of conditions and the following
+      disclaimer in the documentation and/or other materials provided
+      with the distribution.
+    * Neither the name of The Linux Foundation nor the names of its
+      contributors may be used to endorse or promote products derived
+      from this software without specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED "AS IS" AND ANY EXPRESS OR IMPLIED
+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
+ * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT
+ * ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS
+ * BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
+ * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
+ * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
+ * BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
+ * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE
+ * OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN
+ * IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ */
+
+package com.android.email.service;
+
+/**
+ * This service needs to be declared separately from the base service
+ */
+public class Tele2AuthenticatorService extends AuthenticatorService {
+}
diff --git a/provider_src/com/android/email/service/TeledisnetAuthenticatorService.java b/provider_src/com/android/email/service/TeledisnetAuthenticatorService.java
new file mode 100644
index 000000000..c5c50c514
--- /dev/null
+++ b/provider_src/com/android/email/service/TeledisnetAuthenticatorService.java
@@ -0,0 +1,36 @@
+/*
+ * Copyright (c) 2016, The Linux Foundation. All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions are
+ * met:
+    * Redistributions of source code must retain the above copyright
+      notice, this list of conditions and the following disclaimer.
+    * Redistributions in binary form must reproduce the above
+      copyright notice, this list of conditions and the following
+      disclaimer in the documentation and/or other materials provided
+      with the distribution.
+    * Neither the name of The Linux Foundation nor the names of its
+      contributors may be used to endorse or promote products derived
+      from this software without specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED "AS IS" AND ANY EXPRESS OR IMPLIED
+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
+ * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT
+ * ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS
+ * BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
+ * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
+ * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
+ * BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
+ * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE
+ * OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN
+ * IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ */
+
+package com.android.email.service;
+
+/**
+ * This service needs to be declared separately from the base service
+ */
+public class TeledisnetAuthenticatorService extends AuthenticatorService {
+}
diff --git a/provider_src/com/android/email/service/TelenetAuthenticatorService.java b/provider_src/com/android/email/service/TelenetAuthenticatorService.java
new file mode 100644
index 000000000..e0c7f6619
--- /dev/null
+++ b/provider_src/com/android/email/service/TelenetAuthenticatorService.java
@@ -0,0 +1,36 @@
+/*
+ * Copyright (c) 2016, The Linux Foundation. All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions are
+ * met:
+    * Redistributions of source code must retain the above copyright
+      notice, this list of conditions and the following disclaimer.
+    * Redistributions in binary form must reproduce the above
+      copyright notice, this list of conditions and the following
+      disclaimer in the documentation and/or other materials provided
+      with the distribution.
+    * Neither the name of The Linux Foundation nor the names of its
+      contributors may be used to endorse or promote products derived
+      from this software without specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED "AS IS" AND ANY EXPRESS OR IMPLIED
+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
+ * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT
+ * ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS
+ * BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
+ * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
+ * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
+ * BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
+ * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE
+ * OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN
+ * IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ */
+
+package com.android.email.service;
+
+/**
+ * This service needs to be declared separately from the base service
+ */
+public class TelenetAuthenticatorService extends AuthenticatorService {
+}
diff --git a/provider_src/com/android/email/service/TiscaliAuthenticatorService.java b/provider_src/com/android/email/service/TiscaliAuthenticatorService.java
new file mode 100644
index 000000000..626ebb98d
--- /dev/null
+++ b/provider_src/com/android/email/service/TiscaliAuthenticatorService.java
@@ -0,0 +1,36 @@
+/*
+ * Copyright (c) 2016, The Linux Foundation. All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions are
+ * met:
+    * Redistributions of source code must retain the above copyright
+      notice, this list of conditions and the following disclaimer.
+    * Redistributions in binary form must reproduce the above
+      copyright notice, this list of conditions and the following
+      disclaimer in the documentation and/or other materials provided
+      with the distribution.
+    * Neither the name of The Linux Foundation nor the names of its
+      contributors may be used to endorse or promote products derived
+      from this software without specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED "AS IS" AND ANY EXPRESS OR IMPLIED
+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
+ * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT
+ * ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS
+ * BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
+ * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
+ * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
+ * BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
+ * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE
+ * OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN
+ * IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ */
+
+package com.android.email.service;
+
+/**
+ * This service needs to be declared separately from the base service
+ */
+public class TiscaliAuthenticatorService extends AuthenticatorService {
+}
diff --git a/provider_src/com/android/email/service/VersatelADSLAuthenticatorService.java b/provider_src/com/android/email/service/VersatelADSLAuthenticatorService.java
new file mode 100644
index 000000000..b4c494ca9
--- /dev/null
+++ b/provider_src/com/android/email/service/VersatelADSLAuthenticatorService.java
@@ -0,0 +1,36 @@
+/*
+ * Copyright (c) 2016, The Linux Foundation. All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions are
+ * met:
+    * Redistributions of source code must retain the above copyright
+      notice, this list of conditions and the following disclaimer.
+    * Redistributions in binary form must reproduce the above
+      copyright notice, this list of conditions and the following
+      disclaimer in the documentation and/or other materials provided
+      with the distribution.
+    * Neither the name of The Linux Foundation nor the names of its
+      contributors may be used to endorse or promote products derived
+      from this software without specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED "AS IS" AND ANY EXPRESS OR IMPLIED
+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
+ * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT
+ * ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS
+ * BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
+ * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
+ * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
+ * BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
+ * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE
+ * OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN
+ * IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ */
+
+package com.android.email.service;
+
+/**
+ * This service needs to be declared separately from the base service
+ */
+public class VersatelADSLAuthenticatorService extends AuthenticatorService {
+}
diff --git a/provider_src/com/android/email/service/VersatelAuthenticatorService.java b/provider_src/com/android/email/service/VersatelAuthenticatorService.java
new file mode 100644
index 000000000..1dfe2658f
--- /dev/null
+++ b/provider_src/com/android/email/service/VersatelAuthenticatorService.java
@@ -0,0 +1,36 @@
+/*
+ * Copyright (c) 2016, The Linux Foundation. All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions are
+ * met:
+    * Redistributions of source code must retain the above copyright
+      notice, this list of conditions and the following disclaimer.
+    * Redistributions in binary form must reproduce the above
+      copyright notice, this list of conditions and the following
+      disclaimer in the documentation and/or other materials provided
+      with the distribution.
+    * Neither the name of The Linux Foundation nor the names of its
+      contributors may be used to endorse or promote products derived
+      from this software without specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED "AS IS" AND ANY EXPRESS OR IMPLIED
+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
+ * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT
+ * ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS
+ * BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
+ * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
+ * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
+ * BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
+ * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE
+ * OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN
+ * IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ */
+
+package com.android.email.service;
+
+/**
+ * This service needs to be declared separately from the base service
+ */
+public class VersatelAuthenticatorService extends AuthenticatorService {
+}
diff --git a/provider_src/com/android/email/service/VodafoneAuthenticatorService.java b/provider_src/com/android/email/service/VodafoneAuthenticatorService.java
new file mode 100644
index 000000000..dba279b7b
--- /dev/null
+++ b/provider_src/com/android/email/service/VodafoneAuthenticatorService.java
@@ -0,0 +1,36 @@
+/*
+ * Copyright (c) 2016, The Linux Foundation. All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions are
+ * met:
+    * Redistributions of source code must retain the above copyright
+      notice, this list of conditions and the following disclaimer.
+    * Redistributions in binary form must reproduce the above
+      copyright notice, this list of conditions and the following
+      disclaimer in the documentation and/or other materials provided
+      with the distribution.
+    * Neither the name of The Linux Foundation nor the names of its
+      contributors may be used to endorse or promote products derived
+      from this software without specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED "AS IS" AND ANY EXPRESS OR IMPLIED
+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
+ * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT
+ * ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS
+ * BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
+ * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
+ * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
+ * BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
+ * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE
+ * OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN
+ * IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ */
+
+package com.android.email.service;
+
+/**
+ * This service needs to be declared separately from the base service
+ */
+public class VodafoneAuthenticatorService extends AuthenticatorService {
+}
diff --git a/provider_src/com/android/email/service/VooAuthenticatorService.java b/provider_src/com/android/email/service/VooAuthenticatorService.java
new file mode 100644
index 000000000..2aac76250
--- /dev/null
+++ b/provider_src/com/android/email/service/VooAuthenticatorService.java
@@ -0,0 +1,36 @@
+/*
+ * Copyright (c) 2016, The Linux Foundation. All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions are
+ * met:
+    * Redistributions of source code must retain the above copyright
+      notice, this list of conditions and the following disclaimer.
+    * Redistributions in binary form must reproduce the above
+      copyright notice, this list of conditions and the following
+      disclaimer in the documentation and/or other materials provided
+      with the distribution.
+    * Neither the name of The Linux Foundation nor the names of its
+      contributors may be used to endorse or promote products derived
+      from this software without specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED "AS IS" AND ANY EXPRESS OR IMPLIED
+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
+ * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT
+ * ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS
+ * BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
+ * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
+ * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
+ * BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
+ * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE
+ * OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN
+ * IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ */
+
+package com.android.email.service;
+
+/**
+ * This service needs to be declared separately from the base service
+ */
+public class VooAuthenticatorService extends AuthenticatorService {
+}
diff --git a/provider_src/com/android/email/service/WanadooAuthenticatorService.java b/provider_src/com/android/email/service/WanadooAuthenticatorService.java
new file mode 100644
index 000000000..c197c6cd2
--- /dev/null
+++ b/provider_src/com/android/email/service/WanadooAuthenticatorService.java
@@ -0,0 +1,36 @@
+/*
+ * Copyright (c) 2016, The Linux Foundation. All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions are
+ * met:
+    * Redistributions of source code must retain the above copyright
+      notice, this list of conditions and the following disclaimer.
+    * Redistributions in binary form must reproduce the above
+      copyright notice, this list of conditions and the following
+      disclaimer in the documentation and/or other materials provided
+      with the distribution.
+    * Neither the name of The Linux Foundation nor the names of its
+      contributors may be used to endorse or promote products derived
+      from this software without specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED "AS IS" AND ANY EXPRESS OR IMPLIED
+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
+ * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT
+ * ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS
+ * BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
+ * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
+ * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
+ * BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
+ * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE
+ * OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN
+ * IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ */
+
+package com.android.email.service;
+
+/**
+ * This service needs to be declared separately from the base service
+ */
+public class WanadooAuthenticatorService extends AuthenticatorService {
+}
diff --git a/provider_src/com/android/email/service/YahooAuthenticatorService.java b/provider_src/com/android/email/service/YahooAuthenticatorService.java
new file mode 100644
index 000000000..768a7464a
--- /dev/null
+++ b/provider_src/com/android/email/service/YahooAuthenticatorService.java
@@ -0,0 +1,36 @@
+/*
+ * Copyright (c) 2016, The Linux Foundation. All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions are
+ * met:
+    * Redistributions of source code must retain the above copyright
+      notice, this list of conditions and the following disclaimer.
+    * Redistributions in binary form must reproduce the above
+      copyright notice, this list of conditions and the following
+      disclaimer in the documentation and/or other materials provided
+      with the distribution.
+    * Neither the name of The Linux Foundation nor the names of its
+      contributors may be used to endorse or promote products derived
+      from this software without specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED "AS IS" AND ANY EXPRESS OR IMPLIED
+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
+ * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT
+ * ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS
+ * BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
+ * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
+ * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
+ * BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
+ * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE
+ * OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN
+ * IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ */
+
+package com.android.email.service;
+
+/**
+ * This service needs to be declared separately from the base service
+ */
+public class YahooAuthenticatorService extends AuthenticatorService {
+}
diff --git a/res/drawable-nodpi/mail_widget_preview.png b/res/drawable-nodpi/mail_widget_preview.png
index b91c2c506900f8c13a3884981a32e6a83ec97e39..17d529f73dd6d92374b565e9816760773ebf5ecf 100644
GIT binary patch
literal 76351
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

literal 56185
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

diff --git a/res/layout-w600dp/account_setup_options_fragment.xml b/res/layout-w600dp/account_setup_options_fragment.xml
index e92b2eb8c..e44920e4f 100644
--- a/res/layout-w600dp/account_setup_options_fragment.xml
+++ b/res/layout-w600dp/account_setup_options_fragment.xml
@@ -114,4 +114,28 @@
         android:layout_height="wrap_content"
         android:layout_width="match_parent"
         android:text="@string/account_setup_options_background_attachments_label" />
+    <View
+        android:id="@+id/account_sync_size_divider"
+        android:layout_width="match_parent"
+        android:layout_height="1px"
+        android:background="@color/account_setup_divider_color" />
+    <RelativeLayout
+        android:layout_width="match_parent"
+        android:layout_height="wrap_content">
+        <CheckBox
+            android:id="@+id/account_sync_size_enable"
+            style="@style/account_setup_checkbox"
+            android:layout_width="wrap_content"
+            android:layout_height="wrap_content"
+            android:text="@string/account_settings_sync_size_enable" />
+        <Spinner
+            android:id="@+id/account_sync_size"
+            android:layout_toRightOf="@+id/account_sync_size_enable"
+            android:layout_alignTop="@+id/account_sync_size_enable"
+            android:layout_alignBottom="@+id/account_sync_size_enable"
+            android:layout_marginLeft="10dip"
+            android:layout_height="wrap_content"
+            android:layout_width="wrap_content"
+            android:visibility="invisible" />
+    </RelativeLayout>
 </LinearLayout>
diff --git a/res/layout/account_settings_buttons.xml b/res/layout/account_settings_buttons.xml
index af6280e3e..1a4fa0161 100644
--- a/res/layout/account_settings_buttons.xml
+++ b/res/layout/account_settings_buttons.xml
@@ -18,6 +18,7 @@
     android:layout_width="match_parent"
     android:layout_height="wrap_content"
     android:orientation="horizontal"
+    android:background="@android:color/white"
     style="?android:attr/buttonBarStyle" >
 
     <Button
diff --git a/res/layout/account_setup_options_fragment.xml b/res/layout/account_setup_options_fragment.xml
index 8dd44d61c..19d2c0969 100644
--- a/res/layout/account_setup_options_fragment.xml
+++ b/res/layout/account_setup_options_fragment.xml
@@ -73,4 +73,22 @@
         android:layout_height="wrap_content"
         android:layout_width="match_parent"
         android:text="@string/account_setup_options_background_attachments_label" />
+    <RelativeLayout
+        android:layout_width="match_parent"
+        android:layout_height="wrap_content">
+        <CheckBox
+            android:id="@+id/account_sync_size_enable"
+            style="@style/account_setup_checkbox"
+            android:layout_width="wrap_content"
+            android:layout_height="wrap_content"
+            android:text="@string/account_settings_sync_size_enable" />
+        <Spinner
+            android:id="@+id/account_sync_size"
+            android:layout_width="fill_parent"
+            android:layout_height="wrap_content"
+            android:layout_toEndOf="@+id/account_sync_size_enable"
+            android:layout_alignTop="@+id/account_sync_size_enable"
+            android:layout_alignBottom="@+id/account_sync_size_enable"
+            android:visibility="invisible" />
+    </RelativeLayout>
 </LinearLayout>
\ No newline at end of file
diff --git a/res/layout/preference_mailbox_item.xml b/res/layout/preference_mailbox_item.xml
new file mode 100644
index 000000000..07d3ba83f
--- /dev/null
+++ b/res/layout/preference_mailbox_item.xml
@@ -0,0 +1,58 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!-- Copyright (C) 2015 The CyanogenMod Project
+
+     Licensed under the Apache License, Version 2.0 (the "License");
+     you may not use this file except in compliance with the License.
+     You may obtain a copy of the License at
+
+          http://www.apache.org/licenses/LICENSE-2.0
+
+     Unless required by applicable law or agreed to in writing, software
+     distributed under the License is distributed on an "AS IS" BASIS,
+     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+     See the License for the specific language governing permissions and
+     limitations under the License.
+-->
+
+<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
+    android:layout_width="match_parent"
+    android:layout_height="wrap_content"
+    android:minHeight="48dp"
+    android:background="?android:attr/activatedBackgroundIndicator"
+    android:gravity="center_vertical"
+    android:paddingStart="24dip"
+    android:paddingEnd="?android:attr/scrollbarSize">
+
+    <View
+        android:id="@+id/spacer"
+        android:layout_width="0dp"
+        android:layout_height="wrap_content" />
+
+    <ImageView
+        android:id="@+id/icon"
+        android:layout_width="wrap_content"
+        android:layout_height="wrap_content"
+        android:layout_marginStart="0dip"
+        android:layout_marginEnd="8dip"
+        android:layout_gravity="center" />
+
+    <RelativeLayout
+        android:layout_width="wrap_content"
+        android:layout_height="wrap_content"
+        android:layout_marginStart="0dip"
+        android:layout_marginEnd="6dip"
+        android:layout_marginTop="6dip"
+        android:layout_marginBottom="6dip"
+        android:layout_weight="1">
+
+        <TextView android:id="@+android:id/title"
+            android:layout_width="wrap_content"
+            android:layout_height="wrap_content"
+            android:singleLine="true"
+            android:textAppearance="?android:attr/textAppearanceListItem"
+            android:ellipsize="marquee"
+            android:fadingEdge="horizontal" />
+
+    </RelativeLayout>
+
+</LinearLayout>
diff --git a/res/mipmap-hdpi/ic_alice_email.png b/res/mipmap-hdpi/ic_alice_email.png
new file mode 100644
index 0000000000000000000000000000000000000000..2232762ea64d521c68d2ce56508e36816f7fbfd1
GIT binary patch
literal 7324
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
Cwh?*&

literal 0
HcmV?d00001

diff --git a/res/mipmap-mdpi/ic_alice_email.png b/res/mipmap-mdpi/ic_alice_email.png
new file mode 100644
index 0000000000000000000000000000000000000000..2810d90286f96ab269bb6f43737085521ef93f62
GIT binary patch
literal 3675
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

literal 0
HcmV?d00001

diff --git a/res/mipmap-xhdpi/ic_alice_email.png b/res/mipmap-xhdpi/ic_alice_email.png
new file mode 100644
index 0000000000000000000000000000000000000000..fdf0938aeb810c98b6c41d7edad485d3aa89bf6e
GIT binary patch
literal 12003
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
BJAeQH

literal 0
HcmV?d00001

diff --git a/res/mipmap-xxhdpi/ic_alice_email.png b/res/mipmap-xxhdpi/ic_alice_email.png
new file mode 100644
index 0000000000000000000000000000000000000000..6bf8eefb5d86a41cd3a227ab498a8bfd5b258b85
GIT binary patch
literal 23823
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
W68;Wc*UfJL0000<MNUMnLSTX*Z|hnB

literal 0
HcmV?d00001

diff --git a/res/mipmap-xxxhdpi/ic_alice_email.png b/res/mipmap-xxxhdpi/ic_alice_email.png
new file mode 100644
index 0000000000000000000000000000000000000000..2e37767ab4ad4128c1fe44d7fa54522505f5efc6
GIT binary patch
literal 39692
zcmV)^K!CrAP)<h;3K|Lk000e1NJLTq006)M006)U1^@s6Qrv6@005fPNkl<Zc-rip
z1(;Ul_V&HL|MA!ef|w|_D1rz!sHljDfh{N&CMsBj3fP@TvAeswySrPM?(PA6zWaAS
zd%rW3f=AEM<9J=`nsJzU-~H~r;$CarYds5uw*T7x`y2naK-(?&jsN}p^L)wAzftD*
zecJwOGl2iT0nC^&oBZ5brceKMNq%=uuhnJ%Z3gh?G=SDhDkaXyv}xhzS*5vo?$YY_
zLMp9a@0Sdr?Y}ky_)jQ)#*?Q?+td_hG&F=6b#-AzO--0lRTXAbRD>C2Wno51X_#JI
z5~ddwhiQdHVOl|9n3k6xrsd{^X*s!3_&!%Z%P;ir@VopCe><a8uTieos?=*%SBDw3
zwP8kmeVEbM==aSS4aU)C3~dJRhyIs%cPpI~(27_qrLV3D(<>^iwA1nnLUUG5X#U}+
z(ERQ9q4~?NL(^wpgr-kE3ymLr5*pwCFf_dLUTAphozU?5TcP2#H$%gl`u^?rL&N(Y
z`FEN={X8^%{-yu6`J3-T^Y=f7<|$b=6dOlbd6?eH7`PU$DH9>u44};b=F6j}GAmx6
z6|=YY_ENs-^7PZorHmyd_Ub5Ula#(u3U5V6$zORR)W7gbsDJLoQ1|q6q3*G#LhVD3
zg_`>w3N?4#7i#XjH`LtoV5oWEu~7TyQ=#su=lr|%FTSF`eLWh-yB~zck3S1dUw;#t
zf0_~_29ZUPVR}_{G(ufd>u4~?&yvcVlI%7E_?ttTX;PY|=-Gd^XRmF6GnJKsG?mfw
zqIgAuDfxmd**Rg_l&SLeKZd5Sz6niI(#Ch>$zPSyKlehYd-CZ}_sHX+_JM~(?Y$33
z;ic@i-WjTIyfsu^b7QEQd`+mj{OVA3)eWKQ`ddTwEqB={YGoW43C2?Q^z)(q`Ij9j
z8sGcS(Zo@Kh>$J#lvfa@7b+^0mPXjcwGth;c7)FXG;0+p+8|S#0nBUw)1&gwsBef$
zBPBwijN1ii>~W=RC|&c9f;Qg?+Q=I>eeq?4HXnX02=lHzcKx$b{70XN3V+Alq2{LB
zL-lnxhw5vj<X2uBsxF%xDlfb&RGf2Rs5t%HP;u(nq2g?Pf5By;^0KRJ4As})5~^>$
zBh=h}kE28FgEEFEpA8L)3XO^?ykFxNf>vM45Wf2%O#4w$AuBsxC)e95kFddFxH4dW
zHVlE>f#kZ)0RBGJnwcO?>uL;;MoIycm{wXIlT;~_z53VRhDKrW#*aS@jURj@DDr+(
z^f%tNN3KWVUwSP<oM#1Fo_bbZ`$;M6Bcb-5`$O%W_k`Np<kfGHGT$sixal@2cVY~a
zWek^24po<2p(vn8aP^I$`i9#SA@0)ODGJ;x#eYDr^U&imsHgPW&xHm>f<{G`#<$)T
z#8STSfehipPaJugK2@Ia#aE$;oI}^`C?Vr;E`s3_Eed29B<4g2454-9X_gY~&#fy>
zZ3gfcH-J`En;FLNjnUhu39LLM6&NcDp8aDbtM9yP1+N3Uqu6-$haZc|egDHV3yS*S
zqf*vKL!EwSCJ_X}DC(XN9D4GZC{H{S;SK-B@A%*KvuA)iFB$*Wzw~OTfBCg2GO`AQ
zoInQP#Q8NP(68$2%lg^N{F~&}R{xHX5-nu3PQFR1i57xwjt)eGy84*NlRwM?kAD6e
zB-9K1uPXd(Nv$5{3?Pmk^mHjb-kt=KL=ulr)u!niC9j`+E~Sy;zxc8h6=esLSIdLj
zb6+bjef9OB`YOrQf-2YEB(Dv2zf*AM9((ONj6lZ1-vfu7%%YHZZDDvKi7P#bpp1p@
z6=hugp<<K@|Br{~@7{hdG^UZ~<rsD9o_V3gm>zv{W_kQ+8!p#i19|hE7%jdck)CRU
zcM?r*L!JXXs*B0AokXi-`hT_O@V{#St)UKh7cZxWJWZImIVU$XeJ^<P*_Vb8R(O(D
zd0ud~l}Ackd;ddL=$gClkJTCy*gK;bqTD5jbI$`Y0+6uscd639@UoTEWlj{IDh|pA
zOpzxxOqr9ANDIDL_}(SdFJp53VNyZ`hP@SGSbe6#^iqUit%XR!btsZJD(G5lL_jAX
z9oO;Ax2{@oKbogz#e|yP1C=GBLYgbgsrlAs0DtzX&a~*s@M_?DC5FvP7Aa9SyeZ`o
z+yK&8xxwf+3V$p4tdU12aRrN8*_F(?iUU-^vp+68F0WfJW2t}oxv20`wgxNO>+;el
zTB7t|bUZuWJgw=|8$jW}=D#HT4j7)l!4ObbMFcA^Nw5^Tfr`_ct@;VA<@Gm{pC?cW
zBfwx<Nop82QX&y$)~SjPRJmFu%$aU<n*sbul|7YadHlvEWBciq^7y4?Nqv5*6GZCi
z^)J3^Z(S?pb~*CO>tZQVQjJ_4t1wPRfiw?49&vk8o403AaW=|hto^RbpN;Q*5Sj#W
z3~4_3EGoX<w;9+WMV<x*mts$og1d4vH{stAewV+&2zZT*A<$TpF?{rCG%_I4oa9}}
zJ2FJz4+il{0-eZf<N(~4plU_5pv<ZW<LmutN@y-D)cq@sxk7b>N0~gKHDBp3Y!nOp
zFL`@cbEtWPX`vh_q!Z#BKN8G&<4xD)Yae;SkcJW?ital6Ws{>^epRTRe66v5&25SD
z%TVftvyHj&v?w`B(i*#4K20hypND4Z^dy|0e-%5qC~i`fnI`XVNey9c!oMTw?_&VG
zMq&ibC@B>mj3LbxW)%!D?LK1+z$QfkJAh|jbi>Vg0>(`w6I>!{V8o4|>hFL@KP1qI
z4m8vZdJII=1RAv&z<*rlXHRfvkl;c~(1VH9oP5IvpaNbETwf!sj?%mNM9J|IDg1^1
zigMAvT#l^1;+jySe+LfL%1G*DEDchWMm!^M28BxSyOnW%1O@)RWM1F1b;JOMq1Z$#
zs!M6|Ox{8T3Rp+N43s0n3C20s0BZ5Mc`ZdzmxxK6sUD??@|-%%Z3gfM8bF%h;)NPw
z<BF!0q0aX|*y{mJtoV07;3`ekWmkntDSIW&CW#F|3h%1U&9}!2j*O)4!AFzsYvK`6
z{xorH4QVif`4JT8_mX*i&(=`_1EBgu&hW-NO8S#Z5|A#DhD4k=r-HFidIjPs!r1_6
zxKT!hpjT5Hey(pxmQy2WGk`zR0MdFsUWksZ9)>wMdgwqDcr+xfD1N0Bz4FWpLd8j^
zg^KZ~hKh-2hKe)Km&d=-INzTBu_p|V>R(FAm3Tku=kL7N0(VfLPd>|(DI>)BlMC0G
z!XvIdO`b7?_dkqKhtHUZKQ{_bPVmIjvF8Deg9w2`Ai*ccNpb`n4jd>`MP`LXZ3ghi
zB)Wz>G_mA)DA!GcbxF6D<W?TbRUP4X>h!=HQw=7ZA?2SGDo#1w%1<PyzUHP-bLV}A
z01Yp`94j|c0w=Jkw64#mlHlsUl(fG7RA%i%U=(z?({eBd@X(`)#6}%eGgrD?G5RDz
z!5<StC@l-q^-TP1TEU_}dw%fOFo0GyeY^}!8$vLpLUVAG)X|BBZ&P*Im7(&Si$bLo
zzw)$mqMUu9xi_xzTz6AUaPNC4;$B6IhS%Om%9iiXYyhndVYa0AFC?w6e^yC9BN2fp
zAn0gl^t|8?Bs@I-)5;B=qU`&0sFz{*XH>+XWTX*+`~X<Q%mR>zYTUG0hIiTwU_R*!
zt?>Q~AdeDVy13lvrk|!dL8F9MbH}}*Qjn(n<kLgh@h63{qfZEBqsD~taT9F-;Qg8#
zZ#6fkp2QYU_QFdp3AWViV+qsH;O``S=2U<}cy}erPW&nLk`TZ2N<#2^GSuGtknZDy
zhK^7_%v7bpM)iwo5k^4Cl%hmhE}gZT+-3mt=JoCQ)4`MKYL_;_o|N_K6pCx~0IF}e
zB~)G%p-%bOiJ^SVgeWqG%CjyA)hIt$p9ELRkN0XIxlL;MjXXSR<ZmZf7(@6wNvj;d
zj(~fC0dQZ)hu{{uckq&{MzB(A?|WDVkaWOxPw6N4UcUcPtQMt)ph%tR8?+g~Z!iEn
zM^fdXi%U(PNvc{wm#Uj?3zZjN5y~f>70ORIIh4!ummen?r$l$s*`e~>i$nG0*MwSo
z{s%H}$FzX7fyG1SVIw?v1P}PPl6P7py$9(%p=3()Oc0U#hN3gDW6~c?RU!d%3lBUR
z%c-zcUwt#?2lOxs3u9jfBS`5KZ3gfwaHn;N6N++qtn1UFM{!BWs;<2$l*_x9jhht8
zjyW-u9dT?Z8$C9ZjhPrKPCGZ^{VT5vH8<Z8>h4LJSz!Hy6JzhzCi5mhAshyI!E*^$
zN?zaWSHqzPVl=oX3MFLEEHJq9-S=@Wfgzn%GYEesy7iyS0MbMktk0-naj}O_8bAKT
z>`Xeil}cpGPd_h|9ydOejyyh;9x*zUjXciqr{awBjQ2@~UDsELuGa%`G6(Fz0A6`L
z^6A@T-h}%_AAoyDUjULFMv#nk0*C0ekcXK%qVJ)1Q&uKgyHX@b<SsJh(sTylPm&k>
zxeOqsGf?7W5^KuT(D=cJq5hfYT)DxsmyJ0klpc9(DBkbTP(1w5P<rr4C%qLD&vGIR
zx2N{L2P5Q3@jgP6hleO>ls9XW`IGeCxoMWnHrHYV(8XcPLI=n3Kq$QR&PXG9>RH1~
z`ViBmWciswO8mK@F;<EG)&?*a9*?OExp}dvB|KXD@Z;{*GCo)~c0wpQd{iho^yp9`
z#m5lJPCQw#=bTWbe4zUJTTN582ZEMNaz<+(NsXXQ{w;BLm|O}X9UP(r4%OUse`L=l
zlW#aI=qEfsxJMB7n71&eNY5B2H%C6v-^u`H#rr6Kc5Z0;;%m3xxv|g{%1=Jc%3gBN
z5ute4LHc^6pwF?P9L#_AMWJf)b)g#iGD#WZgO5M$@j)8^*guuj7~14Fi<KYxH<N2{
zhY~(fniw;~T&*bJ8EA%u^p#uz=mZU;>8o$Uw46LQ&gkUB-2HDR$P4^;J%2K#g*Sk<
z44vWQ&thXs9tFBW`AMgRk`YIR;-LpdkpYw{3X}^9Ri1Ue=W1(iyE`Uik0eu2=IK8l
z<(W45UFGRkf|DU1NJ(|9db#U<bF1RUi)%yGzpjpR&J-i46219uX!`uCFl}mfG=ijO
z@ZZ`}@!v6k89&DrB#jB|0q;}afB!>w8o`ltbIV4L3nhmfWu-6P=YUXh;Ngx0<>My#
z--!+kuDAk0RU#b&OovsFr`qIql_y&X_Zj8qo^$U7cPNXJ5SwmJ1i13L%;+eNs_x+@
z?BM87)6=21Lyza@v{d@HF#wVv$ZQpr(er=wsc&kvJO_le(nF64MLX{kigwy76z#IN
z4WRVM(TWJChRX9U@$b3nkTN(KS~0cvDN8*ts7?MOl9@*)9{>tb8B#80`neRJC}0Mz
z35Yj)!j4=5c5U;NDQ5Ei%&-lUXaAE1Fl(g;&(9_X_&h&Nbr+Hwh^K(KR*Ki(b9g8m
zu!{|#cyB4c65nzq!S?)@U*j6T=W^lnU;q%dFakQ0ZStQL?t3ac3p&JdOn7|q0iY1w
zdIVZ}_0=~T;!-6dFMz_%qA|*(KmUgl<Nv$?G$rGT#ifzV_QA)l6rj{)<4-lrDcot#
zP_W%Dp<v5F^8Wic`7J-;Bx8PtR-if8cyG=_uJ!w-r-C80$$wT_-+w_-#2sR0tzqUW
zT2rF-EXKJPD}rCFsBl%Ny8aeN55_jp1)64=&T;E};4f<cvu<dB)CT5P@?%cVdmk!c
zeJ)g8d3`7wGa(f3e`qM&VfRqbZ#yaf_Mu>_9YWDw`-jqFP6!pJo$Uou9$1%Wsi74=
z>u#Pl`SZxVkub+n0S_b*1sF&=^Sn?w>8wzB#<_~-7dk>fsKXJ`^z=49hVkdrEc*kD
z;g2_f%ub%TP<C2LN!-kU^2_>3jwo{$?|ZP6f47jo#r7e8vu#4bHajU2?ClB=|89E2
zRoBOc3+n>!zCY7`_swpTKbM#y5e<OefT`;8`cTu!@ybs*J?3+QMb)?78P`6(_d%R5
zNFu>ZD_Q>11^~SQQk!r;11t<_P*UTjlutNQp8qg=`}~cz3i-YJh5U{Chr&U-$tVs9
zWyg&V6$+auKi<ME_dAl^JS>rIlRvfC0B*lKE(F#y1pY9X1c9;asN*xvjf9!bJ=Gy9
zf-L#{IiXGbwG3cZZcp<x4@h_mTVB31f3}&S%;l5L4#fu@843sQ5%Q$`d3~h(o67rd
zyQ31{14HRiCxmh+4uU=|snP7h`?twoM}VvD5Z@Vd0X@qK<#H%~*|B3yZ7E|?@BB+`
zB=rd#!clsMsq)1?k~_4(A6@a8(b(hxiRRpVZ#$#>MWY1%e#yZ{O4)a^(&w(XNyzKH
zMabWJa46hu-%xVI=&1bXUuOL1ZOQ4fsy6xS2#^)IIe|g02wiUCV)^(<ityv)=#C3z
z6ge)q)W1vDn7M23FqPx{IX(B_uV4VJSC)8uv8LAR2pduUH{J@>3W?>yfhC8HGR(>C
zxv7;ucioLb-X>dz!X5Vv#RneYq}a7%7FNk~*Z^p;b0gd2uOqC6PlablU*L*s+{>v@
zGF*1-I6K19Lyz(VUlm3m9f1nd_{CRV)i@)aHBOgt{pk%L-P)i;hUK#)Htgpiajnn?
zFFEqqP&j1okl%OPkh@Nwkh}h7hCl@ab`Hfu4+^D61AWf)Mu(~^u8nKM;g)a%Sw!0=
ze@#jFLCk8nFF+KKqboJR@hDgOJjP13Px%8wIG_gaDy?o+8T!*3fSX;79)#ckIB-85
zLOgn@5}(4Ig!wnwN}hkCkh^-1khekKkWa}I=%dI$Xym{Mxc^>Tm~LTC$W?9f7Zsi#
z93hh7OD8)DPz^%yOAbjGz7l3TNQ`lqG|JE+2BR{Zq2F=s$^ySP_IHS);=^9f>|C!K
zXK)=wCfw2C&F?!P<aU?xuf0LYU2}cs0EL4EeTE-q{tqXnaC0iz;D!OP;)FGZmK)pT
zFDuD2<e6T2rQptGe%9dsk|T}{C4#;s!w!x^P8h-ES9z|34Sy``oz7ZDDnqR~Lw`mC
z@C<KJkue-QW=ML=PdUStor3;@<@q-bIr98DQvTd^`-J@d^8R}t;G0lB{?t%;)`hWY
z@~^Ao8be^v<m=kxe?@qn7y!xenMp-x)EFB;@gDny;{6T@#UqXiWfRWyfD?;+%^S)u
z@Y<D`I79z+1DM1561sWdex`w_*;h!ROGb>8^6wDxg!gk+?H+Pg?iO;_>J{>OZSG{a
z<iI0i&0ih?&%l5Syb*|0RjDDg$^VA%JTU-0W2g}fG%?sjGF-IVuu!!7zM)8lK(0u)
zm_9=N%gP77|G|#cTdIGjF7fYU0BN%e+^>wCHH8gud>(qtp1gGAaiM7Ey{zoHYi$s6
zx~>y)R_X3YkiXfsp=j4(almElq&U}$0mwUee<wGpP5!rp=Zb^VGqwTfnU^W~Er9_n
zh+MSmQ00kxg<{~)v11K~nJ)8;F`KiQC~IhJX_EaL!!*C20VGu)cs@;rJ};XJ%c82H
zA^QmDZ!OQiUdUOgTgX{)t&p>tlHcC_LcumWh9W9IqsNAFRv0Q;#Es3DN8v`b$^Vw5
z&lUqX|56t`Xoi&>d7O2jaF=~dhJ+M}5tNM@>&U?zGWkGS8l}+k-!XvMy1mT_!?VOB
zH&*7s*2J=lhaX~cTkg6WhV13m2-z!0`Bz>i<aQJG-+Vwz-Jjh)6VHm(pJan`oBRy~
zcBq~?&ad>C6HSYu8fZ4Kq)7TfVoX__bJ|$Y#quq$TVcRHS;6>Qn`HmK0Z^7wIHF@`
zhUbSLyX1+bmmYn*@cphXcLIB|JFOhDmtVt?fLs9YU%c1;4t+GfYyd2;<))-UHK<Mg
zx1{y+#o_6hLy#i}Gz{ANfKVX4DcE{&DA;OHC>*$}D?{*zAlR|qo%0`Xxc~0vxdnc6
ztv}t?oE%5Q!3iAMLmQic2ZmQrZW>(Kf<4*GtQxYHTp{Gh0CLyt6$x*H_Xs5i93DA8
z<Ksp*qJ|HRZj--<p!_t%<owD`oM2s`3RJk`9-*NBppdumRv~|rt(6oHw}HS6aB1|z
zPeOBcPCVw;{ej<hr0c(D091Y03(q!(AAa=GDKd8Rd=5Cwq_#XmpVdP4(p^J#`xQe@
zm$glM$nQ5Wa(-m-rK87r_?^}`o85d<+T`ycI6U^cVgTbNDd`;-36i@FGfymU!>!yX
zEfgFo-gktc(&;XZQeNk<kQp4(0d<;$I31$-j~GCT{n_A#_y6p3kHl48e7VU@h1(Bt
z)yL4M<4PfWsVF&Jy9@qoZoYrfKFacsJ~86|lTVL_R}ckGJEu+lE^_MG7BGI9oM7pR
zr-YKj1cUZDFcb_N67o0PGURpN$VC*WGVFw^IQJsY6|>RWL-mz$32#Ub_Wr{S0O*7A
z*Vo5A{onuKotvy62g(%d;(<81YxI=&Up-`ZSW!kG{J-=nA!m*CZPkU_@8->Jbcc=q
zPd+UkWMLyX>+dBKTg#chD&=#KzwT#GKGP{@7zNM)j+_5RcsdY0%7ZA`tFPctfA<G)
znAKNZ=N&~JrIZ7v`RV~0jNm_F0MH%e{W%zcbtat5QhEL*USm=?aF>wRt&hu{PJA%{
zDS!6zYlhr)HgxreVRt%z;5s<r&H*q21b+D6NltDp$vrq}4wC#^`N^lwB7gmR#%Ewc
z%m#4O@u66`Vd2huyHAwYedCN25(N%C+^~tAq^xAe2!P>i88J=b4>N$)Jbw<RD=A58
z{x5k?KZ!3*46GKcZ|H;aOLCT3E#$1UPRQ%AsWW?;Uyz@Cpanw_<0ttB{6}Q`9OS?G
z`h50rsZ5MAb`COb4#MA#pWAy+`UUv|KKJi%&zuJc7NZ;JNP%)ibS8K0-mV^^Tdc_`
z8$HIe<ZP^__%c1eAnqNV&($jPZvgD{X=;uWUOBlwOs?jh`;E((-=%Z~W^>i2{R$y_
z$>pN~Q2t!KXUOZbg_9eydVb##fblqB(AbH8fJ~TOh&Z##*i>5o?tH#(`Wkb5{rUX;
zR8E{l_&Y0pA}391Q6LQHmp)@g{-}HX?+bcB1YrFolnCon?|!Du=X6~+me2d|5K8tt
z#5n|0XALjEE*SokY152R{;>uyeMYSNgZ;nzKGZ$)oCh3G<f0+Nl(F{<IjgJ}vZVA`
zi!U3p+AXK#w~M_0+99V~Zx6i`Y`<$L+UtO50POWA58!|clHuQ7PMTegA3wXCkV@;{
zozK@zUt^B1{~Lcl{r}^}$3sBI=)K2Hh>D-UAF#8%x)dKy4eZJ?{Y@&fzy2R}um62P
z51`IC0_-_liSI7P{y=9~1Tcv6<wOey@9wz~4oRW-()8&UVR~M^k;(kb5HB$QUEgVL
zLwmUWqfdQG2$oo)gtic-=bF9j?X#9xE@UmXOf-OwE7^L@{pq`%>;ELmHUJK|7&Rsu
z0ny-hlW|d)JDpXI8#B8cJ0|(}aV;`muRrD&r1k5Lo&9fk|KrC+Wt9TY6fqnH5`*LW
zlO~3W3Bt{%DuF!X+*nEBlpNvcGDU>a6Qw|Utx~;il(8+>dfd1c!)X1pjEw)U3uVyK
zBaaKEBSv~58pRUwfL!5!(`Z&(PsY&OlzN7z;E&bZc)K@=lMAq5d46Vy7ntv^Z+(Lk
z4h~G_1QCWDN{<<%jD3%gkN013ZC8A({HXyf-8JOu!YPY-+0{;a>*5cVmCFE*Iw6!D
zofrYp;P(<<ZxpY4!pt&Sa_ot%<b){vd{lBBv&w9*o4$7I*FRqWo=Ezde%<8vj!ET&
z78#ZN&T*82sfL{#VGW*LN^UvjwCL@}N%>EnB!xdKRGxi)s67ATP<hGaq4I)DLWTan
zTt6?<zn6}Y0h};aigbeHL>s~Eik=u>dTkjQ^ZP%C`IJ(<Kg37|V{np1gZB&tTWlZl
zdTwe8jb#-<p&lE%H^9;~W{er8Z~E-ZFukB?zGjFQn5UY5%JZk|OY%$IKiTC8nW=c#
zh>*AGHZE~yEwz%Ae)*8KXy<4E<N%#l3Ay?=YPyBn>=cSgfcHJb24HJf$OHEg(tbDL
z^^Q8OMUFmB5BIpJ=qTLri5!O#CW?y^ADxK*{`lFiEA#W2U%T{}<n?(iUNe=^QSmc>
zJ2L&e`rTua-#<aWGxj7aaQUP&Liri;>Svv2DL?DnP=5NE`ne3@be05M7^*J4JXBwK
zO{l)^M#0akr2v=4-<^0`DAntfo+w4qdzb2SmSR|n3K=2N5E(|DXsXIgpJPs+_dhMX
z|6!wS03~vg?1wGfddH9tlUOJsXT>!`_Oh$W2-XRC=+lmSx`)IrA`Uv_G#ZajQl*@S
z8R7-ztLvK*-oE?6r-d-}Px1wI)fTD{W#tF^FS7K^2C!B_e_-yH4)A`5#1Xh7Mn^gF
z*cRpZcZAnDa&(lDlA|Oj{qbYvMde{nIaToCj8JhpyrZ-A^-TRgo_3Oy@RaBw@rFmW
ze$7^bcWQmj{2r0y#BsV8^3oIKy-zzcBPcbBS2}u3RJf7HMuWlF<f+R}(%+mWNOSJ_
zp+bsXIr-{Pb?ptI`i7e=RoCAXs;;>%R9$(szgFLPOQ^Z+&QNpbJuW^}-*juJyyB`*
zalysWSokcdoFQn0VVr$|jjDVS%_d!s@{ZEcC&ueIa#V7^ey98Ydptkb0T{qA8NiUC
zp^(iX8}y9^Ab3q_ov##Is3=08V6UwA3VrrPY>rh`w;b60yBL68jFB|<y0f>X?x9EJ
zi6&bS;A}A3n7!<3QR(sitqowARb9pc%M}hB;;A2U1|M{B*fELdK^#8%H_E6M@oOC&
z<p{~hW9;!!&I&1H<+&Gxs!J{lRsXsoR877re!ck8P<hS;!qR8@6dFT>qmGTrarme?
zynZ4_jIu)GRSi$hI9ne2q6keADL?Cc8NsO$mmhO{e9fa1qv4ulgq4?EDy5fl-!8?z
z|AA2Z=wqSoiKi^Jk3Sh|AAVFne=yWM_;9Fu?1@nK)H7Zzi`3lvK&VnAsJ!e78$rc6
ziX0bQ7%KQom+P}##ZrOm;=iAFQG`l@Q-();#=~`w4nHP-w$!j^y{9wD=s#A_gF|#p
z(v1=!3z(sW+YNEzo4ZPP>DcPAz=9D#s_fm*+#wE1@eHwY0gl%4*#k*q?B6#4pW@Q&
zGE?){-^%;H<{kbXbKK{kkiXHEp76plt@x>60F**y7&OKTXn<|MtLK8F0UY5?&{2+#
zmj4^XM<yM5)J)<Bi}x26E<bsqaPxT)I>@`$+<J#RDEme4k6&-T&7DQ?G+weCs9@#L
zYs-*m?#(Jz8hd}{7)}e7=Lwozex<zjO`-ZWR)XAS&PwHFlkI)W#!oODaWopEWOu?O
zD{IvilSB0_^6C#f7;2w+Hq^iTiW0iFGH3TTy!~!yc;n4b|LSX@{<YU#c4jc7;jMR_
z_|-ivBe?rsz1K}PqN=MDDXzaERNZoGsJ`>AP;=h{HlAvIW(=X?qRVtWXUixjI%<^)
z`q?m3cqRkzF;s`8_ccmsMvnPo1w8;6cs_VUC}uiLIs<&pmBQNqmR!L`klkf1)9hKG
zTz29qo*j2Cz&aKB0`o9LKW_$*Y<XZ1p^4MkAALez^K!!h+SR$;H!;^gtNn^|H-L5e
zcrKubm4|!o9}NH|C_7;+`p_eenok*NVU!MIvhe*OBcrFKx^nV_P;veRq57I@L(Ls`
zhB|pu4&AGNo->1!6VM-j%5Z`kSOHv6B5DJ`m_{7w&SORnJ|cO285eL#-n~MGQ+@r7
zq2{i8L){~f+cVcb_M{Jx1IE~}PE~Y~p`ds`mCB1Ri^h15{^rT2tl$kFd>9%(|2#B(
z`>p9E2uF=_L~PR+UxubHzw(-prf<IU8EQ?Re<>q)TSo9qsD0?+P>T`WcYmmT<Plv1
z=ORCEgW_{?JvDdV7pi2Sm5O>5=U?dP<J{t;2`#Wl5v>Hn*Jo^fPt$un|IcVX1w8;6
zNH>5$#k=okondWeG=SA2%$D#yRUv5gjNHO5B^PL5<@%JY%mDpwGl15!z8qsz-=G8|
zJI?vuevjFE)bjKD4s?Snt5er_VY3;)indz#9Bh0p8oYa)0U!t1|InG03#*?miGNpo
zz+sX@C5MFKgY~n+M#iKRh;i0A!iU#}Iw?lIJZ$3|Z`p|1Pl^JuixN-Ev7WWJ-z|7_
zxyy`rca*=F*B`Fe9X=w;L5ImBj<nY-qa=Cu`BvmQ!4qDiQ3}c8UmwK%!por+!%}3Z
z5cD!U!Ruc>SyAU!{mnz6{)HFy`y40wrD-LskK}k*j*LQxy7XM87ZkYo0KT18Aj!=)
z9L3u;ysfD4%B!J)=#fT{4?fUm{KS};QyMw&8tCL`aLa8muh4Z=UVMoR;T%IaDp9~9
zB51J;oo(F~-QVB-jOI~NW8*zg{{0VgnG?8N#M0!AWdN)7h!G&oGojfi3P71=me^6?
zx|@BHB~D^`ZEXey&8-@=z`SgB_L>tV70us%AD7z7Q&O@jRA_SJYo&E!^@rO3uNi<M
zh9S_tBU+3gBZtkW@HbM<)*|IELHXs?D$Wz$m-5%@p`#cax!Npm3PwbE=w&cifp-OF
z)Cw+C{cCcln0UH9e91wF$JgBNpcWaSha+fJri2=$23FKQ@K8K|_=Ar!UYb0~2YV|D
z7=tVCsJx6M_bS1W+hZhpo`d7w)%$<p)!@xia2AP8uc(Y?>Q+|yd+@A{pr|MwCsioP
zFLXp^2#E=)rq92KLZtZSn;1cU{L!!5r03QkqpyGUbvG`ZQ{2Pu{yQAGxHc+HRH90c
zmH`}s;Y;!NJJ_T&9KdgXM)N5kgG6iqK%hAp0J_zoi>daxJvK4B0BSuYQ4k7SBz!<O
zCDC74qw?zpFfBH|rk9qx+gAHvLV8n}VvRYSxeP8#t3SVH03^W*Zx#$86%69nr1kIb
z%irrJA;a~s4$#k(^p=9L1vBt+D1W`YBc8H3D?1+8Tv?S7M(Ze@HGcS!;LBq!E0#|@
z!!W?g&ub6eKO-fF91-&hDNN;+*Ek9F#sXgdr>Q;$6pBdGS6?d>zbokRM1&nA+}GV;
z<*$9@(P)tGzn^&iDN^Ws4|_A_H=P*^g>Oz#oKEGfvNG<?*R{_oTt9f1$N?)7cJ4Gq
z5O`Wd5`M<u2rvo*1u_AN$Q|k)ecVQ0ea-bYW}r~%F*1M=^1k~^@rNFe987rd{5_-j
zdWLfs8ewxcfX=bNLNdHYPY+%(NmhR9*<P*K@b-K0Su;D_)I8T=nFW4{@oD8}zbCvO
zJy`0jocIB4862M{%Y*MvD6;aW)t}Y|Aj8OBX0^xy-D03eB+2Y)azr_(MTX9UWd80z
zpBv_fw6DHDP|A9!LMWxhGtRQYfrnAFrcXa>*)GPpWKg+@YEm@zmPSVF2Qu!5L*=Dc
z7}@{<iiRDin>t)jPhof;eI2IAb>vZkR`UKAU80=guIR--{v<APWlj}^<ecL)syzCb
z64aYxHRh&ULiJtugxbfSuu(R=t3+4V*7WUnR?=yBdOW`kpdpr>St(EPL9f}ImE~(S
zRO0sqgZ!RE4Lu`v=D7Ul=n;(u<G{d)5;g#m=vQ7dT&sKhNkbwh$8s2s07o8UC|RU?
zTC~@2A5el~W$yXVgZ_P)=^4&lG8-bcAL2p_&D59!EEjcciDhFlywcjrLpL-%f-X1b
zN&|!9Gq3o?T;P`t07cQm0DHpwG3%2JZ-PHyd74|9<hOPCb4~`p5PaVOrb<)WB@c*l
zz&uL)ecu$zeu-kTNa+BDKPms{;}g$(l|1u(_H^KU6u^fwGd{;b9hvhAs-;A^R@VBL
zUJf<#&J|~$=LS;I@PqXF?57#3_Zk+8h7R}7sG5{3d91qjdMgl0MPJ151dofN3Vt-c
z_r4PB=WK*-SSeai(<cJB)cM4dp-xI@LwNh$BtqpxuZ0q`VMB^MjU7uE=x3ihO7Xgg
za~LVLqYewBFdl_`{)W%$=s+amT1b{t@2_Z8|LpTFr&0y0QZ7OxjU0fyrewqsQTZ|a
zJ>q^I?)PtfUUQO`XP7+4Im+<3A86;j-0^i8bk)`dApKfAVH%{#@K)QqV#O*RP7Eav
z04mZLBMQuER$%T1K;w%&KT;B)L*pl(`YbPonrUDGXUzBSxKgyl){5WS0La!muWG22
z$H_0kYVf>^$nNJ$_DzJvNm9z)_t8z#*S&`+TyvJdF>WeVU8WCz_dTKE#g~kUoj8K2
z6D$~;dNU%tkauYM;U{_G_jSXbu#!@xDLLY(P`KByP`K-!7T(JcNVvFc?8&a+P<kY>
zoW`*}3}m2qcwD@#-nU*}mWV=0w2~ZP^3|bIP@{@y0QSD;-dOs4=n*HUjWPo0CDU{A
z;+P*$2;~<vYE+I;_nPqgbDYlpv<2h#o*d;IjvgqyBHT23H8RBJMEM&OVd@3NSWb*r
zWVHyN)yl7kRB^?XavEp5FF@s|NVwk$$bH^zXd=T}-T(Q0UULv$Z`V|YM%it4Dcogm
z^TwDSWGs?hQuLIpZwq%ybWBcnsV*M8;(Q4r2L+nyJMWXxe-fH-5Z)uyFvnSeUp4?v
zZ`Td=#22(@VJnDNgs}ps56QIGY}kJ`1BjjAyiNL>-b(wr<p#{7C~B}@sA!0cXIIH?
zdt3R7hAUhieq=0nUVLe&x&01>cTO7lNXc$IX~YMwwc0G~&sGypsU$+wy`ac;yP)0q
z7a89dA9P44+)c{A^KPMV$nNrj`^5a>$Wc}nusjVaHek4F<L$-Oks<s2_a4=A#pSj;
zBfOBo@Y)p@NG`lMRFDi`$sut!>U!^#5hy2k?G4YkPM6}^07!s~io6rE;azfx$6VL1
zy6I-u`KtxLYA_xQK@bcW)%3#;df-3FVC3-y>FN|+h&0tip*!!6)t~EcbYXymoFYNl
zsY>{dAM45%Rj#7F_fHfwz2AwXiuzlg*Q~<x+jXBrW>Ngi&-c;&-_ww}VCx-1Ua!sK
zc&&8F`j#31sDo0wehwRf_bof&6d%A>|JqwFNK7j#iKo&tH$2Y<089Y>$O{=F2>y7{
z)d?s2gJF@`ORwC*`}rjUSb7zAit~iyyyikl4MPp{Bs(X<dBHpFA(2AvqOVfWqM?F6
zBMvq1g}Sz@D@yKw3O;{UiC}ADREF2YXQR3z4Bhzd2Uft!$=A3}Uwr71hC78j4UwVl
zqKBZIWzT(_{Fa?KKJotd*~2$|^KFD1ENwMMs=yw(LEf6m5V*ercyXri^~BRd8FULp
zsj`WuhO*PokTG23->JPz(L~<4`OB}v^z76Cbba#v7*zdBGSFLYmErs=l%IW0C_C+p
zP)@gZ@|B@lk*H32h#O{#WDP(s<vrvX7)<5W*MxGtPx-m$MQQ{Ti3t-!*|?K@-%1oY
zOAc1jOTL5WM<IRB_nKLL%kz?>E8KDSM0Sg^lb-#~JVQOdUG|E~?x>zb_TBc01~O!?
z`1=EQ7TVa(<Tohw*16OGQX>EoDGKCv>+Q-Ul$FZMu8fE8d68CrW@K{y3?N-{n>4>z
zX-&7#<<IptHqYPT=$8y&31PHOT|;g%3_~JZpge%J7f8{s2q7?vZsOowB~r{G`u{!l
zmRCMFl#Dvo57n6biKm=cHvRCU592d8oUoS+OSfL-g4dqL{?eCU^C4~(=UiYIP_&;E
zVRzm99d?SciyqiM`-ak^N1NLN?Vy(TdH+LW^OlN|pofxFO0D%zKjVC&^1`IXKJhg7
zBueSLLQ)$uHk2xnE<5uqQxxb-(~$G2D75jZ;7F#)`%@ytixV-*_4}pcVSAn^W0ex0
zbFRC;7+bv}4nk9n<{D9=;-ZUXY?DICal-baMu(D-M+x2?8A=X2TuDA<<Aa>o7wt7H
zMpP7Xr#-E>Eiw<!sI{ceYlq$K=q!Vy;ur3spY66+%&Yd6u~ERF)SC1f+{;PJ&Vro$
z9!5~G^&mxnO+wDfi2<Nj3w3NU01QHTC_3h0nS+jqgYyqQVrU60%?!@ZvjHR<A1Ke!
zc4r|Goi@s!yb0Epfj{$N0IMbE0Bk<M>rx19t_Tg<twnZ7#6OQh1t5xyX3);Mp%N)*
z(Z0j&y-+S1O|=g^9Fs|TWp54RsLj@^^U|J164~$yc-*=tp9xjM=Tv@ZpcU@1kG+23
zz`@Y~1c6Ahp)XWk@-NrV>jhURD;oX)eagxVSE#=?y!xsWU&w3ac<Kq0OvNz&Mz2wN
z!kADxR)%oW$+22>>Ay^9<2syBlemHDUAp{Q9{oM%3Kf@JD!6i5G#)8**(no3nW91E
z<&zC<YVNwn@UL1Bsgg)>#+fp>F@lGO3nog*hf2x!l9KO1P9p`~P0BcAw+Qogib@*q
zJ+ga??6BLfO8P7d)8{oX5x(DHNL2jY_l^-;Mptsk;jvQ>>5$n3NQmPmSW5MM>2YIY
zLVn1RHWIEaZ{saO&Z_GQ>U5RPN#7P)N(RtzCZqvZD1Y;9UAkpaK#gE66|ZT`3|GXX
zmge06=>7^O@E~{*Ha;-C%!?OL|7YVv`xRm)zUb1wZUD(PIIp*m0Tphyv$Ojm-KdOg
zp9qzrMErXLq=*A#Gy`{xO1Y<Q=0OKb8OBL5E;9w8UY?wW4|Q*M07-aTcK}mL2UQ>p
zTb{N_3RipIgC@w)0HU1g2(!K3XMmvEAidXadnhLu5y~c==6b#p)=xflVSp$zJ(-Q3
zmXo7!`*Enp11r&mwp=!5oDB!%cLbo!sGpUN8=n}!nUNB4!_BVB;H~J|QgLe*rU%MV
zC91yTPSZJ1dX(A*aPldRAmkJnFbO;jEjrD>o020&+DQ}+8KQ`*sJrd9@}%7R*22%W
zQ<6EzjLV_{JBOm}xc|Gh$o4~iRSMJRls+pQoSzp_beC96P!uiFeZ*-&*DjlIs+p=4
z=PM_YV<8e!g07$wf9{1bF(0GPaoACUX8VTxe%pqe)z?!Jyh_x$Sq(sXmb+3nbB2nQ
z2QWlbea#JS+~QO`G+#e229PQX6`<rmYaeg{MwYdL+4B4J^H74Z*J5+={%L}O0k98<
zeW2Yp3V9m}25}I!5}Sf;2K&ZmWWY`>H*nj*mV#||@B=Csps#p;d9C6D54I9OAvW%R
z_W9^Nr)0THN;Ao2&g7igjOa6El3%d847>WKTTF#6KKM|3se%E6qHMc;C{PXn{3#iE
zv=dl}WmJA**|Ru<|55&?ufCG9z7lG{-4|aXWu54rLFwq@TwgDrkkF*h5+o9IDL?Og
zCC8VT$_&MsY7iw#qFCccA6xkwUVlTM?YU?GmtGeC?yR#7h00|R<@#BLA_xj(rst&7
z9brlim**U|pS^s+;2lH3cDmmK21Fy+2BqINDt~|dtiS%P|Mq?!g*=aKcAWDwnUf^H
z0~d#9>1VaAWPo00dp#?#{+>hiyrlR?k8=N{{OohhMIsp|F|UyWs(JX)P)kz|dE_xi
zS)Oa9B0KEWl99(ckI3z@QONGHW|-P;*)UZGFg1li=$Vj6&I)UWd^uT=1LQt-RMkE5
zgbN*}m(<qHHZQ!uTsy#2fIRp6gS^v|KEV&Bpz%KmNtd-F^<mL@Gyvu~nF-!t^LP|0
zxxki#JVu$3trH<a^ylC7VEPY?4+)Q~#I$IyeIoP`yr3FGNzfDoSvk!jcR^`*RmWPo
z4FOgl#z0apxH2s}+l?=BhRQ3hG%hb1x~~*|=aAojn~=ZtfRHZ(AaoZgWHVt^DM(WX
zmx!hpNfn7NiK^bK`G+42Rcar7RF2|GCz)XGq5}>L#lqdC^2j8hcxx1%*Q%rv10M(O
zKL#L0Ac3!c@nu6S(-vgdC<Qd>%B!w6y}44aZ^kFg&l_%xWlW-t46J0-arUx>dk+l-
zJM9t*21ywQ>K<-4utf&wUT%xm-!6Lp{;3S~{q}vw7&0<=?&9aPgX!=E>9fLFZAYbV
z*Qor;)7(4J^8%WY%-25rh!Xb~Lj7BBn*d0uw(;{XqI~wb^Ej80AAZb*m-5rjcCKI;
zw3-}mhvmc6g_p883M4&&oaI&vdF%G^H9_F3IP*L&(1PzZJ=q=fs|L_|_=N@wti#&-
z9`?#YNJ_^4Yi-~qx4(%0Qv=ZNWOwM|NgkgF(_<62t(gsAKA3U0jBJ?*#<2zeCJ(ix
zWGji_kE<~w4wc8A7^<$gGIDTq6M+lON_=T}89(RbMtT5r0jfRZ1NCu_(X@gBg~V^|
zZNbezhLXdMaAe6JFfiox-6G^+1ltXAqFr+MNPAX1QvDlmy4)DgudR*VpCSQU@$^8e
zZ@taryV7GuJ4zLTxAnDzD4<*gzP>xcG{)!(Lz$M41Vh<yeP2q?24pHb{J%Zo-AZb2
zzQsL+>YMqyTaERhKm!4RXI6fB+JfEpwDRXm@sWZZP)2$$f+D*JuIxO-k*z@R4n-~4
z2Jf%?z14QEwnQ1&O17W7_&FuQ?`}2F&&idZz4vuzo`{6kr}XOlNfFKbCs?m=mGrzg
z`GxyvDJ*p9mt2n0d+g6#YkpV$wu3^>x*LS7rMrZwi$nu(Bv_<Vm?|XVa=Ua4i0*me
z@snKOfb8h5u%3VGYT(=rfZ-P!VA<f>&qB=|_xQ!&W}vuq-Q19v7XuJJBUhkjz?lH>
zx19`c+&@MFj36TeESw&h-*=lRTk3mxD-u&mp5R+**uW8*LB`|Ih9QIrKf6Qv@u#r^
zOf`t809GeiElFq(f*5s=KjDW$|Db62{#KMc;o{s)Hw$?{1mzkezxMtYT^ed0l(A7>
zP0y-wG%0t~0k+iM|B!Jkn4d(iaF4z88ap~+w-;27!8Dp@c@+h!nD}BY;f}lQrQjhs
z0?-{M3LwxGlyle!(%A)?Xf)G^A{Sq3!zwwNXd{D@gCL4o21}@5DPk5Y7ob^4E>nEK
zL7_;Wt56CGHZM@lV?!Vs=w26Wk=%DbgKgctN1(DJ>HoKWMg{%0i3UW}Oo|4sno*q-
z+@aUu3Y{Vwc~bLt-}yc^7Zf;R)9ogbx|5CYv%Ea>sW@7<=H3VOInU7b?kx!2H)OB4
zT9~@T($NV1**+SAqJVipB*J~Ra4!PJ0*CTJO60kFV1AY<u?6PT00S;?Aslnm`0o3m
z=7w85EKPkkzjr^w83x_wNPn1<0k9RCcD3>bcZ3xMcpW(2G}LC6tz{S($5v6c*fzou
zJzSbpz=-O*?lylO<!}1_`?!`}-*bZ-Xbe#oR|s`K;M;GF(G7j5{7_kWgCkq-@#IwL
z=wt1v^M#G``t}XE8*eNF&~?aD79Vn$A0muNSd@)=AU>xGXhkO(jt=J`aQOH2H<|Na
za_Es!v9=$qYwsVSo3JnmHWclONrD0wUFIl2^9?QzFvlHUlwaQ8a|(!zfF>R9?dh-w
zAGQ&g!71g3%U_~sL$X_-2!_EGD2n;3%eTW^?xagjE|Lz*V=(S_>~~-&*khj<5w^vP
z<B-yO-#?M9qob1JLm)urZ#MHYD%iY#G$4IuDm{j%r=J<BDNW0G8}zK$9czaq#devu
zJmycPZs45A&3s?$3{_$UvcQh5{>4|FAj4707aGW3b?q><{W4N|44|D1phGkO*6#?K
z=dZVkt65C#Rb6(aY3Vpg?+u#esMQ5#+x(F3{1kkki^k4RPWR^c(t?4zT6qnBpg;eT
z^3S0g3~7nk0f=#VJvZ|>8%8j*Y!PLXEp?-HbGO^UU0J%laBv9!)Vjg&+*H$lh09SK
zdr4@%5~?cj;+s)gpb_4mIz8TBSRM>bC8hXa!3IHuye+o0_s`vEV?&{$J@*c!f)#jw
zJhYQvDLZ+Q6KU2$as;e!EA(Q9Uff3*I$ZEc(L~-fZ<Br@ub-4fFoSYqu@tU!<S18#
z;2beBNvF8_rrS(1q`}5ujz0&&q!$V=_!S9t*SOnFB26EG#Ii^VUMNK;;uOl;r%I1u
zlqI=GCAo)^W%3<&fG@g4u;e^9=1O$UKouv=^4?Uy@aFdJtR|mD@;2VmSUhiIeYQ>Y
zoKXJ$+xhbq?YqD3!SVWR=Y;C(r2LOQ78(Unp@vY4pRQ;*Jz=gkD-Ub_=_mJWplmcj
z2M4CWsRCkR7(@b`@LTVOs%x$fB}W`>h?TR}dLgT$@_@xV$^e!S3{n(WM7cow<wMT$
zt2@`E)J|`Kr41}^X!_#o$P1cfW5nzRz~%=Sh)jPa`~Klr7w<3pztv!q+6;dnz|E@x
zxD=Wkj=_GQHG6rW*=13hV;K=NB1!H|qD<3l>*&c2k{3Ja6n8bvq<sC2sQ4sJ?|ope
zPbsvLp>l;>l1!)q^)J2@n)Q1qF8C6v0EDm_<qlMJsM1hU&EIxgDgUPS{un^Pputks
z{oS>-_ovF_<To$UlA%%KARq|7{f-qBc*C#^jhno_TTA(+B)vCPzSCEVBBddZ8N7=i
z$xv6E!0e?A(Vu>Hs5t);d2~+2ywa5q3uQsdnouXsIp6cfRI5slA7jclN>1WV!pmnU
zlmZj6@bnDkS4zpDgPUrh&x?_IzE~ca{|DAqU8fvEo)vFhdOT<K9_GZA@~@2mN7ScZ
zjMlyT`nlxw-YiNV$)^3{GunP|ggv8^%AE3>x+k6t4ez{TxMTdC4EI?1iP&F!;le@v
zTW=}pf6ZSTKmF95Z|<{;3~;O9G%1Ot*MWl}zsT+0D`a(EQ7{MtSX>6MWK4)5#>vs<
ztk%=(_hGTJe!Wh~G_aWb&<E^M5Sg0+kSvloHc!b`^6-KF_(^5c7wE+flt&&Ar@z?y
z1OI<s3?NB_X;o*jE>R)Mxxm`Jz3hlxK^fUVH+2KSBi-EmzFS34tnglX{E6;r(&6-6
z><1qjAJU-)Cb*U_?}kUC)M#474L3QVY=&itchQY+R6-AZnZ^@kNxYu1f8Tym{Ee*q
zd5QugiYNmkgC@Nx86(lQ@>BW*`{Vs(6qG4xMuB<Z4CVJ97?q=!lKq}~&GjW4$gnon
z=i5q9V$hDUi%n^eXu#5|31<jCoh3y)$7Mf~Zb*5hW5<UQ=nC@mB;#<DB7Pt0+`^44
zdLlFhmB{1qJp?4^0neZO!B7y|HRG1LUMgmuH5Ob1S}|zvYSM)l+2Cmg!hS8-ekVO|
z!JLiyMaAzWV_sjMX?@)zeV)8N`hN2*4e^Tfc}V;zC|LQQdfJRtlz+OCTGO>TG`*n6
zFbH}A{SD?K$mO7j)9kBz@kKq;4_#IBy)KOggQJ6bPJUG+c$wEjPIy_??{u2k0G3$B
zJE<tSdjrXkeY`NN)(39CXGm|lIZ+_#5zTG@bV*ry%k&oqUfg+~_pTJ~GSqumT>tOT
zrG=9{uLeNG=+xC4qB$b~DmBprNM-4{NmQB*Hr2)ViwV`PtiL-ZsrTO&%aBll6ETHZ
zaEFQzieGZfv5pkwi5GGNphAQJC<HSVg$E=`;3=t=IPu+hlaSj-uxt~(_ZAFR4E4UA
zD!~P?H&6?jLmW&gb10?kN~sPm4$zFmm&yv>KDWn)A$Pq#GVng}Yft@uA1P2j!G(c4
zL<5jAgT?8BGJumV!75|1m7)W+d=geG`)+%<1nk6C21J5hu*<H(?|a4O(rD-)r^yLS
zRwTUJ3fS=W+xDnbQ}DPn?wWIRBlMsNNTV%biZYB}t(=Gwt9uC}k1@@h-b+3ZZbKOW
zhTMbCBgfTS&uP=X`uFW4R6Js&okfJFPaB@n%(LgG633tpGZJ5a<EkC^6qc;HO$kql
z@45E+7hdpn69uRUQL=8*|C9W)My6=U9?}<vu)54{0E+-?K$O2P6Z3!-*Nz7;Di46W
zR&&$sb_BeCTER=F#AY`D;19{iXJ2~4zWRD4z{i~w>;LTj(TiuMzvk5dl03j8Y>EOt
zC1%z2A{1J;PZTK&9uv=!-*?Mc^FQD~b6N0E4yn3%jrRN>8Q&XwPrfRYO_-D^1D3D?
z<*al4Fer7pJeml9L!+wVtg}PO!6a0IDjN&>^x8mPx_8LiOksZ8?Oehnnt;1Ww!x}E
zD3UaWR^aV7Dl9YYRViFfXR}C3n!n}N_KvyTFz#Lwz3#fbqtf6t`;yZPij^T7z_HE;
zYyfP3V}H<*qhw46n~zkm{SGo3!KY1>n`|H>>MbSQSka}Qq9aBi;~+Xfd#C~)KJ>7g
zXExaEIQ`~|Rc$h0LnAO51j@iTI@r*+mE*uJrR2zRu9Cx#GUuvbn}Kpjf^q9()O;T0
zaCm=RgDZ1~9O}M@xmXYpKZqPDzc;Xl(}RF9l%A7k#_v)Zg`-rggqi$~4mW)Q2K#wV
z9$S^cx?}(G$Du|JuuSl;XqVmRZUB@*lZs=W5@DFf>|(0E`g)@Qs)Xszpg9`=L^0?O
z@c-ZcD2_i~dZkZrFW7oVmoR7A`}u3iKTAW*hC>usZjF{bk8Age%Cc@RD@i_K6->GR
z0VaJ_{_Ao#PN>`v!tF&A&cNly-rPue>tZS!M;zsb5M{=igd1dUr<?Cuz2HjKHP=e%
z6iW9Q8ge&5`BBiGR<L|Q6v%Ik1wv#4M&QkO5QJk#N4DbeF!BDk-XZUQj+00{d!ArU
zj+7*4&GnS1^$a;{uOA~oFDd`#Te*`Rt0be0)1gQ+f?1^pL}jSLy!;blG}&c{qf?F|
zQ;rNYr-xpzx1yAsLq63OC7kpZBJ8+1)II*V?$H~D3z=#QO~KOAmO&Y+D^yxA2*zA1
zlYtvWH#+0M%i8-Na6|<TxtzP>5I>XLUNV55x>r3nu=2Z1tmxyOjB+j%yFvL_q@xr?
zs0ilgez8Jdkc-@l{0s_q@iC)9!7xEBJqHZASP+g*Hx3GT<eBCqQjtqwG(;wn^xU<T
z1a~3{?i8y)3$;%SVCk0m69%yQZRZ&W@++>7isrP0Zl0boJevU+-!dffM%@0uIZkeX
zZ9X6_zMYr)|J+~@M!-=?x<K02@Vj%@ARp*q&yu&{ruM)Nt32EbE_7IgUhImGyuX!?
zo5}bhUEJ{}>*fhA(0o#eET>F*hhPBP7C!mRq2J?)N>+KeaB5&gQu)d0xqis$E@fSJ
zJw=|4Vi`{uoBV*XChJp}*>xMeB6?C1DJn@M<0Psiek8W}Qi|O5`$*|~$gtOmMzD5I
z=Ky)~pj5Mp_C3JUX5e%hTE@MUKc9NmNjuQYiYLV?*lA}e+7?p$9#PioVW^h3-S+0y
zlrWb}u5;TRakIpSA4RwW)bY4vUYrv~m^Y@$<nm)2w!r{w1XQ#P>+++bzWj>w9v2C8
zPpK>s*&Ka{LO2RVF<7LK`>L+I%4470U$by26VrT5=dFL5>cRt!KIcmGU6fzt@408l
z9WX$jM-gU_?#+I~P4)xo`Y6<|zcmYiH8ETh_on2aLtSyo$&^7!f|qPD06M};EbD>`
z5SwigoGV5mOwvz9ld6)-p-`h|G61q-B?dn9Lio1s#aBYr^*4vI@uxbQ_VO!6(pY~o
zKgvHV6e0?6T#^&wHKVe~qI0_If;Znn9(Y&Nb>Y1DW<38w^lHq)dc(nYh9zKscrYZ2
z#c*!)wd|~O+%2so`NJEb5IIp{nWiE!cH?W`{X+gW+l1_O)(P3&^#1F1H_Ry9bq{-I
zd;j|%@`@AQa|YB344|^w4+T#NJ%JuU@$ds>I6E2^<gC*pWUs!C>(n`GbPqY*I1Xxa
zCC1yCWy(547HC10W@k@>sQ@3vi8KcCuev5)-~I>6%MWsd@-?of`@X*5;+9((_q)zc
zo<pTe%I`9xyg2<1&kl317?Anut7Kcm=ka?gGUPJQ0+^CY2Jl^nr|+Y`W1gV)vB#rx
z0oo1QFXl-bZS3ozQ%=dXRQCxZ@x~20yLvwxm?2kfOC4Vkf&K>Lpk=3@=_t)-$kpe|
z?%OxyY_*k)K=((_#0GHN?eR0w*z_Fphfd~k8pX;>@|9z`5r+3q8(|A|kO3r=h-6y?
z4YAx_n|q{_CT{h0H@Tw8VmDw=dZyUy22fNS8s!OUpMFj^;Tmr~D;zR39(bqh+7+PR
zY5*w|f<@X%kzjd6g03=xb-<MyN9ZGLUOws6i2J1^D6faWsUOoemqL2m!sAaG=f{DQ
zNDHoF;{plb`-$@Z^i!Ou0(%P1px7u+;Vw#kH{U#DueFwxR8gqM`i4J*e4vT3|BEk2
z#iDkdt|logj@TdXk2f22Y$#M>O2sOtd#{kahLlyG2gzAW2GFCoUU%C_sX$?*v?zb9
zl6>Ii9k1tZC$tPbWH3EVEwF!%@{;Us-TXCI`3Z?H#!ergilV?vFUR{sjzV(l`QI;G
zwK9)LiVW<iVOiFrj|!vf-n{<0`zHJ@Uf=KtI(JgmC5NB~;RpcaP%e_Ug`%4rL>@#s
zDr6&%HuSWzvUC7yIQNMP3(C(%3nBoCuauZEOgK+v6e@Hd3Izl6cNLbG5#&S9*o*sf
zv?<?d9s^w^vsgez2JPMWUkP~DvMWdBNAdsJA<`i-%+Stp6A2Kz`$j%(zI621Q1!2?
zya25kVw|F)snK&ZfPw;-so-E#UU-?iX@$zBIiJZ1@Vqv_=GqtN>~dAsQp>xPm9z3{
z!pZWKn{8o5VO<|PJ3VrU=ZAJoh-NbdA(i|@*T*OzUK3ADS+lnFcwo9_M0gK_@i6~&
zH+t|J><r;8cY{75d$rYN0PFgD5>9*nOD^+kk#BgIKJjW^KQblD<wI)g<)@$FUP1n*
z{gk}-4mqoL3)w5Lp{TZ+zOEjl+6EiBa>Kwro1Gzo8Lp5hl9)^3$W4f77+tw>_W|xo
z=l1Sn*h7Q@`nV)~z(K~(j&e8$DIWOU_a$k{(IX+5t-S6AD-?=Kk_?=5m5A+lPe0?*
zDDUsB5>Utufxh(hIk%FsQmS>OOp!Tn^M3vwZW9w}4Aa{|;Urkvg&~n-r-^oDq|$rj
zR4~u96AWO~aiQ>lgF}Hlet{If5W=7!Y5BxS<~9-WV+r+p(^}l%yyZ4mfC>d8^XLI|
zS|P$7l>eVg&29iJVgO>V)hjt!@)#e=U3>q-?kR9xK1pUa15jp+)e@FTA}h{1-^-Ao
zyLtd-`8ljVoCh&kDV0Sfi|c1gDH5#ERf@BgOKMbo@HliW@z&r*D?il)LUnbDRSRNb
z#N^d$kuhlwjl5_BT%aFg#m0l-;D6-}E`8Fem4f5JayQ;o%GFZ_pk%yfFMC^XyemI9
z-5N0{9+Dci>;7diA=3k4mk#AoaulvPw}<kgHP@BLSzV!d)hJ!paK!}0A?amF7ad=3
zkpQdHot`o!?hX<Rq8?s((Z$Y9fPjWR%1tb~PCPFiULXlouNrywdM4jklY)^`WsxzE
zJkl$1E+Htzv|KUMUn35&hoz`M1q`TFYhv2-o<Xn>H3T(iIMGMpZwq(dQ&4P&kgEug
zhXD>h!1D|wvaP4$ynqS{L-Vw_eW9UoCJ02qfV_ggD?jJ_P)b8jxf_E)RQW2HY`f-~
zQ1{ql$*!cY;wl#sb3T)dmPKR?L*@0{Fl2R}g$y?<HJU`2rt2C#T?u0Iobv$s0q=e2
zrDz<eH?slI7{CBH_v@Ya6q4`rR1NDX$fkKQucQFO&#wXK!nnX_sY}J=Who`aE3GE{
z-NWA3yqh!6ibL%zvXXLmPY#ODE*~lv42oj}JapRUx<Nz(SBIcOXXnPnP*k!?BTom2
z0pSeqU#uh)NMhxe=g(eqEn!=E*FihFl0(<k)dG1SQ=Y;8)c$2mF+qIIunU-kr!LrP
zYu%T%9L2Ji>l$UnRb*IeIVZ>;u)Q}-II1XVH*=Mq1j6t-xrvkxZhYBECmRa5@`LBs
zwUMCb_TJD9FM0;BNr5wz6U|G4ISKT^A?USP1;dPiu{-=A856lgJ~U_;p}Q-`kuj8=
zFeX$AHda$DgOG>ZlJM{0GwHoZw23;VhD!>D>>jI5>_fW$0p~45G0$DIcPHJ%oDLnq
zmW3;2LggpsG;wdqTNo_z0^jSdcT|Lz)w**Wqgr8H#*h>*=uglD%inM_dG}Q!4PucF
zF%m2kVNhm32Ic{02&~%OOx5Cj4-VxM&J<+3JMIltVh%Na&IXW`<E_K&{x2IhF&<U9
zN&mQ#f{FZD_kaG9EF5L(LY)#TZ67b1i(gt{YK?C8#<cVqATht6X4j{mMfkz2Er%T-
zR4!QlL{~9steE<oP@v5rL0L)YYHN~a-gmBMvH6UhmxVj+YQ@Y})X83}o8d*?R{j03
z;q0S`-X$dEa*~)NhmMMJ3XENnN4Olfqo9G5GiyabLTb`WD>5##k|O{Sfzlz|8iqhj
zrKS;sQDdOwGSD(0<=u6+a|06p`~lm!A(t(q$|5@TSl`ftq_|8Fs!HCO=3k5;N^}|Q
zp}(PM81s@VOljbL(&NbOvr(qf<vxe*HKaEd3X~jlhz|vU!eL=A(C8Dq{Q@!{#+$nt
z-RrIGAef5)!uYdrkBE@)qI8db_Pj-NJU)v_Le7xG020{hYlN>QWu`X+bvz?1@5P|W
zWxoGD?m%VOsI)Azu&hoI5}JAO-orwHpmNSiLL%)tM>5<(Nfl@&16VdvBD$^{3K)@O
zW86u~?QXdv9;Ni-lwU9aI;O9^<?b0>G#^&H;TBGSz5aZ@3?NSKNAKSuUhES3|4s@~
ztFGy$4!Dwm6o=J^AMwrb1BNS(r$<?IP3~rbo0F}{D3DhQ(rpC8!Y<^drxlH~`Xdip
zDbLC3#QgpP6mfcntd&=_0pzUT%bqba@uh^3Gmm*Mb5RK6aESC^fLai;2*s>paoMw5
zcPYK@$I=oY9XX8>;9MoY1p@~gL$h)a2nKD#ORSP9JB%C{;qu<G$D7BWqi6)|LHV=S
zT-(u!=x9>j<g49ygUaA05%4g(<ul?uAompx+t;P!9OYFu^i>4Sy0SQmd5mt(SMurN
zZavVvn&Lh8jk3ou|3AdNT<ZRtY#wqq+}MU-2XXuuUqd>8<fJ#<h><#}>PQlto(u|^
z%8)VmA6vFuQ_@a_(l*_C_*z~uQ<7QhXxhYk?<EFsZYUO<ETG`fRStqO=wcn`Yyixl
za45TUwqTR3_1X6I`D(1IXK68I{-0~-W&k95oceyltv<+&c~1yxUP(a(sNHh&X#gEt
zy#GS&!qoPiBlZ_|cGYLZp{~t4`+wsNCxzZ`^X<2h?;}O=)X;lz<%c(;0eQasvZdi;
zs3gT#@)ddir7?Vx5DM#3*QcwQx6x*XCs`}VQ?I?Q6%HmPon#VA!nC)EC2KTh*!$<Y
z6;EEmhKG_7hnuF6w_YzppRA?yc{)&e=o}3|QH}SZdO}kR>~HUn(Gs~7)tZvfZhnj2
zn`^++X06>#%D;NZ>bj~S8r2sU1{D5bi8j3PcE<BM`ssT-DqfiqBXiPFxrrQn#;m0U
zGdnI5rIWs2TF_wmm7T2TtfAz8-3>zi`Wr`qx3n(#j3T`fdU_)?;0gxs<oRM(u<pG-
zZry-doG>=MUM6XJO)n~Or7T?$85jB{lKw3HIk_EwLj@|G1;B8SB+9dl84eGNgkjGX
z58FQ!^b<r}Wo_N_Wq-v0y1Lm~Krdj|p*|V2`udyW{v}=iZ!~~8Y=EAN*SF_K`Qd7t
zuMPC+Ajr_w-U)n(@>5N5b;QeJKk&dr<3}IG1ef(9iVE;ln2SY7h-x2x*j-&PqqjiN
zeBmLaBabA7B&_nVR3A#yX(D-MJYrTCT>~A>trZ^iaG?s@OTYJl6f5Qtv5`~gc>)@7
z?nDYAn2gm&N%SgfhU{eoeU@B0BiS-+n2K=Y{n=77onDvK@?Ksm@8+&F$IB|ACHfR>
zw|&Ujpih{(Qr9qbW#L;Qfc`&!$DQ5equ)U((K~MRIv!QUqskG~KKM{fTJ<?l)|~Y>
zP;?bU=qQC>vQr{lUuR49QXE>y!ea83)%9GJYpk@UVTCJL<S;VqobEkC?xvf&4`4dV
zjW@aK6BE>g>foweRy@Oix;?AdQ(^TyXBcpv0X+$CtNy8FYA<cnQQqdhAnZYcuf%6#
z?YrPBw07nSSl!N;B}7B6duqF+5jLkB00V$=z-+*VTgHR6j~nL$9ogbdFXv~Wg+I^$
zI(lk91A7+HMZ(+AL&@p3o}kFKo=~##Q_rR>2U`(>+gtk3&p$7v7dF0Pawt3ZyilqK
z;7tmWvhgR$8=WV`79@D^!I)Tn|Dy?NREykt$1@5_(Gi9h#I#iIX8r8-vjhha!>^rp
z)oY#{yQ!=?VbK-Q#2l6~KWO&s)9J(mLisIF5}k{e>@4MPFC|-CpLdC<Xp}$mHrmwK
zpWze6AAt-ggU2+X0(*k&9nTohzhLMdsFS6ncS`4FYy?~<bOTDZutFJ|#QW34G4x;o
z7xjKNMqrqNki2J}U`y62QvPLEjEcX6p2HH*1D451_L4Gy_8eZW9Be5WLPtd3cVvMX
zdt6tv0pwA_-EL4QJ$jUzV&oX~SG=G%I}+=N)ZT=lT&9lU9T{mxo_XF8m4XI5BYG1o
zA@jgLGr)pEjTjB}exm(1--JdM6@2=+a|QkurYPGk=mD^$8+K~WnmrWFy2NVY!b@e8
zf9foIf-(lcblA>&`eb>|5n~S&k>z(c09SfiS9@Her9~~+vsinFU$8fXGk7>Ca@7qt
zg!&g>jGaVo2ni2c5Fo5waG_a_MGUO$wRb2Ova9(qg+n3%i>e93;gmqFV0cE7E^5yy
z??-tB)B`FQ+4A^V!ogXJ06A-|<H`ofCCw+wlU_<C<uXNpkSy=-G8}dBn{M$^E7+d7
z>nllJZspjC!~-qTF@7&Eo3om3_?AgSO-Wm3iv+L*<)<vml7Z)5@Sz&uYA`<e$kY|O
zgegnvz9~9o3m(GvDOR%0T17V35z(fl>(}Xpq|o4;^J2GF$#S+n*VInS=~_A)9%SkI
z%#UG>$SlGP?Nt5S)WteQD6v=ve}-)3G~^2q5}Cnf>WtDVj>hK>6vS=QRBM2w6fM|u
zTIEAGu5S^~J>MGpGz|LO|B#~W<DoX0e6zv45|4eNci|-fP}`wsvsF(<&u8a&*pdSe
z4TS>+n=_WZg1r9{%O-l(F*@6YTPgpX3}B}{eefZqxCRK4{}}^7`P)b6vy?o~8f&|o
z2)D$wWO;Xz-o|&|P2@c*v&)PS+<*oU!nPftq^xhGEW?G_Z1YgK>u#as$dTr-*FE-l
zWIs|hk^wluq@Ayu$kY=I(Y$R33SX})XtAcTH6GXP{1e7FdF1B1q*q*$j5@}xY>nV_
zC>Kg(shZ?(wnfOL+bbC1&t`b1&$@(^spE3O&Fh;y=A@M^66Pa)68jm-RZtot9fnbH
z-i3lmhnd`#1?*X7xiF=jAfn(431}gG2{=hqT~cn$Pg7kSfZ9Mextggq41CazhLu@e
zR<#nl(17wU+Np&eFpErGw6n(uZNxmIMVEB0K*F3S_(eYg@6SxHS)SxwNr|%Yv(K!!
zaG9t)l}$P|?mIeabc;Yu=QvvSBAqnBUfd^ho^yUYNbsUdTLzdosfMq~4%PBg&oIxZ
zMDWi8I^<lv*hI2M^!^y{yc)oUTX?l2y6pL2L!dv(0Jx}sCd$8HyQn1XbaBgfaYcc8
zwktjy5#*Nl>#^O9^1t+o$Nx}%=&>fNt=~(EyLOnmiWFp}m4uJGI!R=Fv2f@xA1?}h
zw&{~k<4QpcfGI7(85D;_RQZBAIf6S=^<cr)U}RIC4?n_DhQB8)y8=PkwXw<ApNd6{
zB3DI-vCD4mSZ6DTnYy?><ARGPOhi1Vl&bSe9_C@?A2n;J4KD3TVVz6J08(NX<yNi@
zBh2a5J1YNDONS{-bO_mNuH$M|@gYZ;#R!CoIYc}g0GI&e0Jbs7MRN*+$?Cegt7|SZ
z(<EX<aFI?k(@@;Ok200=bS6iGPP~LZ!*Z@{74+Z6ba9e?W{}f?pjd&6bP1E&F1|Dp
z=DYx4C(}tXqR)`eekDdM*|Exs88-T{&3o8zbEv42K?`R>&R@N%aet4%`t=k|^ZIOT
z_GfmN)#DiC63fJfYQ_LM&AcacRs+~*OYgGf6ngkT==Lw?04{^R=~EzCgvGi$FTzSs
zft*VjG#WqxeHKa*-}X|B<yUs;(bWX_9xyz;yZ_~QHWo_3U<>>cc?CCNq_oDxT?93j
zSvE}R*vZ28SzV-PiU>9U<q$*>M*!w^;j;+JkW+wLAztO`VE})oth7qV64b~QRA7pV
z!5LPK;H8cIy_Y{8P7z6AAGq>@*D~Qv4<lz)K`23tDS~xV{;_D7f&oa`vO2Bk(i|&X
zn5e>&vCq>3`*7Nmt~7>DGl-HajW<e+*=q~7bfhyb=^z-j9;MkKhDU6SBN6nehd?NJ
zP}KaNe9AO&JTx01NLZ%|yBqo}oNP&Gtq^nS%`BW?=vD=aY~3Sr7-k#F#*UADnWvud
z0V7UKsmhUf(+$7ksz^`J?|NRLXRna6#@dN=6U<!K`Ce}K^-ZCMMd~TCjW;uW1c=4b
z0F<2Oq`&s-uL!@TiwwCvHt=hZSJ7vIIba6CqOrI#({9jNC9MKUXA3szABuM$7B|J+
za7)|}p`3B<RUjUe60VwC?o{}i;8o@ftJ75QCWyHjK*y;33oaQO6z!Id<xbrI@OJT`
zhb!!#A3ME1818-7+^uL2KI}>d!z?UMg;!6xa!UJ7;ituy3_mTpSomoPDc#cYUP=;~
z+9HVt|FYi1l?f;i`30`z;GK+(_Z@ByJxQgL%k_Fj&W|FDiC0o26pCJht4NgMg#V5G
zpMNo_ARTKCdR{NEe-}rzDf0eP{!a!#Sy%WUb|OPB)X|yfLUAd5W;po_<V%4d*g>`6
z$W*q_;kmO{QDo{sZ)903ao$Fo`!pIlvXoxEO(BUQo<W8;bjMwh9Jbdm&lzONFsF7%
z>f--wpLE=RsX3We=n?~9wzflOD;!f^j90oVE=4!Z`MX%bLHUVb<}FR2v%Y`KJyu=a
zQGV)Doeg*0<)<&Ah{Wu!8->fS<mic!0kilUs3`7Ltj@9oMrG++P>otOWGT;bbCG)g
z5=owt(jOM?IJ?)M)d12)7(0UY)cqVcQTP7#SWKV~@Qa<`x898>L7sG)*JZN`!@Gbw
zuj+G|;v03cv|#^M(1#0NdId8g^JL{k!}c{!td{b-e91^7RSYRBb?gWU6m1k9A;o2{
zvZgCWc-f!+Zz0Ko;ip9wm6CM!jbp1>i42Mm3}+waAXd$4MDRR$1RYp-KX`o_OC;ci
zVah=~?0)NQG5Kb6&y!PCv4pB5&s*LYoF|7+xTda8f}7PIUel6M`4ON4$?xjxdV@vr
z@Pqs}7$8_bt#P~bDM$suk4+G4H^|?5JJUe2mY3&lzf^3ft+blgez2<__){<JJq@NO
zQH0L+*I$QPqTA%F9VuyA<#gY`{Rel~QRW5PCj_yj6PVL!W?86Jp4K{2OG$G#*vN^m
z?~m>w(1%iHWZ_PU`;Q)e%#;k)zhEpR-c#DkDJ-&t?#V)ug?(?P{@-GjDgRhJI*f%R
z3riMVLduMe=-#!{wJzDglGTox-lZIg9Fa_R)9);}L=?Wy7<Z>%u0+xaX7X^A?%p%y
zLo-fh*5FR-HhJRg29T2B-~u`PD^WY`oOl?<R)ahY;{(dtuP}=Nbe!3n=;E^|r70AW
z;F;zyZoDV4s2KPNPj>ilC|$D3gnBs#UAR-*t!E@V$%wd-KmB8o@Y902sk&i6B0{Z0
z^qBExczR?JY>E-E?V0ZCWtW>+=j4}~xUMBz*fxKg0rviEOrW%xq4DDVlXK9(x@<3t
zwdb*(;v$r1FV7yNxQAxS|64RZSaN}-m-n=kVaw>_U74zX_E|%_RQX-{)aM0Hmrp$1
z9v(P=x1(7#wL?euCbIQDex2jSdP)rE5VzdLffjd<iI(SH=tJ!C`Y1PBrJKF2@4X#R
zY5=Lycbr)kN`5abQY?n?b+H$A?m^!n;Y7uQ|E9Fu7Y-7^xhSb+0e~a*%B$%<w3l*Y
z0E;BfLHSW4GZ}yqZ4&($@f0mO>$CIuJHZa7SJ5#Vz#{22F4;;F_9w>ss|K)~PmIY~
zy@z#|_3Ip-SAFNbF2$1P&fNfnH5-(?)jTAudhW&Eu~@L(E+KcFKBk!ZnEKfaASJmi
zWyOUJnb&(GS8K{n9Fv(EG82+R;XaF;b-b*p03(m~_BYcMmR(slN*-mQC4D2O{6k*k
zpNknI)5-@smOwE$`#d+9;<W!yE`@rD7eneKhk{7peU}x5v%#PYyp)eWCDaIp&=GV4
zjglwbV<-x4y}$3WUj@ndfd?xh^>g#i5M!Zs@quCh?4wac$Xan_(;^sPuh9ECX?!!T
zYqSB-mw=M3_oFLJQ?6i;jB1T_q<AYtWl#=~z1o`QDKU(Wk$AN?EBy-Nx<E&!_djr1
zvFzkYp>W7vu_nGu*NBZ%<^Km?ThW9U>M*mUUX|-#1Zv7sf+d1*J^Q#@&K7GkVu5fe
z&7>ffgndSYB9kN7HUm8X1Z<nKNITyTKd=Aet33Qa5PgsEZy1P@e3JdC%P#M-uZtSW
z>4<_P;91InW-@>U+qdxjlcYC|WOJW8i3et6udqg>LvwuUh@-sPpAB<OAAD?>KRX*V
zod?j(rc+t_#M9o!#evZb6?h<irEZ=Fa0zXZS#TufG>6iaJQ`Rya0hP-U{iAKLk~&e
zUTdK?KrF*kQ>Py@&a?r%Xtv9E%S0HZ8#nd;(g(GKAwu5zy}ceC5*I7M=@N42^)wXs
zgOBW?*o8xRvp`V-sslHfE^EG`LGdAno6N?Z7+9jylc^{lmd8U@WU5a(v}}biHMvJG
zc_}5n!pVM^|46(V%{_U46qikGEQDf~mZe=z8u6SM6-Tgs@|od}OP_*C`F;DlYdp0*
z{ez|K4Rg9hxJYS~P0tYTs3N%}OYJ=;$IU$^tB4Q<19$dBU0f8ad;fn+w#Yx0Oq3^)
zg<8v!@t)G3A%b;WCN?Lx+%^;+bZC5UMHzCbbXEXEXmkX-#{=_JY8YR|(UCh?!556m
z9u<Gdm<y(YV{9*-5zK-E2J~YFgR(e;JqD6+ZmzH?e~7cbi2=xHvwjWp&pK~Hqp!<a
zGSEJrW#LelD$Wmn=yC75;v6=wN}r<vK>d}X);&iOc!N*hW~|JWpjBfcJaw_86qPFf
z!m-m!;(}*072tq_qeo<>_l>v{vMFtz2-`x5C6pTX%Y$aS!m_+Wa=eL&@W5!K$<s17
zKpBk$kn^`#dFKj{Cz;-i@ZbU|*`bGd&NOGkjRb$z40&7j_u?oRr`{If<Bh&c<_xOi
zIcQ9dQQIcLJoOCk)1*p4k`^&;`y?VQ9v?Q{-xXGIlFw&g0~^Vyr<rJcWoJhs9jpCb
zeIr!gcBeN$P!7b{sku*Ge94G~J1^t8g#1B+z1oEeR-GJ>w-_*34g_HZ<4do2h@L~d
zSwx#H@1I2v0%gJLrow$&Fo6!<n2>bi7i}NC{=(q!B^`aTmRmu&(I)o(?p|Lb=%r^*
zl=exJY4z!iH{IMSJ#LJ*z~!#fGv*#ZRV#lxi<Q5%0b+C=mW>4w85$9lLIf*s3OT=E
z_gF$@WeihwSu3vE0_o=005T(yE5>>A%$Z>)`*c$_#5I5UO_-iv=$VDt4S=C|yw-Pd
zCs6gxx69(s^lIvYP5b*$jGWGKC_dI=6Xn;<&64GkDCTXrnX3~Hr8JpdddbO~+ufXZ
zrAXj<|5@imm;yy%t#xAubFqXvk?|z$VmNHq(RdjzPIJUw{E^2!#1Z)>-+0EBi6S#1
zmFUtd@JQjh-92E=fCssO8I>P@8Y@4^JS?*VnI!enm_I-RpzfcwT$hMl7b3JTmW1>r
zO@m-K8yw8U7g58s2hJo;htXNaCC^#Qdil$)@Tw8dBdocOm4C{@f>MjOlOin_6LfN$
zaVN!*Ohq%+I%eh{cqW|Fpd`9<gkb6BTbsf_x7P~y|CWf78UV__aH90UigtM6jxpja
z(LPDM1r=6V)e~~|{%4-+p%D^AZ+Ac!vU8&mKlg%9$SEFixM!TB_g^MHA1A8qX7>8&
z`!7x(sH>L+Fgi+=kNf2&*@RQ$raShO?!LDpBP6}-Wmbxbunl;A44`vnHxOqEvl|F1
zH0N4-HxOqBfA^zFdp{?q2hF|}qC6Rn=1^=BVNQiV<S4JhW}6#JZf7!p1ova%%xl8A
zhXrZ=2&*z+4@&tdp?NP4oz?T@rH?$?9xr>H^<?#{#11Am?4RvsHh{$=eVY6L49{T`
ztSiKed+P&SlFz>|WtQZYnO`6Y;gtx06z(@X?iIyDn+^D5JV}N#&={P_jx~CkOH74<
z!yV#RQB>+E_(SFApNRpGo525BuB#VCvF(8|PR1m8ZL>9#6@WD7993vq5mkl`PoRSm
z$3;mDl{79P16Y0q&-^+{v5c2tcdpZ`*vm6sn0^V+uXLm$z}DL<F<(WA<1+ESrIivq
zr*Z-e)TB3}l#~^S0rUWBW$N|HjbM(_cY)}Kk%IG0-R2%~h&bg>7K-Uv+G$Z0qf)p0
z%CUU9@RD;j0CWQ$Ql}L|ZubqmhTZEEPaJP3SoyEXjwm=Yj*v3TcHrPRTg|`=&M;{-
z&a(k5mYhc+l;TrKDS;j!*n5s(-8~P6#y8$EWoAZcdFJ%^+4lm$fd}&mBiB9pq!;6s
z9({t6iJg7IOAZHPFP?Ve+Q<5=JOMMYtjWVen_JI`C+yRQwhZ)n>n#svv;3%Z)aZz>
zh5wukQ9E8VQT_#6g>Zx}t2_vs)mRv1e*Jw9`ugB>crr}J1=NCC%vuw$bWX26Zl(c$
zijO)v?iGFd8AB!~cI?aHv$BR;5sKlA=%q)7d?_`<I+Su9;-y%IK2$gsjUk=Q5BZyK
z<!A?2-A5d;KQuRXl&!SzegyY;*zC7wKA6NYYuOc~{0r-K7m5b3Vi!}N+45G-o*!1f
zv(xB@pFEI{v64$r;x#Mv*b}|Fkm36bY(x<kjWvCKX2oBvo7t&EWtvQ^GodHLf-d%Y
z=55l~%FLu3iMRU~GzPy+sy_^~u!e@tvy77FAp`pq6rfidPA$}KcI96%MsA=C4AcBA
zw(+11gEu}Eld}+Xzr31JXn?2-*UGtI?~PnpYB7NJ^I-tXxJ=J97(1-;x0F5}J~|nQ
ze>yqVwjdsu*F0?w2Eb;xn%elm(><DkL9rpWN8Ajd<RXhBY8Filz*fG3F(LSt(xDe6
z>A}-PiTfx&^rm2b&be9a{ecw6<ddr)izg2-HGl=vWk(%c5@pp$UjG5!q-KWYQ_n_j
z%#TwX0pRS=wR9I*Q39qX27vN276|rF30*!uHEDRc>6LQx6`9zz&l-02c#_Y!pRveN
z!nlb6{A1CmVDSE-JrCN+2E!<!r=(c9!ITuN)T|t1c#O3?=_a#C7U;kX!IT9TvH_3-
zWOrG~6I_gi5*=v_k}JXeaeo3VPAQct7x0mRbrMl%+0X=5UOm#7@$`bB8KqZZ%fW&^
z=v&EmG5bXi9O1(&cve0nLtYnXM)J#o;dlhp_i^B+DCUD+0>*M$Jv(=vdv4&Smn%DX
z|9`ZS1rvV092d&ZwE%C@x#(JN?S9);K=&1x*S_+agc`DU#sH?s0H(~Z0r)VM6}`MI
zZ~aX@5YI-4>gzD<S6tSeUR)ZFOr7g$M95%ZKZQW1XKL?#(1&Al`ght9#>&hj<b$^B
z>^d@2P;@t$nDWr|6HjOM+*9%K&YSTkyE|(S4K<nWVW#oXp{0@b&jkAeHM+px*+`1K
zhv5lHDi6fdVT5P)Tgq#(Hk`3NSd=7nxf^Yo*<QvRD?JFWIbkPGZ9Lq9@7>xLc4wO$
zTOr6ZfLlZ*C%*cOGZ{dK&Qi41js1a2bakt5x!skm=49y-Ln3jW^<5u-#ByI?25S?u
z+)b8I{R0D7I5B{gBMzqnn?z4jk0JPxq$i`G@TR<BfqN;BiDIF^B#<nsg-+m|s;nv(
z+yYhrZOTuY7%I*<C$5l@F_xY%&WFzx4?Doeqm~^%)<z8L)Z5dN+CLNyqNBUd7{J)^
zp5TK|)nWjP#Zq-D3j+}oCn2YZ(K8oab@^noSADuYGXl&Dq}xY`kb=zxy6&7F8yFJ*
zCIbNebX>{2HRb?dF)-F!bNk(Kn2598JiuQ+_vN@gNDgQKt(elHLPzDf7wKjl?2|z_
z?vyOs3`jgQSX17T<*7w`?duvfhfdQmB>Ce22&SzJPpGW)-!^2g-91cQcEwl*T)16^
zzcNKeFlE7Z{@_y-)~B?W7g@8r9`H6&?h$4Rdhb62*-(oyQm7BQu}nm<YbIBUlp`-f
zwZWSn6p=_O*;8-65DTvK8K=Sb*Jp&Q?h4KSZ|^LitgP1mzt(?U6%a*AI#m!bQ3MOF
zSlC<?R1gC(P>d@kDq{VND}sTFfn6xr-CnP)*N$tzbe!oPYX6_lcfaqMcMb#2z$gP8
z*V;>$3e23@&$FNShSlik)udVQq*z9!)bT&m&HUHIGH0U}f^`crF#G_I`?=AA3%D|H
z>a>8J7Rwjjokbt6@HrDsvDaw0ejNb>@=_bqja&Et=xzZpd|!b8SwdkNCy0i9k7B0b
zcV;hvkgkEsTJg+Vq?IW{yzwVU>?`-A2~w6I;Fy%*R7uZJdjEs2?C~e{IYEA>k*4H<
zCmrK+rTn?avLr9-S6|DmUff)Xr2XWDz^spfH_eMG@=m)Be*3%erXCj+o=vyVD3hrk
zm>>AZK&qwmVJ|IZ9Y%({Ze(QO7KPRa<g#0^<i#=&{Fpxfcn{F7egPm;_MYA)W_P<Y
zqsA$Dmm`M)jWZ?1f1YrdR~i5TqhE7zbY|YP#%rcU=!7%k@+c{cLR)q6KrjNJLl4pE
z@Pv(>HrX<@efYC(S53{<lIIVkAN42tlBwN#`3ZuWs2W&tJOF4kTUmzb*v&rd!Il}0
zv<z{9>R*BAaDE~Cqp5>8*W3qOY{~^L0|^gg{PrB`l^(#;qw<E%57U`YyeaSrrq-3f
zEg(E=%AsfyoWKG+;4KmWG{Ku}rllB=0f^&_H33*@Y{=Ba>VMViSj$@W2iMM0uBNu#
z+CvstsQtg@%AQPQQoDBd_$FSfYp?UvL+P3>475D`5grIB70{S4<*e*uvV}?<y#p_u
z1j6o}D>N!b(efR$uaBRjUSom>lF9UIych2Y6XjY1UlvPI^++INbG+GLwFMo)NKo?U
zpbL~?KS##Hi|A!Qv9_|GU8}Y_i@^N!>F?6*@>3B24X5-~ZxM(c=(7g}O!DD{yx<c3
zzZi<7boZ!My}t1&P(1?xJ)n+TNfr?UMv^uQFiajbE{E?CDp;)4AOj=m%1VvEq!eZu
z2ftN0#2-9LGUlnB;KFuQAD{r(vb$JP*csvJntSr;)~H<|DL`PoG>RJkvFT;m)jF`Z
ziG!Owz{v+dE03{hYXR1MD=U|VyBzx=6)>W+I$c`#Y?GlXe*Cds7%q9vDW^%lMjAH5
z_tR{inx5<qq(HirxxPN<h0|>N(@#C0*6L57x*!!bk+QEZKJ`%m_^*j^C?Gu=N}4*R
z8N77<vicvaUQX*vBnN0O580UJQ^-au6~n2C-zK;8C`>B_^<s@3?=6`ge$-Ea>}wW5
z2U!@5O9I9lf&eVZD&Bj~mB03yw(K0rJQ9RdwC%r37SV!S#B;dTA%WhS-GXaw(9a06
zN#XQsRL0TssZQ3AAYXeDU>r!WfSN@KJ7(Vx1b)W05cfsn?9|0Bepd}NQu=S_(onIp
z*I1)x5)fhoBrPUnKszAx*elM(#3wk%KFbWyw%hJtm%oe3YL%WFhg{!!2EZ27|9xBr
z3orz+PMRch7skh;&gSIQSmy@!y>5@N#f#N^X^Z*!f9157KgBM|sAIiCMEB6LzP%b^
zf+4M&{lPm9_AY}sx{n&8T9h#%5+RU97?tW`Z`!sNY&Sd$H)-Ruztw*!ow{p3fU63#
zV(MN&b5Rut4kd<wbW<<a2$4}D4v*l^!L%@45SNzjKRu(y;DT+pJ@qoTn0br%yOd^W
z{kQk1OyT`Km`jZvnTSct7VWk8;`<}BA-5vkd3p;jKT?2{WuJW!1m+B3-C5wJcJFPa
zV+TJnjBmL&*R&(GLl>8^%iuVb5(`x{`zfPT|MP4IvgQ!=k$@2w7aE~mY|%+MBnB=!
z*eLh|ftrTA0POOUaRu?7G0W=tsop2ddIhF4WMW+u`(6|Pd`^e~BQO9&9(>rmr)orV
zkv2qOZ}4F233jrwa~F-A5xYh4SsFr=b22f1&ttVv_7H64J5PSP`#y1f`5D94PU#ky
z-?a!aOA*DldPr~j`oF)++;I<=WA%UDq<?CPDH<dbHT(H54-C}*&?S;uiJG?h>+f9I
zV^7(K#N^>*xjCk9y@N(gaf%&E5$)~5_UP-i@i9`cAE+d?E$f31S7v3yCq0+8@vI*O
z(=D`8XrTqh!p+-zbv4k5V~_W^AE_dIC|r#Mu~;xY8z2)AT(!%?^hWlkR?CN6Uowp(
z0Fl~2rUO_33pq@!Q5?JUGTAVt?X;`VnDN>6-vU4v7dAjlF0#fBrDwsFt!yZ>QU$7_
z>RO2E_y&Catt?I{*8l;cu9j|1qnclK9UDbPy&L<{B?R{L{yXTE1PXzA8m}E_RS|Xa
z{NzFh)dWzh;DZpuwK9qCNAB_g={$arUIcY(zYnDl0$7x!Ow+jdkbGd13B+e*k<37>
zF;xjf0N@rBcy;l6X{TX902cvDE2N@qB+f_K?=xnM%Nl2||Kzh=-WAhb;q9}<7?U$3
zpApJ>XqO_A_14?opd7KQaVKabtDQ^xuAXArtZgmqPkn`#HUHmgdzZD_FqeDOc)tO@
z_d)BMKGv&4|EJ5pDwoJwM%l3bQHoyhf-ACGD(~bo<qXaflh(Cw;1jT=R?wOXv6SJG
zljW^hq)~$8u}CPtwly5uNLOEjC)y%d*SFE{fe{*;!MsUlS*E?)KhM;0s@;Ed6_jQV
zGn>9#mY>Y-(+BOLY{F)d@`NAgl3xPJZf5h!W{U*&qlRWD!4ENg?_uH!1Hl$fW}_fO
z|IIIWQtWHeQmIEDEua`10&7MqNCH)4e@aH`Wk#w%sjt65l7z6&K*kCy-!gDD4A6}!
zs&89Mt$}3~2?I71<3=z|lpS9BCDWUK)4y;bIf1Ax%PIlp0%ZlHSEQ!|dkkd-E6?I(
z&z0BeYtK4tq~Is%_A;UTK+uWAL$747mq2jfq$;bt>Kl4XEX4={*n2O&Bu|2(88fWR
zyxd-`DK3BNRF^;9dcRw56{lOsUnW@uC6euI#o5?1QF{CdE!7yw0)iA0pnYdQb`B&?
zK(mJAo%+h}r**KBx$i)iZAm&d-g=wMuXbgRJmIQ8`%>n7=oU4=DZbKw({_Q%U$hVK
z=G$HV<S8!ukfY@AC}3Q~DSlD&APD#-IH*8u-q!!nH*FKC`RfXRfR@+NOD3YTNv6#n
zIogjt9}h^`z?b<T5yz#*zH^SSGpIXc9(ahb^t>1v#nLdp8^DPJeNkY=WJH!;a*4b!
z%+R~kouU8cN3se4YxGmM9w3*(*qP^QbjKnm9LGur|MM^XSnqaE#@Fa`(C+rK1YBL&
zde%UDQ#Pi)#oEVSypBEmG7(Ze9tBe`6C@i>0Hup8VFP~z$&m1O`#j{X&Xyf=(Z`=k
zBUMJ*WPE#}@HwCkmw&O<+AQPfbzqTcGt4IVsH3%wl_$a*ZwvY$Z6plk2mq-)7x|?j
zYI_8MU2r54OYXm4x}FFe6hHW&D_yX_yTG#pq9o&MMeu<BBQO)k2!rVrLkC`Yfgs~T
zS8EUe%>TC=tR$Tm2;!DM{j6STIm1{#RlfiT#-TFHfMoK<JCc+@T`T9vadEEzkz)d<
zm|B@!r&YpfU90Q~$;>ss#<DHaBAt6^sm4XiooJc-rdi5hRRJvza)_vfmaQ0zLV9O*
z&paH{=a{`1{CjPS?Ltaqi8>nNZ)#aIG@p1<;I$mooret<qEq8Z0(GOvGHxReCQGrv
zl$3kFo#g^a^C&bb1{#6d8DF0Og!eM?o$e8nL-v-?lpGD?diJg3s>Vpi=s;j^?Um(N
z96^?mBnp9SfkvY)FJY_Esi!O6|Btr9WYf5#JR?pny#2o<1|~uXYRPft#EI(1z~VqP
zWRH=GI2cgzt+tW3Fbh3>Zci-;mT(Kb>>&ZbXq<|GAfVJk*q86w{y!RVe7!2(dB+<V
z!t@J!5k4CneULeU#6S0b(O4lfv7>=13C1hl7dDT|oUBFwSXGj_vz4fapaOv;`kmSU
zW09%_7#x5<41h2W(0F7GpPJz+-}{d!lFU?b+<;{xf(%O0VE{xKVTmUgXT`;fLQZE?
zJBSe@>Jh#B`X$rR<AO1x_vs1^9wbwUR0+EU(4>~ZA>PP+arCjGBua@nkV^^eIlaK`
zcOHg)+icIM+JA&!ymSf{a?M)RzWf1c1l^z1E?Zdu475LIq<;bM4}Qw)5=rk;mQ9ap
zT1DXEzMj?>#uwSGqtE`$B9}g@XaIq|r5CT_^@CmsIfX?V%{G%E#+|%sOl#0PqWoi8
z#H5J}Pcsh<H2?A|^!f;3X1z+bB?YE)={xVH7bc}k4_}S}jDv{MxvO3T3_K)F&#(a>
zW^1Zt4Q0KPWFlF}u^%D`@b3+z=QU;G!lTU1ks#I&{$+}Lxjm~F7bCye$)~vNgAP&C
zufafA`ZSMzK5gp<eNM3AO%L25bB{dE6<jn;^*_mb@z1}yW%-330-f;J$^!tyY?Te!
zQq(P*x4;!$4=`@B%ii};>jMV4RNNx5K2iWg^?(vigwPNlXYtRWf`lNun~O;X0uv;r
zRF!YMS&gPdmBObU<?2wX1l-Pn2T5R;jFNNw1i=I(bOkiQeh{jUsX>KseNWAomU738
z^|N{Sv|!Mi2hiP(qd0m`8ASXlwNo!^=3y9(aJl18)&{tE*6o_NLm(-><8EJLpL(WO
zFxzDhy&5TPx_H7$(AcHKPrDlF$Yw!r#7oewiw^=`0_%bJy=WBKQiGQP)&XEHf7*17
zd1>}_;m?>XWrb`D8UTqhx3d=rkFvC_28g#T+z_Q0%c>TwykbYYK&;G4Fa8{Pep&w^
zJ}^cj2>PM~hnYs`ImX}VIRe8HZFZT=S*anOH%Z~`cO+SZ=NHsf%1wEW;iWckkodne
z|8U3SLy_?EH#7jagRQ#Acrj~ld(Dos`v1xR+4}DfwE!iV3j$s500<{RIL3VWweaaY
zDFEYg4m#31#^e3FSu_Avaw4P7+5ylyf?40(vTP4Q7^H_8Fq7nUi?=OA8p|d;rPz6@
z#s*Wg=iV~9V?__bRHHYrG?2Li%Hv{cWoZS?_X=;;^koj;PpC{byXsRmiO}w%fg9H7
z9eT<l7Ps{5!$(^tJKcV$Q>AlLU?orf6#D_6c&cT$BXs%GdT#5n`hki;JOOa=!xPm`
z4TZ!)K><|SXpF5K1hhtzFVk?`;Kv>(swt{+k`Ouc2uV%y5^DNp7dj1mkfa+s1f@lQ
z+GM)*w@tmQOLHslfSPyhrD>hG)+e0gg8(>-1p%+G%tEkN!g(^MM%&XHb68)%Ru`4G
zFTc`~PLh_0W!-V7>{Ij3Jj+UF`#RavSl>bU1s=+y0D|&(lQj$gt46c{+xIX_(kwu4
zab?fH?3;QFvT=s2s%~HafR|^w@x68LZ@(|8l!6PV>4^brA;)<90(gR=mpk#SOfXj^
zQxE_wne0hqB&PCb>NIU9Su_b#glZUDOlXCeCD{Ly!R+4ZNQ7K5azJ@P7O7Sqs9pwi
z^`+OQr(r9aIm^Y)4rEs>`-_rDMy#bX9}V1~Ut!V(6}014qS<8(wvy|BLp{h0OVcrc
z%SKyJjgZeV88^k6W~r_<kB)jHb#1dm_3WS=<g)VXK*6@}W|yV6td}U&u#rOkkf3LA
z#vx&V&O{gs#XG4gbm^&=1VsgQHE{{S@beDwR+M*ef(bU3jyvuuqC092z$_Rs)6<~g
zq{fy78{kGt9$|UD@xlhyldx}r#l{P(?ez4kWFmrkNA@B3C+}&Oe|ul{kohTlqT*r+
z!;uCB07@ko<88N_=KreyA;18DLp9K<7#d(fpz9p~OP6}rcot&6{w^{xz__BTu6MEV
zr^q#uu3N7_PzJ4b0EnF3TB^mFdkq&z3)5&kipw6GCki8uCdG15ysQTDyu;2e1zC-4
zwpHUO$gO4L;yL%(g@4ACz3{TU&ag9OTTDYJ&nwHQkidmS+BE7k(so4^g^1pyn*NTx
z?2`490iImociYqdz5mWK{7da@uS(mlUcf1`<*s=F>j;2E;(AaHsd1)6;KEq20v^PV
z0PtLDSAX>HI(G4#T3BW%S8N{0h_pzUsmBAYP0i~DoCQ8d>kj@U0Km4#Fg4A&6HZkl
z&Sxihg_WanwY27+u{78r5>)A<PkO7@8*b9ihw_z8e5RE<Lgte7d-PVqK}lOLZi_Z6
z`Ft7}04;oS0s@gSa8H*z`Z#$3(6d&3#17~;4^XtbEC_V{17Mk+48fz>aDMlLee;Y%
zZ*zI4TNd5lx_B!IWSYUnsIPBWodM8VKQI)EGlmSa%zCUff9G2Unq}E!wrGGwH_Q-f
zF~@=<bNGRF0e8^iN_sP7uOVPhj!}bJaMg9L=$6^8Xtp(n)aKK#i5tFYE8S;+7h7r(
zOspc8zwWQQMp4agzB>!1E$tezEu}_V`**E6s$B9}zfC=U-<9Yq#YJDYh)^2+E2*<-
z<g~C%-oo>yHAw@XA3t?a3Tp*lTR(<XAozWReA{5U;n|Fb!02NIRHNsi$p+O4wudcv
z2|t&cW(sMVfBwZT4=KYjW3~Nfj4kd1f@E8Emf}MS)K=Joygbc9HRpCU3U;ewycl``
zbnhqmp4bVey25L2^nPI9d@r?c;s2|=gH8PdfL#EMFyk-w0nEAI{lJyn{eUYt|1y_5
z@)*Am>lPU2)z>?Cg}OI*0<Bg~?MN-UtIHgEfb@uBr%ZNvr=6{nd%`J}m5vfJR9ZN2
zN85K1V@q&s%gC8~?rYEOk(yLtj25#%jZHeoYUSfaAkkP7ljSZwYZ~8Xt!rnXKf0hS
z{aSA6<+-V^nO|=n2+bzc`wiM=*3wvwltfWNd$UL|B%biU)gr*RUQs?U;q|Er0t)~H
zbp>wh7Pxorq}LLn6P#g2yFjd&FadguO`Ie&DfXq5mAKFF|KpDaFF~c4WZK*NQmc8e
z_-huK2Ci-Zgx=Et;5zrwR5E+N!>!*q&l6zm<rh31#lO;WWq*=-{R4nq0A&!kAf`dt
zF<15ZSJqiSZ4rN+E?EXddEn6&f%SHeuN44o;&=}M>#TGDXO!N57nd<;sLLES!p?y%
zbMO6J#%_Dd&>^*FUvWlLXcWPn!x?A=B)hkLE!(LM%&`6>bC3NjAne!eIowK=!Jcc%
zBm|Zh5`v+}RN@o73N^KqPylR`h;GeBiKlhV_qB1GH4K2LtV!@1tn7sKbhN~Y%7(8j
z0D^I}w$hyDK_K8KKyvBa(@MU+0;;9&Fi2WN8H4t+3_sNW-9B3=kG!gBz5D?p8r|i7
zL0U(x+SPEp0}~7XXGAXlng#%O4o~2o1EgA#bHp*i|Ch{tNPP)SI{Tjx{wxG&eFGrA
z5he&A$rKg}f`Hd5@aVkL&vjY**i*Ot5D$xBClK}mt31Is+$=H@3_plg_6=D{mD+t<
zi5jI17$o>L{7wwdFh-y;lrBFbL+aP&L6h3XH>n7s5|nAU+Ow<Zvy;`I+sY6k1rj*~
zo=`fxd3f5@-}GaZ0pK-xwBe0TGaAy+)ym8XHG87QPxQnk0~1d@zqfcGM2rkudZ`-_
znkk{7Mo;U1di7VMk0@7KkG|TGu*5?*RSU(<0>$ZOTSOdOTGyWOH}rF<lm6I6<xhIQ
zU4>DjH&yvF&s$wFz=8ZkCF274bHf6FSAZa36KK5v&2Z)0@4C|a9&`m4UMA-a77q{*
zWT3rSrv?N-9Vg&)rqEcUL)u|0$uY{Eo_|MxfI#Kah8Zgio)DCWavlFKLcSant+(jx
zy@`2cnzwEE6I`zVs1c+}iO&01I{?B4IeOZz;?&VZ*5}Vo98D*dUd?@f=F7g0{<Gw?
z4*uS%qi^_I1{uG3s6CXR=vG%!Sd#$Y=WRb{>`*fX?xoRu{+Uy(N4e7zdqC0_m((J^
zG%Nt3r4aQ~WtAt(BWg8ozAL)+Ml~EP#ZZe#?XY?ls&zeW(j5v<P!_~9lrS`rlQ=p{
zyf~2sUHsR?pW)T`0fg>18@H~#G}}0m`5WU0yf%(L=iqzWXp1_^yDe7y{G+4QL>S3N
zQ8Vkdjr*Bw7AipZ7gI6!*b`mBrB`|<$oIT9ldw#d{p%`y8WsRcma2;ePz3c4=1|G(
zInrFGSru8{%Ai!5;YRr8yr^q%0x{Pb2*FC=1e?@8i#85VO+6m}b<Nh`hf&M;ul8xw
z47audpjHFE;#OZl9-gpdS|J&1QOmk$1r$JIe66j#88+oH68;djif+2al`rs)oQM*L
z{RRGijRPPg$pDVS^Yz1zHT$LBLU#rJWm?bee5ta=87R248`VBFA9@|-MKl0{|1a^^
zH`)_iXKAvU<wuhYfJ8Ov-~tB;rOp8OgYEwcpHCxH2{gZ{J^EQ=K162j1(!kVwC4A%
zcfHdm=ugU@MhSqh87?XHc>Hg_cNH(aD$k|-vo8?+jAj)<Qb8l?GYwj00IYacd3oa{
zQe7`Va2h)UZ73(+AB1Pc*Y+<B`~dg{3W4mOx%+Szn|OxyQ_B8=KBNl)yeuexme*1H
zH!J{xAkbzQ8SzD_a@?jDD7@lYvG0+g11po#x{D8j7Hg1!Hd*nk@<Xnx2Uykbk-XTe
z-IUk+{8?X5IQs0it;^VH50`bo;iBt8+lBgA9jNIs{aKd4{#va7s7073q9ADJ=J{9P
zjkjIV%-db=gh?**?<2ItO6|}~;zae{46nk*r`A~;zen;ky~F5p%iaRMW$tx=l|RS3
z!mDqPq$6NFPz&7AsPcnrv;d%<0v=IVET&i$`k`|l_6pLY#_Bnef^>&oag=B>0FtLM
z4}E5O&jBveDvq4PkGAIbJWqUo+Y|5E{4S5y{*4*{BFwWGtCR)~uK-}EqU&e4yi+H;
z>=7fS$>`-1J0}Amc^dBoE|)mJXz{hr!7g^<Bv&~7IsqoDKKoLWA4ofK;(Mb6Kw>Zi
zAUP;zU@a=%dQZ%of~i-^P6<E~xC|}E>WdFbp5&<)>7}!%xNtIZt?w+j;4)Wo$GxuN
z<=0*H4?la}FYb@^xcI9d0KsAmgdI$KB<ISXebE)qn(ayRBmSYiKx*f}PpoCf<PR@-
z)_n5AlC@nAmthqKNaVbUXS$*rX1enE&#M$)ii~7op=W(1@O~RF0HRz0M4H$O{QQe(
zXW9!)yVjfP?R}t22fNe0r%UAvPrd@lvj(M4Dr3)f@E`j4?0?j8uHeGUHTQ?Fj_b=Z
zYX1=T(}2HLF8~;c3LjJ|cm%lXidWunCAZw^^3OV7%}M4?yNjeOZ{hkPMUy9a>caa6
zV^4NX*$0lae)DWsO!j}~1usfW_6PG{Syd<IzwrYA8FeU=l1|AFv>rcqWxN7cUgu&b
zoaVBI9-uE6)|j5JWGR$9t5f>m__$?H>nnG18DxKX{$441E|?!RzOno`<7-u0-$o4p
zb=m=OUQXz!enCIPSWo&vW4*!l);n75)^p9KLdmmX9sqA~z5k&yX`#X>o;h26XZ4p~
zd%_F)Mb*{b?7bd!f8zu|2#>JH<N47mV9iL`{O4TJzix4PXPoO@Wp>&_pe4bQiRffM
zkUaG*e^7hww6)9FcA!^#mf!D<uJo~a>O0v*N$s2Lzr-&8vgLnG0IaYbhBm2J;AdC)
z{)evQ!N*(yF7p88h8`$_id^P5@0{!flBa%NzX9Ai9kYvFhRW?xaOZm-@M2e}y<vB%
z(g)1X^3}S^YaRe>+%VOUxn723=*nMy-4)+;pUbySJ$uwxPn`@)p-@I8`GZcLRmq%C
z`t<Ct3PO!9rO$15sr0G(;wx`+TTtL3524=wS_y!#6tWInj)oaouIke-<l|d3<5ug~
z&+>}WltNwm)GWx7Kj`FH*#YWI=`&!E%liAlE;eqWE4=CkSN7yHuJVJArCTbrXW;eq
zM}W7+4}iM3!=ZviVX^FjD%cG?{J1Nac8#R!vW5rDG5EtsDkl4Z<f(J&6A)ec>@1#d
z?$IaujqjYfuHx<YB+rA#nAl!4zJbBJTdM&OA<fW`cn_!_JaY_H>5Hamd<AhPz3)JY
z7$y6G<XNHaZxxh2RxW1_`n$^+d92Gn_aaw3>ke1;%nOpm$7^7ze0~?#=K8L+0H`An
zq$Ll3ID|>udZ#DO9DJnp14C8YX)2T)jV6yKK7QoMod80ky8nP9r0oRU0g)^CC$f#r
z&llQrO)mYP8vtyH%gO_<;a@#*=ILjI7>%8LhWMN5^aDNmdF6+e9g{CXa^mAs+M)2*
z&!zX@)n)B>sEZwcipuBGhaQs`0+KukHN#32+@UE4fTlv$pe)IW`5=Hp{LrJW;PR`a
z@RqsH!GcYr;gj4FCsCe&COyn~pg1MD$DH8uFTBhZ-*vBdtij<Co2Uej-=-A+iCba}
zHi}E#lB^s-Rn-s7xlh8Sxnoa~>Kj3Tm{o(M6_aQES#<I8Gx6!*y?s&gLuDlYpBK5J
zTka6oL<$dFejMJzk!J(p4u5?Bgv1$fh>NrzP(OgU?j3h4x^rlXt;<hkN!Dqb8fCd;
z5NtS^pNS8W^S!r|6egFSd4JK2+g$1V=d5!0M6RGR2n2l`T>j;akoo_#09av322_Im
zz`_(+aF##!lA7YYe_rgek2uDqW4PCQ2T9x|mt-5(xRaM(x}G}>QPZ0@=^R&d<4no$
z<4S}C57Oq#D=TXRt{SQI`D+3|rI7UlWo2^dW`Tk8yzG{4y4B@PKHp^@cC^bJGTg%@
zLc@*ZC0YMx{YYN+=r1*q?1M&030ydzN1u=(3jAI?ok18ZkCr~`Q~-pg+x88h(u=<o
zqDA0^%AT075f`N9?8C;mjGg!J<5BcHlS{Jo8s9Hj6HR;uS>_)pc30t5*SpdOAC=*t
z%nh@$y)UwWZcA#^otu0B)U_oJxC43#Sd#tlqpN)PeVG^+U3ate|FaJ~LJl7?-5>~(
zOtST_;YHG<T~C+Rt)Jw~J+b|C5!+E0sd()zZ)t?AVMuU^Dmypg#sBL9Ao3FMl+n%0
zaRyzXH{W%okIa+AqILuak8+v24wc(q96g$BjMtB>ud=6CQ1kEZviCp2<sLWD6<l_;
zE4lX}SMkc5t_ocrKyG;vf=eT8d)Hn7)KwPo5|m)SnkD3D+=KXvYZU}JBSyMRD~A*W
zZF?je<Mkx-tKse5-#5I&E%T3`sF8TdUH7?)SKpM!aOmc!%ioBz{-zZGA!shYKqMNy
z1h2iRClG}%%Ap+V30R1vZ@r^S?GhkJ!`C2rvDP6aht4ul1l%S$lU;_Y;mt$Ohs+Pa
z?fI9bEV5+bqPUsevg$u);?pz&K%luLH9Dib1mAqC&L8w>(f{4#^3V9E>~2&J0iNs9
z*9SrP8YD}irl0jGdF*GF)@d8h=iOy5FJq3JiM{rv_dcM+SIwep(IU4jKVLoKpV{!P
zy#QFDF<xF11kfq%=@WYNt#@4+L2&)e(ikELkXXqWFxaK_7~oAf&>BKzA{hitSiq`_
zeB+q(KxfQi!+Y3haYHoiLB{-**L~TuC`FeaR$(oS&!2qp*KPnr;SvNvUV&$mSviEl
zZ~46Wu6Wk%uHb@8J(pnLLxm8;H%!n8kfceel_m;p=;~5B^p;Y%COtzB6rB-RGh^@4
zhoA8Hp0MGi>?tjc&-&N@07x8>5(tdDO3U2R>|D3xm)~6Vr(alY_>wEN8nJNdl`b~!
zWS2Gk5FZ3R`@1yE@IvTBG6<U9q=(GE-EJ;x*a(+<<TzI_WvZt$0&n=>Be(dc|GA|Z
znO@DI($D$Vgw(R`2LMe^2$`^+VDbNcaaA9E;woNz#g*JW*A+~=*2V1k%o%x%w?5r|
zu)LvU(oG;F`+~K<*+m7gYhS^c+3e%j96M=}E4cUyyZm!p`GOau<RDmcdWP5V=kkY{
ze}fEw2&Y)fGW$RngUOitx8Gg$S6{n|*WVN-9E=FhXpTLndJT3MteJ9ZLp+L;r|~mC
zpS?z${k&?kl{`6?_3`Xtzk_FQ`HQc*>d(Hg#P+LO8o(Qv1TOoF8{VcB0IO1%C@T|e
zVo6$>CPdmAKRI9i#E5R?j<>#G|HFhMN#ABiVaWxdfKn%mrsQkzSCl(ke4#m6ZdrMn
z`S*i_^3AhERT$R$Z@%jnTnkfbM64R1-@jo6Km<EP5TN!e?a?29^31XY&$;3|@3E5T
zYJsOHiO4uCS7?x>NFBl`k{jg4r!9tF%nTv8_}1vc=}^gY=uy&v%D;G;E4uX#S2}OL
zt9bX{uKI_cJdc+#XGmyi0-3*Q20+A*EM69smkU0D4h)&3{Ixe-$^DPG!fXHK^3J}%
zmqbj7;2QH9pgPg6N0M~^XJmdZKU1F0+ql%;+Y8DLu_^l>$GX_*=eU9^u64z8=DM;M
zUUrqAe(tJ&TPUfVrTBFPB=!)`AD(0YtfE17ae8IBN}|OJ7rCmhzqM!e9as9qQ{ok%
z7RG#;x|68`uHk8Yb`srE@M<Jj!WSVK5UaJ&V$k55+&(UCD=z--GN;ZyY_z~^SY#oG
zNv~G^%ImJu>iz0pfAdzQTz+N!rE9IxT{i<DQEnx836^AM%L%X&@vWC%mpfoF4f1&x
zyWDXTv~A=`mQ@pYBC-|ad!|LnX1U>Ye%l_t&hOD*YTxu-S^FI(bGp1U&vS)WU$03W
zLTHq!n)0M&cor9%T{3?YsrT2N09Xm6TCYK6rRvGW)*x4X^PSAm%I7U`CH5K=@*13W
zwhR=q_d8T(3h_XIb{R@DhOa@gM_6TptA!R9f7^ln;_qWk?%`uxY{Dd00BQXu%lZ#L
z<|<x$!&QC$g<j~Txw%&Bm(?C`Ho?rlZUsP8f|1vNDG|N|0feIJKOebrt2-f76wSO%
zuHmRtBgO^KAanP9G@sVkv{SH2js^l#qZS)*nZs%6!D}L^Z`oU8&9uHdtG7bc4=?E0
z#L41wGvUD(u57{cu98Ogt8e5Nw<I^_mV)N2tZ8&z6R7joj{peHGIWQ)5ursI><ok|
zB@jOT)XJh)J*bXAxOkd}SX<V@tAOofTCeTAGF><=qAY5;fd)aC@%an_RW|Tez?MlE
z5Y;IubH|@zCFUh|@o&~#zwEge{Zh;NF)lvlbZT}3B&Q6j6Pw&*05n!SM8>5o&Pqx}
zprGz#(SrH}$kMX;&#E>pyzVBKKV_<#wVZ#9l~8ZykbQ(xL5f4K0{#VTmD_allaBRy
zgi5yO!qXF3NeJ->K`JI_>Dv!>nY;a6Of77#Agtt_bD=A^>N;0EdyWPV6|cV~!g}?O
zKfA@avoPBy>tmoEPI{W?WnX^+Ac18jenD}upA=CR*$=1c)6eaP^|oa7O76a2K&*mG
zrn~$}=epRj6I{-rqg~d}5qjcP9`zbfW8@*k>3X(MQ@Io9Z?*|CJ@tK`o#pD8x##|J
z_{<%1g3FtDmIP@TH5cD;j|?doIH<|}_6N84_eE|=c1%LZOnI=)4cS|bEnAWdfco|a
zWFOdO1cEhUOHxui_n1I<^BvWzC37Ek#WQXb8G{K%?$`+$<z)^#C<uf>Dv{E<_H}9Y
zB4E!GAEVM3@;VS0wR(rhSz8yoRxRJLrmW#>=4)q+$)&fl56?DUJ$M!wJMU!|{{WYD
z&?uK<7e99D*%C4?qSUdZLGl2z4=xL&uF9RP9BDmamM#p}I#B0t7y%H)6X9D1<18!N
zEnbwWZKO&gpw`d4APOe1io$8v2w%ihBWLt@v6XPN$s9DyWo$o0a_%S<D<~)vy7ciS
z1Ckz$2cyBUS*P05r9UGmqL)3q=$g}a@ysi%L<wBbvYq?LSrHxuk~8Vn&@vHYnggIP
zYyZPtwv~jr<4?6@Fh$05MK{ip154S{&kC~4sF~ghIU7KV;_6z-DI8CA9plYp0Ib~x
zd3oZr2p3DrBTT&k*dflv==9$ox$@_k8a?KUZ@tSEUVWp>w<kaEv~yf8<<SwxSg&xn
zC*us>$E6S4%cbuy#JgS+5cCc9N(h6*jzMKp*8qzYZL0r-0O0rD%)6$mRO8QPNyVk-
z<+8Gd3!i2gKHZxB^quy!W_FksS6RcYwg<9s^zj-FAWp{iw&>>Dd~<8BBuPRt<iGwd
zF<P2iY4KN8#U;rTH@e9HXzF8AUWEW)w>ULj+C;nvjPO7zmOi;arpvh9!&ssW$hWMR
zH{lGIJMLtcbL4R@+j<6!+SoS3SBB!3vHfm7vvT1qC{#MJc<a#HZ%)G!O2H9%DZ<yH
zuEXWtJebM^<%{44kqn>K$?A8uvOW6QpS``l1}0o=!80vjGc9mgRv|}^+#us%h5&ii
z{}h~msVkiRe-b7Gwov-mQ?Bf}m&C@a{NytU6_6-&`Af?@WErN`(xtWKN!G#3zTpKx
zq%?{{D)27A&@VkhHLV)vufBDaAAahaX3K)54?XURXWygse!-R3xqJ%<a7THkOx9#X
z0ddGt!XS}ZS-2tWrHpHrQ5l#_%qu}aP&Qf9Dd;xb<~9j|5ngl-|BZ`I0EOj@y)=je
zs0{19o#)t6&Vaz&ZJ5gfmN5K~;KGkpZ=(!9`8=U#3$D1v6<$BX72SHLE4lw+)%NAD
zydf8#sxQBGRp0;Usx9M_9B^MzjnCzeWc^wTtz-bKdjXNSO_tayy#n*=SiZc?u-yb}
z#IysECP*Bmk34A&;RA9hfv{h2xi!#JE^#pyZ6}@Xa*jRG<%~L31Q2xXDVxZ`WMhas
zG}h`R7`d{MhR6d>$!c`A(+Z3Z!6heHy7l#$or}J8P`mfvRU=AGYb@BZ_O=Ue!H14g
zVusJBthw|`Vet`}#i0j`4jv8VFTdt0-~W$5g}_O;@O<xF_@&hL;C7HCiA;5x@)kE4
z01XL%=;)NJ#;TsF5e*&X5o|Pj_8Frt{`nVIZLdPrC!b5V2wP4{B`AHRk3Ok-xp?;7
zG66)-vT)kfRyJKO7aV|jvGJ$4+%d;%0Y_s^!wFWN*CIo~vA4vb(g*D3FSqp;G^o1d
z1NZb<okrElEnb<d5&w{UWX@5?$uKVO<TE82z*d%k)MdBV3g#6}EQ>(&R}ms+ibJV~
zhcmUk=JyL1X+R*OIW9dje73jY#a}|5zpTmPcaj0Hx&ctviS`OK%xIYA=WDwObq^v3
zFT>&=En|NBgDg5L?J`xo_kp0<WzWB)%SPE$a@Sl}JmYp(WKDJ9CDUEOITyOT)6aD=
zdWqw#ml!kNWgl_0wyUt(G;yMY;<DR6vw#A+fr3KrQRC#J5IgZS;hPAqf(xg)qUqPW
z;(y)hN|?_-@TiDF<<Gt(ajD98?4p18iL3hTOIQ8%cWyCQ{Qvzb%^i3Zy7YPZ+L`DD
zBni~f)HWr!axwt^s-7W4ordKRfk1hbU*MMJ=J|DhW|r_rj0LNIvRC4p@2#2sudA|>
z2{nrfD>2HReojm%=IABXR2ThgmR<>_E%}#Rq4Eh0{Jc}omh(BKOYDTx6eM_Jv7f*o
zqTr&-<fsGMlDRw$Ix1>RuFB>;qZbL+M9Q`B!YjM~_PYou;@xuL!RK)4`Ci!AlJP^i
z@pXKLpA3LMX_pW!kx(sAnM6=<dALOC8}f9)lvynxP&xn`<IAQG)I(HQ2~tMcWLdi8
zkth5jZjQYYx6g6KGiPfO1J{`gUUbtfuIT35rJhi7m(}g}J*e8f^zo-OmsdISYEaGq
zMfmSG{=ze^q?YHhBQb)L3K^azRyBQvS6-+JOPs}ZGqREako>D&e{pG+1WFc_RsNC{
z*@fe!ARtoGR5F2!=aTY5fSsxMz#8j!KM+Tji(K*2YuZJWKlh@r^!jJAI{)p>cf^CP
z{NO|TwV%4m&%d<#{TuzBi~skVTe2wCUL#-5=+6dsA1Exi4WMyN2Ef{WF~Zj(fL}<}
z3=VT~5D1hVY)*L{C`YUYCsR|8vx8tW4YYuz9Iu8B|IEMRl3Qk9LhVj=2X|u^o|i_y
zCr*h-iWK=QzZ|!88rWbn+tl&*$pBa%_YC0)#;jrKq(g8pW#OeDNFauDtjAC}m3a8~
zD5a6r0h*QjU%xzB%2X$mGGP;&ENPMfur{Vk(OrWMWk`6I_@m1j_80Xyj%=<|^Lxa9
k&+yMlyzt3O-{8OgKkou6aKHXMMgRZ+07*qoM6N<$f?8~+r~m)}

literal 0
HcmV?d00001

diff --git a/res/values-zh-rCN/strings.xml b/res/values-zh-rCN/strings.xml
index 65ab66dda..a8ab58030 100644
--- a/res/values-zh-rCN/strings.xml
+++ b/res/values-zh-rCN/strings.xml
@@ -239,4 +239,17 @@
     <string name="no_quick_responses" msgid="8716297053803961304">"没有可供选择的快速回复"</string>
     <string name="gmail_name" msgid="2099786953868369991">"Gmail"</string>
     <string name="folder_sync_settings_pref_title" msgid="349478353401667107">"文件夹同步设置"</string>
+
+    <!-- In Account setup options & Account Settings screens, Email sync size option. -->
+    <string name="account_settings_sync_size_enable">配置邮件的同步缓存大小</string>
+    <string name="account_settings_sync_size_enable_summary">您可以自定义该账户中的邮件的同步缓存大小，从而节约数据流量</string>
+    <string name="account_settings_sync_size_label">选择同步缓存大小</string>
+    <string name="account_settings_sync_size_category_label">同步缓存大小配置</string>
+
+    <string name="account_setup_options_mail_sync_size_all">全部</string>
+    <string name="account_setup_options_mail_sync_size_20k">20KB</string>
+    <string name="account_setup_options_mail_sync_size_100k">100KB</string>
+    <string name="account_setup_options_mail_sync_size_200k">200KB</string>
+    <string name="account_setup_options_mail_sync_size_500k">500KB</string>
+    <string name="account_setup_options_mail_sync_size_1M">1MB</string>
 </resources>
diff --git a/res/values-zh-rHK/strings.xml b/res/values-zh-rHK/strings.xml
index e662f8d7d..8483b6d23 100644
--- a/res/values-zh-rHK/strings.xml
+++ b/res/values-zh-rHK/strings.xml
@@ -239,4 +239,17 @@
     <string name="no_quick_responses" msgid="8716297053803961304">"沒有可用的回應"</string>
     <string name="gmail_name" msgid="2099786953868369991">"Gmail"</string>
     <string name="folder_sync_settings_pref_title" msgid="349478353401667107">"資料夾同步處理設定"</string>
+
+    <!-- In Account setup options & Account Settings screens, Email sync size option. -->
+    <string name="account_settings_sync_size_enable">配置郵件的同步緩存大小</string>
+    <string name="account_settings_sync_size_enable_summary">您可以自由定義該帳戶中的郵件的同步緩存大小，從而節約數據流量</string>
+    <string name="account_settings_sync_size_label">選擇同步緩存大小</string>
+    <string name="account_settings_sync_size_category_label">同步緩存大小配置</string>
+
+    <string name="account_setup_options_mail_sync_size_all">全部</string>
+    <string name="account_setup_options_mail_sync_size_20k">20KB</string>
+    <string name="account_setup_options_mail_sync_size_100k">100KB</string>
+    <string name="account_setup_options_mail_sync_size_200k">200KB</string>
+    <string name="account_setup_options_mail_sync_size_500k">500KB</string>
+    <string name="account_setup_options_mail_sync_size_1M">1MB</string>
 </resources>
diff --git a/res/values-zh-rTW/strings.xml b/res/values-zh-rTW/strings.xml
index 99b013e3f..8eec3514b 100644
--- a/res/values-zh-rTW/strings.xml
+++ b/res/values-zh-rTW/strings.xml
@@ -239,4 +239,17 @@
     <string name="no_quick_responses" msgid="8716297053803961304">"沒有可用的回應"</string>
     <string name="gmail_name" msgid="2099786953868369991">"Gmail"</string>
     <string name="folder_sync_settings_pref_title" msgid="349478353401667107">"資料夾同步處理設定"</string>
+
+    <!-- In Account setup options & Account Settings screens, Email sync size option. -->
+    <string name="account_settings_sync_size_enable">配置郵件的同步緩存大小</string>
+    <string name="account_settings_sync_size_enable_summary">您可以自由定義該帳戶中的郵件的同步緩存大小，從而節約數據流量</string>
+    <string name="account_settings_sync_size_label">選擇同步緩存大小</string>
+    <string name="account_settings_sync_size_category_label">同步緩存大小配置</string>
+
+    <string name="account_setup_options_mail_sync_size_all">全部</string>
+    <string name="account_setup_options_mail_sync_size_20k">20KB</string>
+    <string name="account_setup_options_mail_sync_size_100k">100KB</string>
+    <string name="account_setup_options_mail_sync_size_200k">200KB</string>
+    <string name="account_setup_options_mail_sync_size_500k">500KB</string>
+    <string name="account_setup_options_mail_sync_size_1M">1MB</string>
 </resources>
diff --git a/res/values/arrays.xml b/res/values/arrays.xml
index a8393bc11..0d7673449 100644
--- a/res/values/arrays.xml
+++ b/res/values/arrays.xml
@@ -132,4 +132,24 @@
         <item>pop</item>
         <item>imap</item>
     </string-array>
+
+    <!-- Mail sync size -->
+    <string-array name="account_setup_options_mail_sync_size_entries_labels">
+        <item>@string/account_setup_options_mail_sync_size_all</item>
+        <item>@string/account_setup_options_mail_sync_size_20k</item>
+        <item>@string/account_setup_options_mail_sync_size_100k</item>
+        <item>@string/account_setup_options_mail_sync_size_200k</item>
+        <item>@string/account_setup_options_mail_sync_size_500k</item>
+        <item>@string/account_setup_options_mail_sync_size_1M</item>
+    </string-array>
+
+    <string-array name="account_setup_options_mail_sync_size_entries_values">
+        <!-- This is the sync size for entire mail, and the value is the integer max value -->
+        <item>2147483647</item>
+        <item>20480</item>
+        <item>102400</item>
+        <item>204800</item>
+        <item>512000</item>
+        <item>1024000</item>
+    </string-array>
 </resources>
diff --git a/res/values/cm_dimens.xml b/res/values/cm_dimens.xml
new file mode 100644
index 000000000..6748f80d3
--- /dev/null
+++ b/res/values/cm_dimens.xml
@@ -0,0 +1,20 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!-- Copyright (C) 2015 The CaynogenMod Project
+
+     Licensed under the Apache License, Version 2.0 (the "License");
+     you may not use this file except in compliance with the License.
+     You may obtain a copy of the License at
+
+          http://www.apache.org/licenses/LICENSE-2.0
+
+     Unless required by applicable law or agreed to in writing, software
+     distributed under the License is distributed on an "AS IS" BASIS,
+     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+     See the License for the specific language governing permissions and
+     limitations under the License.
+-->
+
+<resources>
+    <!-- Folder settings -->
+    <dimen name="child_folder_indent">8dp</dimen>
+</resources>
diff --git a/res/values/cm_strings.xml b/res/values/cm_strings.xml
new file mode 100644
index 000000000..19c7df868
--- /dev/null
+++ b/res/values/cm_strings.xml
@@ -0,0 +1,34 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!--
+     Copyright (C) 2015 The CaynogenMod Project
+
+     Licensed under the Apache License, Version 2.0 (the "License");
+     you may not use this file except in compliance with the License.
+     You may obtain a copy of the License at
+
+          http://www.apache.org/licenses/LICENSE-2.0
+
+     Unless required by applicable law or agreed to in writing, software
+     distributed under the License is distributed on an "AS IS" BASIS,
+     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+     See the License for the specific language governing permissions and
+     limitations under the License.
+-->
+<resources xmlns:xliff="urn:oasis:names:tc:xliff:document:1.2">
+    <!-- Delete account -->
+    <string name="delete_account">Delete account</string>
+    <string name="delete_account_confirmation_msg">This will delete all the settings and emails of the account <xliff:g id="account">%s</xliff:g>. This operation cannot be undone.\n\nContinue?</string>
+    <string name="deleting_account_msg">Deleting account\u2026</string>
+    <string name="delete_account_failed">Couldn\'t delete the account</string>
+
+    <!-- Mailbox notification settings activity title [CHAR LIMIT=none] -->
+    <string name="mailbox_notify_settings_activity_title">Notification options</string>
+    <!-- Mailbox settings activity title, with the target folder name [CHAR LIMIT=none] -->
+    <string name="mailbox_notify_settings_activity_title_with_mailbox">Notification options (<xliff:g id="mailbox_name" example="Family">%s</xliff:g>)</string>
+
+    <!-- Name for preference entry which leads to the per-folder notification settings activity -->
+    <string name="folder_notify_settings_pref_title">Folder notification settings</string>
+
+    <!-- On Settings screen, notification lights pop-up menu label -->
+    <string name="label_notification_lights_title">Lights</string>
+</resources>
diff --git a/res/values/constants.xml b/res/values/constants.xml
index 3b88d7d6f..082b86554 100644
--- a/res/values/constants.xml
+++ b/res/values/constants.xml
@@ -31,4 +31,13 @@
 
     <!-- the email application starts services -->
     <bool name="enable_services">true</bool>
-</resources>
\ No newline at end of file
+
+    <!-- Customize Email account's signature -->
+    <string name="customize_set_email_signature"></string>
+
+    <!-- Boolean value indicating whether we should allow force create account -->
+    <bool name="enable_force_configure_account">false</bool>
+
+    <!-- Boolean value to show Customize Email signature with brand -->
+    <bool name="config_email_signature_with_brand">false</bool>
+</resources>
diff --git a/res/values/strings.xml b/res/values/strings.xml
index 2f39425a4..578c303c2 100644
--- a/res/values/strings.xml
+++ b/res/values/strings.xml
@@ -645,9 +645,9 @@
     <string name="email_feedback_uri" translatable="false"></string>
 
     <string name="account_manager_type_exchange" translatable="false">com.android.exchange</string>
-    <string name="account_manager_type_pop3" translatable="false">com.android.email</string>
-    <string name="account_manager_type_imap" translatable="false">com.android.email</string>
-    <string name="account_manager_type_legacy_imap" translatable="false">com.android.email</string>
+    <string name="account_manager_type_pop3" translatable="false">com.android.email.pop3</string>
+    <string name="account_manager_type_imap" translatable="false">com.android.email.imap</string>
+    <string name="account_manager_type_legacy_imap" translatable="false">com.android.email.legacy.imap</string>
     <string name="intent_exchange_action" translatable="false">com.android.email.EXCHANGE_INTENT</string>
     <string name="intent_exchange_cert_action" translatable="false">com.android.email.EXCHANGE_REQUEST_CERT</string>
     <string name="intent_exchange_package" translatable="false">com.android.exchange</string>
@@ -682,4 +682,99 @@
 
     <!-- Name for preference entry which leads to the per-folder sync settings activity -->
     <string name="folder_sync_settings_pref_title">Folder sync settings</string>
+
+    <!-- In Account setup options & Account Settings screens, Email sync size option. -->
+    <string name="account_settings_sync_size_enable">Configure sync size per mail</string>
+    <string name="account_settings_sync_size_enable_summary">To save the data, you could configure the sync size per mail of the account</string>
+    <string name="account_settings_sync_size_label">Choose sync size</string>
+    <string name="account_settings_sync_size_category_label">Sync size settings</string>
+
+    <string name="account_setup_options_mail_sync_size_all">Entire</string>
+    <string name="account_setup_options_mail_sync_size_20k">20KB</string>
+    <string name="account_setup_options_mail_sync_size_100k">100KB</string>
+    <string name="account_setup_options_mail_sync_size_200k">200KB</string>
+    <string name="account_setup_options_mail_sync_size_500k">500KB</string>
+    <string name="account_setup_options_mail_sync_size_1M">1MB</string>
+
+    <!--Delete email account -->
+    <string name="remove_email_account">Remove account</string>
+    <string name="remove_email_account_continue">CONTINUE</string>
+    <string name="remove_email_account_message">You are about to go to the Settings app, where you can remove Accounts</string>
+    <string name="default_domain"></string>
+    <!-- Customize Email account's signature -->
+    <string name="default_email_signature"></string>
+    <string name="default_email_signature_with_brand"></string>
+    <string name="missing_required_permission">You have disabled a required permission.</string>
+    <string name="account_manager_type_mobistar" translatable="false">com.android.mobistar</string>
+    <string name="mobistar_eas_name" translatable="false">Mobistar</string>
+    <string name="account_manager_type_wanadoo" translatable="false">com.android.wanadoo</string>
+    <string name="wanadoo_eas_name" translatable="false">Wanadoo</string>
+    <string name="account_manager_type_orangemail" translatable="false">com.android.orangemail</string>
+    <string name="orangemail_eas_name" translatable="false">OrangeMail</string>
+    <string name="account_manager_type_correoorange" translatable="false">com.android.correoorange</string>
+    <string name="correoorange_eas_name" translatable="false">CorreoOrange</string>
+    <string name="account_manager_type_orangemobile" translatable="false">com.android.orangemobile</string>
+    <string name="orangemobile_eas_name" translatable="false">Orange Mobile</string>
+    <string name="account_manager_type_multibox" translatable="false">com.android.multibox</string>
+    <string name="multibox_eas_name" translatable="false">Multi Box</string>
+    <string name="account_manager_type_belgacom" translatable="false">com.android.belgacom</string>
+    <string name="belgacom_eas_name" translatable="false">Belgacom</string>
+    <string name="account_manager_type_skynet" translatable="false">com.android.skynet</string>
+    <string name="skynet_eas_name" translatable="false">Skynet</string>
+    <string name="account_manager_type_telenet" translatable="false">com.android.telenet</string>
+    <string name="telenet_eas_name" translatable="false">Telenet</string>
+    <string name="account_manager_type_scarlet" translatable="false">com.android.scarlet</string>
+    <string name="scarlet_eas_name" translatable="false">Scarlet</string>
+    <string name="account_manager_type_euphony" translatable="false">com.android.euphony</string>
+    <string name="euphony_eas_name" translatable="false">Euphony</string>
+    <string name="account_manager_type_voo" translatable="false">com.android.voo</string>
+    <string name="voo_eas_name" translatable="false">Voo</string>
+    <string name="account_manager_type_tele2" translatable="false">com.android.tele2</string>
+    <string name="tele2_eas_name" translatable="false">Tele2</string>
+    <string name="account_manager_type_versatel" translatable="false">com.android.versatel</string>
+    <string name="versatel_eas_name" translatable="false">Versatel</string>
+    <string name="account_manager_type_tiscali" translatable="false">com.android.tiscali</string>
+    <string name="tiscali_eas_name" translatable="false">Tiscali</string>
+    <string name="account_manager_type_swing" translatable="false">com.android.swing</string>
+    <string name="swing_eas_name" translatable="false">Swing</string>
+    <string name="account_manager_type_versatelasdl" translatable="false">com.android.versatelasdl</string>
+    <string name="versatelasdl_eas_name" translatable="false">Versatel ADSL</string>
+    <string name="account_manager_type_brutele" translatable="false">com.android.brutele</string>
+    <string name="brutele_eas_name" translatable="false">Brutele</string>
+    <string name="account_manager_type_teledisnet" translatable="false">com.android.teledisnet</string>
+    <string name="teledisnet_eas_name" translatable="false">Teledisnet</string>
+    <string name="account_manager_type_tvcablenet" translatable="false">com.android.tvcablenet</string>
+    <string name="tvcablenet_eas_name" translatable="false">TV Cable Net</string>
+    <string name="account_manager_type_alice" translatable="false">com.android.alice</string>
+    <string name="alice_eas_name" translatable="false">Alice</string>
+    <string name="account_manager_type_yahoo" translatable="false">com.android.yahoo</string>
+    <string name="yahoo_eas_name" translatable="false">Yahoo</string>
+    <string name="account_manager_type_outlook" translatable="false">com.android.outlook</string>
+    <string name="outlook_eas_name" translatable="false">Outlook</string>
+    <string name="account_manager_type_gmail" translatable="false">com.android.gmail</string>
+    <string name="gmail_eas_name" translatable="false">Gmail</string>
+    <string name="account_manager_type_aol" translatable="false">com.android.aol</string>
+    <string name="aol_eas_name" translatable="false">Aol</string>
+    <string name="account_manager_type_free" translatable="false">com.android.free</string>
+    <string name="free_eas_name" translatable="false">Free</string>
+    <string name="account_manager_type_laposte" translatable="false">com.android.laposte</string>
+    <string name="laposte_eas_name" translatable="false">Laposte</string>
+    <string name="account_manager_type_sfr" translatable="false">com.android.sfr</string>
+    <string name="sfr_eas_name" translatable="false">Sfr</string>
+    <string name="account_manager_type_orange" translatable="false">com.android.orange</string>
+    <string name="orange_eas_name" translatable="false">Orange</string>
+    <string name="account_manager_type_noos" translatable="false">com.android.noos</string>
+    <string name="noos_eas_name" translatable="false">Noos</string>
+    <string name="account_manager_type_vodafone" translatable="false">com.android.vodafone</string>
+    <string name="vodafone_eas_name" translatable="false">Vodafone mail</string>
+    <string name="account_manager_type_hotmail" translatable="false">com.android.hotmail</string>
+    <string name="hotmail_eas_name" translatable="false">Hotmail</string>
+    <string name="account_manager_type_sapo" translatable="false">com.android.sapo</string>
+    <string name="sapo_eas_name" translatable="false">Sapo</string>
+    <string name="account_manager_type_netcabo" translatable="false">com.android.netcabo</string>
+    <string name="netcabo_eas_name" translatable="false">Netcabo</string>
+    <string name="account_manager_type_clix" translatable="false">com.android.clix</string>
+    <string name="clix_eas_name" translatable="false">clix</string>
+    <!-- string to show Email signature with brand -->
+    <string name="default_email_signature_with_brand"></string>
 </resources>
diff --git a/res/xml/account_settings_preferences.xml b/res/xml/account_settings_preferences.xml
index 3cdd47486..f59857b8c 100755
--- a/res/xml/account_settings_preferences.xml
+++ b/res/xml/account_settings_preferences.xml
@@ -83,6 +83,26 @@
 
     </PreferenceCategory>
 
+    <PreferenceCategory
+        android:title="@string/account_settings_sync_size_category_label">
+
+        <CheckBoxPreference
+            android:key="account_sync_size_enable"
+            android:enabled="false"
+            android:defaultValue="true"
+            android:title="@string/account_settings_sync_size_enable"
+            android:summary="@string/account_settings_sync_size_enable_summary" />
+
+        <ListPreference
+            android:key="account_sync_size"
+            android:enabled="false"
+            android:title="@string/account_settings_sync_size_label"
+            android:entries="@array/account_setup_options_mail_sync_size_entries_labels"
+            android:entryValues="@array/account_setup_options_mail_sync_size_entries_values"
+            android:dialogTitle="@string/account_settings_sync_size_label" />
+
+    </PreferenceCategory>
+
     <!-- This category is enabled after the folder preferences are loaded -->
     <PreferenceCategory
         android:enabled="false"
@@ -106,6 +126,12 @@
             android:defaultValue="false"
             android:title="@string/label_notification_vibrate_title" />
 
+        <com.android.mail.preferences.notifications.FolderNotificationLightPreference
+            android:key="notification-lights"
+            android:dependency="notifications-enabled"
+            android:defaultValue=""
+            android:title="@string/label_notification_lights_title" />
+
     </PreferenceCategory>
 
     <PreferenceCategory
diff --git a/res/xml/authenticator_alice.xml b/res/xml/authenticator_alice.xml
new file mode 100644
index 000000000..df5e287c2
--- /dev/null
+++ b/res/xml/authenticator_alice.xml
@@ -0,0 +1,40 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!--
+  Copyright (c) 2016, The Linux Foundation. All rights reserved.
+
+  Redistribution and use in source and binary forms, with or without
+  modification, are permitted provided that the following conditions are
+  met:
+    * Redistributions of source code must retain the above copyright
+      notice, this list of conditions and the following disclaimer.
+    * Redistributions in binary form must reproduce the above
+      copyright notice, this list of conditions and the following
+      disclaimer in the documentation and/or other materials provided
+      with the distribution.
+    * Neither the name of The Linux Foundation nor the names of its
+      contributors may be used to endorse or promote products derived
+      from this software without specific prior written permission.
+
+  THIS SOFTWARE IS PROVIDED "AS IS" AND ANY EXPRESS OR IMPLIED
+  WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
+  MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT
+  ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS
+  BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
+  CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
+  SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
+  BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
+  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE
+  OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN
+  IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+-->
+
+<!-- The attributes in this XML file provide configuration information -->
+<!-- for the Account Manager. -->
+
+<account-authenticator xmlns:android="http://schemas.android.com/apk/res/android"
+    android:accountType="@string/account_manager_type_alice"
+    android:icon="@mipmap/ic_alice_email"
+    android:smallIcon="@drawable/ic_notification_mail_24dp"
+    android:label="@string/alice_eas_name"
+    android:accountPreferences="@xml/account_preferences"
+/>
diff --git a/res/xml/authenticator_aol.xml b/res/xml/authenticator_aol.xml
new file mode 100644
index 000000000..16ed49654
--- /dev/null
+++ b/res/xml/authenticator_aol.xml
@@ -0,0 +1,40 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!--
+  Copyright (c) 2016, The Linux Foundation. All rights reserved.
+
+  Redistribution and use in source and binary forms, with or without
+  modification, are permitted provided that the following conditions are
+  met:
+    * Redistributions of source code must retain the above copyright
+      notice, this list of conditions and the following disclaimer.
+    * Redistributions in binary form must reproduce the above
+      copyright notice, this list of conditions and the following
+      disclaimer in the documentation and/or other materials provided
+      with the distribution.
+    * Neither the name of The Linux Foundation nor the names of its
+      contributors may be used to endorse or promote products derived
+      from this software without specific prior written permission.
+
+  THIS SOFTWARE IS PROVIDED "AS IS" AND ANY EXPRESS OR IMPLIED
+  WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
+  MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT
+  ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS
+  BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
+  CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
+  SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
+  BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
+  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE
+  OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN
+  IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+-->
+
+<!-- The attributes in this XML file provide configuration information -->
+<!-- for the Account Manager. -->
+
+<account-authenticator xmlns:android="http://schemas.android.com/apk/res/android"
+    android:accountType="@string/account_manager_type_aol"
+    android:icon="@mipmap/ic_launcher_mail"
+    android:smallIcon="@drawable/ic_notification_mail_24dp"
+    android:label="@string/aol_eas_name"
+    android:accountPreferences="@xml/account_preferences"
+/>
diff --git a/res/xml/authenticator_belgacom.xml b/res/xml/authenticator_belgacom.xml
new file mode 100644
index 000000000..d1b4b83cb
--- /dev/null
+++ b/res/xml/authenticator_belgacom.xml
@@ -0,0 +1,40 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!--
+  Copyright (c) 2016, The Linux Foundation. All rights reserved.
+
+  Redistribution and use in source and binary forms, with or without
+  modification, are permitted provided that the following conditions are
+  met:
+    * Redistributions of source code must retain the above copyright
+      notice, this list of conditions and the following disclaimer.
+    * Redistributions in binary form must reproduce the above
+      copyright notice, this list of conditions and the following
+      disclaimer in the documentation and/or other materials provided
+      with the distribution.
+    * Neither the name of The Linux Foundation nor the names of its
+      contributors may be used to endorse or promote products derived
+      from this software without specific prior written permission.
+
+  THIS SOFTWARE IS PROVIDED "AS IS" AND ANY EXPRESS OR IMPLIED
+  WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
+  MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT
+  ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS
+  BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
+  CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
+  SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
+  BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
+  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE
+  OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN
+  IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+-->
+
+<!-- The attributes in this XML file provide configuration information -->
+<!-- for the Account Manager. -->
+
+<account-authenticator xmlns:android="http://schemas.android.com/apk/res/android"
+    android:accountType="@string/account_manager_type_belgacom"
+    android:icon="@mipmap/ic_launcher_mail"
+    android:smallIcon="@drawable/ic_notification_mail_24dp"
+    android:label="@string/belgacom_eas_name"
+    android:accountPreferences="@xml/account_preferences"
+/>
diff --git a/res/xml/authenticator_brutele.xml b/res/xml/authenticator_brutele.xml
new file mode 100644
index 000000000..b7d61d4d2
--- /dev/null
+++ b/res/xml/authenticator_brutele.xml
@@ -0,0 +1,40 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!--
+  Copyright (c) 2016, The Linux Foundation. All rights reserved.
+
+  Redistribution and use in source and binary forms, with or without
+  modification, are permitted provided that the following conditions are
+  met:
+    * Redistributions of source code must retain the above copyright
+      notice, this list of conditions and the following disclaimer.
+    * Redistributions in binary form must reproduce the above
+      copyright notice, this list of conditions and the following
+      disclaimer in the documentation and/or other materials provided
+      with the distribution.
+    * Neither the name of The Linux Foundation nor the names of its
+      contributors may be used to endorse or promote products derived
+      from this software without specific prior written permission.
+
+  THIS SOFTWARE IS PROVIDED "AS IS" AND ANY EXPRESS OR IMPLIED
+  WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
+  MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT
+  ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS
+  BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
+  CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
+  SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
+  BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
+  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE
+  OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN
+  IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+-->
+
+<!-- The attributes in this XML file provide configuration information -->
+<!-- for the Account Manager. -->
+
+<account-authenticator xmlns:android="http://schemas.android.com/apk/res/android"
+    android:accountType="@string/account_manager_type_brutele"
+    android:icon="@mipmap/ic_launcher_mail"
+    android:smallIcon="@drawable/ic_notification_mail_24dp"
+    android:label="@string/brutele_eas_name"
+    android:accountPreferences="@xml/account_preferences"
+/>
diff --git a/res/xml/authenticator_clix.xml b/res/xml/authenticator_clix.xml
new file mode 100644
index 000000000..b4fcf31dc
--- /dev/null
+++ b/res/xml/authenticator_clix.xml
@@ -0,0 +1,40 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!--
+  Copyright (c) 2016, The Linux Foundation. All rights reserved.
+
+  Redistribution and use in source and binary forms, with or without
+  modification, are permitted provided that the following conditions are
+  met:
+    * Redistributions of source code must retain the above copyright
+      notice, this list of conditions and the following disclaimer.
+    * Redistributions in binary form must reproduce the above
+      copyright notice, this list of conditions and the following
+      disclaimer in the documentation and/or other materials provided
+      with the distribution.
+    * Neither the name of The Linux Foundation nor the names of its
+      contributors may be used to endorse or promote products derived
+      from this software without specific prior written permission.
+
+  THIS SOFTWARE IS PROVIDED "AS IS" AND ANY EXPRESS OR IMPLIED
+  WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
+  MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT
+  ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS
+  BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
+  CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
+  SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
+  BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
+  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE
+  OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN
+  IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+-->
+
+<!-- The attributes in this XML file provide configuration information -->
+<!-- for the Account Manager. -->
+
+<account-authenticator xmlns:android="http://schemas.android.com/apk/res/android"
+    android:accountType="@string/account_manager_type_clix"
+    android:icon="@mipmap/ic_launcher_mail"
+    android:smallIcon="@drawable/ic_notification_mail_24dp"
+    android:label="@string/clix_eas_name"
+    android:accountPreferences="@xml/account_preferences"
+/>
diff --git a/res/xml/authenticator_correoorange.xml b/res/xml/authenticator_correoorange.xml
new file mode 100644
index 000000000..01afc60cc
--- /dev/null
+++ b/res/xml/authenticator_correoorange.xml
@@ -0,0 +1,40 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!--
+  Copyright (c) 2016, The Linux Foundation. All rights reserved.
+
+  Redistribution and use in source and binary forms, with or without
+  modification, are permitted provided that the following conditions are
+  met:
+    * Redistributions of source code must retain the above copyright
+      notice, this list of conditions and the following disclaimer.
+    * Redistributions in binary form must reproduce the above
+      copyright notice, this list of conditions and the following
+      disclaimer in the documentation and/or other materials provided
+      with the distribution.
+    * Neither the name of The Linux Foundation nor the names of its
+      contributors may be used to endorse or promote products derived
+      from this software without specific prior written permission.
+
+  THIS SOFTWARE IS PROVIDED "AS IS" AND ANY EXPRESS OR IMPLIED
+  WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
+  MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT
+  ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS
+  BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
+  CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
+  SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
+  BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
+  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE
+  OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN
+  IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+-->
+
+<!-- The attributes in this XML file provide configuration information -->
+<!-- for the Account Manager. -->
+
+<account-authenticator xmlns:android="http://schemas.android.com/apk/res/android"
+    android:accountType="@string/account_manager_type_correoorange"
+    android:icon="@mipmap/ic_launcher_mail"
+    android:smallIcon="@drawable/ic_notification_mail_24dp"
+    android:label="@string/correoorange_eas_name"
+    android:accountPreferences="@xml/account_preferences"
+/>
diff --git a/res/xml/authenticator_euphony.xml b/res/xml/authenticator_euphony.xml
new file mode 100644
index 000000000..1024aa5c6
--- /dev/null
+++ b/res/xml/authenticator_euphony.xml
@@ -0,0 +1,40 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!--
+  Copyright (c) 2016, The Linux Foundation. All rights reserved.
+
+  Redistribution and use in source and binary forms, with or without
+  modification, are permitted provided that the following conditions are
+  met:
+    * Redistributions of source code must retain the above copyright
+      notice, this list of conditions and the following disclaimer.
+    * Redistributions in binary form must reproduce the above
+      copyright notice, this list of conditions and the following
+      disclaimer in the documentation and/or other materials provided
+      with the distribution.
+    * Neither the name of The Linux Foundation nor the names of its
+      contributors may be used to endorse or promote products derived
+      from this software without specific prior written permission.
+
+  THIS SOFTWARE IS PROVIDED "AS IS" AND ANY EXPRESS OR IMPLIED
+  WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
+  MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT
+  ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS
+  BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
+  CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
+  SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
+  BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
+  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE
+  OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN
+  IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+-->
+
+<!-- The attributes in this XML file provide configuration information -->
+<!-- for the Account Manager. -->
+
+<account-authenticator xmlns:android="http://schemas.android.com/apk/res/android"
+    android:accountType="@string/account_manager_type_euphony"
+    android:icon="@mipmap/ic_launcher_mail"
+    android:smallIcon="@drawable/ic_notification_mail_24dp"
+    android:label="@string/euphony_eas_name"
+    android:accountPreferences="@xml/account_preferences"
+/>
diff --git a/res/xml/authenticator_free.xml b/res/xml/authenticator_free.xml
new file mode 100644
index 000000000..d67913959
--- /dev/null
+++ b/res/xml/authenticator_free.xml
@@ -0,0 +1,40 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!--
+  Copyright (c) 2016, The Linux Foundation. All rights reserved.
+
+  Redistribution and use in source and binary forms, with or without
+  modification, are permitted provided that the following conditions are
+  met:
+    * Redistributions of source code must retain the above copyright
+      notice, this list of conditions and the following disclaimer.
+    * Redistributions in binary form must reproduce the above
+      copyright notice, this list of conditions and the following
+      disclaimer in the documentation and/or other materials provided
+      with the distribution.
+    * Neither the name of The Linux Foundation nor the names of its
+      contributors may be used to endorse or promote products derived
+      from this software without specific prior written permission.
+
+  THIS SOFTWARE IS PROVIDED "AS IS" AND ANY EXPRESS OR IMPLIED
+  WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
+  MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT
+  ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS
+  BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
+  CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
+  SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
+  BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
+  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE
+  OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN
+  IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+-->
+
+<!-- The attributes in this XML file provide configuration information -->
+<!-- for the Account Manager. -->
+
+<account-authenticator xmlns:android="http://schemas.android.com/apk/res/android"
+    android:accountType="@string/account_manager_type_free"
+    android:icon="@mipmap/ic_launcher_mail"
+    android:smallIcon="@drawable/ic_notification_mail_24dp"
+    android:label="@string/free_eas_name"
+    android:accountPreferences="@xml/account_preferences"
+/>
diff --git a/res/xml/authenticator_gmail.xml b/res/xml/authenticator_gmail.xml
new file mode 100644
index 000000000..accf4fbad
--- /dev/null
+++ b/res/xml/authenticator_gmail.xml
@@ -0,0 +1,40 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!--
+  Copyright (c) 2016, The Linux Foundation. All rights reserved.
+
+  Redistribution and use in source and binary forms, with or without
+  modification, are permitted provided that the following conditions are
+  met:
+    * Redistributions of source code must retain the above copyright
+      notice, this list of conditions and the following disclaimer.
+    * Redistributions in binary form must reproduce the above
+      copyright notice, this list of conditions and the following
+      disclaimer in the documentation and/or other materials provided
+      with the distribution.
+    * Neither the name of The Linux Foundation nor the names of its
+      contributors may be used to endorse or promote products derived
+      from this software without specific prior written permission.
+
+  THIS SOFTWARE IS PROVIDED "AS IS" AND ANY EXPRESS OR IMPLIED
+  WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
+  MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT
+  ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS
+  BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
+  CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
+  SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
+  BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
+  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE
+  OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN
+  IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+-->
+
+<!-- The attributes in this XML file provide configuration information -->
+<!-- for the Account Manager. -->
+
+<account-authenticator xmlns:android="http://schemas.android.com/apk/res/android"
+    android:accountType="@string/account_manager_type_gmail"
+    android:icon="@mipmap/ic_launcher_mail"
+    android:smallIcon="@drawable/ic_notification_mail_24dp"
+    android:label="@string/gmail_eas_name"
+    android:accountPreferences="@xml/account_preferences"
+/>
diff --git a/res/xml/authenticator_hotmail.xml b/res/xml/authenticator_hotmail.xml
new file mode 100644
index 000000000..b2647744e
--- /dev/null
+++ b/res/xml/authenticator_hotmail.xml
@@ -0,0 +1,40 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!--
+  Copyright (c) 2016, The Linux Foundation. All rights reserved.
+
+  Redistribution and use in source and binary forms, with or without
+  modification, are permitted provided that the following conditions are
+  met:
+    * Redistributions of source code must retain the above copyright
+      notice, this list of conditions and the following disclaimer.
+    * Redistributions in binary form must reproduce the above
+      copyright notice, this list of conditions and the following
+      disclaimer in the documentation and/or other materials provided
+      with the distribution.
+    * Neither the name of The Linux Foundation nor the names of its
+      contributors may be used to endorse or promote products derived
+      from this software without specific prior written permission.
+
+  THIS SOFTWARE IS PROVIDED "AS IS" AND ANY EXPRESS OR IMPLIED
+  WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
+  MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT
+  ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS
+  BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
+  CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
+  SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
+  BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
+  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE
+  OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN
+  IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+-->
+
+<!-- The attributes in this XML file provide configuration information -->
+<!-- for the Account Manager. -->
+
+<account-authenticator xmlns:android="http://schemas.android.com/apk/res/android"
+    android:accountType="@string/account_manager_type_hotmail"
+    android:icon="@mipmap/ic_launcher_mail"
+    android:smallIcon="@drawable/ic_notification_mail_24dp"
+    android:label="@string/hotmail_eas_name"
+    android:accountPreferences="@xml/account_preferences"
+/>
diff --git a/res/xml/authenticator_laposte.xml b/res/xml/authenticator_laposte.xml
new file mode 100644
index 000000000..75a2e72b2
--- /dev/null
+++ b/res/xml/authenticator_laposte.xml
@@ -0,0 +1,40 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!--
+  Copyright (c) 2016, The Linux Foundation. All rights reserved.
+
+  Redistribution and use in source and binary forms, with or without
+  modification, are permitted provided that the following conditions are
+  met:
+    * Redistributions of source code must retain the above copyright
+      notice, this list of conditions and the following disclaimer.
+    * Redistributions in binary form must reproduce the above
+      copyright notice, this list of conditions and the following
+      disclaimer in the documentation and/or other materials provided
+      with the distribution.
+    * Neither the name of The Linux Foundation nor the names of its
+      contributors may be used to endorse or promote products derived
+      from this software without specific prior written permission.
+
+  THIS SOFTWARE IS PROVIDED "AS IS" AND ANY EXPRESS OR IMPLIED
+  WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
+  MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT
+  ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS
+  BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
+  CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
+  SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
+  BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
+  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE
+  OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN
+  IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+-->
+
+<!-- The attributes in this XML file provide configuration information -->
+<!-- for the Account Manager. -->
+
+<account-authenticator xmlns:android="http://schemas.android.com/apk/res/android"
+    android:accountType="@string/account_manager_type_laposte"
+    android:icon="@mipmap/ic_launcher_mail"
+    android:smallIcon="@drawable/ic_notification_mail_24dp"
+    android:label="@string/laposte_eas_name"
+    android:accountPreferences="@xml/account_preferences"
+/>
diff --git a/res/xml/authenticator_legacy_email.xml b/res/xml/authenticator_legacy_email.xml
index 5f1b2122f..150fc4b0e 100644
--- a/res/xml/authenticator_legacy_email.xml
+++ b/res/xml/authenticator_legacy_email.xml
@@ -24,6 +24,6 @@
     android:accountType="com.android.email"
     android:icon="@mipmap/ic_launcher_mail"
     android:smallIcon="@drawable/ic_notification_mail_24dp"
-    android:label="@string/exchange_eas_name"
+    android:label="@string/imap_name"
     android:accountPreferences="@xml/account_preferences"
 />
diff --git a/res/xml/authenticator_mobistar.xml b/res/xml/authenticator_mobistar.xml
new file mode 100644
index 000000000..a3046ff5e
--- /dev/null
+++ b/res/xml/authenticator_mobistar.xml
@@ -0,0 +1,40 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!--
+  Copyright (c) 2016, The Linux Foundation. All rights reserved.
+
+  Redistribution and use in source and binary forms, with or without
+  modification, are permitted provided that the following conditions are
+  met:
+    * Redistributions of source code must retain the above copyright
+      notice, this list of conditions and the following disclaimer.
+    * Redistributions in binary form must reproduce the above
+      copyright notice, this list of conditions and the following
+      disclaimer in the documentation and/or other materials provided
+      with the distribution.
+    * Neither the name of The Linux Foundation nor the names of its
+      contributors may be used to endorse or promote products derived
+      from this software without specific prior written permission.
+
+  THIS SOFTWARE IS PROVIDED "AS IS" AND ANY EXPRESS OR IMPLIED
+  WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
+  MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT
+  ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS
+  BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
+  CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
+  SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
+  BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
+  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE
+  OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN
+  IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+-->
+
+<!-- The attributes in this XML file provide configuration information -->
+<!-- for the Account Manager. -->
+
+<account-authenticator xmlns:android="http://schemas.android.com/apk/res/android"
+    android:accountType="@string/account_manager_type_mobistar"
+    android:icon="@mipmap/ic_launcher_mail"
+    android:smallIcon="@drawable/ic_notification_mail_24dp"
+    android:label="@string/mobistar_eas_name"
+    android:accountPreferences="@xml/account_preferences"
+/>
diff --git a/res/xml/authenticator_multibox.xml b/res/xml/authenticator_multibox.xml
new file mode 100644
index 000000000..7915834f8
--- /dev/null
+++ b/res/xml/authenticator_multibox.xml
@@ -0,0 +1,40 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!--
+  Copyright (c) 2016, The Linux Foundation. All rights reserved.
+
+  Redistribution and use in source and binary forms, with or without
+  modification, are permitted provided that the following conditions are
+  met:
+    * Redistributions of source code must retain the above copyright
+      notice, this list of conditions and the following disclaimer.
+    * Redistributions in binary form must reproduce the above
+      copyright notice, this list of conditions and the following
+      disclaimer in the documentation and/or other materials provided
+      with the distribution.
+    * Neither the name of The Linux Foundation nor the names of its
+      contributors may be used to endorse or promote products derived
+      from this software without specific prior written permission.
+
+  THIS SOFTWARE IS PROVIDED "AS IS" AND ANY EXPRESS OR IMPLIED
+  WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
+  MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT
+  ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS
+  BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
+  CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
+  SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
+  BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
+  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE
+  OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN
+  IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+-->
+
+<!-- The attributes in this XML file provide configuration information -->
+<!-- for the Account Manager. -->
+
+<account-authenticator xmlns:android="http://schemas.android.com/apk/res/android"
+    android:accountType="@string/account_manager_type_multibox"
+    android:icon="@mipmap/ic_launcher_mail"
+    android:smallIcon="@drawable/ic_notification_mail_24dp"
+    android:label="@string/multibox_eas_name"
+    android:accountPreferences="@xml/account_preferences"
+/>
diff --git a/res/xml/authenticator_netcabo.xml b/res/xml/authenticator_netcabo.xml
new file mode 100644
index 000000000..a5569ff30
--- /dev/null
+++ b/res/xml/authenticator_netcabo.xml
@@ -0,0 +1,40 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!--
+  Copyright (c) 2016, The Linux Foundation. All rights reserved.
+
+  Redistribution and use in source and binary forms, with or without
+  modification, are permitted provided that the following conditions are
+  met:
+    * Redistributions of source code must retain the above copyright
+      notice, this list of conditions and the following disclaimer.
+    * Redistributions in binary form must reproduce the above
+      copyright notice, this list of conditions and the following
+      disclaimer in the documentation and/or other materials provided
+      with the distribution.
+    * Neither the name of The Linux Foundation nor the names of its
+      contributors may be used to endorse or promote products derived
+      from this software without specific prior written permission.
+
+  THIS SOFTWARE IS PROVIDED "AS IS" AND ANY EXPRESS OR IMPLIED
+  WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
+  MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT
+  ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS
+  BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
+  CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
+  SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
+  BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
+  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE
+  OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN
+  IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+-->
+
+<!-- The attributes in this XML file provide configuration information -->
+<!-- for the Account Manager. -->
+
+<account-authenticator xmlns:android="http://schemas.android.com/apk/res/android"
+    android:accountType="@string/account_manager_type_netcabo"
+    android:icon="@mipmap/ic_launcher_mail"
+    android:smallIcon="@drawable/ic_notification_mail_24dp"
+    android:label="@string/netcabo_eas_name"
+    android:accountPreferences="@xml/account_preferences"
+/>
diff --git a/res/xml/authenticator_noos.xml b/res/xml/authenticator_noos.xml
new file mode 100644
index 000000000..aa59ac35b
--- /dev/null
+++ b/res/xml/authenticator_noos.xml
@@ -0,0 +1,40 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!--
+  Copyright (c) 2016, The Linux Foundation. All rights reserved.
+
+  Redistribution and use in source and binary forms, with or without
+  modification, are permitted provided that the following conditions are
+  met:
+    * Redistributions of source code must retain the above copyright
+      notice, this list of conditions and the following disclaimer.
+    * Redistributions in binary form must reproduce the above
+      copyright notice, this list of conditions and the following
+      disclaimer in the documentation and/or other materials provided
+      with the distribution.
+    * Neither the name of The Linux Foundation nor the names of its
+      contributors may be used to endorse or promote products derived
+      from this software without specific prior written permission.
+
+  THIS SOFTWARE IS PROVIDED "AS IS" AND ANY EXPRESS OR IMPLIED
+  WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
+  MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT
+  ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS
+  BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
+  CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
+  SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
+  BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
+  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE
+  OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN
+  IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+-->
+
+<!-- The attributes in this XML file provide configuration information -->
+<!-- for the Account Manager. -->
+
+<account-authenticator xmlns:android="http://schemas.android.com/apk/res/android"
+    android:accountType="@string/account_manager_type_noos"
+    android:icon="@mipmap/ic_launcher_mail"
+    android:smallIcon="@drawable/ic_notification_mail_24dp"
+    android:label="@string/noos_eas_name"
+    android:accountPreferences="@xml/account_preferences"
+/>
diff --git a/res/xml/authenticator_orange.xml b/res/xml/authenticator_orange.xml
new file mode 100644
index 000000000..64a7c1842
--- /dev/null
+++ b/res/xml/authenticator_orange.xml
@@ -0,0 +1,40 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!--
+  Copyright (c) 2016, The Linux Foundation. All rights reserved.
+
+  Redistribution and use in source and binary forms, with or without
+  modification, are permitted provided that the following conditions are
+  met:
+    * Redistributions of source code must retain the above copyright
+      notice, this list of conditions and the following disclaimer.
+    * Redistributions in binary form must reproduce the above
+      copyright notice, this list of conditions and the following
+      disclaimer in the documentation and/or other materials provided
+      with the distribution.
+    * Neither the name of The Linux Foundation nor the names of its
+      contributors may be used to endorse or promote products derived
+      from this software without specific prior written permission.
+
+  THIS SOFTWARE IS PROVIDED "AS IS" AND ANY EXPRESS OR IMPLIED
+  WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
+  MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT
+  ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS
+  BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
+  CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
+  SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
+  BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
+  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE
+  OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN
+  IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+-->
+
+<!-- The attributes in this XML file provide configuration information -->
+<!-- for the Account Manager. -->
+
+<account-authenticator xmlns:android="http://schemas.android.com/apk/res/android"
+    android:accountType="@string/account_manager_type_orange"
+    android:icon="@mipmap/ic_launcher_mail"
+    android:smallIcon="@drawable/ic_notification_mail_24dp"
+    android:label="@string/orange_eas_name"
+    android:accountPreferences="@xml/account_preferences"
+/>
diff --git a/res/xml/authenticator_orangemail.xml b/res/xml/authenticator_orangemail.xml
new file mode 100644
index 000000000..2358e81b0
--- /dev/null
+++ b/res/xml/authenticator_orangemail.xml
@@ -0,0 +1,40 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!--
+  Copyright (c) 2016, The Linux Foundation. All rights reserved.
+
+  Redistribution and use in source and binary forms, with or without
+  modification, are permitted provided that the following conditions are
+  met:
+    * Redistributions of source code must retain the above copyright
+      notice, this list of conditions and the following disclaimer.
+    * Redistributions in binary form must reproduce the above
+      copyright notice, this list of conditions and the following
+      disclaimer in the documentation and/or other materials provided
+      with the distribution.
+    * Neither the name of The Linux Foundation nor the names of its
+      contributors may be used to endorse or promote products derived
+      from this software without specific prior written permission.
+
+  THIS SOFTWARE IS PROVIDED "AS IS" AND ANY EXPRESS OR IMPLIED
+  WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
+  MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT
+  ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS
+  BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
+  CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
+  SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
+  BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
+  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE
+  OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN
+  IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+-->
+
+<!-- The attributes in this XML file provide configuration information -->
+<!-- for the Account Manager. -->
+
+<account-authenticator xmlns:android="http://schemas.android.com/apk/res/android"
+    android:accountType="@string/account_manager_type_orangemail"
+    android:icon="@mipmap/ic_launcher_mail"
+    android:smallIcon="@drawable/ic_notification_mail_24dp"
+    android:label="@string/orangemail_eas_name"
+    android:accountPreferences="@xml/account_preferences"
+/>
diff --git a/res/xml/authenticator_orangemobile.xml b/res/xml/authenticator_orangemobile.xml
new file mode 100644
index 000000000..f918103f4
--- /dev/null
+++ b/res/xml/authenticator_orangemobile.xml
@@ -0,0 +1,40 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!--
+  Copyright (c) 2016, The Linux Foundation. All rights reserved.
+
+  Redistribution and use in source and binary forms, with or without
+  modification, are permitted provided that the following conditions are
+  met:
+    * Redistributions of source code must retain the above copyright
+      notice, this list of conditions and the following disclaimer.
+    * Redistributions in binary form must reproduce the above
+      copyright notice, this list of conditions and the following
+      disclaimer in the documentation and/or other materials provided
+      with the distribution.
+    * Neither the name of The Linux Foundation nor the names of its
+      contributors may be used to endorse or promote products derived
+      from this software without specific prior written permission.
+
+  THIS SOFTWARE IS PROVIDED "AS IS" AND ANY EXPRESS OR IMPLIED
+  WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
+  MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT
+  ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS
+  BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
+  CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
+  SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
+  BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
+  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE
+  OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN
+  IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+-->
+
+<!-- The attributes in this XML file provide configuration information -->
+<!-- for the Account Manager. -->
+
+<account-authenticator xmlns:android="http://schemas.android.com/apk/res/android"
+    android:accountType="@string/account_manager_type_orangemobile"
+    android:icon="@mipmap/ic_launcher_mail"
+    android:smallIcon="@drawable/ic_notification_mail_24dp"
+    android:label="@string/orangemobile_eas_name"
+    android:accountPreferences="@xml/account_preferences"
+/>
diff --git a/res/xml/authenticator_outlook.xml b/res/xml/authenticator_outlook.xml
new file mode 100644
index 000000000..474a3adf2
--- /dev/null
+++ b/res/xml/authenticator_outlook.xml
@@ -0,0 +1,40 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!--
+  Copyright (c) 2016, The Linux Foundation. All rights reserved.
+
+  Redistribution and use in source and binary forms, with or without
+  modification, are permitted provided that the following conditions are
+  met:
+    * Redistributions of source code must retain the above copyright
+      notice, this list of conditions and the following disclaimer.
+    * Redistributions in binary form must reproduce the above
+      copyright notice, this list of conditions and the following
+      disclaimer in the documentation and/or other materials provided
+      with the distribution.
+    * Neither the name of The Linux Foundation nor the names of its
+      contributors may be used to endorse or promote products derived
+      from this software without specific prior written permission.
+
+  THIS SOFTWARE IS PROVIDED "AS IS" AND ANY EXPRESS OR IMPLIED
+  WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
+  MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT
+  ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS
+  BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
+  CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
+  SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
+  BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
+  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE
+  OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN
+  IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+-->
+
+<!-- The attributes in this XML file provide configuration information -->
+<!-- for the Account Manager. -->
+
+<account-authenticator xmlns:android="http://schemas.android.com/apk/res/android"
+    android:accountType="@string/account_manager_type_outlook"
+    android:icon="@mipmap/ic_launcher_mail"
+    android:smallIcon="@drawable/ic_notification_mail_24dp"
+    android:label="@string/outlook_eas_name"
+    android:accountPreferences="@xml/account_preferences"
+/>
diff --git a/res/xml/authenticator_sapo.xml b/res/xml/authenticator_sapo.xml
new file mode 100644
index 000000000..5b870c60e
--- /dev/null
+++ b/res/xml/authenticator_sapo.xml
@@ -0,0 +1,40 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!--
+  Copyright (c) 2016, The Linux Foundation. All rights reserved.
+
+  Redistribution and use in source and binary forms, with or without
+  modification, are permitted provided that the following conditions are
+  met:
+    * Redistributions of source code must retain the above copyright
+      notice, this list of conditions and the following disclaimer.
+    * Redistributions in binary form must reproduce the above
+      copyright notice, this list of conditions and the following
+      disclaimer in the documentation and/or other materials provided
+      with the distribution.
+    * Neither the name of The Linux Foundation nor the names of its
+      contributors may be used to endorse or promote products derived
+      from this software without specific prior written permission.
+
+  THIS SOFTWARE IS PROVIDED "AS IS" AND ANY EXPRESS OR IMPLIED
+  WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
+  MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT
+  ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS
+  BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
+  CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
+  SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
+  BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
+  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE
+  OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN
+  IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+-->
+
+<!-- The attributes in this XML file provide configuration information -->
+<!-- for the Account Manager. -->
+
+<account-authenticator xmlns:android="http://schemas.android.com/apk/res/android"
+    android:accountType="@string/account_manager_type_sapo"
+    android:icon="@mipmap/ic_launcher_mail"
+    android:smallIcon="@drawable/ic_notification_mail_24dp"
+    android:label="@string/sapo_eas_name"
+    android:accountPreferences="@xml/account_preferences"
+/>
diff --git a/res/xml/authenticator_scarlet.xml b/res/xml/authenticator_scarlet.xml
new file mode 100644
index 000000000..1962d1b6c
--- /dev/null
+++ b/res/xml/authenticator_scarlet.xml
@@ -0,0 +1,40 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!--
+  Copyright (c) 2016, The Linux Foundation. All rights reserved.
+
+  Redistribution and use in source and binary forms, with or without
+  modification, are permitted provided that the following conditions are
+  met:
+    * Redistributions of source code must retain the above copyright
+      notice, this list of conditions and the following disclaimer.
+    * Redistributions in binary form must reproduce the above
+      copyright notice, this list of conditions and the following
+      disclaimer in the documentation and/or other materials provided
+      with the distribution.
+    * Neither the name of The Linux Foundation nor the names of its
+      contributors may be used to endorse or promote products derived
+      from this software without specific prior written permission.
+
+  THIS SOFTWARE IS PROVIDED "AS IS" AND ANY EXPRESS OR IMPLIED
+  WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
+  MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT
+  ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS
+  BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
+  CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
+  SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
+  BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
+  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE
+  OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN
+  IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+-->
+
+<!-- The attributes in this XML file provide configuration information -->
+<!-- for the Account Manager. -->
+
+<account-authenticator xmlns:android="http://schemas.android.com/apk/res/android"
+    android:accountType="@string/account_manager_type_scarlet"
+    android:icon="@mipmap/ic_launcher_mail"
+    android:smallIcon="@drawable/ic_notification_mail_24dp"
+    android:label="@string/scarlet_eas_name"
+    android:accountPreferences="@xml/account_preferences"
+/>
diff --git a/res/xml/authenticator_sfr.xml b/res/xml/authenticator_sfr.xml
new file mode 100644
index 000000000..341ec9418
--- /dev/null
+++ b/res/xml/authenticator_sfr.xml
@@ -0,0 +1,40 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!--
+  Copyright (c) 2016, The Linux Foundation. All rights reserved.
+
+  Redistribution and use in source and binary forms, with or without
+  modification, are permitted provided that the following conditions are
+  met:
+    * Redistributions of source code must retain the above copyright
+      notice, this list of conditions and the following disclaimer.
+    * Redistributions in binary form must reproduce the above
+      copyright notice, this list of conditions and the following
+      disclaimer in the documentation and/or other materials provided
+      with the distribution.
+    * Neither the name of The Linux Foundation nor the names of its
+      contributors may be used to endorse or promote products derived
+      from this software without specific prior written permission.
+
+  THIS SOFTWARE IS PROVIDED "AS IS" AND ANY EXPRESS OR IMPLIED
+  WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
+  MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT
+  ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS
+  BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
+  CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
+  SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
+  BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
+  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE
+  OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN
+  IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+-->
+
+<!-- The attributes in this XML file provide configuration information -->
+<!-- for the Account Manager. -->
+
+<account-authenticator xmlns:android="http://schemas.android.com/apk/res/android"
+    android:accountType="@string/account_manager_type_sfr"
+    android:icon="@mipmap/ic_launcher_mail"
+    android:smallIcon="@drawable/ic_notification_mail_24dp"
+    android:label="@string/sfr_eas_name"
+    android:accountPreferences="@xml/account_preferences"
+/>
diff --git a/res/xml/authenticator_skynet.xml b/res/xml/authenticator_skynet.xml
new file mode 100644
index 000000000..bc6b568aa
--- /dev/null
+++ b/res/xml/authenticator_skynet.xml
@@ -0,0 +1,40 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!--
+  Copyright (c) 2016, The Linux Foundation. All rights reserved.
+
+  Redistribution and use in source and binary forms, with or without
+  modification, are permitted provided that the following conditions are
+  met:
+    * Redistributions of source code must retain the above copyright
+      notice, this list of conditions and the following disclaimer.
+    * Redistributions in binary form must reproduce the above
+      copyright notice, this list of conditions and the following
+      disclaimer in the documentation and/or other materials provided
+      with the distribution.
+    * Neither the name of The Linux Foundation nor the names of its
+      contributors may be used to endorse or promote products derived
+      from this software without specific prior written permission.
+
+  THIS SOFTWARE IS PROVIDED "AS IS" AND ANY EXPRESS OR IMPLIED
+  WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
+  MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT
+  ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS
+  BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
+  CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
+  SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
+  BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
+  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE
+  OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN
+  IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+-->
+
+<!-- The attributes in this XML file provide configuration information -->
+<!-- for the Account Manager. -->
+
+<account-authenticator xmlns:android="http://schemas.android.com/apk/res/android"
+    android:accountType="@string/account_manager_type_skynet"
+    android:icon="@mipmap/ic_launcher_mail"
+    android:smallIcon="@drawable/ic_notification_mail_24dp"
+    android:label="@string/skynet_eas_name"
+    android:accountPreferences="@xml/account_preferences"
+/>
diff --git a/res/xml/authenticator_swing.xml b/res/xml/authenticator_swing.xml
new file mode 100644
index 000000000..786eae4cd
--- /dev/null
+++ b/res/xml/authenticator_swing.xml
@@ -0,0 +1,40 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!--
+  Copyright (c) 2016, The Linux Foundation. All rights reserved.
+
+  Redistribution and use in source and binary forms, with or without
+  modification, are permitted provided that the following conditions are
+  met:
+    * Redistributions of source code must retain the above copyright
+      notice, this list of conditions and the following disclaimer.
+    * Redistributions in binary form must reproduce the above
+      copyright notice, this list of conditions and the following
+      disclaimer in the documentation and/or other materials provided
+      with the distribution.
+    * Neither the name of The Linux Foundation nor the names of its
+      contributors may be used to endorse or promote products derived
+      from this software without specific prior written permission.
+
+  THIS SOFTWARE IS PROVIDED "AS IS" AND ANY EXPRESS OR IMPLIED
+  WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
+  MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT
+  ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS
+  BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
+  CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
+  SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
+  BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
+  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE
+  OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN
+  IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+-->
+
+<!-- The attributes in this XML file provide configuration information -->
+<!-- for the Account Manager. -->
+
+<account-authenticator xmlns:android="http://schemas.android.com/apk/res/android"
+    android:accountType="@string/account_manager_type_swing"
+    android:icon="@mipmap/ic_launcher_mail"
+    android:smallIcon="@drawable/ic_notification_mail_24dp"
+    android:label="@string/swing_eas_name"
+    android:accountPreferences="@xml/account_preferences"
+/>
diff --git a/res/xml/authenticator_tele2.xml b/res/xml/authenticator_tele2.xml
new file mode 100644
index 000000000..7a146dafd
--- /dev/null
+++ b/res/xml/authenticator_tele2.xml
@@ -0,0 +1,40 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!--
+  Copyright (c) 2016, The Linux Foundation. All rights reserved.
+
+  Redistribution and use in source and binary forms, with or without
+  modification, are permitted provided that the following conditions are
+  met:
+    * Redistributions of source code must retain the above copyright
+      notice, this list of conditions and the following disclaimer.
+    * Redistributions in binary form must reproduce the above
+      copyright notice, this list of conditions and the following
+      disclaimer in the documentation and/or other materials provided
+      with the distribution.
+    * Neither the name of The Linux Foundation nor the names of its
+      contributors may be used to endorse or promote products derived
+      from this software without specific prior written permission.
+
+  THIS SOFTWARE IS PROVIDED "AS IS" AND ANY EXPRESS OR IMPLIED
+  WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
+  MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT
+  ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS
+  BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
+  CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
+  SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
+  BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
+  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE
+  OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN
+  IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+-->
+
+<!-- The attributes in this XML file provide configuration information -->
+<!-- for the Account Manager. -->
+
+<account-authenticator xmlns:android="http://schemas.android.com/apk/res/android"
+    android:accountType="@string/account_manager_type_tele2"
+    android:icon="@mipmap/ic_launcher_mail"
+    android:smallIcon="@drawable/ic_notification_mail_24dp"
+    android:label="@string/tele2_eas_name"
+    android:accountPreferences="@xml/account_preferences"
+/>
diff --git a/res/xml/authenticator_teledisnet.xml b/res/xml/authenticator_teledisnet.xml
new file mode 100644
index 000000000..781561b3f
--- /dev/null
+++ b/res/xml/authenticator_teledisnet.xml
@@ -0,0 +1,40 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!--
+  Copyright (c) 2016, The Linux Foundation. All rights reserved.
+
+  Redistribution and use in source and binary forms, with or without
+  modification, are permitted provided that the following conditions are
+  met:
+    * Redistributions of source code must retain the above copyright
+      notice, this list of conditions and the following disclaimer.
+    * Redistributions in binary form must reproduce the above
+      copyright notice, this list of conditions and the following
+      disclaimer in the documentation and/or other materials provided
+      with the distribution.
+    * Neither the name of The Linux Foundation nor the names of its
+      contributors may be used to endorse or promote products derived
+      from this software without specific prior written permission.
+
+  THIS SOFTWARE IS PROVIDED "AS IS" AND ANY EXPRESS OR IMPLIED
+  WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
+  MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT
+  ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS
+  BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
+  CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
+  SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
+  BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
+  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE
+  OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN
+  IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+-->
+
+<!-- The attributes in this XML file provide configuration information -->
+<!-- for the Account Manager. -->
+
+<account-authenticator xmlns:android="http://schemas.android.com/apk/res/android"
+    android:accountType="@string/account_manager_type_teledisnet"
+    android:icon="@mipmap/ic_launcher_mail"
+    android:smallIcon="@drawable/ic_notification_mail_24dp"
+    android:label="@string/teledisnet_eas_name"
+    android:accountPreferences="@xml/account_preferences"
+/>
diff --git a/res/xml/authenticator_telenet.xml b/res/xml/authenticator_telenet.xml
new file mode 100644
index 000000000..d9c637627
--- /dev/null
+++ b/res/xml/authenticator_telenet.xml
@@ -0,0 +1,40 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!--
+  Copyright (c) 2016, The Linux Foundation. All rights reserved.
+
+  Redistribution and use in source and binary forms, with or without
+  modification, are permitted provided that the following conditions are
+  met:
+    * Redistributions of source code must retain the above copyright
+      notice, this list of conditions and the following disclaimer.
+    * Redistributions in binary form must reproduce the above
+      copyright notice, this list of conditions and the following
+      disclaimer in the documentation and/or other materials provided
+      with the distribution.
+    * Neither the name of The Linux Foundation nor the names of its
+      contributors may be used to endorse or promote products derived
+      from this software without specific prior written permission.
+
+  THIS SOFTWARE IS PROVIDED "AS IS" AND ANY EXPRESS OR IMPLIED
+  WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
+  MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT
+  ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS
+  BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
+  CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
+  SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
+  BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
+  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE
+  OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN
+  IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+-->
+
+<!-- The attributes in this XML file provide configuration information -->
+<!-- for the Account Manager. -->
+
+<account-authenticator xmlns:android="http://schemas.android.com/apk/res/android"
+    android:accountType="@string/account_manager_type_telenet"
+    android:icon="@mipmap/ic_launcher_mail"
+    android:smallIcon="@drawable/ic_notification_mail_24dp"
+    android:label="@string/telenet_eas_name"
+    android:accountPreferences="@xml/account_preferences"
+/>
diff --git a/res/xml/authenticator_tiscali.xml b/res/xml/authenticator_tiscali.xml
new file mode 100644
index 000000000..80935507b
--- /dev/null
+++ b/res/xml/authenticator_tiscali.xml
@@ -0,0 +1,40 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!--
+  Copyright (c) 2016, The Linux Foundation. All rights reserved.
+
+  Redistribution and use in source and binary forms, with or without
+  modification, are permitted provided that the following conditions are
+  met:
+    * Redistributions of source code must retain the above copyright
+      notice, this list of conditions and the following disclaimer.
+    * Redistributions in binary form must reproduce the above
+      copyright notice, this list of conditions and the following
+      disclaimer in the documentation and/or other materials provided
+      with the distribution.
+    * Neither the name of The Linux Foundation nor the names of its
+      contributors may be used to endorse or promote products derived
+      from this software without specific prior written permission.
+
+  THIS SOFTWARE IS PROVIDED "AS IS" AND ANY EXPRESS OR IMPLIED
+  WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
+  MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT
+  ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS
+  BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
+  CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
+  SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
+  BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
+  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE
+  OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN
+  IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+-->
+
+<!-- The attributes in this XML file provide configuration information -->
+<!-- for the Account Manager. -->
+
+<account-authenticator xmlns:android="http://schemas.android.com/apk/res/android"
+    android:accountType="@string/account_manager_type_tiscali"
+    android:icon="@mipmap/ic_launcher_mail"
+    android:smallIcon="@drawable/ic_notification_mail_24dp"
+    android:label="@string/tiscali_eas_name"
+    android:accountPreferences="@xml/account_preferences"
+/>
diff --git a/res/xml/authenticator_tvcablenet.xml b/res/xml/authenticator_tvcablenet.xml
new file mode 100644
index 000000000..368187545
--- /dev/null
+++ b/res/xml/authenticator_tvcablenet.xml
@@ -0,0 +1,40 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!--
+  Copyright (c) 2016, The Linux Foundation. All rights reserved.
+
+  Redistribution and use in source and binary forms, with or without
+  modification, are permitted provided that the following conditions are
+  met:
+    * Redistributions of source code must retain the above copyright
+      notice, this list of conditions and the following disclaimer.
+    * Redistributions in binary form must reproduce the above
+      copyright notice, this list of conditions and the following
+      disclaimer in the documentation and/or other materials provided
+      with the distribution.
+    * Neither the name of The Linux Foundation nor the names of its
+      contributors may be used to endorse or promote products derived
+      from this software without specific prior written permission.
+
+  THIS SOFTWARE IS PROVIDED "AS IS" AND ANY EXPRESS OR IMPLIED
+  WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
+  MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT
+  ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS
+  BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
+  CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
+  SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
+  BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
+  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE
+  OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN
+  IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+-->
+
+<!-- The attributes in this XML file provide configuration information -->
+<!-- for the Account Manager. -->
+
+<account-authenticator xmlns:android="http://schemas.android.com/apk/res/android"
+    android:accountType="@string/account_manager_type_tvcablenet"
+    android:icon="@mipmap/ic_launcher_mail"
+    android:smallIcon="@drawable/ic_notification_mail_24dp"
+    android:label="@string/tvcablenet_eas_name"
+    android:accountPreferences="@xml/account_preferences"
+/>
diff --git a/res/xml/authenticator_versatel.xml b/res/xml/authenticator_versatel.xml
new file mode 100644
index 000000000..9121d8e2b
--- /dev/null
+++ b/res/xml/authenticator_versatel.xml
@@ -0,0 +1,40 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!--
+  Copyright (c) 2016, The Linux Foundation. All rights reserved.
+
+  Redistribution and use in source and binary forms, with or without
+  modification, are permitted provided that the following conditions are
+  met:
+    * Redistributions of source code must retain the above copyright
+      notice, this list of conditions and the following disclaimer.
+    * Redistributions in binary form must reproduce the above
+      copyright notice, this list of conditions and the following
+      disclaimer in the documentation and/or other materials provided
+      with the distribution.
+    * Neither the name of The Linux Foundation nor the names of its
+      contributors may be used to endorse or promote products derived
+      from this software without specific prior written permission.
+
+  THIS SOFTWARE IS PROVIDED "AS IS" AND ANY EXPRESS OR IMPLIED
+  WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
+  MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT
+  ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS
+  BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
+  CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
+  SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
+  BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
+  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE
+  OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN
+  IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+-->
+
+<!-- The attributes in this XML file provide configuration information -->
+<!-- for the Account Manager. -->
+
+<account-authenticator xmlns:android="http://schemas.android.com/apk/res/android"
+    android:accountType="@string/account_manager_type_versatel"
+    android:icon="@mipmap/ic_launcher_mail"
+    android:smallIcon="@drawable/ic_notification_mail_24dp"
+    android:label="@string/versatel_eas_name"
+    android:accountPreferences="@xml/account_preferences"
+/>
diff --git a/res/xml/authenticator_versatelasdl.xml b/res/xml/authenticator_versatelasdl.xml
new file mode 100644
index 000000000..72d785a82
--- /dev/null
+++ b/res/xml/authenticator_versatelasdl.xml
@@ -0,0 +1,40 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!--
+  Copyright (c) 2016, The Linux Foundation. All rights reserved.
+
+  Redistribution and use in source and binary forms, with or without
+  modification, are permitted provided that the following conditions are
+  met:
+    * Redistributions of source code must retain the above copyright
+      notice, this list of conditions and the following disclaimer.
+    * Redistributions in binary form must reproduce the above
+      copyright notice, this list of conditions and the following
+      disclaimer in the documentation and/or other materials provided
+      with the distribution.
+    * Neither the name of The Linux Foundation nor the names of its
+      contributors may be used to endorse or promote products derived
+      from this software without specific prior written permission.
+
+  THIS SOFTWARE IS PROVIDED "AS IS" AND ANY EXPRESS OR IMPLIED
+  WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
+  MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT
+  ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS
+  BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
+  CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
+  SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
+  BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
+  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE
+  OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN
+  IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+-->
+
+<!-- The attributes in this XML file provide configuration information -->
+<!-- for the Account Manager. -->
+
+<account-authenticator xmlns:android="http://schemas.android.com/apk/res/android"
+    android:accountType="@string/account_manager_type_versatelasdl"
+    android:icon="@mipmap/ic_launcher_mail"
+    android:smallIcon="@drawable/ic_notification_mail_24dp"
+    android:label="@string/versatelasdl_eas_name"
+    android:accountPreferences="@xml/account_preferences"
+/>
diff --git a/res/xml/authenticator_vodafone.xml b/res/xml/authenticator_vodafone.xml
new file mode 100644
index 000000000..11862e6a9
--- /dev/null
+++ b/res/xml/authenticator_vodafone.xml
@@ -0,0 +1,40 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!--
+  Copyright (c) 2016, The Linux Foundation. All rights reserved.
+
+  Redistribution and use in source and binary forms, with or without
+  modification, are permitted provided that the following conditions are
+  met:
+    * Redistributions of source code must retain the above copyright
+      notice, this list of conditions and the following disclaimer.
+    * Redistributions in binary form must reproduce the above
+      copyright notice, this list of conditions and the following
+      disclaimer in the documentation and/or other materials provided
+      with the distribution.
+    * Neither the name of The Linux Foundation nor the names of its
+      contributors may be used to endorse or promote products derived
+      from this software without specific prior written permission.
+
+  THIS SOFTWARE IS PROVIDED "AS IS" AND ANY EXPRESS OR IMPLIED
+  WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
+  MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT
+  ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS
+  BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
+  CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
+  SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
+  BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
+  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE
+  OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN
+  IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+-->
+
+<!-- The attributes in this XML file provide configuration information -->
+<!-- for the Account Manager. -->
+
+<account-authenticator xmlns:android="http://schemas.android.com/apk/res/android"
+    android:accountType="@string/account_manager_type_vodafone"
+    android:icon="@mipmap/ic_launcher_mail"
+    android:smallIcon="@drawable/ic_notification_mail_24dp"
+    android:label="@string/vodafone_eas_name"
+    android:accountPreferences="@xml/account_preferences"
+/>
diff --git a/res/xml/authenticator_voo.xml b/res/xml/authenticator_voo.xml
new file mode 100644
index 000000000..12e4a9a4d
--- /dev/null
+++ b/res/xml/authenticator_voo.xml
@@ -0,0 +1,40 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!--
+  Copyright (c) 2016, The Linux Foundation. All rights reserved.
+
+  Redistribution and use in source and binary forms, with or without
+  modification, are permitted provided that the following conditions are
+  met:
+    * Redistributions of source code must retain the above copyright
+      notice, this list of conditions and the following disclaimer.
+    * Redistributions in binary form must reproduce the above
+      copyright notice, this list of conditions and the following
+      disclaimer in the documentation and/or other materials provided
+      with the distribution.
+    * Neither the name of The Linux Foundation nor the names of its
+      contributors may be used to endorse or promote products derived
+      from this software without specific prior written permission.
+
+  THIS SOFTWARE IS PROVIDED "AS IS" AND ANY EXPRESS OR IMPLIED
+  WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
+  MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT
+  ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS
+  BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
+  CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
+  SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
+  BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
+  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE
+  OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN
+  IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+-->
+
+<!-- The attributes in this XML file provide configuration information -->
+<!-- for the Account Manager. -->
+
+<account-authenticator xmlns:android="http://schemas.android.com/apk/res/android"
+    android:accountType="@string/account_manager_type_voo"
+    android:icon="@mipmap/ic_launcher_mail"
+    android:smallIcon="@drawable/ic_notification_mail_24dp"
+    android:label="@string/voo_eas_name"
+    android:accountPreferences="@xml/account_preferences"
+/>
diff --git a/res/xml/authenticator_wanadoo.xml b/res/xml/authenticator_wanadoo.xml
new file mode 100644
index 000000000..67524b389
--- /dev/null
+++ b/res/xml/authenticator_wanadoo.xml
@@ -0,0 +1,40 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!--
+  Copyright (c) 2016, The Linux Foundation. All rights reserved.
+
+  Redistribution and use in source and binary forms, with or without
+  modification, are permitted provided that the following conditions are
+  met:
+    * Redistributions of source code must retain the above copyright
+      notice, this list of conditions and the following disclaimer.
+    * Redistributions in binary form must reproduce the above
+      copyright notice, this list of conditions and the following
+      disclaimer in the documentation and/or other materials provided
+      with the distribution.
+    * Neither the name of The Linux Foundation nor the names of its
+      contributors may be used to endorse or promote products derived
+      from this software without specific prior written permission.
+
+  THIS SOFTWARE IS PROVIDED "AS IS" AND ANY EXPRESS OR IMPLIED
+  WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
+  MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT
+  ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS
+  BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
+  CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
+  SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
+  BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
+  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE
+  OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN
+  IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+-->
+
+<!-- The attributes in this XML file provide configuration information -->
+<!-- for the Account Manager. -->
+
+<account-authenticator xmlns:android="http://schemas.android.com/apk/res/android"
+    android:accountType="@string/account_manager_type_wanadoo"
+    android:icon="@mipmap/ic_launcher_mail"
+    android:smallIcon="@drawable/ic_notification_mail_24dp"
+    android:label="@string/wanadoo_eas_name"
+    android:accountPreferences="@xml/account_preferences"
+/>
diff --git a/res/xml/authenticator_yahoo.xml b/res/xml/authenticator_yahoo.xml
new file mode 100644
index 000000000..fb2a9f95d
--- /dev/null
+++ b/res/xml/authenticator_yahoo.xml
@@ -0,0 +1,40 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!--
+  Copyright (c) 2016, The Linux Foundation. All rights reserved.
+
+  Redistribution and use in source and binary forms, with or without
+  modification, are permitted provided that the following conditions are
+  met:
+    * Redistributions of source code must retain the above copyright
+      notice, this list of conditions and the following disclaimer.
+    * Redistributions in binary form must reproduce the above
+      copyright notice, this list of conditions and the following
+      disclaimer in the documentation and/or other materials provided
+      with the distribution.
+    * Neither the name of The Linux Foundation nor the names of its
+      contributors may be used to endorse or promote products derived
+      from this software without specific prior written permission.
+
+  THIS SOFTWARE IS PROVIDED "AS IS" AND ANY EXPRESS OR IMPLIED
+  WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
+  MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT
+  ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS
+  BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
+  CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
+  SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
+  BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
+  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE
+  OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN
+  IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+-->
+
+<!-- The attributes in this XML file provide configuration information -->
+<!-- for the Account Manager. -->
+
+<account-authenticator xmlns:android="http://schemas.android.com/apk/res/android"
+    android:accountType="@string/account_manager_type_yahoo"
+    android:icon="@mipmap/ic_launcher_mail"
+    android:smallIcon="@drawable/ic_notification_mail_24dp"
+    android:label="@string/yahoo_eas_name"
+    android:accountPreferences="@xml/account_preferences"
+/>
diff --git a/res/xml/mailbox_notifications_preferences.xml b/res/xml/mailbox_notifications_preferences.xml
new file mode 100644
index 000000000..1b20888db
--- /dev/null
+++ b/res/xml/mailbox_notifications_preferences.xml
@@ -0,0 +1,42 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!-- Copyright (C) 2015 The CyanogenMod Project
+
+     Licensed under the Apache License, Version 2.0 (the "License");
+     you may not use this file except in compliance with the License.
+     You may obtain a copy of the License at
+
+          http://www.apache.org/licenses/LICENSE-2.0
+
+     Unless required by applicable law or agreed to in writing, software
+     distributed under the License is distributed on an "AS IS" BASIS,
+     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+     See the License for the specific language governing permissions and
+     limitations under the License.
+-->
+
+<PreferenceScreen xmlns:android="http://schemas.android.com/apk/res/android">
+
+    <CheckBoxPreference
+        android:key="notifications-enabled"
+        android:title="@string/account_settings_notify_label"
+        android:defaultValue="true"
+        android:summary="@string/account_settings_notify_summary" />
+
+    <Preference
+        android:key="notification-ringtone"
+        android:dependency="notifications-enabled"
+        android:title="@string/account_settings_ringtone" />
+
+    <CheckBoxPreference
+        android:key="notification-vibrate"
+        android:dependency="notifications-enabled"
+        android:defaultValue="false"
+        android:title="@string/label_notification_vibrate_title" />
+
+    <com.android.mail.preferences.notifications.FolderNotificationLightPreference
+        android:key="notification-lights"
+        android:dependency="notifications-enabled"
+        android:defaultValue=""
+        android:title="@string/label_notification_lights_title" />
+
+</PreferenceScreen>
diff --git a/res/xml/services.xml b/res/xml/services.xml
index 6059a6218..aaebd6c90 100644
--- a/res/xml/services.xml
+++ b/res/xml/services.xml
@@ -70,12 +70,12 @@
     <emailservice
         email:protocol="imap"
         email:name="@string/imap_name"
-        email:accountType="@string/account_manager_type_imap"
+        email:accountType="@string/account_manager_type_legacy_imap"
         email:serviceClass="com.android.email.service.ImapService"
         email:port="143"
         email:portSsl="993"
-        email:syncIntervalStrings="@array/account_settings_check_frequency_entries"
-        email:syncIntervals="@array/account_settings_check_frequency_values"
+        email:syncIntervalStrings="@array/account_settings_check_frequency_entries_push"
+        email:syncIntervals="@array/account_settings_check_frequency_values_push"
         email:defaultSyncInterval="mins15"
 
         email:offerTls="true"
@@ -87,6 +87,8 @@
         email:offerOAuth="true"
         email:offerLoadMore="true"
         email:offerMoveTo="true"
+        email:offerLookback="true"
+        email:defaultLookback="auto"
          />
     <emailservice
         email:protocol="@string/protocol_eas"
diff --git a/res/xml/syncadapter_legacy_imap.xml b/res/xml/syncadapter_legacy_imap.xml
index 6ad6ee140..09be31a6d 100644
--- a/res/xml/syncadapter_legacy_imap.xml
+++ b/res/xml/syncadapter_legacy_imap.xml
@@ -23,5 +23,6 @@
 <sync-adapter xmlns:android="http://schemas.android.com/apk/res/android"
     android:contentAuthority="@string/authority_email_provider"
     android:accountType="@string/account_manager_type_legacy_imap"
+    android:allowParallelSyncs="true"
     android:supportsUploading="true"
 />
diff --git a/src/com/android/email/EmailNotificationController.java b/src/com/android/email/EmailNotificationController.java
index e57b41833..2d22776d8 100644
--- a/src/com/android/email/EmailNotificationController.java
+++ b/src/com/android/email/EmailNotificationController.java
@@ -56,6 +56,7 @@ import com.android.mail.utils.NotificationUtils;
 
 import java.util.HashMap;
 import java.util.HashSet;
+import java.util.List;
 import java.util.Map;
 import java.util.Set;
 
@@ -213,9 +214,7 @@ public class EmailNotificationController implements NotificationController {
      */
 
     private static final int NOTIFICATION_DELAYED_MESSAGE = 0;
-    private static final long NOTIFICATION_DELAY = 15 * DateUtils.SECOND_IN_MILLIS;
-    // True if we're coalescing notification updates
-    private static boolean sNotificationDelayedMessagePending;
+    private static final long NOTIFICATION_DELAY = 2 * DateUtils.SECOND_IN_MILLIS;
     // True if accounts have changed and we need to refresh everything
     private static boolean sRefreshAllNeeded;
     // Set of accounts we need to regenerate notifications for
@@ -228,28 +227,30 @@ public class EmailNotificationController implements NotificationController {
             sNotificationThread = new NotificationThread();
             sNotificationHandler = new Handler(sNotificationThread.getLooper(),
                     new Handler.Callback() {
-                        @Override
-                        public boolean handleMessage(final android.os.Message message) {
-                            /**
-                             * To reduce spamming the notifications, we quiesce updates for a few
-                             * seconds to batch them up, then handle them here.
-                             */
-                            LogUtils.d(LOG_TAG, "Delayed notification processing");
-                            synchronized (sNotificationDelayedMessageLock) {
-                                sNotificationDelayedMessagePending = false;
-                                final Context context = (Context)message.obj;
-                                if (sRefreshAllNeeded) {
-                                    sRefreshAllNeeded = false;
-                                    refreshAllNotificationsInternal(context);
-                                }
+                @Override
+                public boolean handleMessage(final android.os.Message message) {
+                    /**
+                     * To reduce spamming the notifications, we quiesce updates for a few
+                     * seconds to batch them up, then handle them here.
+                     */
+                    if (message.arg1 != 0) {
+                        LogUtils.d(LOG_TAG, "Delayed notification processing");
+                        synchronized (sNotificationDelayedMessageLock) {
+                            final Context context = (Context)message.obj;
+                            if (sRefreshAllNeeded) {
+                                sRefreshAllNeeded = false;
+                                refreshAllNotificationsInternal(context);
+                            } else {
                                 for (final Long accountId : sRefreshAccountSet) {
                                     refreshNotificationsForAccountInternal(context, accountId);
                                 }
-                                sRefreshAccountSet.clear();
                             }
-                            return true;
+                            sRefreshAccountSet.clear();
                         }
-                    });
+                    }
+                    return true;
+                }
+            });
         }
     }
 
@@ -590,19 +591,32 @@ public class EmailNotificationController implements NotificationController {
         notificationManager.cancel((int) (NOTIFICATION_ID_BASE_SECURITY_CHANGED + account.mId));
     }
 
+    private static void scheduleNotificationUpdateLocked(final Context context,
+            boolean immediate) {
+        ensureHandlerExists();
+        android.os.Message msg = android.os.Message.obtain(sNotificationHandler,
+                NOTIFICATION_DELAYED_MESSAGE, 1, 0, context);
+        boolean isInDelayWindow = sNotificationHandler.hasMessages(NOTIFICATION_DELAYED_MESSAGE);
+
+        sNotificationHandler.removeMessages(NOTIFICATION_DELAYED_MESSAGE);
+        if (!immediate && isInDelayWindow) {
+            // we're in the delay window, restart timer
+            sNotificationHandler.sendMessageDelayed(msg, NOTIFICATION_DELAY);
+        } else {
+            // no refreshes happened in the last delay window; refresh immediately
+            // and send a dummy message to ensure the delay window is respected
+            // when the next update comes in
+            sNotificationHandler.sendMessage(msg);
+            sNotificationHandler.sendEmptyMessageDelayed(NOTIFICATION_DELAYED_MESSAGE,
+                    NOTIFICATION_DELAY);
+        }
+    }
+
     private static void refreshNotificationsForAccount(final Context context,
-            final long accountId) {
+            final long accountId, boolean immediate) {
         synchronized (sNotificationDelayedMessageLock) {
-            if (sNotificationDelayedMessagePending) {
-                sRefreshAccountSet.add(accountId);
-            } else {
-                ensureHandlerExists();
-                sNotificationHandler.sendMessageDelayed(
-                        android.os.Message.obtain(sNotificationHandler,
-                                NOTIFICATION_DELAYED_MESSAGE, context), NOTIFICATION_DELAY);
-                sNotificationDelayedMessagePending = true;
-                refreshNotificationsForAccountInternal(context, accountId);
-            }
+            sRefreshAccountSet.add(accountId);
+            scheduleNotificationUpdateLocked(context, immediate);
         }
     }
 
@@ -722,18 +736,10 @@ public class EmailNotificationController implements NotificationController {
                 account, folder, true /* getAttention */);
     }
 
-    private static void refreshAllNotifications(final Context context) {
+    private static void refreshAllNotifications(final Context context, boolean immediate) {
         synchronized (sNotificationDelayedMessageLock) {
-            if (sNotificationDelayedMessagePending) {
-                sRefreshAllNeeded = true;
-            } else {
-                ensureHandlerExists();
-                sNotificationHandler.sendMessageDelayed(
-                        android.os.Message.obtain(sNotificationHandler,
-                                NOTIFICATION_DELAYED_MESSAGE, context), NOTIFICATION_DELAY);
-                sNotificationDelayedMessagePending = true;
-                refreshAllNotificationsInternal(context);
-            }
+            sRefreshAllNeeded = true;
+            scheduleNotificationUpdateLocked(context, immediate);
         }
     }
 
@@ -757,8 +763,11 @@ public class EmailNotificationController implements NotificationController {
         }
 
         @Override
-        public void onChange(final boolean selfChange) {
-            refreshNotificationsForAccount(mContext, mAccountId);
+        public void onChange(final boolean selfChange, Uri uri) {
+            List<String> segments = uri != null ? uri.getPathSegments() : null;
+            boolean isDelete = segments != null && segments.size() >= 2
+                    ? EmailProvider.NOTIFICATION_OP_DELETE.equals(segments.get(1)) : false;
+            refreshNotificationsForAccount(mContext, mAccountId, isDelete);
         }
     }
 
@@ -774,7 +783,7 @@ public class EmailNotificationController implements NotificationController {
         }
 
         @Override
-        public void onChange(final boolean selfChange) {
+        public void onChange(final boolean selfChange, Uri uri) {
             final ContentResolver resolver = mContext.getContentResolver();
             final Cursor c = resolver.query(Account.CONTENT_URI, EmailContent.ID_PROJECTION,
                 null, null, null);
@@ -811,7 +820,7 @@ public class EmailNotificationController implements NotificationController {
                 sInstance.unregisterMessageNotification(accountId);
             }
 
-            refreshAllNotifications(mContext);
+            refreshAllNotifications(mContext, !removedAccountList.isEmpty());
         }
     }
 
diff --git a/src/com/android/email/activity/RequestPermissionsActivity.java b/src/com/android/email/activity/RequestPermissionsActivity.java
new file mode 100644
index 000000000..742eb4759
--- /dev/null
+++ b/src/com/android/email/activity/RequestPermissionsActivity.java
@@ -0,0 +1,63 @@
+/*
+ * Copyright (c) 2016, The Linux Foundation. All rights reserved.
+ * Not a Contribution.
+ *
+ * Copyright (C) 2015 The Android Open Source Project
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package com.android.email.activity;
+
+import android.Manifest.permission;
+import android.app.Activity;
+import com.android.email.R;
+
+/**
+ * Activity that requests permissions needed for activities exported from Contacts.
+ */
+public class RequestPermissionsActivity extends RequestPermissionsActivityBase {
+
+    private static final String[] REQUIRED_PERMISSIONS = new String[]{
+            permission.READ_CONTACTS, // Contacts group
+            permission.READ_EXTERNAL_STORAGE,
+            permission.WRITE_EXTERNAL_STORAGE,
+            permission.READ_CALENDAR, // Calendar group
+            permission.WRITE_CALENDAR, // Calendar group w
+            permission.GET_ACCOUNTS,
+            permission.READ_PHONE_STATE
+    };
+
+    @Override
+    protected String[] getRequiredPermissions() {
+        return REQUIRED_PERMISSIONS;
+    }
+
+    @Override
+    protected String[] getDesiredPermissions() {
+        return new String[]{
+                permission.READ_CONTACTS, // Contacts group
+                permission.READ_EXTERNAL_STORAGE,
+                permission.WRITE_EXTERNAL_STORAGE,
+                permission.READ_CALENDAR, // Calendar group
+                permission.WRITE_CALENDAR, // Calendar group w
+                permission.GET_ACCOUNTS,
+                permission.READ_PHONE_STATE
+       };
+    }
+
+    public static boolean startPermissionActivity(Activity activity) {
+        return startPermissionActivity(activity,
+                REQUIRED_PERMISSIONS,
+                RequestPermissionsActivity.class);
+    }
+}
diff --git a/src/com/android/email/activity/RequestPermissionsActivityBase.java b/src/com/android/email/activity/RequestPermissionsActivityBase.java
new file mode 100644
index 000000000..3933dfb68
--- /dev/null
+++ b/src/com/android/email/activity/RequestPermissionsActivityBase.java
@@ -0,0 +1,156 @@
+/*
+ * Copyright (c) 2016, The Linux Foundation. All rights reserved.
+ * Not a Contribution.
+ *
+ * Copyright (C) 2015 The Android Open Source Project
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package com.android.email.activity;
+
+
+import android.app.Activity;
+import android.content.Context;
+import android.content.Intent;
+import android.content.pm.PackageManager;
+import android.os.Bundle;
+import android.os.Trace;
+import android.widget.Toast;
+
+import com.android.email.R;
+import java.util.ArrayList;
+import java.util.Arrays;
+
+/**
+ * Activity that asks the user for all {@link #getDesiredPermissions} if any of
+ * {@link #getRequiredPermissions} are missing.
+ *
+ * NOTE: As a result of b/22095159, this can behave oddly in the case where the final permission
+ * you are requesting causes an application restart.
+ */
+public abstract class RequestPermissionsActivityBase extends Activity {
+    public static final String PREVIOUS_ACTIVITY_INTENT = "previous_intent";
+    private static final int PERMISSIONS_REQUEST_ALL_PERMISSIONS = 1;
+
+    /**
+     * @return list of permissions that are needed in order for {@link #PREVIOUS_ACTIVITY_INTENT} to
+     * operate. You only need to return a single permission per permission group you care about.
+     */
+    protected abstract String[] getRequiredPermissions();
+
+    /**
+     * @return list of permissions that would be useful for {@link #PREVIOUS_ACTIVITY_INTENT} to
+     * operate. You only need to return a single permission per permission group you care about.
+     */
+    protected abstract String[] getDesiredPermissions();
+
+    private Intent mPreviousActivityIntent;
+
+    @Override
+    protected void onCreate(Bundle savedInstanceState) {
+        super.onCreate(savedInstanceState);
+        mPreviousActivityIntent = (Intent) getIntent().getExtras().get(PREVIOUS_ACTIVITY_INTENT);
+
+        // Only start a requestPermissions() flow when first starting this activity the first time.
+        // The process is likely to be restarted during the permission flow (necessary to enable
+        // permissions) so this is important to track.
+        if (savedInstanceState == null) {
+            requestPermissions();
+        }
+    }
+
+    /**
+     * If any permissions the Contacts app needs are missing, open an Activity
+     * to prompt the user for these permissions. Moreover, finish the current activity.
+     *
+     * This is designed to be called inside {@link android.app.Activity#onCreate}
+     */
+    protected static boolean startPermissionActivity(Activity activity,
+            String[] requiredPermissions, Class<?> newActivityClass) {
+        if (!RequestPermissionsActivity.hasPermissions(activity, requiredPermissions)) {
+            final Intent intent = new Intent(activity,  newActivityClass);
+            intent.putExtra(PREVIOUS_ACTIVITY_INTENT, activity.getIntent());
+            activity.startActivity(intent);
+            activity.finish();
+            return true;
+        }
+        return false;
+    }
+
+    @Override
+    public void onRequestPermissionsResult(int requestCode, String permissions[],
+            int[] grantResults) {
+        if (permissions != null && permissions.length > 0
+                && isAllGranted(permissions, grantResults)) {
+            mPreviousActivityIntent.setFlags(Intent.FLAG_ACTIVITY_NO_ANIMATION);
+            startActivity(mPreviousActivityIntent);
+            finish();
+            overridePendingTransition(0, 0);
+        } else {
+            Toast.makeText(this, R.string.missing_required_permission, Toast.LENGTH_SHORT).show();
+            finish();
+        }
+    }
+
+    private boolean isAllGranted(String permissions[], int[] grantResult) {
+        for (int i = 0; i < permissions.length; i++) {
+            if (grantResult[i] != PackageManager.PERMISSION_GRANTED
+                    && isPermissionRequired(permissions[i])) {
+                return false;
+            }
+        }
+        return true;
+    }
+
+    private boolean isPermissionRequired(String p) {
+        return Arrays.asList(getRequiredPermissions()).contains(p);
+    }
+
+    private void requestPermissions() {
+        Trace.beginSection("requestPermissions");
+        try {
+            // Construct a list of missing permissions
+            final ArrayList<String> unsatisfiedPermissions = new ArrayList<>();
+            for (String permission : getDesiredPermissions()) {
+                if (checkSelfPermission(permission)
+                        != PackageManager.PERMISSION_GRANTED) {
+                    unsatisfiedPermissions.add(permission);
+                }
+            }
+            if (unsatisfiedPermissions.size() == 0) {
+                throw new RuntimeException("Request permission activity was called even"
+                        + " though all permissions are satisfied.");
+            }
+            requestPermissions(
+                    unsatisfiedPermissions.toArray(new String[unsatisfiedPermissions.size()]),
+                    PERMISSIONS_REQUEST_ALL_PERMISSIONS);
+        } finally {
+            Trace.endSection();
+        }
+    }
+
+    protected static boolean hasPermissions(Context context, String[] permissions) {
+        Trace.beginSection("hasPermission");
+        try {
+            for (String permission : permissions) {
+                if (context.checkSelfPermission(permission)
+                        != PackageManager.PERMISSION_GRANTED) {
+                    return false;
+                }
+            }
+            return true;
+        } finally {
+            Trace.endSection();
+        }
+    }
+}
diff --git a/src/com/android/email/activity/setup/AccountCheckSettingsFragment.java b/src/com/android/email/activity/setup/AccountCheckSettingsFragment.java
index 1806b50cf..65f8e3a17 100644
--- a/src/com/android/email/activity/setup/AccountCheckSettingsFragment.java
+++ b/src/com/android/email/activity/setup/AccountCheckSettingsFragment.java
@@ -347,6 +347,8 @@ public class AccountCheckSettingsFragment extends Fragment {
                     if (isCancelled()) return null;
                     LogUtils.d(Logging.LOG_TAG, "Begin auto-discover for %s", mCheckEmail);
                     publishProgress(STATE_CHECK_AUTODISCOVER);
+
+                    mSetupData.setAutodiscover(false);
                     final Store store = Store.getInstance(mAccount, mContext);
                     final Bundle result = store.autoDiscover(mContext, mCheckEmail, mCheckPassword);
                     // Result will be one of:
@@ -357,20 +359,21 @@ public class AccountCheckSettingsFragment extends Fragment {
                     if (result == null) {
                         return new AutoDiscoverResults(false, null);
                     }
-                    int errorCode =
-                            result.getInt(EmailServiceProxy.AUTO_DISCOVER_BUNDLE_ERROR_CODE);
+                    int errorCode = result.getInt(
+                            EmailServiceProxy.AUTO_DISCOVER_BUNDLE_MESSAGING_ERROR_CODE);
                     if (errorCode == MessagingException.AUTODISCOVER_AUTHENTICATION_FAILED) {
                         return new AutoDiscoverResults(true, null);
-                    } else if (errorCode != MessagingException.NO_ERROR) {
+                    } else if (errorCode != MessagingException.AUTODISCOVER_AUTHENTICATION_RESULT) {
                         return new AutoDiscoverResults(false, null);
                     } else {
                         final HostAuthCompat hostAuthCompat =
                             result.getParcelable(EmailServiceProxy.AUTO_DISCOVER_BUNDLE_HOST_AUTH);
-                        HostAuth serverInfo = null;
+                        Account account = mSetupData.getAccount();
                         if (hostAuthCompat != null) {
-                            serverInfo = hostAuthCompat.toHostAuth();
+                            account.mHostAuthRecv = hostAuthCompat.toHostAuth();
                         }
-                        return new AutoDiscoverResults(false, serverInfo);
+                        mSetupData.setAutodiscover(true);
+                        return new AutoDiscoverResults(false, account.mHostAuthRecv);
                     }
                 }
 
@@ -384,6 +387,10 @@ public class AccountCheckSettingsFragment extends Fragment {
                     if (bundle == null) {
                         return new MessagingException(MessagingException.UNSPECIFIED_EXCEPTION);
                     }
+
+                    // Save account protocol and capabilities
+                    mAccount.mCapabilities = bundle.getInt(
+                            EmailServiceProxy.SETTINGS_BUNDLE_CAPABILITIES, 0);
                     mAccount.mProtocolVersion = bundle.getString(
                             EmailServiceProxy.VALIDATE_BUNDLE_PROTOCOL_VERSION);
                     int resultCode = bundle.getInt(EmailServiceProxy.VALIDATE_BUNDLE_RESULT_CODE);
diff --git a/src/com/android/email/activity/setup/AccountCreationFragment.java b/src/com/android/email/activity/setup/AccountCreationFragment.java
index 1f0d685d7..6c7f354c9 100644
--- a/src/com/android/email/activity/setup/AccountCreationFragment.java
+++ b/src/com/android/email/activity/setup/AccountCreationFragment.java
@@ -189,7 +189,9 @@ public class AccountCreationFragment extends Fragment {
 
                     boolean createSuccess = false;
                     try {
-                        future.getResult();
+                        if (future != null) {
+                            future.getResult();
+                        }
                         createSuccess = true;
                     } catch (OperationCanceledException e) {
                         LogUtils.d(LogUtils.TAG, "addAccount was canceled");
diff --git a/src/com/android/email/activity/setup/AccountServerBaseFragment.java b/src/com/android/email/activity/setup/AccountServerBaseFragment.java
index 71fe9af71..179d5c4cb 100644
--- a/src/com/android/email/activity/setup/AccountServerBaseFragment.java
+++ b/src/com/android/email/activity/setup/AccountServerBaseFragment.java
@@ -242,6 +242,16 @@ public abstract class AccountServerBaseFragment extends AccountSetupFragment
         }
     }
 
+    void performNextSetupAction() {
+        mHandler.post(new Runnable() {
+            @Override
+            public void run() {
+                Callback callback = (Callback) getActivity();
+                callback.onNextButton();
+            }
+        });
+    }
+
     /**
      * Returns whether or not any settings have changed.
      */
diff --git a/src/com/android/email/activity/setup/AccountSettingsEditQuickResponsesFragment.java b/src/com/android/email/activity/setup/AccountSettingsEditQuickResponsesFragment.java
index 3a782caaa..f97a29645 100644
--- a/src/com/android/email/activity/setup/AccountSettingsEditQuickResponsesFragment.java
+++ b/src/com/android/email/activity/setup/AccountSettingsEditQuickResponsesFragment.java
@@ -143,6 +143,13 @@ public class AccountSettingsEditQuickResponsesFragment extends Fragment {
     public void onCreateOptionsMenu(Menu menu, MenuInflater inflater) {
         menu.clear();
         inflater.inflate(R.menu.quick_response_prefs_fragment_menu, menu);
+
+        MenuItem feedbackMenuItem = menu.findItem(R.id.feedback_menu_item);
+        Uri feedbackUri = Utils.getValidUri(getString(R.string.email_feedback_uri));
+
+        if (feedbackMenuItem != null) {
+            feedbackMenuItem.setVisible(!Uri.EMPTY.equals(feedbackUri));
+        }
     }
 
     @Override
diff --git a/src/com/android/email/activity/setup/AccountSettingsFragment.java b/src/com/android/email/activity/setup/AccountSettingsFragment.java
index 30c3d9cb3..55e0d4a13 100644
--- a/src/com/android/email/activity/setup/AccountSettingsFragment.java
+++ b/src/com/android/email/activity/setup/AccountSettingsFragment.java
@@ -16,11 +16,15 @@
 
 package com.android.email.activity.setup;
 
+import android.accounts.AccountManager;
 import android.app.Activity;
+import android.app.AlertDialog;
 import android.app.LoaderManager;
+import android.app.ProgressDialog;
 import android.content.ContentResolver;
 import android.content.ContentValues;
 import android.content.Context;
+import android.content.DialogInterface;
 import android.content.Intent;
 import android.content.Loader;
 import android.content.res.Resources;
@@ -28,7 +32,11 @@ import android.database.Cursor;
 import android.media.Ringtone;
 import android.media.RingtoneManager;
 import android.net.Uri;
+import android.os.AsyncTask;
 import android.os.Bundle;
+import android.os.Handler;
+import android.os.Handler.Callback;
+import android.os.Message;
 import android.os.Vibrator;
 import android.preference.CheckBoxPreference;
 import android.preference.EditTextPreference;
@@ -43,8 +51,13 @@ import android.provider.ContactsContract;
 import android.provider.Settings;
 import android.support.annotation.NonNull;
 import android.text.TextUtils;
+import android.util.Log;
 import android.view.Menu;
+import android.view.MenuItem;
 import android.view.MenuInflater;
+import android.view.MenuItem;
+import android.view.Window;
+import android.widget.Toast;
 
 import com.android.email.R;
 import com.android.email.SecurityPolicy;
@@ -57,19 +70,28 @@ import com.android.emailcommon.provider.EmailContent;
 import com.android.emailcommon.provider.EmailContent.AccountColumns;
 import com.android.emailcommon.provider.Mailbox;
 import com.android.emailcommon.provider.Policy;
+import com.android.emailcommon.service.EmailServiceProxy;
 import com.android.mail.preferences.AccountPreferences;
 import com.android.mail.preferences.FolderPreferences;
+import com.android.mail.preferences.FolderPreferences.NotificationLight;
+import com.android.mail.preferences.notifications.FolderNotificationLightPreference;
 import com.android.mail.providers.Folder;
 import com.android.mail.providers.UIProvider;
 import com.android.mail.ui.MailAsyncTaskLoader;
 import com.android.mail.ui.settings.MailAccountPrefsFragment;
+import com.android.mail.ui.settings.PublicPreferenceActivity;
 import com.android.mail.ui.settings.SettingsUtils;
 import com.android.mail.utils.ContentProviderTask.UpdateTask;
 import com.android.mail.utils.LogUtils;
 import com.android.mail.utils.NotificationUtils;
+import com.android.mail.utils.Utils;
+
+import org.lineageos.internal.notification.LightsCapabilities;
 
 import java.util.ArrayList;
+import java.util.Arrays;
 import java.util.HashMap;
+import java.util.List;
 import java.util.Map;
 
 /**
@@ -90,12 +112,16 @@ public class AccountSettingsFragment extends MailAccountPrefsFragment
     private static final String PREFERENCE_QUICK_RESPONSES = "account_quick_responses";
     private static final String PREFERENCE_FREQUENCY = "account_check_frequency";
     private static final String PREFERENCE_SYNC_WINDOW = "account_sync_window";
-    private static final String PREFERENCE_SYNC_SETTINGS = "account_sync_settings";
+    private static final String PREFERENCE_SYNC_SETTINGS = MailboxSettings.PREFERENCE_SYNC_SETTINGS;
     private static final String PREFERENCE_SYNC_EMAIL = "account_sync_email";
     private static final String PREFERENCE_SYNC_CONTACTS = "account_sync_contacts";
     private static final String PREFERENCE_SYNC_CALENDAR = "account_sync_calendar";
+    private static final String PREFERENCE_SYNC_SIZE_ENABLE = "account_sync_size_enable";
+    private static final String PREFERENCE_SYNC_SIZE = "account_sync_size";
     private static final String PREFERENCE_BACKGROUND_ATTACHMENTS =
             "account_background_attachments";
+    private static final String PREFERENCE_PER_FOLDER_NOTIFICATIONS =
+            MailboxSettings.PREFERENCE_PER_FOLDER_NOTIFICATIONS;
     private static final String PREFERENCE_CATEGORY_DATA_USAGE = "data_usage";
     private static final String PREFERENCE_CATEGORY_NOTIFICATIONS = "account_notifications";
     private static final String PREFERENCE_CATEGORY_SERVER = "account_servers";
@@ -118,16 +144,24 @@ public class AccountSettingsFragment extends MailAccountPrefsFragment
     // Request code to start different activities.
     private static final int RINGTONE_REQUEST_CODE = 0;
 
+    // Message codes
+    private static final int MSG_DELETE_ACCOUNT = 0;
+
     private EditTextPreference mAccountDescription;
     private EditTextPreference mAccountName;
     private EditTextPreference mAccountSignature;
     private ListPreference mCheckFrequency;
     private ListPreference mSyncWindow;
     private Preference mSyncSettings;
+    private CheckBoxPreference mSyncSizeEnable;
+    private ListPreference mSyncSize;
     private CheckBoxPreference mInboxVibrate;
     private Preference mInboxRingtone;
+    private FolderNotificationLightPreference mInboxLights;
+    private Preference mPerFolderNotification;
 
     private Context mContext;
+    private Handler mHandler;
 
     private Account mAccount;
     private com.android.mail.providers.Account mUiAccount;
@@ -136,6 +170,18 @@ public class AccountSettingsFragment extends MailAccountPrefsFragment
 
     private Ringtone mRingtone;
 
+    private MenuItem mDeleteAccountItem;
+
+    private final Callback mHandlerCallback = new Callback() {
+        @Override
+        public boolean handleMessage(Message msg) {
+            if (msg.what == MSG_DELETE_ACCOUNT) {
+                deleteAccount();
+            }
+            return false;
+        }
+    };
+
     /**
      * This may be null if the account exists but the inbox has not yet been created in the database
      * (waiting for initial sync)
@@ -176,6 +222,7 @@ public class AccountSettingsFragment extends MailAccountPrefsFragment
     @Override
     public void onCreate(Bundle savedInstanceState) {
         super.onCreate(savedInstanceState);
+        mHandler = new Handler(mHandlerCallback);
 
         setHasOptionsMenu(true);
 
@@ -207,10 +254,7 @@ public class AccountSettingsFragment extends MailAccountPrefsFragment
             final CharSequence [] syncIntervals =
                     savedInstanceState.getCharSequenceArray(SAVESTATE_SYNC_INTERVALS);
             mCheckFrequency = (ListPreference) findPreference(PREFERENCE_FREQUENCY);
-            if (mCheckFrequency != null) {
-                mCheckFrequency.setEntries(syncIntervalStrings);
-                mCheckFrequency.setEntryValues(syncIntervals);
-            }
+            fillCheckFrecuency(syncIntervalStrings, syncIntervals);
         }
     }
 
@@ -277,9 +321,10 @@ public class AccountSettingsFragment extends MailAccountPrefsFragment
     public boolean onPreferenceTreeClick(PreferenceScreen preferenceScreen,
             @NonNull Preference preference) {
         final String key = preference.getKey();
-        if (key.equals(PREFERENCE_SYNC_SETTINGS)) {
+        if (key.equals(PREFERENCE_SYNC_SETTINGS) ||
+                key.equals(PREFERENCE_PER_FOLDER_NOTIFICATIONS)) {
             startActivity(MailboxSettings.getIntent(getActivity(), mUiAccount.fullFolderListUri,
-                    mInboxFolder));
+                    mInboxFolder, key));
             return true;
         } else {
             return super.onPreferenceTreeClick(preferenceScreen, preference);
@@ -345,16 +390,15 @@ public class AccountSettingsFragment extends MailAccountPrefsFragment
                 final android.accounts.Account androidAcct = new android.accounts.Account(
                         mAccount.mEmailAddress, mServiceInfo.accountType);
                 if (Integer.parseInt(summary) == Account.CHECK_INTERVAL_NEVER) {
-                    // Disable syncing from the account manager. Leave the current sync frequency
-                    // in the database.
+                    // Disable syncing from the account manager.
                     ContentResolver.setSyncAutomatically(androidAcct, EmailContent.AUTHORITY,
                             false);
                 } else {
                     // Enable syncing from the account manager.
                     ContentResolver.setSyncAutomatically(androidAcct, EmailContent.AUTHORITY,
                             true);
-                    cv.put(AccountColumns.SYNC_INTERVAL, Integer.parseInt(summary));
                 }
+                cv.put(AccountColumns.SYNC_INTERVAL, Integer.parseInt(summary));
             }
         } else if (key.equals(PREFERENCE_SYNC_WINDOW)) {
             final String summary = newValue.toString();
@@ -380,6 +424,10 @@ public class AccountSettingsFragment extends MailAccountPrefsFragment
             ContentResolver.setSyncAutomatically(androidAcct, CalendarContract.AUTHORITY,
                     (Boolean) newValue);
             loadSettings();
+        } else if (key.equals(PREFERENCE_SYNC_SIZE_ENABLE)) {
+            final boolean enabled = (Boolean) newValue;
+            mSyncSize.setEnabled(enabled);
+            cv.put(AccountColumns.SET_SYNC_SIZE_ENABLED, enabled ? 1 : 0);
         } else if (key.equals(PREFERENCE_BACKGROUND_ATTACHMENTS)) {
             int newFlags = mAccount.getFlags() & ~(Account.FLAGS_BACKGROUND_ATTACHMENTS);
 
@@ -395,6 +443,12 @@ public class AccountSettingsFragment extends MailAccountPrefsFragment
             mInboxVibrate.setChecked(vibrateSetting);
             mInboxFolderPreferences.setNotificationVibrateEnabled(vibrateSetting);
             return true;
+        } else if (FolderPreferences.PreferenceKeys.NOTIFICATION_LIGHTS.equals(key)) {
+            final String LightsSettings = (String) newValue;
+            NotificationLight notificationLight = NotificationLight.fromStringPref(LightsSettings);
+            updateNotificationLight(notificationLight);
+            mInboxFolderPreferences.setNotificationLights(notificationLight);
+            return true;
         } else if (FolderPreferences.PreferenceKeys.NOTIFICATION_RINGTONE.equals(key)) {
             return true;
         } else {
@@ -412,9 +466,46 @@ public class AccountSettingsFragment extends MailAccountPrefsFragment
     @Override
     public void onCreateOptionsMenu(Menu menu, MenuInflater inflater) {
         menu.clear();
+
+        // Delete account item
+        mDeleteAccountItem = menu.add(Menu.NONE, Menu.NONE, 0, R.string.delete_account);
+        mDeleteAccountItem.setShowAsAction(MenuItem.SHOW_AS_ACTION_NEVER);
+
         inflater.inflate(R.menu.settings_fragment_menu, menu);
+
+        MenuItem feedbackMenuItem = menu.findItem(R.id.feedback_menu_item);
+        Uri feedbackUri = Utils.getValidUri(getString(R.string.email_feedback_uri));
+
+        if (feedbackMenuItem != null) {
+            feedbackMenuItem.setVisible(!Uri.EMPTY.equals(feedbackUri));
+        }
+    }
+
+    @Override
+    public boolean onOptionsItemSelected(MenuItem item) {
+        if (item.equals(mDeleteAccountItem)) {
+            AlertDialog.Builder alertBuilder = new AlertDialog.Builder(mContext);
+            alertBuilder.setTitle(R.string.delete_account);
+            String msg = getString(R.string.delete_account_confirmation_msg, mAccountEmail);
+            alertBuilder.setMessage(msg);
+            alertBuilder.setCancelable(true);
+            final DialogInterface.OnClickListener cb = new DialogInterface.OnClickListener() {
+                @Override
+                public void onClick(DialogInterface dialog, int which) {
+                    dialog.dismiss();
+                    mHandler.dispatchMessage(Message.obtain(mHandler, MSG_DELETE_ACCOUNT));
+                }
+            };
+            alertBuilder.setPositiveButton(android.R.string.ok, cb);
+            alertBuilder.setNegativeButton(android.R.string.cancel, null);
+            alertBuilder.create().show();
+            return true;
+        }
+        return super.onOptionsItemSelected(item);
     }
 
+
+
     /**
      * Async task loader to load account in order to view/edit it
      */
@@ -676,8 +767,7 @@ public class AccountSettingsFragment extends MailAccountPrefsFragment
                 R.string.preferences_signature_summary_not_set);
 
         mCheckFrequency = (ListPreference) findPreference(PREFERENCE_FREQUENCY);
-        mCheckFrequency.setEntries(mServiceInfo.syncIntervalStrings);
-        mCheckFrequency.setEntryValues(mServiceInfo.syncIntervals);
+        fillCheckFrecuency(mServiceInfo.syncIntervalStrings, mServiceInfo.syncIntervals);
         if (mServiceInfo.syncContacts || mServiceInfo.syncCalendar) {
             // This account allows syncing of contacts and/or calendar, so we will always have
             // separate preferences to enable or disable syncing of email, contacts, and calendar.
@@ -783,47 +873,128 @@ public class AccountSettingsFragment extends MailAccountPrefsFragment
             }
         }
 
+        mSyncSizeEnable = (CheckBoxPreference) findPreference(PREFERENCE_SYNC_SIZE_ENABLE);
+        mSyncSize = (ListPreference) findPreference(PREFERENCE_SYNC_SIZE);
+        if (mSyncSizeEnable != null && mSyncSize != null) {
+            mSyncSizeEnable.setOnPreferenceChangeListener(this);
+            mSyncSize.setOnPreferenceChangeListener(new Preference.OnPreferenceChangeListener() {
+                public boolean onPreferenceChange(Preference preference, Object newValue) {
+                    final String summary = newValue.toString();
+                    int index = mSyncSize.findIndexOfValue(summary);
+                    mSyncSize.setSummary(mSyncSize.getEntries()[index]);
+                    mSyncSize.setValue(summary);
+
+                    // Commit the value
+                    ContentValues cv = new ContentValues();
+                    cv.put(AccountColumns.SYNC_SIZE, Integer.parseInt(summary));
+                    new UpdateTask().run(mContext.getContentResolver(), mAccount.getUri(), cv,
+                            null, null);
+                    EmailProvider.setServicesEnabledAsync(mContext);
+                    return false;
+                }
+            });
+
+            // Set sync size configurations
+            mSyncSizeEnable.setEnabled(true);
+            mSyncSizeEnable.setChecked(mAccount.isSetSyncSizeEnabled());
+
+            mSyncSize.setEnabled(mAccount.isSetSyncSizeEnabled());
+            mSyncSize.setValue(String.valueOf(mAccount.getSyncSize()));
+            mSyncSize.setSummary(mSyncSize.getEntry());
+        }
+
         final PreferenceCategory notificationsCategory =
                 (PreferenceCategory) findPreference(PREFERENCE_CATEGORY_NOTIFICATIONS);
 
         if (mInboxFolderPreferences != null) {
-            final CheckBoxPreference inboxNotify = (CheckBoxPreference) findPreference(
-                FolderPreferences.PreferenceKeys.NOTIFICATIONS_ENABLED);
-            inboxNotify.setChecked(mInboxFolderPreferences.areNotificationsEnabled());
-            inboxNotify.setOnPreferenceChangeListener(this);
-
-            mInboxRingtone = findPreference(FolderPreferences.PreferenceKeys.NOTIFICATION_RINGTONE);
-            final String ringtoneUri = mInboxFolderPreferences.getNotificationRingtoneUri();
-            if (!TextUtils.isEmpty(ringtoneUri)) {
-                mRingtone = RingtoneManager.getRingtone(getActivity(), Uri.parse(ringtoneUri));
-            }
-            setRingtoneSummary();
-            mInboxRingtone.setOnPreferenceChangeListener(this);
-            mInboxRingtone.setOnPreferenceClickListener(new OnPreferenceClickListener() {
-                @Override
-                public boolean onPreferenceClick(final Preference preference) {
-                    showRingtonePicker();
-
-                    return true;
+            if (mServiceInfo.offerLookback) {
+                // This account supports per-folder notifications
+
+                // Enable per-folder notifications preference
+                if (mPerFolderNotification == null) {
+                    mPerFolderNotification = new Preference(mContext);
+                    mPerFolderNotification.setKey(PREFERENCE_PER_FOLDER_NOTIFICATIONS);
+                    notificationsCategory.addPreference(mPerFolderNotification);
                 }
-            });
+                mPerFolderNotification.setTitle(R.string.folder_notify_settings_pref_title);
 
-            notificationsCategory.setEnabled(true);
-
-            // Set the vibrator value, or hide it on devices w/o a vibrator
-            mInboxVibrate = (CheckBoxPreference) findPreference(
-                    FolderPreferences.PreferenceKeys.NOTIFICATION_VIBRATE);
-            if (mInboxVibrate != null) {
-                mInboxVibrate.setChecked(
-                        mInboxFolderPreferences.isNotificationVibrateEnabled());
-                Vibrator vibrator = (Vibrator) mContext.getSystemService(Context.VIBRATOR_SERVICE);
-                if (vibrator.hasVibrator()) {
-                    // When the value is changed, update the setting.
-                    mInboxVibrate.setOnPreferenceChangeListener(this);
-                } else {
-                    // No vibrator present. Remove the preference altogether.
+                // Remove Inbox per-account preferences
+                final CheckBoxPreference inboxNotify = (CheckBoxPreference) findPreference(
+                        FolderPreferences.PreferenceKeys.NOTIFICATIONS_ENABLED);
+                if (inboxNotify != null) {
+                    notificationsCategory.removePreference(inboxNotify);
+                }
+                mInboxRingtone = findPreference(
+                        FolderPreferences.PreferenceKeys.NOTIFICATION_RINGTONE);
+                if (mInboxRingtone != null) {
+                    notificationsCategory.removePreference(mInboxRingtone);
+                }
+                mInboxVibrate = (CheckBoxPreference) findPreference(
+                        FolderPreferences.PreferenceKeys.NOTIFICATION_VIBRATE);
+                if (mInboxVibrate != null) {
                     notificationsCategory.removePreference(mInboxVibrate);
-                    mInboxVibrate = null;
+                }
+                mInboxLights = (FolderNotificationLightPreference) findPreference(
+                        FolderPreferences.PreferenceKeys.NOTIFICATION_LIGHTS);
+                if (mInboxLights != null) {
+                    notificationsCategory.removePreference(mInboxLights);
+                }
+
+                notificationsCategory.setEnabled(true);
+
+            } else {
+                final CheckBoxPreference inboxNotify = (CheckBoxPreference) findPreference(
+                    FolderPreferences.PreferenceKeys.NOTIFICATIONS_ENABLED);
+                inboxNotify.setChecked(mInboxFolderPreferences.areNotificationsEnabled());
+                inboxNotify.setOnPreferenceChangeListener(this);
+
+                mInboxRingtone = findPreference(
+                        FolderPreferences.PreferenceKeys.NOTIFICATION_RINGTONE);
+                final String ringtoneUri = mInboxFolderPreferences.getNotificationRingtoneUri();
+                if (!TextUtils.isEmpty(ringtoneUri)) {
+                    mRingtone = RingtoneManager.getRingtone(getActivity(), Uri.parse(ringtoneUri));
+                }
+                setRingtoneSummary();
+                mInboxRingtone.setOnPreferenceChangeListener(this);
+                mInboxRingtone.setOnPreferenceClickListener(new OnPreferenceClickListener() {
+                    @Override
+                    public boolean onPreferenceClick(final Preference preference) {
+                        showRingtonePicker();
+
+                        return true;
+                    }
+                });
+
+                notificationsCategory.setEnabled(true);
+
+                // Set the vibrator value, or hide it on devices w/o a vibrator
+                mInboxVibrate = (CheckBoxPreference) findPreference(
+                        FolderPreferences.PreferenceKeys.NOTIFICATION_VIBRATE);
+                if (mInboxVibrate != null) {
+                    mInboxVibrate.setChecked(
+                            mInboxFolderPreferences.isNotificationVibrateEnabled());
+                    Vibrator vibrator = (Vibrator) mContext.getSystemService(
+                            Context.VIBRATOR_SERVICE);
+                    if (vibrator.hasVibrator()) {
+                        // When the value is changed, update the setting.
+                        mInboxVibrate.setOnPreferenceChangeListener(this);
+                    } else {
+                        // No vibrator present. Remove the preference altogether.
+                        notificationsCategory.removePreference(mInboxVibrate);
+                        mInboxVibrate = null;
+                    }
+                }
+
+                mInboxLights = (FolderNotificationLightPreference) findPreference(
+                        FolderPreferences.PreferenceKeys.NOTIFICATION_LIGHTS);
+                if (mInboxLights != null) {
+                    if (LightsCapabilities.supports(
+                            getActivity(), LightsCapabilities.LIGHTS_RGB_NOTIFICATION_LED)) {
+                        updateNotificationLight(mInboxFolderPreferences.getNotificationLight());
+                        mInboxLights.setOnPreferenceChangeListener(this);
+                    } else {
+                        notificationsCategory.removePreference(mInboxLights);
+                    }
                 }
             }
         } else {
@@ -987,4 +1158,98 @@ public class AccountSettingsFragment extends MailAccountPrefsFragment
                 AccountServerSettingsActivity.getIntentForOutgoing(getActivity(), account);
         getActivity().startActivity(intent);
     }
+
+    private void deleteAccount() {
+        AsyncTask<Void, Void, Boolean> task = new AsyncTask<Void, Void, Boolean>() {
+            private ProgressDialog mDialog;
+
+            @Override
+            protected void onPreExecute() {
+                // Display an alert dialog to advise the user that the operation is in progress
+                mDialog = new ProgressDialog(mContext);
+                mDialog.setMessage(mContext.getString(R.string.deleting_account_msg));
+                mDialog.setCancelable(false);
+                mDialog.requestWindowFeature(Window.FEATURE_NO_TITLE);
+                mDialog.show();
+            }
+
+            @Override
+            protected void onPostExecute(Boolean result) {
+                if (!result) {
+                    Toast.makeText(mContext, R.string.delete_account_failed,
+                            Toast.LENGTH_SHORT).show();
+                }
+                mDialog.dismiss();
+            }
+
+            @Override
+            protected Boolean doInBackground(Void... params) {
+                try {
+                    // Retrieve the necessary information
+                    AccountManager accountManager = (AccountManager)mContext.getSystemService(
+                            Context.ACCOUNT_SERVICE);
+                    android.accounts.Account account = mUiAccount.getAccountManagerAccount();
+
+                    // Remove the email account and its notifications
+                    ContentResolver resolver = mContext.getContentResolver();
+                    int ret = resolver.delete(mUiAccount.uri, null, null);
+                    if (ret <= 0) {
+                        LogUtils.w(LogUtils.TAG, "Failed to delete account %s", mAccountEmail);
+                        return Boolean.FALSE;
+                    }
+                    NotificationUtils.clearAccountNotifications(mContext, account);
+
+                    // And now we remove the system account that holds the email service
+                    accountManager.removeAccount(account, getActivity(), null, null);
+
+                    // Finish after account is deleted
+                    getActivity().finish();
+                } catch (Exception ex) {
+                    LogUtils.w(LogUtils.TAG, ex, "Failed to delete account %s", mAccountEmail);
+                    return Boolean.FALSE;
+                }
+                return Boolean.TRUE;
+            }
+        };
+        task.execute();
+    }
+
+    private void updateNotificationLight(NotificationLight notificationLight) {
+        if (notificationLight.mOn) {
+            mInboxLights.setColor(notificationLight.mColor);
+            mInboxLights.setOnOffValue(notificationLight.mTimeOn, notificationLight.mTimeOff);
+        } else {
+            int color = mUiAccount != null && mUiAccount.color != 0
+                    ? mUiAccount.color
+                    : FolderNotificationLightPreference.DEFAULT_COLOR;
+            mInboxLights.setColor(color);
+            mInboxLights.setOnOffValue(FolderNotificationLightPreference.DEFAULT_TIME,
+                    FolderNotificationLightPreference.DEFAULT_TIME);
+        }
+        mInboxLights.setOn(notificationLight.mOn);
+    }
+
+    private void fillCheckFrecuency(CharSequence[] labels, CharSequence[] values) {
+        if (mCheckFrequency == null) {
+            return;
+        }
+
+        // Check push capability prior to include as an option
+        if (mAccount != null) {
+            boolean hasPushCapability = mAccount.hasCapability(EmailServiceProxy.CAPABILITY_PUSH);
+            List<CharSequence> valuesList = new ArrayList<>(Arrays.asList(values));
+            int checkIntervalPushPos = valuesList.indexOf(
+                    String.valueOf(Account.CHECK_INTERVAL_PUSH));
+            if (!hasPushCapability && checkIntervalPushPos != -1) {
+                List<CharSequence> labelsList = new ArrayList<>(Arrays.asList(labels));
+                labelsList.remove(checkIntervalPushPos);
+                valuesList.remove(checkIntervalPushPos);
+                labels = labelsList.toArray(new CharSequence[labelsList.size()]);
+                values = valuesList.toArray(new CharSequence[valuesList.size()]);
+            }
+        }
+        mCheckFrequency.setEntries(labels);
+        mCheckFrequency.setEntryValues(values);
+        mCheckFrequency.setDefaultValue(values);
+    }
 }
diff --git a/src/com/android/email/activity/setup/AccountSetupFinal.java b/src/com/android/email/activity/setup/AccountSetupFinal.java
index adaa32aa1..2ad686d0b 100644
--- a/src/com/android/email/activity/setup/AccountSetupFinal.java
+++ b/src/com/android/email/activity/setup/AccountSetupFinal.java
@@ -35,6 +35,7 @@ import android.content.Intent;
 import android.content.Loader;
 import android.database.Cursor;
 import android.os.Bundle;
+import android.os.Build;
 import android.provider.ContactsContract;
 import android.support.annotation.NonNull;
 import android.text.TextUtils;
@@ -43,6 +44,7 @@ import android.view.inputmethod.InputMethodManager;
 import android.widget.Toast;
 
 import com.android.email.R;
+import com.android.email.activity.RequestPermissionsActivity;
 import com.android.email.setup.AuthenticatorSetupIntentHelper;
 import com.android.email.service.EmailServiceUtils;
 import com.android.emailcommon.VendorPolicyLoader;
@@ -182,6 +184,9 @@ public class AccountSetupFinal extends AccountSetupActivity
 
     @Override
     public void onCreate(Bundle savedInstanceState) {
+        if (RequestPermissionsActivity.startPermissionActivity(this)) {
+            finish();
+        }
         super.onCreate(savedInstanceState);
 
         final Intent intent = getIntent();
@@ -347,12 +352,17 @@ public class AccountSetupFinal extends AccountSetupActivity
             updateContentFragment(false /* addToBackstack */);
             getFragmentManager().executePendingTransactions();
 
-            if (!DEBUG_ALLOW_NON_TEST_HARNESS_CREATION &&
-                    !ActivityManager.isRunningInTestHarness()) {
-                LogUtils.e(LogUtils.TAG,
-                        "ERROR: Force account create only allowed while in test harness");
-                finish();
-                return;
+            //Enabling force create account for OMA CP
+            boolean forceConfigurationEnabled = getResources()
+                    .getBoolean(R.bool.enable_force_configure_account);
+            if(!forceConfigurationEnabled){
+                if (!DEBUG_ALLOW_NON_TEST_HARNESS_CREATION &&
+                        !ActivityManager.isRunningInTestHarness()) {
+                    LogUtils.e(LogUtils.TAG,
+                            "ERROR: Force account create only allowed while in test harness");
+                    finish();
+                    return;
+                }
             }
 
             mForceCreate = true;
@@ -917,7 +927,7 @@ public class AccountSetupFinal extends AccountSetupActivity
     public void setDefaultsForProtocol(Account account) {
         final EmailServiceUtils.EmailServiceInfo info = mSetupData.getIncomingServiceInfo(this);
         if (info == null) return;
-        account.mSyncInterval = info.defaultSyncInterval;
+        account.setSyncInterval(info.defaultSyncInterval);
         account.mSyncLookback = info.defaultLookback;
         if (info.offerLocalDeletes) {
             account.setDeletePolicy(info.defaultLocalDeletes);
@@ -930,6 +940,16 @@ public class AccountSetupFinal extends AccountSetupActivity
      */
     private void populateSetupData(String senderName, String senderEmail) {
         final Account account = mSetupData.getAccount();
+        String deviceName = Build.MODEL;
+        String signature = getResources().getString(R.string.default_email_signature, deviceName);
+        if (getResources().getBoolean(
+                R.bool.config_email_signature_with_brand)) {
+            signature = String.format(getResources().getString(
+                R.string.default_email_signature_with_brand) ,Build.BRAND);
+        }
+        if (!TextUtils.isEmpty(signature)) {
+            account.setSignature(signature);
+        }
         account.setSenderName(senderName);
         account.setEmailAddress(senderEmail);
         account.setDisplayName(senderEmail);
@@ -1126,7 +1146,8 @@ public class AccountSetupFinal extends AccountSetupActivity
             newFlags |= Account.FLAGS_BACKGROUND_ATTACHMENTS;
         }
         final HostAuth hostAuth = account.getOrCreateHostAuthRecv(this);
-        if (hostAuth.mProtocol.equals(getString(R.string.protocol_eas))) {
+        if (hostAuth.mProtocol.equals(getString(R.string.protocol_eas))
+                && account.mProtocolVersion != null) {
             try {
                 final double protocolVersionDouble = Double.parseDouble(account.mProtocolVersion);
                 if (protocolVersionDouble >= 12.0) {
@@ -1143,6 +1164,8 @@ public class AccountSetupFinal extends AccountSetupActivity
         }
         account.setFlags(newFlags);
         account.setSyncInterval(fragment.getCheckFrequencyValue());
+        account.setSyncSizeEnabled(fragment.getSyncSizeEnabledValue());
+        account.setSyncSize(fragment.getSyncSizeValue());
         final Integer syncWindowValue = fragment.getAccountSyncWindowValue();
         if (syncWindowValue != null) {
             account.setSyncLookback(syncWindowValue);
diff --git a/src/com/android/email/activity/setup/AccountSetupIncomingFragment.java b/src/com/android/email/activity/setup/AccountSetupIncomingFragment.java
index b403fbf26..78827b24d 100644
--- a/src/com/android/email/activity/setup/AccountSetupIncomingFragment.java
+++ b/src/com/android/email/activity/setup/AccountSetupIncomingFragment.java
@@ -199,6 +199,9 @@ public class AccountSetupIncomingFragment extends AccountServerBaseFragment
         final Account account = mSetupData.getAccount();
         final HostAuth recvAuth = account.getOrCreateHostAuthRecv(mAppContext);
 
+        // The data came from autodiscover?
+        final boolean autodiscover = mSetupData.isAutodiscover();
+
         // Pre-fill info as appropriate
         if (!mSetupData.isIncomingCredLoaded()) {
             recvAuth.mLogin = mSetupData.getEmail();
@@ -267,6 +270,14 @@ public class AccountSetupIncomingFragment extends AccountServerBaseFragment
                 mAuthenticationLabel.setText(R.string.account_setup_basics_password_label);
             }
         }
+
+        // If the data came from autodiscover then just try to validate the settings
+        if (autodiscover) {
+            performNextSetupAction();
+
+            // We don't want to validate this data anymore
+            mSetupData.setAutodiscover(false);
+        }
     }
 
     /**
diff --git a/src/com/android/email/activity/setup/AccountSetupOptionsFragment.java b/src/com/android/email/activity/setup/AccountSetupOptionsFragment.java
index 9d048c119..f4f9693f7 100644
--- a/src/com/android/email/activity/setup/AccountSetupOptionsFragment.java
+++ b/src/com/android/email/activity/setup/AccountSetupOptionsFragment.java
@@ -22,6 +22,8 @@ import android.view.View;
 import android.view.ViewGroup;
 import android.widget.ArrayAdapter;
 import android.widget.CheckBox;
+import android.widget.CompoundButton;
+import android.widget.CompoundButton.OnCheckedChangeListener;
 import android.widget.Spinner;
 
 import com.android.email.R;
@@ -29,11 +31,19 @@ import com.android.email.activity.UiUtilities;
 import com.android.email.service.EmailServiceUtils;
 import com.android.emailcommon.provider.Account;
 import com.android.emailcommon.provider.Policy;
+import com.android.emailcommon.service.EmailServiceProxy;
+import com.android.emailcommon.service.SyncSize;
 import com.android.emailcommon.service.SyncWindow;
 
+import java.util.ArrayList;
+import java.util.Arrays;
+import java.util.List;
+
 public class AccountSetupOptionsFragment extends AccountSetupFragment {
     private Spinner mCheckFrequencyView;
     private Spinner mSyncWindowView;
+    private CheckBox mSyncSizeEnableView;
+    private Spinner mSyncSizeView;
     private View mSyncwindowLabel;
     private CheckBox mNotifyView;
     private CheckBox mSyncContactsView;
@@ -60,6 +70,8 @@ public class AccountSetupOptionsFragment extends AccountSetupFragment {
 
         mCheckFrequencyView = UiUtilities.getView(view, R.id.account_check_frequency);
         mSyncWindowView = UiUtilities.getView(view, R.id.account_sync_window);
+        mSyncSizeEnableView = UiUtilities.getView(view, R.id.account_sync_size_enable);
+        mSyncSizeView = UiUtilities.getView(view, R.id.account_sync_size);
         mNotifyView = UiUtilities.getView(view, R.id.account_notify);
         mNotifyView.setChecked(true);
         mSyncContactsView = UiUtilities.getView(view, R.id.account_sync_contacts);
@@ -90,11 +102,24 @@ public class AccountSetupOptionsFragment extends AccountSetupFragment {
         final CharSequence[] frequencyEntries = serviceInfo.syncIntervalStrings;
 
         // Now create the array used by the sync interval Spinner
-        final SpinnerOption[] checkFrequencies = new SpinnerOption[frequencyEntries.length];
+        int checkIntervalPushPos = -1;
+        SpinnerOption[] checkFrequencies = new SpinnerOption[frequencyEntries.length];
         for (int i = 0; i < frequencyEntries.length; i++) {
-            checkFrequencies[i] = new SpinnerOption(
-                    Integer.valueOf(frequencyValues[i].toString()), frequencyEntries[i].toString());
+            Integer value = Integer.valueOf(frequencyValues[i].toString());
+            if (value.intValue() == Account.CHECK_INTERVAL_PUSH) {
+                checkIntervalPushPos = i;
+            }
+            checkFrequencies[i] = new SpinnerOption(value, frequencyEntries[i].toString());
+        }
+
+        // Ensure that push capability is supported by the server
+        boolean hasPushCapability = account.hasCapability(EmailServiceProxy.CAPABILITY_PUSH);
+        if (!hasPushCapability && checkIntervalPushPos != -1) {
+            List<SpinnerOption> options = new ArrayList<>(Arrays.asList(checkFrequencies));
+            options.remove(checkIntervalPushPos);
+            checkFrequencies = options.toArray(new SpinnerOption[options.size()]);
         }
+
         final ArrayAdapter<SpinnerOption> checkFrequenciesAdapter =
                 new ArrayAdapter<>(getActivity(), android.R.layout.simple_spinner_item,
                         checkFrequencies);
@@ -107,6 +132,26 @@ public class AccountSetupOptionsFragment extends AccountSetupFragment {
             enableLookbackSpinner(account);
         }
 
+        // Configure the sync size
+        mSyncSizeEnableView.setOnCheckedChangeListener(new OnCheckedChangeListener() {
+            @Override
+            public void onCheckedChanged(CompoundButton buttonView, boolean isChecked) {
+                int visibility = isChecked ? View.VISIBLE : View.INVISIBLE;
+                mSyncSizeView.setVisibility(visibility);
+                UiUtilities.setVisibilitySafe(view, R.id.account_sync_size, visibility);
+            }
+        });
+        buildSyncSizeSpinner(account);
+        if (account.isSetSyncSizeEnabled()) {
+            mSyncSizeEnableView.setChecked(true);
+            mSyncSizeView.setVisibility(View.VISIBLE);
+            UiUtilities.setVisibilitySafe(view, R.id.account_sync_size, View.VISIBLE);
+        } else {
+            mSyncSizeEnableView.setChecked(false);
+            mSyncSizeView.setVisibility(View.INVISIBLE);
+            UiUtilities.setVisibilitySafe(view, R.id.account_sync_size, View.INVISIBLE);
+        }
+
         if (serviceInfo.syncContacts) {
             mSyncContactsView.setVisibility(View.VISIBLE);
             mSyncContactsView.setChecked(true);
@@ -210,4 +255,49 @@ public class AccountSetupOptionsFragment extends AccountSetupFragment {
     public boolean getNotifyValue() {
         return mNotifyView.isChecked();
     }
+
+    public boolean getSyncSizeEnabledValue() {
+        return mSyncSizeEnableView.isChecked();
+    }
+
+    public int getSyncSizeValue() {
+        if (mSyncSizeView.getVisibility() != View.VISIBLE) {
+            return SyncSize.SYNC_SIZE_ENTIRE_MAIL;
+        }
+        return (int) ((SpinnerOption)mSyncSizeView.getSelectedItem()).value;
+    }
+
+    /**
+     * Build an additional spinner to let the user could choose sync size.
+     */
+    private void buildSyncSizeSpinner(Account account) {
+        // Generate spinner entries using XML arrays used by the preferences
+        CharSequence[] sizeValues = getResources().getTextArray(
+                R.array.account_setup_options_mail_sync_size_entries_values);
+        CharSequence[] sizeEntries = getResources().getTextArray(
+                R.array.account_setup_options_mail_sync_size_entries_labels);
+
+        // Now create the array used by the Spinner
+        SpinnerOption[] syncSizes = new SpinnerOption[sizeEntries.length];
+        int defaultIndex = -1;
+        for (int i = 0; i < sizeEntries.length; ++i) {
+            final int value = Integer.valueOf(sizeValues[i].toString());
+            syncSizes[i] = new SpinnerOption(value, sizeEntries[i].toString());
+            if (value == SyncSize.SYNC_SIZE_DEFAULT_VALUE) {
+                defaultIndex = i;
+            }
+        }
+
+        ArrayAdapter<SpinnerOption> syncSizesAdapter = new ArrayAdapter<SpinnerOption>(
+                getActivity(), android.R.layout.simple_spinner_item, syncSizes);
+        syncSizesAdapter
+                .setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);
+        mSyncSizeView.setAdapter(syncSizesAdapter);
+
+        // set the default value
+        SpinnerOption.setSpinnerOptionValue(mSyncSizeView, account.getSyncSize());
+        if (defaultIndex >= 0) {
+            mSyncSizeView.setSelection(defaultIndex);
+        }
+    }
 }
diff --git a/src/com/android/email/activity/setup/EmailPreferenceActivity.java b/src/com/android/email/activity/setup/EmailPreferenceActivity.java
index cbb47b922..62fb40109 100644
--- a/src/com/android/email/activity/setup/EmailPreferenceActivity.java
+++ b/src/com/android/email/activity/setup/EmailPreferenceActivity.java
@@ -27,6 +27,7 @@ import android.view.Menu;
 import android.view.MenuItem;
 
 import com.android.email.R;
+import com.android.email.activity.RequestPermissionsActivity;
 import com.android.email.setup.AuthenticatorSetupIntentHelper;
 import com.android.emailcommon.utility.IntentUtilities;
 import com.android.mail.providers.UIProvider.EditSettingsExtras;
@@ -93,6 +94,9 @@ public class EmailPreferenceActivity extends MailPreferenceActivity {
 
     @Override
     public void onCreate(Bundle savedInstanceState) {
+        if (RequestPermissionsActivity.startPermissionActivity(this)) {
+            finish();
+        }
         super.onCreate(savedInstanceState);
 
         final Intent i = getIntent();
diff --git a/src/com/android/email/activity/setup/MailboxSettings.java b/src/com/android/email/activity/setup/MailboxSettings.java
index 42ae407dd..27f0621da 100644
--- a/src/com/android/email/activity/setup/MailboxSettings.java
+++ b/src/com/android/email/activity/setup/MailboxSettings.java
@@ -17,6 +17,7 @@
 package com.android.email.activity.setup;
 
 import android.app.ActionBar;
+import android.app.Activity;
 import android.app.LoaderManager;
 import android.content.ContentUris;
 import android.content.ContentValues;
@@ -26,19 +27,32 @@ import android.content.Intent;
 import android.content.Loader;
 import android.content.res.Resources;
 import android.database.Cursor;
+import android.media.Ringtone;
+import android.media.RingtoneManager;
 import android.net.Uri;
 import android.os.Bundle;
+import android.os.Vibrator;
 import android.preference.CheckBoxPreference;
 import android.preference.ListPreference;
 import android.preference.Preference;
 import android.preference.Preference.OnPreferenceChangeListener;
+import android.preference.Preference.OnPreferenceClickListener;
 import android.preference.PreferenceActivity;
 import android.preference.PreferenceFragment;
+import android.provider.Settings;
 import android.support.annotation.NonNull;
+import android.support.v4.util.Pair;
 import android.text.TextUtils;
+import android.view.LayoutInflater;
 import android.view.MenuItem;
+import android.view.View;
+import android.view.ViewGroup;
+import android.widget.ArrayAdapter;
+import android.widget.ImageView;
+import android.widget.TextView;
 
 import com.android.email.R;
+import com.android.email.provider.EmailProvider;
 import com.android.emailcommon.Logging;
 import com.android.emailcommon.provider.Account;
 import com.android.emailcommon.provider.EmailContent.AccountColumns;
@@ -47,14 +61,23 @@ import com.android.emailcommon.provider.Mailbox;
 import com.android.emailcommon.provider.Policy;
 import com.android.emailcommon.utility.EmailAsyncTask;
 import com.android.emailcommon.utility.Utility;
+import com.android.mail.preferences.FolderPreferences;
+import com.android.mail.preferences.FolderPreferences.NotificationLight;
+import com.android.mail.preferences.notifications.FolderNotificationLightPreference;
 import com.android.mail.providers.Folder;
 import com.android.mail.providers.UIProvider;
 import com.android.mail.ui.MailAsyncTaskLoader;
+import com.android.mail.ui.settings.BasePreferenceActivity;
 import com.android.mail.utils.LogUtils;
 import com.google.common.base.Preconditions;
 
+import org.lineageos.internal.notification.LightsCapabilities;
+
+import java.text.Collator;
 import java.util.ArrayList;
 import java.util.Arrays;
+import java.util.Collections;
+import java.util.Comparator;
 import java.util.HashMap;
 import java.util.List;
 import java.util.Map;
@@ -69,22 +92,31 @@ import java.util.Map;
  * sync window may result in removal of messages.  Instead, we only save to the database in {@link
  * #onDestroy()}, unless it's called for configuration changes.
  */
-public class MailboxSettings extends PreferenceActivity {
+public class MailboxSettings extends BasePreferenceActivity {
+    public static final String PREFERENCE_SYNC_SETTINGS = "account_sync_settings";
+    public static final String PREFERENCE_PER_FOLDER_NOTIFICATIONS =
+            "account_per_folder_notifications";
+
     private static final String EXTRA_FOLDERS_URI = "FOLDERS_URI";
     private static final String EXTRA_INBOX_ID = "INBOX_ID";
+    private static final String EXTRA_TYPE = "TYPE";
+
+    private static final String EXTRA_HEADER_FOLDER_INDENT = "folder-indent";
 
     private static final int FOLDERS_LOADER_ID = 0;
     private Uri mFoldersUri;
     private int mInboxId;
-    private final List<Folder> mFolders = new ArrayList<>();
+    private String mType;
+    private final List<Pair<Folder,String>> mFolders = new ArrayList<>();
 
     /**
      * Starts the activity
      */
-    public static Intent getIntent(Context context, Uri foldersUri, Folder inbox) {
+    public static Intent getIntent(Context context, Uri foldersUri, Folder inbox, String type) {
         final Intent i = new Intent(context, MailboxSettings.class);
         i.putExtra(EXTRA_FOLDERS_URI, foldersUri);
         i.putExtra(EXTRA_INBOX_ID, inbox.id);
+        i.putExtra(EXTRA_TYPE, type);
         return i;
     }
 
@@ -93,6 +125,7 @@ public class MailboxSettings extends PreferenceActivity {
         // This needs to happen before super.onCreate() since that calls onBuildHeaders()
         mInboxId = getIntent().getIntExtra(EXTRA_INBOX_ID, -1);
         mFoldersUri = getIntent().getParcelableExtra(EXTRA_FOLDERS_URI);
+        mType = getIntent().getStringExtra(EXTRA_TYPE);
 
         if (mFoldersUri != null) {
             getLoaderManager().initLoader(FOLDERS_LOADER_ID, null,
@@ -104,10 +137,11 @@ public class MailboxSettings extends PreferenceActivity {
         // Always show "app up" as we expect our parent to be an Email activity.
         ActionBar actionBar = getActionBar();
         if (actionBar != null) {
-            actionBar.setDisplayOptions(ActionBar.DISPLAY_HOME_AS_UP, ActionBar.DISPLAY_HOME_AS_UP);
-            // Hide the app icon.
-            actionBar.setIcon(android.R.color.transparent);
-            actionBar.setDisplayUseLogoEnabled(false);
+            if (mType != null && mType.equals(PREFERENCE_SYNC_SETTINGS)) {
+                actionBar.setTitle(getString(R.string.mailbox_settings_activity_title));
+            } else if (mType != null && mType.equals(PREFERENCE_PER_FOLDER_NOTIFICATIONS)) {
+                actionBar.setTitle(getString(R.string.mailbox_notify_settings_activity_title));
+            }
         }
     }
 
@@ -117,25 +151,28 @@ public class MailboxSettings extends PreferenceActivity {
             final Header dummy = new Header();
             dummy.titleRes = R.string.mailbox_name_display_inbox;
             dummy.fragment = MailboxSettingsFragment.class.getName();
-            dummy.fragmentArguments = MailboxSettingsFragment.getArguments(mInboxId);
-            target.add(dummy);
+            dummy.fragmentArguments = MailboxSettingsFragment.getArguments(mInboxId, null);
+
         } else {
-            for (final Folder f : mFolders) {
+            for (final Pair<Folder, String> f : mFolders) {
                 final Header h = new Header();
-                if (!TextUtils.isEmpty(f.hierarchicalDesc)) {
-                    h.title = f.hierarchicalDesc;
-                } else {
-                    h.title = f.name;
-                }
-                h.fragment = MailboxSettingsFragment.class.getName();
-                h.fragmentArguments = MailboxSettingsFragment.getArguments(f.id);
-                if (f.id == mInboxId) {
-                    target.add(0, h);
-                } else {
-                    target.add(h);
+                h.title = f.first.name;
+                setMailboxHeaderIcon(h, f.first);
+                h.extras = new Bundle();
+                h.extras.putInt(EXTRA_HEADER_FOLDER_INDENT, f.second.split("\\/").length - 1);
+                if (mType != null && mType.equals(PREFERENCE_SYNC_SETTINGS)) {
+                    h.fragment = MailboxSettingsFragment.class.getName();
+                    h.fragmentArguments = MailboxSettingsFragment.getArguments(f.first.id, mType);
+                } else if (mType != null && mType.equals(PREFERENCE_PER_FOLDER_NOTIFICATIONS)) {
+                    h.fragment = MailboxNotificationsFragment.class.getName();
+                    h.fragmentArguments = MailboxNotificationsFragment.getArguments(
+                            f.first, mType);
                 }
+                target.add(h);
             }
         }
+
+        setListAdapter(new MailboxHeadersAdapter(this, target));
     }
 
     @Override
@@ -153,6 +190,17 @@ public class MailboxSettings extends PreferenceActivity {
         return super.onOptionsItemSelected(item);
     }
 
+    private void setMailboxHeaderIcon(Header header, Folder folder) {
+        if (folder.isSent()) {
+            header.iconRes = R.drawable.ic_drawer_sent_24dp;
+        } else if (folder.isInbox()) {
+            header.iconRes = R.drawable.ic_drawer_inbox_24dp;
+        } else {
+            header.iconRes = folder.hasChildren ? R.drawable.ic_folder_parent_24dp
+                : R.drawable.ic_drawer_folder_24dp;
+        }
+    }
+
     /**
      * Setup the entries and entry values for the sync lookback preference
      * @param context the caller's context
@@ -190,6 +238,49 @@ public class MailboxSettings extends PreferenceActivity {
         pref.setSummary(pref.getEntry());
     }
 
+    private static class MailboxHeadersAdapter extends ArrayAdapter<Header> {
+        private static class HeaderViewHolder {
+            View spacer;
+            ImageView icon;
+            TextView title;
+        }
+
+        private LayoutInflater mInflater;
+        private int mFolderIndent;
+
+        public MailboxHeadersAdapter(Context context, List<Header> objects) {
+            super(context, 0, objects);
+            mInflater = (LayoutInflater)context.getSystemService(Context.LAYOUT_INFLATER_SERVICE);
+            mFolderIndent = (int) context.getResources().getDimension(R.dimen.child_folder_indent);
+        }
+
+        @Override
+        public View getView(int position, View convertView, ViewGroup parent) {
+            HeaderViewHolder holder;
+            View view;
+
+            if (convertView == null) {
+                view = mInflater.inflate(R.layout.preference_mailbox_item, parent, false);
+                holder = new HeaderViewHolder();
+                holder.spacer = view.findViewById(R.id.spacer);
+                holder.icon = (ImageView) view.findViewById(R.id.icon);
+                holder.title = (TextView) view.findViewById(android.R.id.title);
+                view.setTag(holder);
+            } else {
+                view = convertView;
+                holder = (HeaderViewHolder) view.getTag();
+            }
+
+            // All view fields must be updated every time, because the view may be recycled
+            Header header = getItem(position);
+            int headerIndent = header.extras.getInt(EXTRA_HEADER_FOLDER_INDENT, 0);
+            holder.spacer.getLayoutParams().width = mFolderIndent * headerIndent;
+            holder.icon.setImageResource(header.iconRes);
+            holder.title.setText(header.getTitle(getContext().getResources()));
+            return view;
+        }
+    }
+
     private class MailboxSettingsFolderLoaderCallbacks
             implements LoaderManager.LoaderCallbacks<Cursor> {
 
@@ -206,14 +297,69 @@ public class MailboxSettings extends PreferenceActivity {
             }
             mFolders.clear();
 
+            // Convert the cursor to an temp array and map all the folders
+            Map<Uri, Folder> folders = new HashMap<>();
+            List<Folder> tmp = new ArrayList<>();
+            Folder inbox = null;
+            Folder sent = null;
             while(cursor.moveToNext()) {
                 final Folder folder = new Folder(cursor);
                 if (!folder.supportsCapability(UIProvider.FolderCapabilities.IS_VIRTUAL) &&
                         !folder.isTrash() && !folder.isDraft() && !folder.isOutbox()) {
-                    mFolders.add(folder);
+                    if (folder.id == mInboxId) {
+                        inbox = folder;
+                    } else if (folder.isSent()) {
+                        sent = folder;
+                    }
+                    tmp.add(folder);
+                    folders.put(folder.folderUri.fullUri, folder);
                 }
             }
 
+            // Create the hierarchical paths of all the folders
+            int count = tmp.size();
+            for (int i = 0; i < count; i++) {
+                Folder folder = tmp.get(i);
+                mFolders.add(new Pair<Folder, String>(folder,
+                        getHierarchicalFolder(folder, folders)));
+            }
+
+            // Sort folders by hierarchical path
+            final String inboxFolderName = inbox.name;
+            final String sentFolderName = sent.name;
+            Collections.sort(mFolders, new Comparator<Pair<Folder, String>>() {
+                private final Collator mCollator = Collator.getInstance();
+                @Override
+                public int compare(Pair<Folder, String> lhs, Pair<Folder, String> rhs) {
+                    boolean lInbox = lhs.second.startsWith(inboxFolderName);
+                    boolean rInbox = rhs.second.startsWith(inboxFolderName);
+                    boolean lSent = lhs.second.startsWith(sentFolderName);
+                    boolean rSent = rhs.second.startsWith(sentFolderName);
+                    String lParent = getHierarchicalParentFolder(lhs.second);
+                    String rParent = getHierarchicalParentFolder(rhs.second);
+                    if (lInbox && !rInbox) {
+                        return -1;
+                    } else if (!lInbox && rInbox) {
+                        return 1;
+                    }
+                    if (lSent && !rSent) {
+                        return -1;
+                    } else if (!lSent && rSent) {
+                        return 1;
+                    }
+                    if (lhs.second.startsWith(rhs.second)) {
+                        return 1;
+                    }
+                    if (rhs.second.startsWith(lhs.second)) {
+                        return -1;
+                    }
+                    if (lParent != null && rParent != null && lParent.equals(rParent)) {
+                        return mCollator.compare(lhs.first.name, rhs.first.name);
+                    }
+                    return mCollator.compare(lhs.second, rhs.second);
+                }
+            });
+
             invalidateHeaders();
         }
 
@@ -221,6 +367,417 @@ public class MailboxSettings extends PreferenceActivity {
         public void onLoaderReset(Loader<Cursor> cursorLoader) {
             mFolders.clear();
         }
+
+        private String getHierarchicalFolder(Folder folder, Map<Uri, Folder> folders) {
+            if (!TextUtils.isEmpty(folder.hierarchicalDesc)) {
+                return folder.hierarchicalDesc;
+            }
+            String name = folder.name;
+            Folder tmp = folder;
+            while (tmp != null && tmp.parent != null && !tmp.parent.toString().isEmpty()) {
+                tmp = folders.get(tmp.parent);
+                if (tmp != null) {
+                    name = tmp.name + "/" + name;
+                }
+            }
+            return name;
+        }
+
+        private String getHierarchicalParentFolder(String folder) {
+            int pos = folder.lastIndexOf("/");
+            if (pos != -1) {
+                return folder.substring(0, pos);
+            }
+            return null;
+        }
+    }
+
+    public static class MailboxNotificationsFragment extends PreferenceFragment {
+        private static final String EXTRA_MAILBOX_ID = "MailboxId";
+        private static final String EXTRA_MAILBOX_PERSISTEND_ID = "MailboxPersistentId";
+        private static final String EXTRA_MAILBOX_IS_INBOX = "MailboxIsInbox";
+
+        private static final String BUNDLE_ACCOUNT = "MailboxNotifySettings.account";
+        private static final String BUNDLE_MAILBOX = "MailboxNotifySettings.mailbox";
+        private static final String BUNDLE_NOTIF_ENABLED = "MailboxNotifySettings.enabled";
+        private static final String BUNDLE_NOTIF_RINGTONE = "MailboxSettings.ringtone";
+        private static final String BUNDLE_NOTIF_VIBRATE = "MailboxSettings.vibrate";
+        private static final String BUNDLE_NOTIF_LIGHTS = "MailboxSettings.lights";
+
+        private static final String PREF_NOTIF_ENABLED_KEY = "notifications-enabled";
+        private static final String PREF_NOTIF_RINGTONE_KEY = "notification-ringtone";
+        private static final String PREF_NOTIF_VIBRATE_KEY = "notification-vibrate";
+        private static final String PREF_NOTIF_LIGHTS_KEY = "notification-lights";
+
+        private static final int RINGTONE_REQUEST_CODE =
+                MailboxNotificationsFragment.class.hashCode();
+
+        private FolderPreferences mPreferences;
+        private com.android.mail.providers.Account mUiAccount;
+        private Account mAccount;
+        private Mailbox mMailbox;
+
+        private CheckBoxPreference mPrefNotifEnabled;
+        private Preference mPrefNotifRingtone;
+        private CheckBoxPreference mPrefNotifVibrate;
+        private FolderNotificationLightPreference mPrefNotifLights;
+
+        private boolean mOldMailboxEnabled;
+        private String mOldMailboxRingtone;
+        private boolean mOldMailboxVibrate;
+        private String mOldMailboxLights;
+
+        private Uri mRingtoneUri;
+        private Ringtone mRingtone;
+
+        private static Bundle getArguments(Folder folder, String type) {
+            final Bundle b = new Bundle(4);
+            b.putLong(EXTRA_MAILBOX_ID, folder.id);
+            b.putString(EXTRA_MAILBOX_PERSISTEND_ID, folder.persistentId);
+            b.putBoolean(EXTRA_MAILBOX_IS_INBOX, folder.isInbox());
+            b.putString(EXTRA_TYPE, type);
+            return b;
+        }
+
+        public MailboxNotificationsFragment() {}
+
+        @Override
+        public void onActivityCreated(Bundle savedInstanceState) {
+            super.onActivityCreated(savedInstanceState);
+            final long mailboxId = getArguments().getLong(EXTRA_MAILBOX_ID, Mailbox.NO_MAILBOX);
+            final String mailboxPersistenId = getArguments().getString(
+                    EXTRA_MAILBOX_PERSISTEND_ID, null);
+            final boolean mailboxIsInbox = getArguments().getBoolean(EXTRA_MAILBOX_IS_INBOX, false);
+            if (mailboxId == Mailbox.NO_MAILBOX || mailboxPersistenId == null) {
+                getActivity().finish();
+            }
+
+            addPreferencesFromResource(R.xml.mailbox_notifications_preferences);
+
+            mPrefNotifEnabled = (CheckBoxPreference) findPreference(PREF_NOTIF_ENABLED_KEY);
+            mPrefNotifRingtone = findPreference(PREF_NOTIF_RINGTONE_KEY);
+            mPrefNotifRingtone.setOnPreferenceClickListener(new OnPreferenceClickListener() {
+                @Override
+                public boolean onPreferenceClick(Preference preference) {
+                    showRingtonePicker();
+                    return true;
+                }
+            });
+            mPrefNotifVibrate = (CheckBoxPreference) findPreference(PREF_NOTIF_VIBRATE_KEY);
+            Vibrator vibrator = (Vibrator) getActivity().getSystemService(Context.VIBRATOR_SERVICE);
+            if (!vibrator.hasVibrator()) {
+                mPrefNotifVibrate.setChecked(false);
+                getPreferenceScreen().removePreference(mPrefNotifVibrate);
+                mPrefNotifVibrate = null;
+            }
+            mPrefNotifLights = (FolderNotificationLightPreference) findPreference(
+                    PREF_NOTIF_LIGHTS_KEY);
+            if (mPrefNotifLights != null && !LightsCapabilities.supports(
+                    getActivity(), LightsCapabilities.LIGHTS_RGB_NOTIFICATION_LED)) {
+                getPreferenceScreen().removePreference(mPrefNotifLights);
+            }
+
+            if (savedInstanceState != null) {
+                mAccount = savedInstanceState.getParcelable(BUNDLE_ACCOUNT);
+                mMailbox = savedInstanceState.getParcelable(BUNDLE_MAILBOX);
+                mPreferences = new FolderPreferences(getActivity(), mAccount.mEmailAddress,
+                        mailboxPersistenId, mailboxIsInbox);
+
+                mPrefNotifEnabled.setChecked(savedInstanceState.getBoolean(BUNDLE_NOTIF_ENABLED));
+                setRingtone(savedInstanceState.getString(BUNDLE_NOTIF_RINGTONE));
+                if (mPrefNotifVibrate != null) {
+                    mPrefNotifVibrate.setChecked(
+                            savedInstanceState.getBoolean(BUNDLE_NOTIF_VIBRATE));
+                }
+                NotificationLight notifLight = NotificationLight.fromStringPref(
+                        savedInstanceState.getString(BUNDLE_NOTIF_LIGHTS, ""));
+                updateNotificationLight(notifLight);
+
+                onDataLoaded();
+            } else {
+                // Make them disabled until we load data
+                enablePreferences(false);
+                getLoaderManager().initLoader(0, getArguments(), new MailboxLoaderCallbacks());
+            }
+        }
+
+        private void setRingtone(String ringtone) {
+            if (!TextUtils.isEmpty(ringtone)) {
+                mRingtoneUri = Uri.parse(ringtone);
+                mRingtone = RingtoneManager.getRingtone(getActivity(), mRingtoneUri);
+            } else {
+                mRingtoneUri = null;
+                mRingtone = null;
+            }
+            setRingtoneSummary();
+        }
+
+        private void setRingtoneSummary() {
+            final String summary = mRingtone != null ? mRingtone.getTitle(getActivity())
+                    : getString(R.string.silent_ringtone);
+            mPrefNotifRingtone.setSummary(summary);
+        }
+
+        @Override
+        public void onActivityResult(int requestCode, int resultCode, Intent data) {
+            if (requestCode == RINGTONE_REQUEST_CODE) {
+                if (resultCode == Activity.RESULT_OK && data != null) {
+                    Uri uri = data.getParcelableExtra(RingtoneManager.EXTRA_RINGTONE_PICKED_URI);
+                    String ringtone = "";
+                    if (uri != null) {
+                        ringtone = uri.toString();
+                    }
+                    setRingtone(ringtone);
+                }
+            }
+        }
+
+        private void enablePreferences(boolean enabled) {
+            mPrefNotifEnabled.setEnabled(enabled);
+            mPrefNotifRingtone.setEnabled(enabled);
+            if (mPrefNotifVibrate != null) {
+                mPrefNotifVibrate.setEnabled(enabled);
+            }
+            if (mPrefNotifLights != null) {
+                mPrefNotifLights.setEnabled(enabled);
+            }
+        }
+
+        @Override
+        public void onSaveInstanceState(@NonNull Bundle outState) {
+            super.onSaveInstanceState(outState);
+            outState.putParcelable(BUNDLE_ACCOUNT, mAccount);
+            outState.putParcelable(BUNDLE_MAILBOX, mMailbox);
+            outState.putBoolean(BUNDLE_NOTIF_ENABLED, mPrefNotifEnabled.isChecked());
+            String ringtoneUri = "";
+            if (mRingtoneUri != null) {
+                ringtoneUri = mRingtoneUri.toString();
+            }
+            outState.putString(BUNDLE_NOTIF_RINGTONE, ringtoneUri);
+            outState.putBoolean(PREF_NOTIF_VIBRATE_KEY, mPrefNotifVibrate != null
+                    ? mPrefNotifVibrate.isChecked() : false);
+            outState.putString(BUNDLE_NOTIF_LIGHTS, getNotificationLightPref());
+        }
+
+        /**
+         * We save all the settings in onDestroy, *unless it's for configuration changes*.
+         */
+        @Override
+        public void onDestroy() {
+            super.onDestroy();
+            if (!getActivity().isChangingConfigurations()) {
+                savePreferences();
+            }
+        }
+
+        private void loadOldPreferencesValues() {
+            mOldMailboxEnabled = mPreferences.areNotificationsEnabled();
+            mOldMailboxRingtone = mPreferences.getNotificationRingtoneUri();
+            mOldMailboxVibrate = mPreferences.isNotificationVibrateEnabled();
+            mOldMailboxLights = mPreferences.getNotificationLight().toStringPref();
+        }
+
+        /**
+         * Shows the system ringtone picker.
+         */
+        private void showRingtonePicker() {
+            Intent intent = new Intent(RingtoneManager.ACTION_RINGTONE_PICKER);
+            final String ringtoneUri = mPreferences.getNotificationRingtoneUri();
+            if (!TextUtils.isEmpty(ringtoneUri)) {
+                intent.putExtra(RingtoneManager.EXTRA_RINGTONE_EXISTING_URI,
+                        Uri.parse(ringtoneUri));
+            }
+            intent.putExtra(RingtoneManager.EXTRA_RINGTONE_SHOW_DEFAULT, true);
+            intent.putExtra(RingtoneManager.EXTRA_RINGTONE_DEFAULT_URI,
+                    Settings.System.DEFAULT_NOTIFICATION_URI);
+            intent.putExtra(RingtoneManager.EXTRA_RINGTONE_SHOW_SILENT, true);
+            intent.putExtra(RingtoneManager.EXTRA_RINGTONE_TYPE,
+                    RingtoneManager.TYPE_NOTIFICATION);
+            startActivityForResult(intent, RINGTONE_REQUEST_CODE);
+        }
+
+        /**
+         * Called when {@link #mMailbox} is loaded (either by the loader or from the saved state).
+         */
+        private void onDataLoaded() {
+            Preconditions.checkNotNull(mAccount);
+            Preconditions.checkNotNull(mMailbox);
+
+            // Update the title with the mailbox name.
+            final ActionBar actionBar = getActivity().getActionBar();
+            final String mailboxName = mMailbox.mDisplayName;
+            if (actionBar != null) {
+                actionBar.setTitle(mailboxName);
+                actionBar.setSubtitle(getString(R.string.mailbox_notify_settings_activity_title));
+            } else {
+                getActivity().setTitle(
+                        getString(R.string.mailbox_notify_settings_activity_title_with_mailbox,
+                                mailboxName));
+            }
+        }
+
+        private void updateNotificationLight(NotificationLight notificationLight) {
+            if (mPrefNotifLights == null) {
+                return;
+            }
+
+            if (notificationLight.mOn) {
+                mPrefNotifLights.setColor(notificationLight.mColor);
+                mPrefNotifLights.setOnOffValue(notificationLight.mTimeOn,
+                        notificationLight.mTimeOff);
+            } else {
+                int color = mUiAccount != null && mUiAccount.color != 0
+                        ? mUiAccount.color
+                        : FolderNotificationLightPreference.DEFAULT_COLOR;
+                mPrefNotifLights.setColor(color);
+                mPrefNotifLights.setOnOffValue(FolderNotificationLightPreference.DEFAULT_TIME,
+                        FolderNotificationLightPreference.DEFAULT_TIME);
+            }
+            mPrefNotifLights.setOn(notificationLight.mOn);
+        }
+
+        private String getNotificationLightPref() {
+            return mPrefNotifLights == null || !mPrefNotifLights.getOn()
+                    ? "" : TextUtils.join("|", new Integer[]{
+                    mPrefNotifLights.getColor(),
+                    mPrefNotifLights.getOnValue(),
+                    mPrefNotifLights.getOffValue()});
+        }
+
+        /**
+         * Save changes to the preferences folder backend.
+         *
+         * Note it's called from {@link #onDestroy()}
+         */
+        private void savePreferences() {
+            if (mPreferences == null) {
+                return;
+            }
+
+            boolean mailboxEnabled = mPrefNotifEnabled.isChecked();
+            String mailboxRingtone = "";
+            if (mRingtoneUri != null) {
+                mailboxRingtone = mRingtoneUri.toString();
+            }
+            boolean mailboxVibrate = mPrefNotifVibrate != null
+                    ? mPrefNotifVibrate.isChecked() : false;
+            String mailboxLights = getNotificationLightPref();
+            if (mailboxEnabled != mOldMailboxEnabled) {
+                mPreferences.setNotificationsEnabled(mailboxEnabled);
+                mOldMailboxEnabled = mailboxEnabled;
+            }
+            if (!mailboxRingtone.equals(mOldMailboxRingtone)) {
+                mPreferences.setNotificationRingtoneUri(mailboxRingtone);
+                mOldMailboxRingtone = mailboxRingtone;
+            }
+            if (mailboxVibrate != mOldMailboxVibrate) {
+                mPreferences.setNotificationVibrateEnabled(mailboxVibrate);
+                mOldMailboxVibrate = mailboxVibrate;
+            }
+            if (!mailboxLights.equals(mOldMailboxLights)) {
+                mPreferences.setNotificationLights(NotificationLight.fromStringPref(mailboxLights));
+                mOldMailboxLights = mailboxLights;
+            }
+        }
+
+        private static class MailboxLoader extends MailAsyncTaskLoader<Map<String, Object>> {
+
+            public static final String RESULT_KEY_MAILBOX = "mailbox";
+            public static final String RESULT_KEY_ACCOUNT = "account";
+            public static final String RESULT_KEY_UIACCOUNT = "uiAccount";
+
+            private final long mMailboxId;
+
+            private MailboxLoader(Context context, long mailboxId) {
+                super(context);
+                mMailboxId = mailboxId;
+            }
+
+            @Override
+            public Map<String, Object> loadInBackground() {
+                final Map<String, Object> result = new HashMap<>();
+
+                final Mailbox mailbox = Mailbox.restoreMailboxWithId(getContext(), mMailboxId);
+                if (mailbox == null) {
+                    return null;
+                }
+                Account account = Account.restoreAccountWithId(getContext(), mailbox.mAccountKey);
+                if (account == null) {
+                    return null;
+                }
+                result.put(RESULT_KEY_MAILBOX, mailbox);
+                result.put(RESULT_KEY_ACCOUNT, account);
+
+                // Recover the uiAccount
+                final Cursor uiAccountCursor = getContext().getContentResolver().query(
+                        EmailProvider.uiUri("uiaccount", account.getId()),
+                        UIProvider.ACCOUNTS_PROJECTION,
+                        null, null, null);
+
+                if (uiAccountCursor != null && uiAccountCursor.moveToFirst()) {
+                    final com.android.mail.providers.Account uiAccount =
+                        com.android.mail.providers.Account.builder().buildFrom(uiAccountCursor);
+                    result.put(RESULT_KEY_UIACCOUNT, uiAccount);
+                }
+
+                return result;
+            }
+
+            @Override
+            protected void onDiscardResult(Map<String, Object> result) {}
+        }
+
+        private class MailboxLoaderCallbacks
+                implements LoaderManager.LoaderCallbacks<Map<String, Object>> {
+
+            private long mMailboxId;
+            private String mMailboxPersistentId;
+            private boolean mMailboxIsInbox;
+
+            @Override
+            public Loader<Map<String, Object>> onCreateLoader(int id, Bundle args) {
+                mMailboxId = getArguments().getLong(EXTRA_MAILBOX_ID, Mailbox.NO_MAILBOX);
+                mMailboxPersistentId = getArguments().getString(EXTRA_MAILBOX_PERSISTEND_ID, null);
+                mMailboxIsInbox = getArguments().getBoolean(EXTRA_MAILBOX_IS_INBOX, false);
+                return new MailboxLoader(getActivity(), mMailboxId);
+            }
+
+            @Override
+            public void onLoadFinished(Loader<Map<String, Object>> loader,
+                    Map<String, Object> data) {
+                final Mailbox mailbox = (Mailbox) (data == null
+                        ? null : data.get(MailboxLoader.RESULT_KEY_MAILBOX));
+                final Account account = (Account) (data == null
+                        ? null : data.get(MailboxLoader.RESULT_KEY_ACCOUNT));
+                if (mailbox == null || account == null) {
+                    getActivity().finish();
+                    return;
+                }
+
+                mUiAccount = (com.android.mail.providers.Account)
+                        data.get(MailboxLoader.RESULT_KEY_UIACCOUNT);
+                mAccount = account;
+                mMailbox = mailbox;
+                mPreferences = new FolderPreferences(getActivity(), mAccount.mEmailAddress,
+                        mMailboxPersistentId, mMailboxIsInbox);
+                loadOldPreferencesValues();
+
+                mPrefNotifEnabled.setChecked(mPreferences.areNotificationsEnabled());
+                setRingtone(mPreferences.getNotificationRingtoneUri());
+                if (mPrefNotifVibrate != null) {
+                    mPrefNotifVibrate.setChecked(mPreferences.isNotificationVibrateEnabled());
+                }
+                updateNotificationLight(mPreferences.getNotificationLight());
+
+                onDataLoaded();
+                if (mMailbox.mType != Mailbox.TYPE_DRAFTS) {
+                    enablePreferences(true);
+                }
+            }
+
+            @Override
+            public void onLoaderReset(Loader<Map<String, Object>> loader) {}
+        }
     }
 
     public static class MailboxSettingsFragment extends PreferenceFragment {
@@ -241,9 +798,10 @@ public class MailboxSettings extends PreferenceActivity {
         private CheckBoxPreference mSyncEnabledPref;
         private ListPreference mSyncLookbackPref;
 
-        private static Bundle getArguments(long mailboxId) {
+        private static Bundle getArguments(long mailboxId, String type) {
             final Bundle b = new Bundle(1);
             b.putLong(EXTRA_MAILBOX_ID, mailboxId);
+            b.putString(EXTRA_TYPE, type);
             return b;
         }
 
diff --git a/src/com/android/email/activity/setup/SetupDataFragment.java b/src/com/android/email/activity/setup/SetupDataFragment.java
index 9824e1b34..165d7b4b8 100644
--- a/src/com/android/email/activity/setup/SetupDataFragment.java
+++ b/src/com/android/email/activity/setup/SetupDataFragment.java
@@ -37,6 +37,7 @@ public class SetupDataFragment extends Fragment implements Parcelable {
     private static final String SAVESTATE_CREDENTIAL = "SetupDataFragment.credential";
     private static final String SAVESTATE_INCOMING_LOADED = "SetupDataFragment.incomingLoaded";
     private static final String SAVESTATE_OUTGOING_LOADED = "SetupDataFragment.outgoingLoaded";
+    private static final String SAVESTATE_AUTODISCOVER = "SetupDataFragment.autodiscover";
     private static final String SAVESTATE_POLICY = "SetupDataFragment.policy";
     private static final String SAVESTATE_INCOMING_PROTOCOL = "SetupDataFragment.incomingProtocol";
     private static final String SAVESTATE_AM_PROTOCOL = "SetupDataFragment.amProtocol";
@@ -50,6 +51,8 @@ public class SetupDataFragment extends Fragment implements Parcelable {
     // settings. Set them to 'true' by default, and false when we change the credentials or email
     private boolean mIncomingCredLoaded = true;
     private boolean mOutgoingCredLoaded = true;
+    // Autodiscover was run successfully
+    private boolean mAutodiscover = false;
     // This is accessed off-thread in AccountCheckSettingsFragment
     private volatile Policy mPolicy;
     // Cache incoming protocol and service info here
@@ -78,6 +81,7 @@ public class SetupDataFragment extends Fragment implements Parcelable {
         outState.putParcelable(SAVESTATE_CREDENTIAL, mCredentialResults);
         outState.putBoolean(SAVESTATE_INCOMING_LOADED, mIncomingCredLoaded);
         outState.putBoolean(SAVESTATE_OUTGOING_LOADED, mOutgoingCredLoaded);
+        outState.putBoolean(SAVESTATE_AUTODISCOVER, mAutodiscover);
         outState.putParcelable(SAVESTATE_POLICY, mPolicy);
         outState.putString(SAVESTATE_INCOMING_PROTOCOL, mIncomingProtocol);
         outState.putString(SAVESTATE_AM_PROTOCOL, mAmProtocol);
@@ -93,6 +97,7 @@ public class SetupDataFragment extends Fragment implements Parcelable {
             mCredentialResults = savedInstanceState.getParcelable(SAVESTATE_CREDENTIAL);
             mIncomingCredLoaded = savedInstanceState.getBoolean(SAVESTATE_INCOMING_LOADED);
             mOutgoingCredLoaded = savedInstanceState.getBoolean(SAVESTATE_OUTGOING_LOADED);
+            mAutodiscover = savedInstanceState.getBoolean(SAVESTATE_AUTODISCOVER);
             mPolicy = savedInstanceState.getParcelable(SAVESTATE_POLICY);
             mIncomingProtocol = savedInstanceState.getString(SAVESTATE_INCOMING_PROTOCOL);
             mAmProtocol = savedInstanceState.getString(SAVESTATE_AM_PROTOCOL);
@@ -127,6 +132,7 @@ public class SetupDataFragment extends Fragment implements Parcelable {
         mAccount.mEmailAddress = email;
         mIncomingCredLoaded = false;
         mOutgoingCredLoaded = false;
+        mAutodiscover = false;
     }
 
     public Bundle getCredentialResults() {
@@ -137,6 +143,7 @@ public class SetupDataFragment extends Fragment implements Parcelable {
         mCredentialResults = credentialResults;
         mIncomingCredLoaded = false;
         mOutgoingCredLoaded = false;
+        mAutodiscover = false;
     }
 
     public boolean isIncomingCredLoaded() {
@@ -155,6 +162,14 @@ public class SetupDataFragment extends Fragment implements Parcelable {
         mOutgoingCredLoaded = outgoingCredLoaded;
     }
 
+    public boolean isAutodiscover() {
+        return mAutodiscover;
+    }
+
+    public void setAutodiscover(boolean autodiscover) {
+        mAutodiscover = autodiscover;
+    }
+
     public synchronized Policy getPolicy() {
         return mPolicy;
     }
@@ -275,6 +290,7 @@ public class SetupDataFragment extends Fragment implements Parcelable {
             sb.append(":cred=");
             sb.append(mCredentialResults.toString());
         }
+        sb.append(":autodiscover=" + mAutodiscover);
         sb.append(":policy=");
         sb.append(mPolicy == null ? "none" : "exists");
         return sb.toString();
diff --git a/src/com/android/email/mail/transport/SmtpSender.java b/src/com/android/email/mail/transport/SmtpSender.java
old mode 100644
new mode 100755
index 060b9ca13..14756d9ef
--- a/src/com/android/email/mail/transport/SmtpSender.java
+++ b/src/com/android/email/mail/transport/SmtpSender.java
@@ -213,6 +213,13 @@ public class SmtpSender extends Sender {
         } catch (IOException ioe) {
             throw new MessagingException("Unable to send message", ioe);
         }
+        finally {
+           try {
+               close();
+           } catch (RuntimeException ioe) {
+               throw new RuntimeException("DEBUG #Unable to send message", ioe);
+           }
+        }
     }
 
     /**
diff --git a/src/com/android/email2/ui/MailActivityEmail.java b/src/com/android/email2/ui/MailActivityEmail.java
index 23b3facea..630a03bfd 100644
--- a/src/com/android/email2/ui/MailActivityEmail.java
+++ b/src/com/android/email2/ui/MailActivityEmail.java
@@ -27,6 +27,7 @@ import android.net.Uri;
 import android.os.Bundle;
 
 import com.android.email.Preferences;
+import com.android.email.activity.RequestPermissionsActivity;
 import com.android.email.provider.EmailProvider;
 import com.android.email.service.AttachmentService;
 import com.android.email.service.EmailServiceUtils;
@@ -57,6 +58,9 @@ public class MailActivityEmail extends com.android.mail.ui.MailActivity {
 
     @Override
     public void onCreate(Bundle bundle) {
+        if (RequestPermissionsActivity.startPermissionActivity(this)) {
+            finish();
+        }
         final Intent intent = getIntent();
         final Uri data = intent != null ? intent.getData() : null;
         if (data != null) {
diff --git a/tests/src/com/android/email/LegacyConversionsTests.java b/tests/src/com/android/email/LegacyConversionsTests.java
index 82f333ae7..27775ab69 100644
--- a/tests/src/com/android/email/LegacyConversionsTests.java
+++ b/tests/src/com/android/email/LegacyConversionsTests.java
@@ -388,7 +388,7 @@ public class LegacyConversionsTests extends ProviderTestCase2<EmailProvider> {
         String get1Text = null;
         String get1Html = null;
         for (Part viewable : viewables) {
-            String text = MimeUtility.getTextFromPart(viewable);
+            String text = MimeUtility.getTextFromPart(viewable, null);
             if (viewable.getMimeType().equalsIgnoreCase("text/html")) {
                 get1Html = text;
             } else {
diff --git a/tests/src/com/android/email/mail/store/ImapStoreUnitTests.java b/tests/src/com/android/email/mail/store/ImapStoreUnitTests.java
index 5e9efe617..4450f1881 100644
--- a/tests/src/com/android/email/mail/store/ImapStoreUnitTests.java
+++ b/tests/src/com/android/email/mail/store/ImapStoreUnitTests.java
@@ -1105,7 +1105,7 @@ public class ImapStoreUnitTests extends InstrumentationTestCase {
         MimeUtility.collectParts(message1, viewables, attachments);
         assertTrue(viewables.size() == 1);
         emptyBodyPart = viewables.get(0);
-        String text = MimeUtility.getTextFromPart(emptyBodyPart);
+        String text = MimeUtility.getTextFromPart(emptyBodyPart, null);
         assertNull(text);
     }
 
diff --git a/tests/src/com/android/email/provider/AccountBackupRestoreTests.java b/tests/src/com/android/email/provider/AccountBackupRestoreTests.java
index c9b902d5d..797e9885f 100644
--- a/tests/src/com/android/email/provider/AccountBackupRestoreTests.java
+++ b/tests/src/com/android/email/provider/AccountBackupRestoreTests.java
@@ -62,7 +62,7 @@ public class AccountBackupRestoreTests extends ProviderTestCase2<EmailProvider>
         assertEquals(" mEmailAddress", expect.mEmailAddress, actual.mEmailAddress);
 
         assertEquals(" mSyncLookback", expect.mSyncLookback, actual.mSyncLookback);
-        assertEquals(" mSyncInterval", expect.mSyncInterval, actual.mSyncInterval);
+        assertEquals(" mSyncInterval", expect.getSyncInterval(), actual.getSyncInterval());
         assertEquals(" mFlags", expect.mFlags, actual.mFlags);
         assertEquals(" mSenderName", expect.mSenderName, actual.mSenderName);
         assertEquals(" mProtocolVersion", expect.mProtocolVersion,
diff --git a/tests/src/com/android/email/provider/ProviderTestUtils.java b/tests/src/com/android/email/provider/ProviderTestUtils.java
index 0b8a05fa3..9ba4b2758 100644
--- a/tests/src/com/android/email/provider/ProviderTestUtils.java
+++ b/tests/src/com/android/email/provider/ProviderTestUtils.java
@@ -54,7 +54,7 @@ public class ProviderTestUtils extends Assert {
         account.mEmailAddress = name + "@android.com";
         account.mSyncKey = "sync-key-" + name;
         account.mSyncLookback = 1;
-        account.mSyncInterval = Account.CHECK_INTERVAL_NEVER;
+        account.setSyncInterval(Account.CHECK_INTERVAL_NEVER);
         account.mHostAuthKeyRecv = 0;
         account.mHostAuthKeySend = 0;
         account.mFlags = 4;
@@ -293,7 +293,7 @@ public class ProviderTestUtils extends Assert {
         assertEquals(caller + " mSyncKey", expect.mSyncKey, actual.mSyncKey);
 
         assertEquals(caller + " mSyncLookback", expect.mSyncLookback, actual.mSyncLookback);
-        assertEquals(caller + " mSyncInterval", expect.mSyncInterval, actual.mSyncInterval);
+        assertEquals(caller + " mSyncInterval", expect.getSyncInterval(), actual.getSyncInterval());
         assertEquals(caller + " mHostAuthKeyRecv", expect.mHostAuthKeyRecv,
                 actual.mHostAuthKeyRecv);
         assertEquals(caller + " mHostAuthKeySend", expect.mHostAuthKeySend,
diff --git a/tests/src/com/android/emailcommon/internet/MimeUtilityTest.java b/tests/src/com/android/emailcommon/internet/MimeUtilityTest.java
index d05220ea0..24ea0633e 100644
--- a/tests/src/com/android/emailcommon/internet/MimeUtilityTest.java
+++ b/tests/src/com/android/emailcommon/internet/MimeUtilityTest.java
@@ -369,19 +369,19 @@ public class MimeUtilityTest extends TestCase {
         // 1. test basic text/plain mode
         p.setHeader(MimeHeader.HEADER_CONTENT_TYPE, "text/plain");
         p.setBody(tb);
-        String gotText = MimeUtility.getTextFromPart(p);
+        String gotText = MimeUtility.getTextFromPart(p, null);
         assertEquals(theText, gotText);
 
         // 2. mixed case is OK
         p.setHeader(MimeHeader.HEADER_CONTENT_TYPE, "TEXT/PLAIN");
         p.setBody(tb);
-        gotText = MimeUtility.getTextFromPart(p);
+        gotText = MimeUtility.getTextFromPart(p, null);
         assertEquals(theText, gotText);
 
         // 3. wildcards OK
         p.setHeader(MimeHeader.HEADER_CONTENT_TYPE, "text/other");
         p.setBody(tb);
-        gotText = MimeUtility.getTextFromPart(p);
+        gotText = MimeUtility.getTextFromPart(p, null);
         assertEquals(theText, gotText);
     }
 
@@ -411,13 +411,13 @@ public class MimeUtilityTest extends TestCase {
         p.setBody(tb);
         // We call setHeader after setBody, since setBody overwrites Content-Type
         p.setHeader(MimeHeader.HEADER_CONTENT_TYPE, "text/html; charset=utf-8");
-        gotText = MimeUtility.getTextFromPart(p);
+        gotText = MimeUtility.getTextFromPart(p, null);
         assertTrue(MimeUtility.mimeTypeMatches(p.getMimeType(), "text/html"));
         assertEquals(UNICODE_EXPECT, gotText);
 
         p.setBody(tb);
         p.setHeader(MimeHeader.HEADER_CONTENT_TYPE, "text/html; charset=windows-1252");
-        gotText = MimeUtility.getTextFromPart(p);
+        gotText = MimeUtility.getTextFromPart(p, null);
         assertTrue(MimeUtility.mimeTypeMatches(p.getMimeType(), "text/html"));
         assertEquals(WINDOWS1252_EXPECT, gotText);
 
@@ -425,14 +425,14 @@ public class MimeUtilityTest extends TestCase {
         p.setBody(tb);
         p.setHeader(MimeHeader.HEADER_CONTENT_TYPE,
                     "text/html; prop1 = \"test\"; charset = \"utf-8\"; prop2 = \"test\"");
-        gotText = MimeUtility.getTextFromPart(p);
+        gotText = MimeUtility.getTextFromPart(p, null);
         assertTrue(MimeUtility.mimeTypeMatches(p.getMimeType(), "text/html"));
         assertEquals(UNICODE_EXPECT, gotText);
 
         p.setBody(tb);
         p.setHeader(MimeHeader.HEADER_CONTENT_TYPE,
                     "text/html; prop1 = \"test\"; charset = \"windows-1252\"; prop2 = \"test\"");
-        gotText = MimeUtility.getTextFromPart(p);
+        gotText = MimeUtility.getTextFromPart(p, null);
         assertTrue(MimeUtility.mimeTypeMatches(p.getMimeType(), "text/html"));
         assertEquals(WINDOWS1252_EXPECT, gotText);
 
@@ -442,13 +442,13 @@ public class MimeUtilityTest extends TestCase {
 
         p.setBody(tb);
         p.setHeader(MimeHeader.HEADER_CONTENT_TYPE, "TEXT/HtmL ; CHARseT=utf-8");
-        gotText = MimeUtility.getTextFromPart(p);
+        gotText = MimeUtility.getTextFromPart(p, null);
         assertTrue(MimeUtility.mimeTypeMatches(p.getMimeType(), "text/html"));
         assertEquals(UNICODE_EXPECT, gotText);
 
         p.setBody(tb);
         p.setHeader(MimeHeader.HEADER_CONTENT_TYPE, "TEXT/HtmL ; CHARseT=windows-1252");
-        gotText = MimeUtility.getTextFromPart(p);
+        gotText = MimeUtility.getTextFromPart(p, null);
         assertTrue(MimeUtility.mimeTypeMatches(p.getMimeType(), "text/html"));
         assertEquals(WINDOWS1252_EXPECT, gotText);
 
@@ -459,7 +459,7 @@ public class MimeUtilityTest extends TestCase {
         p.setBody(tb);
         p.setHeader(MimeHeader.HEADER_CONTENT_TYPE,
                     "text/html; charset=utf-8 (Plain text)");
-        gotText = MimeUtility.getTextFromPart(p);
+        gotText = MimeUtility.getTextFromPart(p, null);
         assertTrue(MimeUtility.mimeTypeMatches(p.getMimeType(), "text/html"));
         // Note: This test does not pass.
         //assertEquals(UNICODE_EXPECT, gotText);
@@ -467,7 +467,7 @@ public class MimeUtilityTest extends TestCase {
         p.setBody(tb);
         p.setHeader(MimeHeader.HEADER_CONTENT_TYPE,
                     "text/html; charset=windows-1252 (Plain text)");
-        gotText = MimeUtility.getTextFromPart(p);
+        gotText = MimeUtility.getTextFromPart(p, null);
         assertTrue(MimeUtility.mimeTypeMatches(p.getMimeType(), "text/html"));
         // Note: These tests does not pass.
         //assertEquals(WINDOWS1252_EXPECT, gotText);
-- 
2.17.0

