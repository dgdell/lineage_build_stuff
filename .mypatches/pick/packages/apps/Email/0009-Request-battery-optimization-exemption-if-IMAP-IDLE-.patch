From bedcadc665d315640a0cd80f4e1754403417b451 Mon Sep 17 00:00:00 2001
From: Danny Baumann <dannybaumann@web.de>
Date: Thu, 5 Jul 2018 10:14:11 +0200
Subject: [PATCH 09/19] Request battery optimization exemption if IMAP IDLE is
 used.

Change-Id: I585b791ff44c5dbc4b2503b9bcc1a132d18d4856
---
 AndroidManifest.xml                           |  6 +++
 .../android/email/NotificationController.java |  3 ++
 .../android/email/service/ImapService.java    | 34 ++++++++++--
 res/values/cm_strings.xml                     |  3 ++
 .../email/EmailNotificationController.java    | 29 ++++++++++
 ...ryOptimizationsExemptionProxyActivity.java | 53 +++++++++++++++++++
 6 files changed, 123 insertions(+), 5 deletions(-)
 create mode 100644 src/com/android/email/activity/BatteryOptimizationsExemptionProxyActivity.java

diff --git a/AndroidManifest.xml b/AndroidManifest.xml
index 199afe8dd..cf083f446 100644
--- a/AndroidManifest.xml
+++ b/AndroidManifest.xml
@@ -45,6 +45,7 @@
     <uses-permission android:name="android.permission.WAKE_LOCK"/>
     <uses-permission android:name="android.permission.READ_PHONE_STATE"/>
     <uses-permission android:name="android.permission.DOWNLOAD_WITHOUT_NOTIFICATION" />
+    <uses-permission android:name="android.permission.REQUEST_IGNORE_BATTERY_OPTIMIZATIONS" />
 
     <!-- This needs to be present when we are doing unbundled releases. -->
     <uses-sdk android:targetSdkVersion="21" android:minSdkVersion="14" />
@@ -380,6 +381,11 @@
             android:label="@string/open_source_licenses">
         </activity>
 
+        <activity
+            android:name=".activity.BatteryOptimizationsExemptionProxyActivity"
+            android:theme="@style/Theme.AppCompat.Translucent"
+            android:excludeFromRecents="true" />
+
         <!-- additional activities -->
 
         <provider
diff --git a/provider_src/com/android/email/NotificationController.java b/provider_src/com/android/email/NotificationController.java
index 0bd25a8be..61ca0c744 100644
--- a/provider_src/com/android/email/NotificationController.java
+++ b/provider_src/com/android/email/NotificationController.java
@@ -36,4 +36,7 @@ public interface NotificationController {
     void showPasswordExpiringNotificationSynchronous(long accountId);
     void showPasswordExpiredNotificationSynchronous(long accountId);
     void cancelPasswordExpirationNotifications();
+    void showIgnoreBatteryOptimizationsNotification(int contentTextResId,
+            Intent successServiceIntent);
+    void cancelIgnoreBatteryOptimizationsNotification();
 }
diff --git a/provider_src/com/android/email/service/ImapService.java b/provider_src/com/android/email/service/ImapService.java
index cfda45052..02c35e94b 100644
--- a/provider_src/com/android/email/service/ImapService.java
+++ b/provider_src/com/android/email/service/ImapService.java
@@ -26,7 +26,6 @@ import android.content.Context;
 import android.content.Intent;
 import android.database.ContentObserver;
 import android.database.Cursor;
-import android.net.ConnectivityManager;
 import android.net.NetworkInfo;
 import android.net.TrafficStats;
 import android.net.Uri;
@@ -240,11 +239,14 @@ public class ImapService extends Service {
 
         private void reschedulePing(long delay) {
             // Check for connectivity before reschedule
-            ConnectivityManager cm =
-                    (ConnectivityManager) mContext.getSystemService(Context.CONNECTIVITY_SERVICE);
-            NetworkInfo activeNetwork = cm.getActiveNetworkInfo();
-            if (activeNetwork == null || !activeNetwork.isConnected()) {
+            boolean connected = EmailConnectivityManager.isConnected(mContext);
+            if (Logging.LOGD) {
+                LogUtils.d(LOG_TAG, "Rescheduling ping for mailbox " + mMailbox.mId
+                        + ", delay " + delay + "ms, connected " + connected);
+            }
+            if (!connected) {
                 cancelPing();
+                ImapService.checkBatteryOptimizationsExemption(mContext);
             } else {
                 PendingIntent pi = getIdleRefreshIntent();
                 AlarmManager am = (AlarmManager) mContext.getSystemService(Context.ALARM_SERVICE);
@@ -287,12 +289,14 @@ public class ImapService extends Service {
             PendingIntent pi = getKickIdleConnectionPendingIntent();
             long due = SystemClock.elapsedRealtime() + KICK_IDLE_CONNECTION_TIMEOUT;
             long windowLength = KICK_IDLE_CONNECTION_MAX_DELAY;
+            LogUtils.d(LOG_TAG, "Scheduling IDLE connection kick for mailbox " + mMailbox.mId);
             AlarmManager am = (AlarmManager) mContext.getSystemService(Context.ALARM_SERVICE);
             am.setWindow(AlarmManager.ELAPSED_REALTIME_WAKEUP, due, windowLength, pi);
         }
 
         private void cancelKickIdleConnection() {
             AlarmManager am = (AlarmManager) mContext.getSystemService(Context.ALARM_SERVICE);
+            LogUtils.d(LOG_TAG, "Canceling IDLE connection kick for mailbox " + mMailbox.mId);
             am.cancel(getKickIdleConnectionPendingIntent());
         }
 
@@ -786,6 +790,10 @@ public class ImapService extends Service {
             // been changes while we lost connectivity. At the end of the sync
             // the IDLE connection will be re-established.
 
+            if (!checkBatteryOptimizationsExemption(this)) {
+                return START_STICKY;
+            }
+
             mIdleRefreshWakeLock.acquire();
 
             sExecutor.execute(new Runnable() {
@@ -892,6 +900,22 @@ public class ImapService extends Service {
         return Service.START_STICKY;
     }
 
+    private static boolean checkBatteryOptimizationsExemption(Context context) {
+        PowerManager pm = (PowerManager) context.getSystemService(Context.POWER_SERVICE);
+        final NotificationController nc =
+                NotificationControllerCreatorHolder.getInstance(context);
+        if (pm.isIgnoringBatteryOptimizations(context.getPackageName())) {
+            nc.cancelIgnoreBatteryOptimizationsNotification();
+            return true;
+        }
+
+        Intent intent = new Intent(context, ImapService.class)
+                .setAction(ACTION_RESTART_ALL_IDLE_CONNECTIONS);
+        nc.showIgnoreBatteryOptimizationsNotification(
+                R.string.battery_optimization_notification_imap_text, intent);
+        return false;
+    }
+
     private void requestSyncForAccountMailboxesIfNotIdled(Account account) {
         Cursor c = Mailbox.getLoopBackMailboxIdsForSync(getContentResolver(), account.mId);
         if (c == null) {
diff --git a/res/values/cm_strings.xml b/res/values/cm_strings.xml
index 90ee33fab..67cdfbffe 100644
--- a/res/values/cm_strings.xml
+++ b/res/values/cm_strings.xml
@@ -28,4 +28,7 @@
 
     <!-- Name for preference entry which leads to the per-folder notification settings activity -->
     <string name="folder_notify_settings_pref_title">Folder notification settings</string>
+
+    <string name="battery_optimization_notification_title">Background usage required</string>
+    <string name="battery_optimization_notification_imap_text">For IMAP push notifications, the Email app needs to run in the background.\nTouch here to allow background usage.</string>
 </resources>
diff --git a/src/com/android/email/EmailNotificationController.java b/src/com/android/email/EmailNotificationController.java
index e57b41833..2015d2a84 100644
--- a/src/com/android/email/EmailNotificationController.java
+++ b/src/com/android/email/EmailNotificationController.java
@@ -36,6 +36,7 @@ import android.support.v4.app.NotificationCompat;
 import android.text.TextUtils;
 import android.text.format.DateUtils;
 
+import com.android.email.activity.BatteryOptimizationsExemptionProxyActivity;
 import com.android.email.activity.setup.AccountSecurity;
 import com.android.email.activity.setup.HeadlessAccountSettingsLoader;
 import com.android.email.provider.EmailProvider;
@@ -68,6 +69,7 @@ public class EmailNotificationController implements NotificationController {
     private static final int NOTIFICATION_ID_ATTACHMENT_WARNING = 3;
     private static final int NOTIFICATION_ID_PASSWORD_EXPIRING = 4;
     private static final int NOTIFICATION_ID_PASSWORD_EXPIRED = 5;
+    private static final int NOTIFICATION_ID_BATTERY_OPTIMIZATIONS = 6;
 
     private static final int NOTIFICATION_ID_BASE_MASK = 0xF0000000;
     private static final int NOTIFICATION_ID_BASE_LOGIN_WARNING = 0x20000000;
@@ -590,6 +592,33 @@ public class EmailNotificationController implements NotificationController {
         notificationManager.cancel((int) (NOTIFICATION_ID_BASE_SECURITY_CHANGED + account.mId));
     }
 
+    @Override
+    public void showIgnoreBatteryOptimizationsNotification(int contentTextResId,
+            Intent successServiceIntent) {
+        Intent activityIntent = BatteryOptimizationsExemptionProxyActivity.createIntent(
+                mContext, successServiceIntent);
+        PendingIntent clickIntent = PendingIntent.getActivity(
+                    mContext, 0, activityIntent, PendingIntent.FLAG_UPDATE_CURRENT);
+        CharSequence title = mContext.getString(R.string.battery_optimization_notification_title);
+        CharSequence text = mContext.getString(contentTextResId);
+
+        final NotificationCompat.Builder builder = new NotificationCompat.Builder(mContext)
+                .setContentTitle(title)
+                .setContentText(text)
+                .setContentIntent(clickIntent)
+                .setSmallIcon(R.drawable.ic_notification_mail_24dp)
+                .setStyle(new NotificationCompat.BigTextStyle().bigText(text))
+                .setWhen(mClock.getTime())
+                .setOngoing(false);
+
+        mNotificationManager.notify(NOTIFICATION_ID_BATTERY_OPTIMIZATIONS, builder.build());
+    }
+
+    @Override
+    public void cancelIgnoreBatteryOptimizationsNotification() {
+        mNotificationManager.cancel(NOTIFICATION_ID_BATTERY_OPTIMIZATIONS);
+    }
+
     private static void refreshNotificationsForAccount(final Context context,
             final long accountId) {
         synchronized (sNotificationDelayedMessageLock) {
diff --git a/src/com/android/email/activity/BatteryOptimizationsExemptionProxyActivity.java b/src/com/android/email/activity/BatteryOptimizationsExemptionProxyActivity.java
new file mode 100644
index 000000000..da199fbd6
--- /dev/null
+++ b/src/com/android/email/activity/BatteryOptimizationsExemptionProxyActivity.java
@@ -0,0 +1,53 @@
+/**
+ * Copyright (c) 2018 The LineageOS Project
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.android.email.activity;
+
+import android.content.Context;
+import android.content.Intent;
+import android.net.Uri;
+import android.os.Bundle;
+import android.provider.Settings;
+import android.support.v7.app.AppCompatActivity;
+
+public class BatteryOptimizationsExemptionProxyActivity extends AppCompatActivity {
+    private static final int REQUEST_EXEMPTION = 1;
+
+    public static Intent createIntent(Context context, Intent successServiceIntent) {
+        return new Intent(context, BatteryOptimizationsExemptionProxyActivity.class)
+            .putExtra("serviceIntent", successServiceIntent);
+    }
+
+    @Override
+    protected void onCreate(Bundle savedInstanceState) {
+        super.onCreate(savedInstanceState);
+
+        Intent requestIntent = new Intent(Settings.ACTION_REQUEST_IGNORE_BATTERY_OPTIMIZATIONS)
+                .setData(Uri.parse("package:" + getPackageName()));
+        startActivityForResult(requestIntent, REQUEST_EXEMPTION);
+    }
+
+    @Override
+    protected void onActivityResult(int requestCode, int resultCode, Intent data) {
+        if (requestCode == REQUEST_EXEMPTION && resultCode == RESULT_OK) {
+            Intent serviceIntent = getIntent().getParcelableExtra("serviceIntent");
+            if (serviceIntent != null) {
+                startService(serviceIntent);
+            }
+        }
+        finish();
+    }
+}
-- 
2.17.1

