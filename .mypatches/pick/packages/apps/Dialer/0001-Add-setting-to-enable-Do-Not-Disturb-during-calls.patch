From 677ec8b3901638635fb4aa4bd36bde605754bb51 Mon Sep 17 00:00:00 2001
From: blunden <blunden2@gmail.com>
Date: Sun, 18 Mar 2018 14:02:30 +0100
Subject: [PATCH 1/3] Add setting to enable Do Not Disturb during calls

Android N and earlier enabled Do Not Disturb mode while in a call.
Reimplement this behavior to prevent incoming notifications from
vibrating or playing sounds.

Change-Id: Ic38ac775c6e353898190e1571b6d6e521c0e5aa1
---
 .../dialer/app/res/values/cm_strings.xml      |  4 +
 .../dialer/app/res/xml/sound_settings.xml     |  5 ++
 java/com/android/incallui/AndroidManifest.xml |  3 +
 .../android/incallui/InCallDndHandler.java    | 83 +++++++++++++++++++
 .../com/android/incallui/InCallPresenter.java |  9 ++
 5 files changed, 104 insertions(+)
 create mode 100644 java/com/android/incallui/InCallDndHandler.java

diff --git a/java/com/android/dialer/app/res/values/cm_strings.xml b/java/com/android/dialer/app/res/values/cm_strings.xml
index 90e648014..09d0e4d63 100644
--- a/java/com/android/dialer/app/res/values/cm_strings.xml
+++ b/java/com/android/dialer/app/res/values/cm_strings.xml
@@ -17,6 +17,10 @@
 <resources xmlns:xliff="urn:oasis:names:tc:xliff:document:1.2">
     <string name="incall_vibration_category_key" translatable="false">dialer_general_incall_vibration_category_key</string>
     <string name="incall_vibration_category_title">In-call vibration</string>
+    <string name="incall_category_key" translatable="false">dialer_general_incall_category_key</string>
+    <string name="incall_category_title">In-call</string>
+    <string name="incall_enable_dnd_title">Enable Do Not Disturb during call</string>
+    <string name="incall_vibrate_outgoing_key" translatable="false">incall_vibrate_outgoing</string>
     <string name="incall_vibrate_outgoing_title">Vibrate on answer</string>
     <string name="incall_vibrate_call_waiting_title">Vibrate on call waiting</string>
     <string name="incall_vibrate_hangup_title">Vibrate on hang up</string>
diff --git a/java/com/android/dialer/app/res/xml/sound_settings.xml b/java/com/android/dialer/app/res/xml/sound_settings.xml
index c0e78c208..526d80737 100644
--- a/java/com/android/dialer/app/res/xml/sound_settings.xml
+++ b/java/com/android/dialer/app/res/xml/sound_settings.xml
@@ -47,6 +47,11 @@
     android:key="@string/incall_vibration_category_key"
     android:title="@string/incall_vibration_category_title">
 
+    <SwitchPreference
+      android:defaultValue="false"
+      android:key="incall_enable_dnd"
+      android:title="@string/incall_enable_dnd_title"/>
+
     <CheckBoxPreference
       android:key="incall_vibrate_outgoing"
       android:title="@string/incall_vibrate_outgoing_title" />
diff --git a/java/com/android/incallui/AndroidManifest.xml b/java/com/android/incallui/AndroidManifest.xml
index 703e5b509..8d5585b58 100644
--- a/java/com/android/incallui/AndroidManifest.xml
+++ b/java/com/android/incallui/AndroidManifest.xml
@@ -37,6 +37,9 @@
   <!-- Testing location -->
   <uses-permission android:name="android.permission.ACCESS_FINE_LOCATION"/>
 
+  <!-- Required when the "Enable Do Not Disturb during call" setting is enabled -->
+  <uses-permission android:name="android.permission.ACCESS_NOTIFICATION_POLICY" />
+
   <!-- Set android:taskAffinity="com.android.incallui" for all activities to ensure proper
   navigation. Otherwise system could bring up DialtactsActivity instead, e.g. when user unmerge a
   call.
diff --git a/java/com/android/incallui/InCallDndHandler.java b/java/com/android/incallui/InCallDndHandler.java
new file mode 100644
index 000000000..c48a99749
--- /dev/null
+++ b/java/com/android/incallui/InCallDndHandler.java
@@ -0,0 +1,83 @@
+/*
+ * Copyright (C) 2018 The LineageOS Project
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.android.incallui;
+
+import android.app.NotificationManager;
+import android.content.Context;
+import android.content.SharedPreferences;
+import android.preference.PreferenceManager;
+
+import com.android.incallui.call.CallList;
+import com.android.incallui.call.DialerCall;
+import com.android.incallui.InCallPresenter.InCallState;
+
+public class InCallDndHandler implements
+        InCallPresenter.InCallStateListener {
+
+    private static final String KEY_ENABLE_DND = "incall_enable_dnd";
+
+    private SharedPreferences mPrefs;
+    private DialerCall mActiveCall;
+    private NotificationManager mNotificationManager;
+    private int mUserSelectedDndMode;
+
+    public InCallDndHandler(Context context) {
+        mPrefs = PreferenceManager.getDefaultSharedPreferences(context);
+        mNotificationManager = context.getSystemService(NotificationManager.class);
+
+        // Save the user's Do Not Disturb mode so that it can be restored when the call ends
+        mUserSelectedDndMode = mNotificationManager.getCurrentInterruptionFilter();
+    }
+
+    @Override
+    public void onStateChange(InCallState oldState, InCallState newState, CallList callList) {
+        DialerCall activeCall = callList.getActiveCall();
+
+        if (activeCall != null && mActiveCall == null) {
+            Log.d(this, "Transition to active call " + activeCall);
+            handleDndState(activeCall);
+            mActiveCall = activeCall;
+        } else if (activeCall == null && mActiveCall != null) {
+            Log.d(this, "Transition from active call " + mActiveCall);
+            handleDndState(mActiveCall);
+            mActiveCall = null;
+        }
+    }
+
+    private void handleDndState(DialerCall call) {
+        if (DialerCall.State.isConnectingOrConnected(call.getState())) {
+            if (mPrefs.getBoolean(KEY_ENABLE_DND, false)) {
+                Log.d(this, "Enabling Do Not Disturb mode");
+                setDoNotDisturbMode(NotificationManager.INTERRUPTION_FILTER_NONE);
+            }
+        } else {
+            if (mPrefs.getBoolean(KEY_ENABLE_DND, false)) {
+                Log.d(this, "Restoring previous Do Not Disturb mode");
+                setDoNotDisturbMode(mUserSelectedDndMode);
+            }
+        }
+    }
+
+    private void setDoNotDisturbMode(int newMode) {
+        if (mNotificationManager.isNotificationPolicyAccessGranted()) {
+            mNotificationManager.setInterruptionFilter(newMode);
+        } else {
+            Log.e(this, "Failed to set Do Not Disturb mode " + newMode
+                + " due to lack of permissions");
+        }
+    }
+}
diff --git a/java/com/android/incallui/InCallPresenter.java b/java/com/android/incallui/InCallPresenter.java
index 853952017..baedace0a 100644
--- a/java/com/android/incallui/InCallPresenter.java
+++ b/java/com/android/incallui/InCallPresenter.java
@@ -111,6 +111,7 @@ public class InCallPresenter implements CallList.Listener {
   private StatusBarNotifier mStatusBarNotifier;
   private ExternalCallNotifier mExternalCallNotifier;
   private InCallVibrationHandler mVibrationHandler;
+  private InCallDndHandler mDndHandler;
   private ContactInfoCache mContactInfoCache;
   private Context mContext;
   private final OnCheckBlockedListener mOnCheckBlockedListener =
@@ -347,6 +348,9 @@ public class InCallPresenter implements CallList.Listener {
     mVibrationHandler = new InCallVibrationHandler(context);
     addListener(mVibrationHandler);
 
+    mDndHandler = new InCallDndHandler(context);
+    addListener(mDndHandler);
+
     mProximitySensor = proximitySensor;
     addListener(mProximitySensor);
 
@@ -1461,6 +1465,11 @@ public class InCallPresenter implements CallList.Listener {
       }
       mVibrationHandler = null;
 
+      if (mDndHandler != null) {
+        removeListener(mDndHandler);
+      }
+      mDndHandler = null;
+
       if (mCallList != null) {
         mCallList.removeListener(this);
         mCallList.removeListener(mSpamCallListListener);
-- 
2.17.0

