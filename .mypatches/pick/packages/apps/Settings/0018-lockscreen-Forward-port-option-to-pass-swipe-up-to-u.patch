From 7a573479ad23113024d91a93591cc9159aaf88f1 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?eray=20or=C3=A7unus?= <erayorcunus@gmail.com>
Date: Thu, 17 Nov 2016 21:18:12 +0100
Subject: [PATCH 18/20] lockscreen: Forward port option to pass
 swipe-up-to-unlock
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

sam3000: fixups for pie
original commit message:

 * Adapt settings to Nougat SecuritySubSettings class
 * Interface switches in security_settings_*_sub.xml
 * Additional changes for dependencies
 * Cleanup the names to 'directly_show_lock'
 * Reorder the new preferences

lockscreen: Add option to pass swipe-up-to-unlock (2/3)

* Option appears on PIN,pattern and password methods
* User should press back button to see notifications, clock etc.
* Instantly hides keyguard if Smart Lock has unlocked phone.

CYNGNOS-1873
Change-Id: I31256770869b20842c69edb4a7a57b2bad7b3ea7
Signed-off-by: eray or√ßunus <erayorcunus@gmail.com>

# Conflicts:
#	res/values/cm_strings.xml
---
 res/values/cm_strings.xml                     |  4 +
 res/xml/screen_lock_settings.xml              |  6 ++
 .../DirectlyShowLockPreferenceController.java | 85 +++++++++++++++++++
 .../screenlock/ScreenLockSettings.java        |  2 +
 4 files changed, 97 insertions(+)
 create mode 100644 src/com/android/settings/security/screenlock/DirectlyShowLockPreferenceController.java

diff --git a/res/values/cm_strings.xml b/res/values/cm_strings.xml
index 88daa7b11a..9be55dead6 100644
--- a/res/values/cm_strings.xml
+++ b/res/values/cm_strings.xml
@@ -340,4 +340,8 @@
     <string name="sub_activate_failed">Activation failed.</string>
     <string name="sub_deactivate_success">SIM deactivated.</string>
     <string name="sub_deactivate_failed">Deactivation failed.</string>
+
+    <!-- Whether the keyguard will directly show the lock entry -->
+    <string name="directly_show_lock">Direct unlock</string>
+    <string name="directly_show_lock_summary">Skip the swipe to unlock screen and immediately begin key entry</string>
 </resources>
diff --git a/res/xml/screen_lock_settings.xml b/res/xml/screen_lock_settings.xml
index 9a3752bb54..c8132d86ed 100644
--- a/res/xml/screen_lock_settings.xml
+++ b/res/xml/screen_lock_settings.xml
@@ -46,6 +46,12 @@
         android:key="power_button_instantly_locks"
         android:title="@string/lockpattern_settings_enable_power_button_instantly_locks" />
 
+    <!-- available in pin/pattern/password -->
+    <SwitchPreference
+        android:key="directly_show_lock"
+        android:title="@string/directly_show_lock"
+        android:summary="@string/directly_show_lock_summary" />
+
     <!-- available in pin/pattern/password/slide -->
     <com.android.settingslib.RestrictedPreference
         android:key="owner_info_settings"
diff --git a/src/com/android/settings/security/screenlock/DirectlyShowLockPreferenceController.java b/src/com/android/settings/security/screenlock/DirectlyShowLockPreferenceController.java
new file mode 100644
index 0000000000..111d01d20e
--- /dev/null
+++ b/src/com/android/settings/security/screenlock/DirectlyShowLockPreferenceController.java
@@ -0,0 +1,85 @@
+/*
+ * Copyright (C) 2017 The Android Open Source Project
+ * Copyright (C) 2018 The LineageOS Project
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.android.settings.security.screenlock;
+
+import android.app.admin.DevicePolicyManager;
+import android.content.Context;
+import android.support.v7.preference.Preference;
+import android.support.v7.preference.TwoStatePreference;
+
+import com.android.internal.widget.LockPatternUtils;
+import com.android.settings.core.PreferenceControllerMixin;
+import com.android.settingslib.core.AbstractPreferenceController;
+
+import lineageos.providers.LineageSettings;
+
+import org.lineageos.internal.util.LineageLockPatternUtils;
+
+public class DirectlyShowLockPreferenceController extends AbstractPreferenceController
+        implements PreferenceControllerMixin, Preference.OnPreferenceChangeListener {
+
+    private static final String KEY_DIRECTLY_SHOW_LOCK = "directly_show_lock";
+
+    private final int mUserId;
+    private final LockPatternUtils mLockPatternUtils;
+    private final LineageLockPatternUtils mLineageLockPatternUtils;
+
+    public DirectlyShowLockPreferenceController(Context context, int userId,
+            LockPatternUtils lockPatternUtils) {
+        super(context);
+        mUserId = userId;
+        mLockPatternUtils = lockPatternUtils;
+        mLineageLockPatternUtils = new LineageLockPatternUtils(context);
+    }
+
+    @Override
+    public boolean isAvailable() {
+        if (!mLockPatternUtils.isSecure(mUserId)) {
+            return false;
+        }
+        switch (mLockPatternUtils.getKeyguardStoredPasswordQuality(mUserId)) {
+            case DevicePolicyManager.PASSWORD_QUALITY_SOMETHING:
+            case DevicePolicyManager.PASSWORD_QUALITY_NUMERIC:
+            case DevicePolicyManager.PASSWORD_QUALITY_NUMERIC_COMPLEX:
+            case DevicePolicyManager.PASSWORD_QUALITY_ALPHABETIC:
+            case DevicePolicyManager.PASSWORD_QUALITY_ALPHANUMERIC:
+            case DevicePolicyManager.PASSWORD_QUALITY_COMPLEX:
+            case DevicePolicyManager.PASSWORD_QUALITY_MANAGED:
+                return true;
+            default:
+                return false;
+        }
+    }
+
+    @Override
+    public void updateState(Preference preference) {
+        ((TwoStatePreference) preference).setChecked(
+                mLineageLockPatternUtils.shouldPassToSecurityView(mUserId));
+    }
+
+    @Override
+    public String getPreferenceKey() {
+        return KEY_DIRECTLY_SHOW_LOCK;
+    }
+
+    @Override
+    public boolean onPreferenceChange(Preference preference, Object newValue) {
+        mLineageLockPatternUtils.setPassToSecurityView((Boolean) newValue, mUserId);
+        return true;
+    }
+}
diff --git a/src/com/android/settings/security/screenlock/ScreenLockSettings.java b/src/com/android/settings/security/screenlock/ScreenLockSettings.java
index 04a2f17693..cc885ab524 100644
--- a/src/com/android/settings/security/screenlock/ScreenLockSettings.java
+++ b/src/com/android/settings/security/screenlock/ScreenLockSettings.java
@@ -82,6 +82,8 @@ public class ScreenLockSettings extends DashboardFragment
                 context, MY_USER_ID, lockPatternUtils));
         controllers.add(new PowerButtonInstantLockPreferenceController(
                 context, MY_USER_ID, lockPatternUtils));
+        controllers.add(new DirectlyShowLockPreferenceController(
+                context, MY_USER_ID, lockPatternUtils));
         controllers.add(new LockAfterTimeoutPreferenceController(
                 context, MY_USER_ID, lockPatternUtils));
         controllers.add(new PinScramblePreferenceController(
-- 
2.17.1

