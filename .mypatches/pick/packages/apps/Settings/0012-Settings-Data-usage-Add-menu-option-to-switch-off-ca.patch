From 4440d041194a723df7e6f41a9399c120ec626d2e Mon Sep 17 00:00:00 2001
From: MSe1969 <mse1969@posteo.de>
Date: Wed, 12 Sep 2018 19:37:38 +0200
Subject: [PATCH 12/12] Settings / Data usage: Add menu option to switch off
 captive portal

 * Extend menu in 'Data usage' to show an 'Extras...' screen with
   option to switch on/off the captive portal, which is equivalent
   to adb command 'settings put global captive_portal_mode [1|0]'
 * Warning dialog is shown, when captive portal check is switched off
 * Will be reset to default, if 'Reset network settings' is chosen
   from the 'Network & Internet' menu

Change-Id: Ibbffdb5f3930df74ca8b4ba93d451f7fad086989

# Conflicts:
#	res/values/cm_strings.xml
---
 res/layout/network_extras_view.xml            | 29 +++++++
 res/menu/data_usage.xml                       |  3 +
 res/values/cm_strings.xml                     |  9 +++
 .../android/settings/ResetNetworkConfirm.java |  4 +
 .../settings/datausage/DataUsageSummary.java  | 10 +++
 ...CaptivePortalModePreferenceController.java | 75 +++++++++++++++++++
 .../network/CaptivePortalWarningDialog.java   | 69 +++++++++++++++++
 .../CaptivePortalWarningDialogHost.java       | 28 +++++++
 .../network/NetworkExtrasFragment.java        | 74 ++++++++++++++++++
 9 files changed, 301 insertions(+)
 create mode 100644 res/layout/network_extras_view.xml
 create mode 100644 src/com/android/settings/network/CaptivePortalModePreferenceController.java
 create mode 100644 src/com/android/settings/network/CaptivePortalWarningDialog.java
 create mode 100644 src/com/android/settings/network/CaptivePortalWarningDialogHost.java
 create mode 100644 src/com/android/settings/network/NetworkExtrasFragment.java

diff --git a/res/layout/network_extras_view.xml b/res/layout/network_extras_view.xml
new file mode 100644
index 0000000000..7aeb991a2d
--- /dev/null
+++ b/res/layout/network_extras_view.xml
@@ -0,0 +1,29 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!-- Copyright (C) 2018 The LineageOS Project
+
+     Licensed under the Apache License, Version 2.0 (the "License");
+     you may not use this file except in compliance with the License.
+     You may obtain a copy of the License at
+
+          http://www.apache.org/licenses/LICENSE-2.0
+
+     Unless required by applicable law or agreed to in writing, software
+     distributed under the License is distributed on an "AS IS" BASIS,
+     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+     See the License for the specific language governing permissions and
+     limitations under the License.
+
+-->
+
+<PreferenceScreen
+    xmlns:android="http://schemas.android.com/apk/res/android"
+    xmlns:settings="http://schemas.android.com/apk/res/com.android.settings"
+    android:title="@string/network_dashboard_title">
+
+    <SwitchPreference
+        android:key="captive_portal_switch"
+        android:title="@string/captive_portal_switch_title"
+        android:summary="@string/captive_portal_switch_summary"
+        android:icon="@drawable/ic_hotspot"/>
+
+</PreferenceScreen>
diff --git a/res/menu/data_usage.xml b/res/menu/data_usage.xml
index 9fe6b60118..88ba8726ab 100644
--- a/res/menu/data_usage.xml
+++ b/res/menu/data_usage.xml
@@ -18,4 +18,7 @@
     <item
         android:id="@+id/data_usage_menu_cellular_networks"
         android:title="@string/data_usage_menu_cellular_networks" />
+    <item
+        android:id="@+id/network_extras_menu"
+        android:title="@string/network_extras_menu" />
 </menu>
diff --git a/res/values/cm_strings.xml b/res/values/cm_strings.xml
index cdd13b9818..f2371169ca 100644
--- a/res/values/cm_strings.xml
+++ b/res/values/cm_strings.xml
@@ -383,4 +383,13 @@
 
     <!-- Screenshot shutter sound -->
     <string name="screenshot_shutter_sound_title">Screenshot shutter sound</string>
+
+    <!-- Datausage: Extras menu -->
+    <string name="network_extras_menu">Extras...</string>
+
+    <!-- Captive Portal -->
+    <string name="captive_portal_switch_title">Captive portal mode</string>
+    <string name="captive_portal_switch_summary">Enable or disable the captive portal probing for connection attempts (default ON).</string>
+    <string name="captive_portal_switch_warning">If you switch off the captive portal, you will not receive connectivity informations any longer. Really switch off?</string>
+
 </resources>
diff --git a/src/com/android/settings/ResetNetworkConfirm.java b/src/com/android/settings/ResetNetworkConfirm.java
index f70d3c27ef..37dae5aa6c 100644
--- a/src/com/android/settings/ResetNetworkConfirm.java
+++ b/src/com/android/settings/ResetNetworkConfirm.java
@@ -27,6 +27,7 @@ import android.net.wifi.WifiManager;
 import android.os.Bundle;
 import android.os.UserHandle;
 import android.os.UserManager;
+import android.provider.Settings;
 import android.telephony.SubscriptionManager;
 import android.telephony.TelephonyManager;
 import android.view.LayoutInflater;
@@ -108,6 +109,9 @@ public class ResetNetworkConfirm extends OptionsMenuFragment {
             ImsManager.factoryReset(context);
             restoreDefaultApn(context);
 
+            Settings.Global.putInt(context.getContentResolver(),
+                    Settings.Global.CAPTIVE_PORTAL_MODE, 1);
+
             Toast.makeText(context, R.string.reset_network_complete_toast, Toast.LENGTH_SHORT)
                     .show();
         }
diff --git a/src/com/android/settings/datausage/DataUsageSummary.java b/src/com/android/settings/datausage/DataUsageSummary.java
index e37cc4a6c6..ca7ccc33d9 100644
--- a/src/com/android/settings/datausage/DataUsageSummary.java
+++ b/src/com/android/settings/datausage/DataUsageSummary.java
@@ -47,6 +47,7 @@ import android.view.Menu;
 import android.view.MenuInflater;
 import android.view.MenuItem;
 import com.android.internal.logging.nano.MetricsProto.MetricsEvent;
+import com.android.settings.network.NetworkExtrasFragment;
 import com.android.settings.R;
 import com.android.settings.SummaryPreference;
 import com.android.settings.Utils;
@@ -94,6 +95,7 @@ public class DataUsageSummary extends DataUsageBase implements Indexable, DataUs
     private NetworkRestrictionsPreference mNetworkRestrictionPreference;
     private WifiManager mWifiManager;
     private NetworkPolicyEditor mPolicyEditor;
+    private Context mContext;
 
     @Override
     protected int getHelpResource() {
@@ -105,6 +107,7 @@ public class DataUsageSummary extends DataUsageBase implements Indexable, DataUs
         super.onCreate(icicle);
 
         final Context context = getContext();
+        mContext = context;
         NetworkPolicyManager policyManager = NetworkPolicyManager.from(context);
         mWifiManager = (WifiManager) context.getSystemService(Context.WIFI_SERVICE);
         mPolicyEditor = new NetworkPolicyEditor(policyManager);
@@ -176,6 +179,13 @@ public class DataUsageSummary extends DataUsageBase implements Indexable, DataUs
                 startActivity(intent);
                 return true;
             }
+            case R.id.network_extras_menu: {
+                Utils.startWithFragment(mContext,
+                    NetworkExtrasFragment.class.getName(),
+                    null, null, 0, R.string.network_extras_menu,
+                    null, MetricsEvent.TYPE_UNKNOWN);
+                return true;
+            }
         }
         return false;
     }
diff --git a/src/com/android/settings/network/CaptivePortalModePreferenceController.java b/src/com/android/settings/network/CaptivePortalModePreferenceController.java
new file mode 100644
index 0000000000..7484e9a7c0
--- /dev/null
+++ b/src/com/android/settings/network/CaptivePortalModePreferenceController.java
@@ -0,0 +1,75 @@
+/*
+ * Copyright (C) 2018 The LineageOS Project
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package com.android.settings.network;
+
+import android.app.Fragment;
+import android.content.Context;
+import android.provider.Settings;
+import android.support.v14.preference.SwitchPreference;
+import android.support.v7.preference.Preference;
+
+import com.android.settings.core.PreferenceControllerMixin;
+import com.android.settingslib.core.AbstractPreferenceController;
+
+public class CaptivePortalModePreferenceController extends AbstractPreferenceController
+        implements PreferenceControllerMixin, Preference.OnPreferenceChangeListener {
+
+    private static final String TAG = "CaptivePortalModePreferenceController";
+    private static final String CAPTIVE_PORTAL_SWITCH_KEY = "captive_portal_switch";
+
+    private SwitchPreference mCaptivePortalMode;
+    private final Fragment mFragment;
+
+    public CaptivePortalModePreferenceController(Context context, Fragment hostFragment) {
+        super(context);
+
+        mFragment = hostFragment;
+    }
+
+    @Override
+    public void updateState(Preference preference) {
+        boolean value = (Settings.Global.getInt(mContext.getContentResolver(),
+                         Settings.Global.CAPTIVE_PORTAL_MODE,
+                         Settings.Global.CAPTIVE_PORTAL_MODE_PROMPT) != 0);
+        ((SwitchPreference) preference).setChecked(value);
+    }
+
+    @Override
+    public boolean onPreferenceChange(Preference preference, Object newValue) {
+        if ((Boolean) newValue) {
+            Settings.Global.putInt(mContext.getContentResolver(),
+                    Settings.Global.CAPTIVE_PORTAL_MODE, 1);
+        } else {
+            CaptivePortalWarningDialog.show(mFragment);
+        }
+        return true;
+    }
+
+    public void onCaptivePortalSwitchOffDialogConfirmed() {
+        Settings.Global.putInt(mContext.getContentResolver(),
+                Settings.Global.CAPTIVE_PORTAL_MODE, 0);
+    }
+
+    @Override
+    public boolean isAvailable() {
+        return true;
+    }
+
+    @Override
+    public String getPreferenceKey() {
+        return CAPTIVE_PORTAL_SWITCH_KEY;
+    }
+}
diff --git a/src/com/android/settings/network/CaptivePortalWarningDialog.java b/src/com/android/settings/network/CaptivePortalWarningDialog.java
new file mode 100644
index 0000000000..ef53a50ab5
--- /dev/null
+++ b/src/com/android/settings/network/CaptivePortalWarningDialog.java
@@ -0,0 +1,69 @@
+/*
+ * Copyright (C) 2018 The LineageOS Project
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.android.settings.network;
+
+import android.app.AlertDialog;
+import android.app.Dialog;
+import android.app.Fragment;
+import android.app.FragmentManager;
+import android.content.DialogInterface;
+import android.os.Bundle;
+
+import com.android.internal.logging.nano.MetricsProto;
+import com.android.settings.R;
+import com.android.settings.core.instrumentation.InstrumentedDialogFragment;
+
+public class CaptivePortalWarningDialog extends InstrumentedDialogFragment implements
+        DialogInterface.OnClickListener, DialogInterface.OnDismissListener {
+
+    public static final String TAG = "CaptivePortalWarningDialog";
+
+    public static void show(Fragment host) {
+        final FragmentManager manager = host.getActivity().getFragmentManager();
+        if (manager.findFragmentByTag(TAG) == null) {
+            final CaptivePortalWarningDialog dialog =
+                    new CaptivePortalWarningDialog();
+            dialog.setTargetFragment(host, 0 /* requestCode */);
+            dialog.show(manager, TAG);
+        }
+    }
+
+    @Override
+    public int getMetricsCategory() {
+        return MetricsProto.MetricsEvent.TYPE_UNKNOWN;
+    }
+
+    @Override
+    public Dialog onCreateDialog(Bundle savedInstanceState) {
+        return new AlertDialog.Builder(getActivity())
+                .setTitle(R.string.captive_portal_switch_title)
+                .setMessage(R.string.captive_portal_switch_warning)
+                .setIconAttribute(android.R.attr.alertDialogIcon)
+                .setPositiveButton(android.R.string.yes, this /* onClickListener */)
+                .setNegativeButton(android.R.string.no, null /* onClickListener */)
+                .create();
+    }
+
+    @Override
+    public void onClick(DialogInterface dialog, int which) {
+        final CaptivePortalWarningDialogHost host = (CaptivePortalWarningDialogHost) getTargetFragment();
+        if (host == null) {
+            return;
+        }
+        host.onCaptivePortalSwitchOffDialogConfirmed();
+    }
+}
diff --git a/src/com/android/settings/network/CaptivePortalWarningDialogHost.java b/src/com/android/settings/network/CaptivePortalWarningDialogHost.java
new file mode 100644
index 0000000000..eb1c920b1e
--- /dev/null
+++ b/src/com/android/settings/network/CaptivePortalWarningDialogHost.java
@@ -0,0 +1,28 @@
+/*
+ * Copyright (C) 2018 The LineageOS Project
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.android.settings.network;
+
+/**
+ * Interface for CaptivePortalWarningDialogHost callbacks.
+ */
+public interface CaptivePortalWarningDialogHost {
+
+    /**
+     * Called when the user presses YES on the warning dialog.
+     */
+    void onCaptivePortalSwitchOffDialogConfirmed();
+}
diff --git a/src/com/android/settings/network/NetworkExtrasFragment.java b/src/com/android/settings/network/NetworkExtrasFragment.java
new file mode 100644
index 0000000000..f73d66f613
--- /dev/null
+++ b/src/com/android/settings/network/NetworkExtrasFragment.java
@@ -0,0 +1,74 @@
+/*
+ * Copyright (C) 2018 The LineageOS Project
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package com.android.settings.network;
+
+import android.app.Activity;
+import android.app.Fragment;
+import android.content.Context;
+import android.content.res.Resources;
+
+import com.android.internal.logging.nano.MetricsProto;
+import com.android.settings.R;
+import com.android.settings.dashboard.DashboardFragment;
+import com.android.settingslib.core.AbstractPreferenceController;
+
+import java.util.ArrayList;
+import java.util.List;
+
+/*
+ *  Extras Fragment for additional network settings
+ */
+public class NetworkExtrasFragment extends DashboardFragment implements
+        CaptivePortalWarningDialogHost {
+
+    private static final String TAG = "NetworkExtras";
+
+    @Override
+    public int getMetricsCategory() {
+        return MetricsProto.MetricsEvent.TYPE_UNKNOWN;
+    }
+
+    @Override
+    protected String getLogTag() {
+        return TAG;
+    }
+
+    @Override
+    protected int getPreferenceScreenResId() {
+        return R.layout.network_extras_view;
+    }
+
+    @Override
+    public void onCaptivePortalSwitchOffDialogConfirmed() {
+        final CaptivePortalModePreferenceController controller =
+                getPreferenceController(CaptivePortalModePreferenceController.class);
+        controller.onCaptivePortalSwitchOffDialogConfirmed();
+    }
+
+    @Override
+    protected List<AbstractPreferenceController> getPreferenceControllers(Context context) {
+        return buildPreferenceControllers(context, this);
+    }
+
+    private static List<AbstractPreferenceController> buildPreferenceControllers(Context context,
+            Fragment fragment) {
+        final List<AbstractPreferenceController> controllers = new ArrayList<>();
+        final CaptivePortalModePreferenceController captiveportalModePreferenceController =
+                new CaptivePortalModePreferenceController(context, fragment);
+        controllers.add(captiveportalModePreferenceController);
+        return controllers;
+    }
+}
-- 
2.17.1

