From d61cf88645cc70273a6fdc69622ad504fc7c5dda Mon Sep 17 00:00:00 2001
From: Bruno Martins <bgcngm@gmail.com>
Date: Mon, 4 Dec 2017 13:30:16 +0000
Subject: [PATCH 2/9] Settings: Privacy Guard

This had been partially split into CMParts, now LineageParts.
The AppOps functionality still lives here.

Squash of the following changes, adapted to the Lineage SDK:

Author: Steve Kondik <shade@chemlab.org>
Date:   Tue Feb 25 14:02:16 2014 +0100

    settings: Relocate Privacy Guard icons to framework

    * So we can use them in the permission dialog for MODE_ASK

    Change-Id: Ia9bac7dff0bbe91ae48db5d4b0d8f46feb9fdf86

Author: DvTonder <david.vantonder@gmail.com>
Date:   Thu Jan 16 19:01:23 2014 -0500

    Settings: Fix up top level "Privacy" section

    Change-Id: Id4dbda10a891c793bc6eb3c42807cc0e3f6092cc

Author: Danny Baumann <dannybaumann@web.de>
Date:   Fri Nov 8 13:37:07 2013 +0100

    Add back privacy guard manager.

    Change-Id: Ic9fbbae137bb8425fe72a6cdb2f17117351b5709

Author: Chirayu Desai <cdesai@cyanogenmod.org>
Date:   Sat Dec 28 18:51:46 2013 +0530

    PrivacyGuard: Specify a default value in Settings.getInt method call

    * While privacy guard is enabled by default, the default value specified
      here is returned only when the setting is not defined or not an integer.

    Change-Id: Iaedffcc76a23a310aa7915f6a42ccce83ba5d2a6

Author: Matt Mower <mowerm@gmail.com>
Date:   Wed Feb 5 19:40:37 2014 -0600

    PrivacyGuard: confirm permissions reset

    The button to reset all application permissions to enabled looks
    suspiciously like a refresh button. Prompt the user with a confirmation
    dialog to make sure they know what they've pressed.

    Change-Id: I0444c5bf8e9533feccf890055d34d3200609c6f6

Author: Diogo Ferreira <defer@cyngn.com>
Date:   Wed Dec 17 11:56:22 2014 +0000

    su: Add Root access app-ops control

    Adds an app-ops option for root access.

    Platform-signed apps weren't previously being listed but there are some
    that use root access (FileManager comes to mind).

    So we list all of them, but for platform-signed apps we only show the
    root toggle and none of the permission-based ones.

    Change-Id: Ie716974156d55eb66061e78dc39505569e5bdc2a

Author: Shashank Mittal <mittals@codeaurora.org>
Date:   Thu Sep 5 19:01:47 2013 -0700

    AppOps: Add more operations in app ops settings.

    Add following operations in app ops settings.

    -- Wifi enable/disable
    -- Bluetooth enable/disable

    Change-Id: I32183d77b88c326168557444a445765b5a69de6f

    AppOps: Add support for nfc operation

    Add support for nfc operation

    Change-Id: I0ca617b11d3f65f80cc49c3f629312e2fee1ba91

    AppOps: Add mobile data-on permission control.

    Add mobile data-on permission control.

    Change-Id: I0956fb1575addb5f4e522e664a80442120190b86

Author: Michael Bestas <mikeioannina@gmail.com>
Date:   Sat Mar 8 03:18:34 2014 +0200

    Settings: Convert AppOps array items to string references

    * Avoid future breakage
     This will need conversion of all AOSP translated arrays to strings

    Change-Id: I2e52e4013d1232d529ce5b9e3aae3502c42e938a

Author: Shashank Mittal <mittals@codeaurora.org>
Date:   Thu Mar 6 17:16:49 2014 -0800

    AppOps: Add 'Always ask' option under appOps setting.

    Add always ask option for each operation.

    Change-Id: Ia4f331a5b7d0b1c8ae6946c55a4f78818fe0454f

Author: Shashank Mittal <mittals@codeaurora.org>
Date:   Fri Aug 1 13:05:35 2014 -0700

    AppOps: Use switch widget for non-strict ops.

    There are few Ops for which 'Always Ask' mode is not allwoed.
    So use switch widget to control such Ops.

    Change-Id: Ic7464a207c00e4cb9efff57c1f060e04379c1ee7

Author: Chirayu Desai <cdesai@cyanogenmod.org>
Date:   Mon Dec 7 14:07:11 2015 -0800

    Allow disabling the privacy guard notification - port from cm-12.1 (1/3)

    Change-Id: Iebf4545c1a65b10036a4865bae29d14e86b12d07

Author: Roman Birg <roman@cyngn.com>
Date:   Mon Nov 2 17:34:00 2015 -0800

    Fix advanced privacy guard screen

    Change-Id: I1064f2df748b21384f53219b87645f1569f595d5
    Signed-off-by: Roman Birg <roman@cyngn.com>

Author: Sam Mortimer <sam@mortimer.me.uk>
Date:   Thu Oct 3 13:51:31 2013 -0700

    AppOps: menu options to show/hide user and system apps

    Change-Id: Ia55364c361db949a891e4b53a757ee4dff519eb6

Author: Danny Baumann <dannybaumann@web.de>
Date:   Wed Oct 2 22:24:14 2013 -0700

    [1/2] AppOps: Show allowed/ignored counts

    Change-Id: Ia27737155c33e934df9a2a1fcff88379240fd096

Author: Sam Mortimer <sam@mortimer.me.uk>
Date:   Sun Dec 1 21:39:07 2013 -0800

    AppOps: only apply app type filters to summary screen

    *) If buildState() is called for a single package, do
       not apply hide user/system app filters.
    *) Fixes show detail display when called via
       long press in privacyguard and an AppOp hide
       filter is ticked.

    Change-Id: If31d094fb989836ab6829daeefe820695032c0ed

Author: Diogo Ferreira <defer@cyngn.com>
Date:   Mon Jan 5 18:19:12 2015 +0000

    privacyguard: Add Superuser summary

    Adds superuser summary to the privacy guard "Advanced" menu, this
    is useful for auditing purposes. The tab is only visible when root
    for apps is enabled.

    Change-Id: I0b71c51d10e44e69102c311e526cdb1fde9bda26

Author: Danesh M <daneshm90@gmail.com>
Date:   Mon Mar 21 13:56:22 2016 -0700

    Settings : Fix default privacy guard preference

    Ensure we write to the correct table.
    CYNGNOS-2264

    Change-Id: I1260cf665080631e3e2ec19b371a79eee273c6d2

Author: Lars Greiss <kufikugel@googlemail.com>
Date:   Sat Apr 25 03:15:15 2015 +0300

    Launch app privacy settings when tapping on PG notification (2/2)

    Based on https://github.com/SlimRoms/packages_apps_Settings/commit/46bb1442aa96aad6890e3ce7b6f3c0466ababf25

    JIRA: CYAN-6077
    Change-Id: I8632e8c944c1d5d7ad2fb2a2276bae5fe2d4a0a0

Author: Michael Bestas <mikeioannina@gmail.com>
Date:   Mon Jan 12 00:09:26 2015 +0200

    Update privacy guard reset icon

    Change-Id: Ia636b08fea0d21c0185d053ecf601d1ddcf5a828

Author: jrizzoli <joey@cyanogenmoditalia.it>
Date:   Fri Apr 24 15:00:28 2015 +0200

    Settings: update dashboard icons

    * Lockscreen: drawable from quicktoggles
    * Performance: chip
    * Privacy: shield
    * Sounds: speaker

    Change-Id: I227778583d073c1d3fdfb727dcc32c949c535847
    Signed-off-by: jrizzoli <joey@cyanogenmoditalia.it>

Author: blunden <blunden2@gmail.com>
Date:   Sat Dec 6 20:18:20 2014 +0100

    Update the Privacy category drawable

    Replace the current ones with new vector drawables

    Change-Id: I27a6778d876672c78469b886e2574baa149aad80

Author: Diogo Ferreira <defer@cyngn.com>
Date:   Mon Jan 5 17:56:53 2015 +0000

    PrivacyGuard: Tint the enabled icon

    The enabled icon was white and when enabled, the icon would get
    the exact same color as the background, rendering impossible to see.

    Change-Id: I4dc2b52cfca46abf2eff28a0b25918d42cf39f09

Author: nickdoherty81 <nickdoh81@gmail.com>
Date:   Mon Jan 5 00:07:56 2015 -0500

    Check boxes to Switches in PrivacyGuardPerfs

    Change-Id: I329df30a6a095a6a5f5829d8b627b00769e18685

Author: Diogo Ferreira <defer@cyngn.com>
Date:   Wed Jan 14 16:06:23 2015 +0000

    appops: Load the app list asynchronously

    The AppList is pretty big and it is loading in the UI thread. This
    is noticeable even on high-end chips and there is a definite possibility
    that it throws an ANR on lower-end ones.

    This patchset adds an asynchronous loader and updates the privacy guard
    to use it.

    Change-Id: I81f3fb64604af07a351f8cbdfffa7454389e2cee

Author: Adnan Begovic <adnan@cyngn.com>
Date:   Tue Jan 27 18:11:19 2015 -0800

    Settings: Fix off-by-one SectionIndexer in PrivacyGuard.

    Change-Id: If97876214d6f532ca4e5a09f09d881cd4fbf0231

Author: Adnan Begovic <adnan@cyngn.com>
Date:   Wed Jan 28 15:53:35 2015 -0800

    Settings: Fix inflate exception on search. Dynamically replace nested fragment.

       When PrivacyGuard is opened, the parent fragment would inflate the layout
       which contained a nested fragment. This is bad behavior. Since we couldn't
       keep track of the fragments lifecycle, the fragment we instantiated during
       inflation would cause an inflate exception if and when we toggled the search
       view within the current context.

       Mitigate the crash by programmatically replacing the fragment after instantiating it once.

       AndroidRuntime
              E  FATAL EXCEPTION: main
              E  Process: com.android.settings, PID: 12372
              E  android.view.InflateException: Binary XML file line #21: Error inflating class fragment
              E      at android.view.LayoutInflater.createViewFromTag(LayoutInflater.java:763)
              E      at android.view.LayoutInflater.rInflate(LayoutInflater.java:806)
              E      at android.view.LayoutInflater.inflate(LayoutInflater.java:504)
               ...
              E  Caused by: java.lang.IllegalArgumentException: Binary XML file line #21: Duplicate id 0x7f1001a2, tag nul
                 l, or parent id 0xffffffff with another fragment for com.android.settings.privacyguard.PrivacyGuardPrefs
              E      at android.app.FragmentManagerImpl.onCreateView(FragmentManager.java:2120)
              E      at android.view.LayoutInflater$FactoryMerger.onCreateView(LayoutInflater.java:177)
              E      at android.view.LayoutInflater.createViewFromTag(LayoutInflater.java:733)
              E      ... 25 more

    Change-Id: I6820ad7d35814f150eedf91140e21c0b8e23322b

Author: Steve Kondik <steve@cyngn.com>
Date:   Mon Mar 9 16:05:32 2015 +0000

    settings: Use consistent headers for Privacy Guard

     * Show "Privacy Guard" instead of "App ops" in advanced settings

    Change-Id: I98107ba3ad94ba22bbd4dc9e92ea97a36f664ab8

Author: Matt Garnes <matt@cyngn.com>
Date:   Fri May 15 15:55:44 2015 -0700

    Do not allow privacy guard for core system apps.

    Hide any applications that have the system UID as well as System UI from
    privacy guard. Enabling this on these core apps can have disastrous
    consequences, since many privacy guard authorization requests will queue
    up. This can cause the system process or System UI to be killed when
    they ANR while they wait at the end of a very long queue for the user to authorize them.

    By using privacy guard, you are trusting that the system will control
    and protect these permissions in the first place; there is no need to protect
    the system from itself.

    Change-Id: I478d6a6783a4c06fa7ad01a96c413290b232636c

Author: Gianmarco Reverberi <gianmarco.reverberi@gmail.com>
Date:   Tue Jun 2 19:30:45 2015 +0200

    PrivacyGuard: restore ListView position on resume, for real

    ListView gets reloaded each time the activity is resumed,
    so we have to restore the position after LoadManager finishes its job

    Change-Id: I8f05027aaf8ef85481ecb578efa2c2d2c6c6256d

Author: Roman Birg <roman@cyngn.com>
Date:   Wed Sep 9 12:05:38 2015 -0700

    Settings: persist privacy guard dialogs across rotates

    Ref: CYNGNOS-933

    Change-Id: I778ff0152dd4a1c0152dca68e82cc89a41f88508
    Signed-off-by: Roman Birg <roman@cyngn.com>

Author: Steve Kondik <steve@cyngn.com>
Date:   Mon Sep 12 01:29:07 2016 -0700

    settings: Fix viewpager tabs not showing on AppOpsSummary

    Change-Id: I311c61559177ea733809f510f017ef613915f3d4

Author: Gabriele M <moto.falcon.git@gmail.com>
Date:   Wed Mar 15 22:05:46 2017 +0100

    AppOpsDetails: Check app permissions safely

    checkOp() throws a SecurityException when the application is not
    allowed to perform the given operation. Use  checkOpNoThrow() so
    that no exception is thrown. If the operation is not permitted,
    AppOpsManager.MODE_ERRORED will be returned and AppOpsDetails will
    treat it as MODE_IGNORED (i.e. don't allow).

    BUGBASH-52

    Change-Id: Ic3177a24ae52438594e65cd19e29a86c1ee299e8

Author: Gabriele M <moto.falcon.git@gmail.com>
Date: Sun Aug 6 13:08:51 2017 +0200

    Settings: Always show Privacy Guard permissions

    Enabling Privacy Guard for an app simply means switching a set of
    operations to MODE_ASK, independently on whether the application
    actually declared those ops (though a permission) or not. The
    framework keeps track only of the ops with a non-default value. As
    consequence, all the ops set by Privacy Guard that aren't declared
    by the app through its manifest are effectively lost when set to
    their default value and the settings won't show them.

    Never hide the Privacy Guard ops to provide a consistent UI.

    Change-Id: Iafcf058f5e2074982bf45f8c82ef8d027b9358f0

Author: Gabriele M <moto.falcon.git@gmail.com>
Date: Fri Sep 1 01:46:30 2017 +0200

    AppOpsState: Hide undeclared Privacy Guard OPs

    Since commit f02e0409eafcccbbaa1efda309946cbbd4f1f51c
    ("Settings: Always show Privacy Guard permissions"), all the Privacy
    Guard OPs are shown independently on whether the application declared
    the associated permission or not. This solved the UI inconsistencies,
    but it's still confusing. Instead of always showing these special OPs,
    hide them, unless unless the application declared the associated
    permission or the OP doesn't have an associated permission.

    Note: if a Privacy Guard OP is not associated to any permission it
    will appear for every application with Privacy Guard enabled,
    bringing back the UI inconsistency solved with f02e0409eafcccbbaa.
    This doesn't happen with the current set of OPs.

    Change-Id: Iddc92b3547187e24140a328d50c5ac09bc1a7ccf

Change-Id: I407a2a9690fa912e8e232883e74a0d6a0d8d80aa
---
 AndroidManifest.xml                                |  30 +++-
 proguard.flags                                     |   2 +
 res/layout/app_ops_details_item.xml                |  69 +++++---
 res/menu/appops_manager.xml                        |  26 +++
 res/values/cm_arrays.xml                           | 179 +++++++++++++++++++
 res/values/cm_plurals.xml                          |  22 +++
 res/values/cm_strings.xml                          | 186 +++++++++++++++++++
 .../settings/applications/AppOpsCategory.java      |   3 +-
 .../settings/applications/AppOpsDetails.java       |  98 ++++++++++-
 .../settings/applications/AppOpsDetailsTop.java    |  37 ++++
 .../android/settings/applications/AppOpsState.java | 196 +++++++++++++++++----
 .../settings/applications/AppOpsSummary.java       | 166 ++++++++++++++---
 12 files changed, 920 insertions(+), 94 deletions(-)
 create mode 100644 res/menu/appops_manager.xml
 create mode 100644 res/values/cm_plurals.xml
 create mode 100644 src/com/android/settings/applications/AppOpsDetailsTop.java

diff --git a/AndroidManifest.xml b/AndroidManifest.xml
index 00e1cb6..0534d44 100644
--- a/AndroidManifest.xml
+++ b/AndroidManifest.xml
@@ -1207,11 +1207,10 @@
             </intent-filter>
         </activity>
 
-        <!--
         <activity android:name="Settings$AppOpsSummaryActivity"
-                android:label="@string/app_ops_settings"
+                android:label="@*lineageos.platform:string/privacy_guard_manager_title"
                 android:taskAffinity=""
-                android:enabled="false">
+                android:excludeFromRecents="true">
             <intent-filter>
                 <action android:name="android.intent.action.MAIN" />
                 <action android:name="android.settings.APP_OPS_SETTINGS" />
@@ -1222,7 +1221,6 @@
             <meta-data android:name="com.android.settings.FRAGMENT_CLASS"
                 android:value="com.android.settings.applications.AppOpsSummary" />
         </activity>
-        -->
 
         <activity android:name="Settings$BackgroundCheckSummaryActivity"
                 android:label="@string/background_check_title"
@@ -1236,6 +1234,30 @@
                 android:value="com.android.settings.applications.BackgroundCheckSummary" />
         </activity>
 
+        <!-- Still need a top-level activity for showing app ops details.  Aliasing
+             trick is so the code that is now a fragment can still be called
+             AppOpsDetails. -->
+        <activity android:name=".applications.AppOpsDetailsTop"
+                  android:label="@*lineageos.platform:string/privacy_guard_manager_title"
+                  android:exported="true"
+                  android:taskAffinity=""
+                  android:excludeFromRecents="true"
+                  android:parentActivityName="Settings$AppOpsSummaryActivity">
+        </activity>
+
+        <!-- Keep compatibility with old shortcuts. -->
+        <activity-alias android:name=".applications.AppOpsDetails"
+                android:label="@*lineageos.platform:string/privacy_guard_manager_title"
+                android:exported="true"
+                android:excludeFromRecents="true"
+                android:targetActivity=".applications.AppOpsDetailsTop">
+            <intent-filter>
+                <action android:name="android.settings.APP_OPS_DETAILS_SETTINGS" />
+                <category android:name="android.intent.category.DEFAULT" />
+                <data android:scheme="package" />
+            </intent-filter>
+        </activity-alias>
+
         <activity android:name="Settings$LocationSettingsActivity"
                 android:label="@string/location_settings_title"
                 android:icon="@drawable/ic_settings_location"
diff --git a/proguard.flags b/proguard.flags
index d644f47..e78c645 100644
--- a/proguard.flags
+++ b/proguard.flags
@@ -20,6 +20,8 @@
     *** get*();
 }
 
+-keep class com.android.settings.lineageos.*Settings
+
 # Keep classes that may be inflated from XML.
 -keepclasseswithmembers class * {
     public <init>(android.content.Context, android.util.AttributeSet);
diff --git a/res/layout/app_ops_details_item.xml b/res/layout/app_ops_details_item.xml
index c630ad6..fabad08 100644
--- a/res/layout/app_ops_details_item.xml
+++ b/res/layout/app_ops_details_item.xml
@@ -17,33 +17,56 @@
 */
 -->
 
-<GridLayout xmlns:android="http://schemas.android.com/apk/res/android"
+<RelativeLayout xmlns:android="http://schemas.android.com/apk/res/android"
     android:layout_width="match_parent"
     android:layout_height="wrap_content"
     android:minHeight="?android:attr/listPreferredItemHeight"
     android:paddingStart="?android:attr/listPreferredItemPaddingStart"
     android:paddingEnd="?android:attr/listPreferredItemPaddingEnd"
     android:paddingTop="8dip"
-    android:paddingBottom="8dip"
-    android:columnCount="3">
+    android:paddingBottom="8dip">
 
     <ImageView
         android:id="@+id/op_icon"
         android:layout_width="@android:dimen/app_icon_size"
         android:layout_height="@android:dimen/app_icon_size"
-        android:layout_column="0"
-        android:layout_row="0"
-        android:layout_rowSpan="2"
+        android:layout_centerVertical="true"
         android:layout_marginEnd="8dip"
         android:scaleType="centerInside"
         android:contentDescription="@null" />
 
+    <LinearLayout
+        android:id="@+id/widget"
+        android:layout_width="wrap_content"
+        android:layout_height="wrap_content"
+        android:layout_marginStart="8dip"
+        android:layout_alignParentEnd="true"
+        android:layout_centerVertical="true">
+
+        <Spinner
+            android:id="@+id/spinnerWidget"
+            android:layout_width="wrap_content"
+            android:layout_height="wrap_content"
+            android:padding="8dip"
+            android:focusable="false"
+            android:entries="@array/app_ops_permissions" />
+
+        <Switch
+            android:id="@+id/switchWidget"
+            android:layout_width="wrap_content"
+            android:layout_height="wrap_content"
+            android:padding="8dip"
+            android:focusable="false"
+            android:clickable="true" />
+
+    </LinearLayout>
+
     <TextView
         android:id="@+id/op_name"
-        android:layout_column="1"
-        android:layout_row="0"
-        android:layout_gravity="fill_horizontal"
-        android:layout_marginTop="2dip"
+        android:layout_width="wrap_content"
+        android:layout_height="wrap_content"
+        android:layout_toEndOf="@id/op_icon"
+        android:layout_toStartOf="@id/widget"
         android:singleLine="true"
         android:ellipsize="marquee"
         android:textAppearance="?android:attr/textAppearanceMedium"
@@ -51,22 +74,22 @@
 
     <TextView
         android:id="@+id/op_time"
-        android:layout_column="1"
-        android:layout_row="1"
-        android:layout_gravity="fill_horizontal|top"
+        android:layout_width="wrap_content"
+        android:layout_height="wrap_content"
+        android:layout_toEndOf="@id/op_icon"
+        android:layout_toStartOf="@id/widget"
+        android:layout_below="@id/op_name"
         android:textAppearance="?android:attr/textAppearanceSmall"
         android:textAlignment="viewStart" />
 
-    <Switch android:id="@+id/switchWidget"
+    <TextView
+        android:id="@+id/op_counts"
         android:layout_width="wrap_content"
         android:layout_height="wrap_content"
-        android:layout_gravity="center_vertical"
-        android:layout_marginStart="8dip"
-        android:layout_column="2"
-        android:layout_row="0"
-        android:layout_rowSpan="2"
-        android:padding="8dip"
-        android:focusable="false"
-        android:clickable="true" />
+        android:layout_toEndOf="@id/op_icon"
+        android:layout_toStartOf="@id/widget"
+        android:layout_below="@id/op_time"
+        android:textAppearance="?android:attr/textAppearanceSmall"
+        android:textAlignment="viewStart" />
 
-</GridLayout>
+</RelativeLayout>
diff --git a/res/menu/appops_manager.xml b/res/menu/appops_manager.xml
new file mode 100644
index 0000000..f89b738
--- /dev/null
+++ b/res/menu/appops_manager.xml
@@ -0,0 +1,26 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!-- Copyright (C) 2013 The CyanogenMod Project
+
+     Licensed under the Apache License, Version 2.0 (the "License");
+     you may not use this file except in compliance with the License.
+     You may obtain a copy of the License at
+
+          http://www.apache.org/licenses/LICENSE-2.0
+
+     Unless required by applicable law or agreed to in writing, software
+     distributed under the License is distributed on an "AS IS" BASIS,
+     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+     See the License for the specific language governing permissions and
+     limitations under the License.
+-->
+
+<menu xmlns:android="http://schemas.android.com/apk/res/android">
+    <item android:id="@+id/show_user_apps"
+          android:title="@string/app_ops_show_user_apps"
+          android:checkable="true" />
+    <item android:id="@+id/show_system_apps"
+          android:title="@string/app_ops_show_system_apps"
+          android:checkable="true" />
+    <item android:id="@+id/reset_counters"
+          android:title="@string/app_ops_reset_counters" />
+</menu>
diff --git a/res/values/cm_arrays.xml b/res/values/cm_arrays.xml
index fa169eb..5f64ea3 100644
--- a/res/values/cm_arrays.xml
+++ b/res/values/cm_arrays.xml
@@ -24,6 +24,185 @@
         <item>@string/security_settings_fingerprint_sensor_location_right</item>
     </string-array>
 
+    <!-- Names of categories of app ops tabs - extension of AOSP -->
+    <string-array name="app_ops_categories_lineage" translatable="false">
+        <item>@string/app_ops_categories_location</item>
+        <item>@string/app_ops_categories_personal</item>
+        <item>@string/app_ops_categories_messaging</item>
+        <item>@string/app_ops_categories_media</item>
+        <item>@string/app_ops_categories_device</item>
+        <item>@string/app_ops_categories_run_in_background</item>
+        <item>@string/app_ops_categories_bootup</item>
+        <item>@string/app_ops_categories_su</item>
+    </string-array>
+
+    <!-- User display names for app ops codes - extension of AOSP -->
+    <string-array name="app_ops_summaries_lineage" translatable="false">
+        <item>@string/app_ops_summaries_coarse_location</item>
+        <item>@string/app_ops_summaries_fine_location</item>
+        <item>@string/app_ops_summaries_gps</item>
+        <item>@string/app_ops_summaries_vibrate</item>
+        <item>@string/app_ops_summaries_read_contacts</item>
+        <item>@string/app_ops_summaries_modify_contacts</item>
+        <item>@string/app_ops_summaries_read_call_log</item>
+        <item>@string/app_ops_summaries_modify_call_log</item>
+        <item>@string/app_ops_summaries_read_calendar</item>
+        <item>@string/app_ops_summaries_modify_calendar</item>
+        <item>@string/app_ops_summaries_wifi_scan</item>
+        <item>@string/app_ops_summaries_notification</item>
+        <item>@string/app_ops_summaries_cell_scan</item>
+        <item>@string/app_ops_summaries_call_phone</item>
+        <item>@string/app_ops_summaries_read_sms</item>
+        <item>@string/app_ops_summaries_write_sms</item>
+        <item>@string/app_ops_summaries_receive_sms</item>
+        <item>@string/app_ops_summaries_receive_emergency_sms</item>
+        <item>@string/app_ops_summaries_receive_mms</item>
+        <item>@string/app_ops_summaries_receive_wap_push</item>
+        <item>@string/app_ops_summaries_send_sms</item>
+        <item>@string/app_ops_summaries_read_icc_sms</item>
+        <item>@string/app_ops_summaries_write_icc_sms</item>
+        <item>@string/app_ops_summaries_modify_settings</item>
+        <item>@string/app_ops_summaries_draw_on_top</item>
+        <item>@string/app_ops_summaries_access_notifications</item>
+        <item>@string/app_ops_summaries_camera</item>
+        <item>@string/app_ops_summaries_record_audio</item>
+        <item>@string/app_ops_summaries_play_audio</item>
+        <item>@string/app_ops_summaries_read_clipboard</item>
+        <item>@string/app_ops_summaries_modify_clipboard</item>
+        <item>@string/app_ops_summaries_media_buttons</item>
+        <item>@string/app_ops_summaries_audio_focus</item>
+        <item>@string/app_ops_summaries_master_volume</item>
+        <item>@string/app_ops_summaries_voice_volume</item>
+        <item>@string/app_ops_summaries_ring_volume</item>
+        <item>@string/app_ops_summaries_media_volume</item>
+        <item>@string/app_ops_summaries_alarm_volume</item>
+        <item>@string/app_ops_summaries_notification_volume</item>
+        <item>@string/app_ops_summaries_bluetooth_volume</item>
+        <item>@string/app_ops_summaries_keep_awake</item>
+        <item>@string/app_ops_summaries_monitor_location</item>
+        <item>@string/app_ops_summaries_monitor_high_power_location</item>
+        <item>@string/app_ops_summaries_get_usage_stats</item>
+        <item>@string/app_ops_summaries_mute_unmute_microphone</item>
+        <item>@string/app_ops_summaries_toast_window</item>
+        <item>@string/app_ops_summaries_project_media</item>
+        <item>@string/app_ops_summaries_activate_vpn</item>
+        <item>@string/app_ops_summaries_write_wallpaper</item>
+        <item>@string/app_ops_summaries_assist_structure</item>
+        <item>@string/app_ops_summaries_assist_screenshot</item>
+        <item>@string/app_ops_summaries_read_phone_state</item>
+        <item>@string/app_ops_summaries_add_voicemail</item>
+        <item>@string/app_ops_summaries_use_sip</item>
+        <item>@string/app_ops_summaries_make_call</item>
+        <item>@string/app_ops_summaries_use_fingerprint</item>
+        <item>@string/app_ops_summaries_use_body_sensors</item>
+        <item>@string/app_ops_summaries_read_cell_broadcasts</item>
+        <item>@string/app_ops_summaries_mock_location</item>
+        <item>@string/app_ops_summaries_read_external_storage</item>
+        <item>@string/app_ops_summaries_write_external_storage</item>
+        <item>@string/app_ops_summaries_turn_screen_on</item>
+        <item>@string/app_ops_summaries_get_accounts</item>
+        <item>@string/app_ops_summaries_run_in_background</item>
+        <item>@string/app_ops_summaries_accessibility_volume</item>
+        <item>@string/app_ops_summaries_read_phone_numbers</item>
+        <item>@string/app_ops_summaries_request_install_packages</item>
+        <item>@string/app_ops_summaries_picture_in_picture</item>
+        <item>@string/app_ops_summaries_instant_app_start_foreground</item>
+        <item>@string/app_ops_summaries_answer_phone_calls</item>
+        <item>@string/app_ops_summaries_toggle_wifi</item>
+        <item>@string/app_ops_summaries_toggle_bluetooth</item>
+        <item>@string/app_ops_summaries_start_at_boot</item>
+        <item>@string/app_ops_summaries_toggle_nfc</item>
+        <item>@string/app_ops_summaries_toggle_mobile_data</item>
+        <item>@string/app_ops_summaries_superuser</item>
+    </string-array>
+
+    <!-- User display names for app ops codes - extension of AOSP -->
+    <string-array name="app_ops_labels_lineage" translatable="false">
+        <item>@string/app_ops_labels_coarse_location</item>
+        <item>@string/app_ops_labels_fine_location</item>
+        <item>@string/app_ops_labels_gps</item>
+        <item>@string/app_ops_labels_vibrate</item>
+        <item>@string/app_ops_labels_read_contacts</item>
+        <item>@string/app_ops_labels_modify_contacts</item>
+        <item>@string/app_ops_labels_read_call_log</item>
+        <item>@string/app_ops_labels_modify_call_log</item>
+        <item>@string/app_ops_labels_read_calendar</item>
+        <item>@string/app_ops_labels_modify_calendar</item>
+        <item>@string/app_ops_labels_wifi_scan</item>
+        <item>@string/app_ops_labels_notification</item>
+        <item>@string/app_ops_labels_cell_scan</item>
+        <item>@string/app_ops_labels_call_phone</item>
+        <item>@string/app_ops_labels_read_sms</item>
+        <item>@string/app_ops_labels_write_sms</item>
+        <item>@string/app_ops_labels_receive_sms</item>
+        <item>@string/app_ops_labels_receive_emergency_sms</item>
+        <item>@string/app_ops_labels_receive_mms</item>
+        <item>@string/app_ops_labels_receive_wap_push</item>
+        <item>@string/app_ops_labels_send_sms</item>
+        <item>@string/app_ops_labels_read_icc_sms</item>
+        <item>@string/app_ops_labels_write_icc_sms</item>
+        <item>@string/app_ops_labels_modify_settings</item>
+        <item>@string/app_ops_labels_draw_on_top</item>
+        <item>@string/app_ops_labels_access_notifications</item>
+        <item>@string/app_ops_labels_camera</item>
+        <item>@string/app_ops_labels_record_audio</item>
+        <item>@string/app_ops_labels_play_audio</item>
+        <item>@string/app_ops_labels_read_clipboard</item>
+        <item>@string/app_ops_labels_modify_clipboard</item>
+        <item>@string/app_ops_labels_media_buttons</item>
+        <item>@string/app_ops_labels_audio_focus</item>
+        <item>@string/app_ops_labels_master_volume</item>
+        <item>@string/app_ops_labels_voice_volume</item>
+        <item>@string/app_ops_labels_ring_volume</item>
+        <item>@string/app_ops_labels_media_volume</item>
+        <item>@string/app_ops_labels_alarm_volume</item>
+        <item>@string/app_ops_labels_notification_volume</item>
+        <item>@string/app_ops_labels_bluetooth_volume</item>
+        <item>@string/app_ops_labels_keep_awake</item>
+        <item>@string/app_ops_labels_monitor_location</item>
+        <item>@string/app_ops_labels_monitor_high_power_location</item>
+        <item>@string/app_ops_labels_get_usage_stats</item>
+        <item>@string/app_ops_labels_mute_unmute_microphone</item>
+        <item>@string/app_ops_labels_toast_window</item>
+        <item>@string/app_ops_labels_project_media</item>
+        <item>@string/app_ops_labels_activate_vpn</item>
+        <item>@string/app_ops_labels_write_wallpaper</item>
+        <item>@string/app_ops_labels_assist_structure</item>
+        <item>@string/app_ops_labels_assist_screenshot</item>
+        <item>@string/app_ops_labels_read_phone_state</item>
+        <item>@string/app_ops_labels_add_voicemail</item>
+        <item>@string/app_ops_labels_use_sip</item>
+        <item>@string/app_ops_labels_make_call</item>
+        <item>@string/app_ops_labels_use_fingerprint</item>
+        <item>@string/app_ops_labels_use_body_sensors</item>
+        <item>@string/app_ops_labels_read_cell_broadcasts</item>
+        <item>@string/app_ops_labels_mock_location</item>
+        <item>@string/app_ops_labels_read_external_storage</item>
+        <item>@string/app_ops_labels_write_external_storage</item>
+        <item>@string/app_ops_labels_turn_screen_on</item>
+        <item>@string/app_ops_labels_get_accounts</item>
+        <item>@string/app_ops_labels_run_in_background</item>
+        <item>@string/app_ops_labels_accessibility_volume</item>
+        <item>@string/app_ops_labels_read_phone_numbers</item>
+        <item>@string/app_ops_labels_request_install_packages</item>
+        <item>@string/app_ops_labels_picture_in_picture</item>
+        <item>@string/app_ops_labels_instant_app_start_foreground</item>
+        <item>@string/app_ops_labels_answer_phone_calls</item>
+        <item>@string/app_ops_labels_toggle_wifi</item>
+        <item>@string/app_ops_labels_toggle_bluetooth</item>
+        <item>@string/app_ops_labels_start_at_boot</item>
+        <item>@string/app_ops_labels_toggle_nfc</item>
+        <item>@string/app_ops_labels_toggle_mobile_data</item>
+        <item>@string/app_ops_labels_superuser</item>
+    </string-array>
+
+    <!-- App ops permissions -->
+    <string-array name="app_ops_permissions">
+        <item>@string/app_ops_permissions_allowed</item>
+        <item>@string/app_ops_permissions_ignored</item>
+        <item>@string/app_ops_permissions_always_ask</item>
+    </string-array>
+
     <!-- Arrays for root access capability -->
     <string-array name="root_access_entries" translatable="false">
         <item>@string/root_access_none</item>
diff --git a/res/values/cm_plurals.xml b/res/values/cm_plurals.xml
new file mode 100644
index 0000000..af6e6dd
--- /dev/null
+++ b/res/values/cm_plurals.xml
@@ -0,0 +1,22 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!--
+     Copyright (C) 2013-2014 The CyanogenMod Project
+
+     Licensed under the Apache License, Version 2.0 (the "License");
+     you may not use this file except in compliance with the License.
+     You may obtain a copy of the License at
+
+          http://www.apache.org/licenses/LICENSE-2.0
+
+     Unless required by applicable law or agreed to in writing, software
+     distributed under the License is distributed on an "AS IS" BASIS,
+     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+     See the License for the specific language governing permissions and
+     limitations under the License.
+-->
+<resources xmlns:xliff="urn:oasis:names:tc:xliff:document:1.2">
+    <plurals name="app_ops_count">
+        <item quantity="one">once</item>
+        <item quantity="other">%d times</item>
+    </plurals>
+</resources>
diff --git a/res/values/cm_strings.xml b/res/values/cm_strings.xml
index 4049d5a..cef4695 100644
--- a/res/values/cm_strings.xml
+++ b/res/values/cm_strings.xml
@@ -110,4 +110,190 @@
     <string name="sub_activate_failed">Activation failed.</string>
     <string name="sub_deactivate_success">SIM deactivated.</string>
     <string name="sub_deactivate_failed">Deactivation failed.</string>
+
+    <!-- Names of categories of app ops tabs - extension of AOSP -->
+    <string name="app_ops_categories_location">Location</string>
+    <string name="app_ops_categories_personal">Personal</string>
+    <string name="app_ops_categories_messaging">Messaging</string>
+    <string name="app_ops_categories_media">Media</string>
+    <string name="app_ops_categories_device">Device</string>
+    <string name="app_ops_categories_run_in_background">Run in background</string>
+    <string name="app_ops_categories_bootup">Bootup</string>
+    <string name="app_ops_categories_su">Superuser</string>
+
+    <!-- User display names for app ops codes - extension of AOSP -->
+    <string name="app_ops_summaries_coarse_location">coarse location</string>
+    <string name="app_ops_summaries_fine_location">fine location</string>
+    <string name="app_ops_summaries_gps">GPS</string>
+    <string name="app_ops_summaries_vibrate">vibrate</string>
+    <string name="app_ops_summaries_read_contacts">read contacts</string>
+    <string name="app_ops_summaries_modify_contacts">modify contacts</string>
+    <string name="app_ops_summaries_read_call_log">read call log</string>
+    <string name="app_ops_summaries_modify_call_log">modify call log</string>
+    <string name="app_ops_summaries_read_calendar">read calendar</string>
+    <string name="app_ops_summaries_modify_calendar">modify calendar</string>
+    <string name="app_ops_summaries_wifi_scan">Wi-Fi scan</string>
+    <string name="app_ops_summaries_notification">notification/toast</string>
+    <string name="app_ops_summaries_cell_scan">cell scan</string>
+    <string name="app_ops_summaries_call_phone">call phone</string>
+    <string name="app_ops_summaries_read_sms">read SMS</string>
+    <string name="app_ops_summaries_write_sms">write SMS</string>
+    <string name="app_ops_summaries_receive_sms">receive SMS</string>
+    <string name="app_ops_summaries_receive_emergency_sms">receive emergency SMS</string>
+    <string name="app_ops_summaries_receive_mms">receive MMS</string>
+    <string name="app_ops_summaries_receive_wap_push">receive WAP push</string>
+    <string name="app_ops_summaries_send_sms">send SMS</string>
+    <string name="app_ops_summaries_read_icc_sms">read ICC SMS</string>
+    <string name="app_ops_summaries_write_icc_sms">write ICC SMS</string>
+    <string name="app_ops_summaries_modify_settings">modify settings</string>
+    <string name="app_ops_summaries_draw_on_top">draw on top</string>
+    <string name="app_ops_summaries_access_notifications">access notifications</string>
+    <string name="app_ops_summaries_camera">camera</string>
+    <string name="app_ops_summaries_record_audio">record audio</string>
+    <string name="app_ops_summaries_play_audio">play audio</string>
+    <string name="app_ops_summaries_read_clipboard">read clipboard</string>
+    <string name="app_ops_summaries_modify_clipboard">modify clipboard</string>
+    <string name="app_ops_summaries_media_buttons">media buttons</string>
+    <string name="app_ops_summaries_audio_focus">audio focus</string>
+    <string name="app_ops_summaries_master_volume">master volume</string>
+    <string name="app_ops_summaries_voice_volume">voice volume</string>
+    <string name="app_ops_summaries_ring_volume">ring volume</string>
+    <string name="app_ops_summaries_media_volume">media volume</string>
+    <string name="app_ops_summaries_alarm_volume">alarm volume</string>
+    <string name="app_ops_summaries_notification_volume">notification volume</string>
+    <string name="app_ops_summaries_bluetooth_volume">bluetooth volume</string>
+    <string name="app_ops_summaries_keep_awake">keep awake</string>
+    <string name="app_ops_summaries_monitor_location">monitor location</string>
+    <string name="app_ops_summaries_monitor_high_power_location">monitor high power location</string>
+    <string name="app_ops_summaries_get_usage_stats">get usage stats</string>
+    <string name="app_ops_summaries_mute_unmute_microphone">mute/unmute microphone</string>
+    <string name="app_ops_summaries_toast_window">display toasts</string>
+    <string name="app_ops_summaries_project_media">project media</string>
+    <string name="app_ops_summaries_activate_vpn">activate VPN</string>
+    <string name="app_ops_summaries_write_wallpaper">write wallpaper</string>
+    <string name="app_ops_summaries_assist_structure">assist structure</string>
+    <string name="app_ops_summaries_assist_screenshot">assist screenshot</string>
+    <string name="app_ops_summaries_read_phone_state">read phone state</string>
+    <string name="app_ops_summaries_add_voicemail">add voicemail</string>
+    <string name="app_ops_summaries_use_sip">use SIP</string>
+    <string name="app_ops_summaries_make_call">make call</string>
+    <string name="app_ops_summaries_use_fingerprint">use fingerprint</string>
+    <string name="app_ops_summaries_use_body_sensors">use body sensors</string>
+    <string name="app_ops_summaries_read_cell_broadcasts">read cell broadcasts</string>
+    <string name="app_ops_summaries_mock_location">mock location</string>
+    <string name="app_ops_summaries_read_external_storage">read external storage</string>
+    <string name="app_ops_summaries_write_external_storage">write to external storage</string>
+    <string name="app_ops_summaries_turn_screen_on">turn screen on</string>
+    <string name="app_ops_summaries_get_accounts">get accounts</string>
+    <string name="app_ops_summaries_run_in_background">run in background</string>
+    <string name="app_ops_summaries_accessibility_volume">accessibility volume</string>
+    <string name="app_ops_summaries_read_phone_numbers">read phone numbers</string>
+    <string name="app_ops_summaries_request_install_packages">request install packages</string>
+    <string name="app_ops_summaries_picture_in_picture">picture in picture</string>
+    <string name="app_ops_summaries_instant_app_start_foreground">instant app start foreground</string>
+    <string name="app_ops_summaries_answer_phone_calls">answer phone calls</string>
+    <string name="app_ops_summaries_toggle_wifi">toggle Wi-Fi</string>
+    <string name="app_ops_summaries_toggle_bluetooth">toggle bluetooth</string>
+    <string name="app_ops_summaries_start_at_boot">start at boot</string>
+    <string name="app_ops_summaries_toggle_nfc">toggle NFC</string>
+    <string name="app_ops_summaries_toggle_mobile_data">toggle mobile data</string>
+    <string name="app_ops_summaries_superuser">root access</string>
+
+    <!-- User display names for app ops codes - extension of AOSP -->
+    <string name="app_ops_labels_coarse_location">Coarse location</string>
+    <string name="app_ops_labels_fine_location">Fine location</string>
+    <string name="app_ops_labels_gps">GPS</string>
+    <string name="app_ops_labels_vibrate">Vibrate</string>
+    <string name="app_ops_labels_read_contacts">Read contacts</string>
+    <string name="app_ops_labels_modify_contacts">Modify contacts</string>
+    <string name="app_ops_labels_read_call_log">Read call log</string>
+    <string name="app_ops_labels_modify_call_log">Modify call log</string>
+    <string name="app_ops_labels_read_calendar">Read calendar</string>
+    <string name="app_ops_labels_modify_calendar">Modify calendar</string>
+    <string name="app_ops_labels_wifi_scan">Wi-Fi scan</string>
+    <string name="app_ops_labels_notification">Notification/Toast</string>
+    <string name="app_ops_labels_cell_scan">Cell scan</string>
+    <string name="app_ops_labels_call_phone">Call phone</string>
+    <string name="app_ops_labels_read_sms">Read SMS</string>
+    <string name="app_ops_labels_write_sms">Write SMS</string>
+    <string name="app_ops_labels_receive_sms">Receive SMS</string>
+    <string name="app_ops_labels_receive_emergency_sms">Receive emergency SMS</string>
+    <string name="app_ops_labels_receive_mms">Receive MMS</string>
+    <string name="app_ops_labels_receive_wap_push">Receive WAP push</string>
+    <string name="app_ops_labels_send_sms">Send SMS</string>
+    <string name="app_ops_labels_read_icc_sms">Read ICC SMS</string>
+    <string name="app_ops_labels_write_icc_sms">Write ICC SMS</string>
+    <string name="app_ops_labels_modify_settings">Modify settings</string>
+    <string name="app_ops_labels_draw_on_top">Draw on top</string>
+    <string name="app_ops_labels_access_notifications">Access notifications</string>
+    <string name="app_ops_labels_camera">Camera</string>
+    <string name="app_ops_labels_record_audio">Record audio</string>
+    <string name="app_ops_labels_play_audio">Play audio</string>
+    <string name="app_ops_labels_read_clipboard">Read clipboard</string>
+    <string name="app_ops_labels_modify_clipboard">Modify clipboard</string>
+    <string name="app_ops_labels_media_buttons">Media buttons</string>
+    <string name="app_ops_labels_audio_focus">Audio focus</string>
+    <string name="app_ops_labels_master_volume">Master volume</string>
+    <string name="app_ops_labels_voice_volume">Voice volume</string>
+    <string name="app_ops_labels_ring_volume">Ring volume</string>
+    <string name="app_ops_labels_media_volume">Media volume</string>
+    <string name="app_ops_labels_alarm_volume">Alarm volume</string>
+    <string name="app_ops_labels_notification_volume">Notification volume</string>
+    <string name="app_ops_labels_bluetooth_volume">Bluetooth volume</string>
+    <string name="app_ops_labels_keep_awake">Keep awake</string>
+    <string name="app_ops_labels_monitor_location">Monitor location</string>
+    <string name="app_ops_labels_monitor_high_power_location">Monitor high power location</string>
+    <string name="app_ops_labels_get_usage_stats">Get usage stats</string>
+    <string name="app_ops_labels_mute_unmute_microphone">Mute/unmute microphone</string>
+    <string name="app_ops_labels_toast_window">Display toasts</string>
+    <string name="app_ops_labels_project_media">Project media</string>
+    <string name="app_ops_labels_activate_vpn">Activate VPN</string>
+    <string name="app_ops_labels_write_wallpaper">Write wallpaper</string>
+    <string name="app_ops_labels_assist_structure">Assist structure</string>
+    <string name="app_ops_labels_assist_screenshot">Assist screenshot</string>
+    <string name="app_ops_labels_read_phone_state">Read phone state</string>
+    <string name="app_ops_labels_add_voicemail">Add voicemail</string>
+    <string name="app_ops_labels_use_sip">Use SIP</string>
+    <string name="app_ops_labels_make_call">Make call</string>
+    <string name="app_ops_labels_use_fingerprint">Use fingerprint</string>
+    <string name="app_ops_labels_use_body_sensors">Use body sensors</string>
+    <string name="app_ops_labels_read_cell_broadcasts">Read cell broadcasts</string>
+    <string name="app_ops_labels_mock_location">Mock location</string>
+    <string name="app_ops_labels_read_external_storage">Read external storage</string>
+    <string name="app_ops_labels_write_external_storage">Write to external storage</string>
+    <string name="app_ops_labels_turn_screen_on">Turn screen on</string>
+    <string name="app_ops_labels_get_accounts">Get accounts</string>
+    <string name="app_ops_labels_run_in_background">Run in background</string>
+    <string name="app_ops_labels_accessibility_volume">Accessibility volume</string>
+    <string name="app_ops_labels_read_phone_numbers">Read phone numbers</string>
+    <string name="app_ops_labels_request_install_packages">Request install packages</string>
+    <string name="app_ops_labels_picture_in_picture">Picture in picture</string>
+    <string name="app_ops_labels_instant_app_start_foreground">Instant app start foreground</string>
+    <string name="app_ops_labels_answer_phone_calls">Answer phone calls</string>
+    <string name="app_ops_labels_toggle_wifi">Toggle Wi-Fi</string>
+    <string name="app_ops_labels_toggle_bluetooth">Toggle bluetooth</string>
+    <string name="app_ops_labels_start_at_boot">Start at boot</string>
+    <string name="app_ops_labels_toggle_nfc">Toggle NFC</string>
+    <string name="app_ops_labels_toggle_mobile_data">Toggle mobile data</string>
+    <string name="app_ops_labels_superuser">Root access</string>
+
+    <!-- App ops permissions -->
+    <string name="app_ops_permissions_allowed">Allowed</string>
+    <string name="app_ops_permissions_ignored">Ignored</string>
+    <string name="app_ops_permissions_always_ask">Always ask</string>
+
+    <!-- App ops detail -->
+    <string name="app_ops_entry_summary"><xliff:g id="op">%1$s</xliff:g> (used <xliff:g id="count">%2$s</xliff:g>)</string>
+    <string name="app_ops_allowed_count">Allowed <xliff:g id="count" example="2 times">%s</xliff:g></string>
+    <string name="app_ops_ignored_count">Denied <xliff:g id="count" example="2 times">%s</xliff:g></string>
+    <string name="app_ops_both_count">Allowed <xliff:g id="count">%1$s</xliff:g>, denied <xliff:g id="count">%2$s</xliff:g></string>
+
+    <!-- App ops menu options -->
+    <string name="app_ops_show_user_apps">Show user apps</string>
+    <string name="app_ops_show_system_apps">Show built-in apps</string>
+    <string name="app_ops_reset_counters">Reset allow/deny counters</string>
+    <string name="app_ops_reset_confirm_title">Confirm counters reset</string>
+    <string name="app_ops_reset_confirm_mesg">Are you sure you wish to reset counters?</string>
+
+    <string name="ok">OK</string>
 </resources>
diff --git a/src/com/android/settings/applications/AppOpsCategory.java b/src/com/android/settings/applications/AppOpsCategory.java
index e27e05b..78842d7 100644
--- a/src/com/android/settings/applications/AppOpsCategory.java
+++ b/src/com/android/settings/applications/AppOpsCategory.java
@@ -359,7 +359,8 @@ public class AppOpsCategory extends ListFragment implements
 
         SettingsActivity sa = (SettingsActivity) getActivity();
         sa.startPreferencePanel(this, AppOpsDetails.class.getName(), args,
-                R.string.app_ops_settings, null, this, RESULT_APP_DETAILS);
+                org.lineageos.platform.internal.R.string.privacy_guard_manager_title,
+                null, this, RESULT_APP_DETAILS);
     }
 
     @Override public void onListItemClick(ListView l, View v, int position, long id) {
diff --git a/src/com/android/settings/applications/AppOpsDetails.java b/src/com/android/settings/applications/AppOpsDetails.java
index b488af6..822d0df 100644
--- a/src/com/android/settings/applications/AppOpsDetails.java
+++ b/src/com/android/settings/applications/AppOpsDetails.java
@@ -33,9 +33,11 @@ import android.util.Log;
 import android.view.LayoutInflater;
 import android.view.View;
 import android.view.ViewGroup;
+import android.widget.AdapterView;
 import android.widget.CompoundButton;
 import android.widget.ImageView;
 import android.widget.LinearLayout;
+import android.widget.Spinner;
 import android.widget.Switch;
 import android.widget.TextView;
 
@@ -61,6 +63,41 @@ public class AppOpsDetails extends InstrumentedPreferenceFragment {
     private View mRootView;
     private LinearLayout mOperationsSection;
 
+    private final int MODE_ALLOWED = 0;
+    private final int MODE_IGNORED = 1;
+    private final int MODE_ASK     = 2;
+
+    private int modeToPosition(int mode) {
+        switch (mode) {
+            case AppOpsManager.MODE_ALLOWED:
+                return MODE_ALLOWED;
+            case AppOpsManager.MODE_IGNORED:
+                return MODE_IGNORED;
+            case AppOpsManager.MODE_ASK:
+                return MODE_ASK;
+            default:
+                return MODE_IGNORED;
+        }
+    }
+
+    private int positionToMode(int position) {
+        switch (position) {
+            case MODE_ALLOWED:
+                return AppOpsManager.MODE_ALLOWED;
+            case MODE_IGNORED:
+                return AppOpsManager.MODE_IGNORED;
+            case MODE_ASK:
+                return AppOpsManager.MODE_ASK;
+            default:
+                return AppOpsManager.MODE_IGNORED;
+        }
+    }
+
+    private boolean isPlatformSigned() {
+        final int match = mPm.checkSignatures("android", mPackageInfo.packageName);
+        return match >= PackageManager.SIGNATURE_MATCH;
+    }
+
     // Utility method to set application label and icon.
     private void setAppLabelAndIcon(PackageInfo pkgInfo) {
         final View appSnippet = mRootView.findViewById(R.id.app_snippet);
@@ -103,9 +140,17 @@ public class AppOpsDetails extends InstrumentedPreferenceFragment {
 
         mOperationsSection.removeAllViews();
         String lastPermGroup = "";
+        boolean isPlatformSigned = isPlatformSigned();
         for (AppOpsState.OpsTemplate tpl : AppOpsState.ALL_TEMPLATES) {
+            /* If we are platform signed, only show the root switch, this
+             * one is safe to toggle while other permission-based ones could
+             * certainly cause system-wide problems
+             */
+            if (isPlatformSigned && tpl != AppOpsState.SU_TEMPLATE) {
+                 continue;
+            }
             List<AppOpsState.AppOpEntry> entries = mState.buildState(tpl,
-                    mPackageInfo.applicationInfo.uid, mPackageInfo.packageName);
+                    mPackageInfo.applicationInfo.uid, mPackageInfo.packageName, true);
             for (final AppOpsState.AppOpEntry entry : entries) {
                 final AppOpsManager.OpEntry firstOp = entry.getOpEntry(0);
                 final View view = mInflater.inflate(R.layout.app_ops_details_item,
@@ -128,20 +173,57 @@ public class AppOpsDetails extends InstrumentedPreferenceFragment {
                 }
                 ((TextView)view.findViewById(R.id.op_name)).setText(
                         entry.getSwitchText(mState));
+                ((TextView)view.findViewById(R.id.op_counts)).setText(
+                        entry.getCountsText(res));
                 ((TextView)view.findViewById(R.id.op_time)).setText(
                         entry.getTimeText(res, true));
-                Switch sw = (Switch)view.findViewById(R.id.switchWidget);
+
+                Spinner sp = (Spinner) view.findViewById(R.id.spinnerWidget);
+                sp.setVisibility(View.GONE);
+                Switch sw = (Switch) view.findViewById(R.id.switchWidget);
+                sw.setVisibility(View.GONE);
+
                 final int switchOp = AppOpsManager.opToSwitch(firstOp.getOp());
-                sw.setChecked(mAppOps.checkOp(switchOp, entry.getPackageOps().getUid(),
-                        entry.getPackageOps().getPackageName()) == AppOpsManager.MODE_ALLOWED);
-                sw.setOnCheckedChangeListener(new Switch.OnCheckedChangeListener() {
+                int mode = mAppOps.checkOpNoThrow(switchOp, entry.getPackageOps().getUid(),
+                        entry.getPackageOps().getPackageName());
+                sp.setSelection(modeToPosition(mode));
+                sp.setOnItemSelectedListener(new Spinner.OnItemSelectedListener() {
+                    boolean firstMode = true;
+
                     @Override
-                    public void onCheckedChanged(CompoundButton buttonView, boolean isChecked) {
+                    public void onItemSelected(AdapterView<?> parentView, View selectedItemView,
+                            int position, long id) {
+                        if (firstMode) {
+                            firstMode = false;
+                            return;
+                        }
                         mAppOps.setMode(switchOp, entry.getPackageOps().getUid(),
-                                entry.getPackageOps().getPackageName(), isChecked
-                                ? AppOpsManager.MODE_ALLOWED : AppOpsManager.MODE_IGNORED);
+                                entry.getPackageOps().getPackageName(), positionToMode(position));
+                    }
+
+                    @Override
+                    public void onNothingSelected(AdapterView<?> parentView) {
+                        // Do nothing
                     }
                 });
+
+                sw.setChecked(mAppOps.checkOpNoThrow(switchOp, entry.getPackageOps()
+                        .getUid(), entry.getPackageOps().getPackageName()) == AppOpsManager.MODE_ALLOWED);
+                sw.setOnCheckedChangeListener(new Switch.OnCheckedChangeListener() {
+                    public void onCheckedChanged(CompoundButton buttonView,
+                            boolean isChecked) {
+                        mAppOps.setMode(switchOp, entry.getPackageOps()
+                                .getUid(), entry.getPackageOps()
+                                .getPackageName(),
+                                isChecked ? AppOpsManager.MODE_ALLOWED
+                                        : AppOpsManager.MODE_IGNORED);
+                    }
+                });
+                if (AppOpsManager.isStrictOp(switchOp)) {
+                    sp.setVisibility(View.VISIBLE);
+                } else {
+                    sw.setVisibility(View.VISIBLE);
+                }
             }
         }
 
diff --git a/src/com/android/settings/applications/AppOpsDetailsTop.java b/src/com/android/settings/applications/AppOpsDetailsTop.java
new file mode 100644
index 0000000..c3c7084
--- /dev/null
+++ b/src/com/android/settings/applications/AppOpsDetailsTop.java
@@ -0,0 +1,37 @@
+/**
+ * Copyright (C) 2015 The CyanogenMod Project
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License"); you may not
+ * use this file except in compliance with the License. You may obtain a copy
+ * of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
+ * License for the specific language governing permissions and limitations
+ * under the License.
+ */
+
+package com.android.settings.applications;
+
+import android.content.Intent;
+import android.preference.PreferenceActivity;
+
+public class AppOpsDetailsTop extends PreferenceActivity {
+
+    @Override
+    public Intent getIntent() {
+        Intent modIntent = new Intent(super.getIntent());
+        modIntent.putExtra(EXTRA_SHOW_FRAGMENT, AppOpsDetails.class.getName());
+        modIntent.putExtra(EXTRA_NO_HEADERS, true);
+        return modIntent;
+    }
+
+    @Override
+    protected boolean isValidFragment(String fragmentName) {
+        if (AppOpsDetails.class.getName().equals(fragmentName)) return true;
+        return false;
+    }
+}
diff --git a/src/com/android/settings/applications/AppOpsState.java b/src/com/android/settings/applications/AppOpsState.java
index 2a5c49a..0b54ec4 100644
--- a/src/com/android/settings/applications/AppOpsState.java
+++ b/src/com/android/settings/applications/AppOpsState.java
@@ -16,6 +16,7 @@
 
 package com.android.settings.applications;
 
+import android.app.Activity;
 import android.app.AppOpsManager;
 import android.content.Context;
 import android.content.pm.ApplicationInfo;
@@ -23,6 +24,7 @@ import android.content.pm.PackageInfo;
 import android.content.pm.PackageManager;
 import android.content.pm.PackageManager.NameNotFoundException;
 import android.content.res.Resources;
+import android.content.SharedPreferences;
 import android.graphics.drawable.Drawable;
 import android.os.Parcel;
 import android.os.Parcelable;
@@ -38,7 +40,9 @@ import java.util.ArrayList;
 import java.util.Collections;
 import java.util.Comparator;
 import java.util.HashMap;
+import java.util.HashSet;
 import java.util.List;
+import java.util.Set;
 
 public class AppOpsState {
     static final String TAG = "AppOpsState";
@@ -52,12 +56,15 @@ public class AppOpsState {
 
     List<AppOpEntry> mApps;
 
+    private SharedPreferences mPreferences;
+
     public AppOpsState(Context context) {
         mContext = context;
         mAppOps = (AppOpsManager)context.getSystemService(Context.APP_OPS_SERVICE);
         mPm = context.getPackageManager();
-        mOpSummaries = context.getResources().getTextArray(R.array.app_ops_summaries);
-        mOpLabels = context.getResources().getTextArray(R.array.app_ops_labels);
+        mOpSummaries = context.getResources().getTextArray(R.array.app_ops_summaries_lineage);
+        mOpLabels = context.getResources().getTextArray(R.array.app_ops_labels_lineage);
+        mPreferences = context.getSharedPreferences("appops_manager", Activity.MODE_PRIVATE);
     }
 
     public static class OpsTemplate implements Parcelable {
@@ -182,6 +189,7 @@ public class AppOpsState {
                     false,
                     false,
                     false,
+                    false,
                     false }
             );
 
@@ -195,7 +203,11 @@ public class AppOpsState {
                     AppOpsManager.OP_PROJECT_MEDIA,
                     AppOpsManager.OP_ACTIVATE_VPN,
                     AppOpsManager.OP_ASSIST_STRUCTURE,
-                    AppOpsManager.OP_ASSIST_SCREENSHOT},
+                    AppOpsManager.OP_ASSIST_SCREENSHOT,
+                    AppOpsManager.OP_CHANGE_WIFI_STATE,
+                    AppOpsManager.OP_BLUETOOTH_CHANGE,
+                    AppOpsManager.OP_NFC_CHANGE,
+                    AppOpsManager.OP_DATA_CONNECT_CHANGE },
             new boolean[] { false,
                     true,
                     true,
@@ -205,7 +217,11 @@ public class AppOpsState {
                     false,
                     false,
                     false,
-                    false }
+                    false,
+                    true,
+                    true,
+                    true,
+                    true }
             );
 
     public static final OpsTemplate RUN_IN_BACKGROUND_TEMPLATE = new OpsTemplate(
@@ -213,9 +229,20 @@ public class AppOpsState {
             new boolean[] { false }
             );
 
+    public static final OpsTemplate BOOTUP_TEMPLATE = new OpsTemplate(
+            new int[] { AppOpsManager.OP_BOOT_COMPLETED },
+            new boolean[] { true }
+            );
+
+    public static final OpsTemplate SU_TEMPLATE = new OpsTemplate(
+            new int[] { AppOpsManager.OP_SU },
+            new boolean[] { false }
+            );
+
     public static final OpsTemplate[] ALL_TEMPLATES = new OpsTemplate[] {
             LOCATION_TEMPLATE, PERSONAL_TEMPLATE, MESSAGING_TEMPLATE,
-            MEDIA_TEMPLATE, DEVICE_TEMPLATE, RUN_IN_BACKGROUND_TEMPLATE
+            MEDIA_TEMPLATE, DEVICE_TEMPLATE, RUN_IN_BACKGROUND_TEMPLATE,
+            BOOTUP_TEMPLATE, SU_TEMPLATE
     };
 
     /**
@@ -380,30 +407,59 @@ public class AppOpsState {
         }
 
         private CharSequence getCombinedText(ArrayList<AppOpsManager.OpEntry> ops,
-                CharSequence[] items) {
-            if (ops.size() == 1) {
-                return items[ops.get(0).getOp()];
-            } else {
-                StringBuilder builder = new StringBuilder();
-                for (int i=0; i<ops.size(); i++) {
-                    if (i > 0) {
-                        builder.append(", ");
-                    }
-                    builder.append(items[ops.get(i).getOp()]);
+                CharSequence[] items, Resources res, boolean withTerseCounts) {
+            StringBuilder builder = new StringBuilder();
+            for (int i=0; i<ops.size(); i++) {
+                if (i > 0) {
+                    builder.append(", ");
+                }
+                AppOpsManager.OpEntry op = ops.get(i);
+                int count = op.getAllowedCount() + op.getIgnoredCount();
+
+                if (withTerseCounts && count > 0) {
+                    String quantity = res.getQuantityString(R.plurals.app_ops_count,
+                            count, count);
+                    builder.append(res.getString(R.string.app_ops_entry_summary,
+                            items[op.getOp()], quantity));
+                } else {
+                    builder.append(items[op.getOp()]);
                 }
-                return builder.toString();
             }
+            return builder.toString();
+        }
+
+        public CharSequence getCountsText(Resources res) {
+            AppOpsManager.OpEntry op = mOps.get(0);
+            int allowed = op.getAllowedCount();
+            int denied = op.getIgnoredCount();
+
+            if (allowed == 0 && denied == 0) {
+                return null;
+            }
+
+            CharSequence allowedQuantity = res.getQuantityString(R.plurals.app_ops_count,
+                    allowed, allowed);
+            CharSequence deniedQuantity = res.getQuantityString(R.plurals.app_ops_count,
+                    denied, denied);
+
+            if (denied == 0) {
+                return res.getString(R.string.app_ops_allowed_count, allowedQuantity);
+            } else if (allowed == 0) {
+                return res.getString(R.string.app_ops_ignored_count, deniedQuantity);
+            }
+            return res.getString(R.string.app_ops_both_count, allowedQuantity, deniedQuantity);
         }
 
         public CharSequence getSummaryText(AppOpsState state) {
-            return getCombinedText(mOps, state.mOpSummaries);
+            return getCombinedText(mOps, state.mOpSummaries, state.mContext.getResources(), true);
         }
 
         public CharSequence getSwitchText(AppOpsState state) {
+            final Resources res = state.mContext.getResources();
             if (mSwitchOps.size() > 0) {
-                return getCombinedText(mSwitchOps, state.mOpLabels);
+                return getCombinedText(mSwitchOps, state.mOpLabels, res, false);
             } else {
-                return getCombinedText(mOps, state.mOpLabels);
+                return getCombinedText(mOps, state.mOpLabels, res, false);
             }
         }
 
@@ -503,19 +559,34 @@ public class AppOpsState {
     }
 
     private AppEntry getAppEntry(final Context context, final HashMap<String, AppEntry> appEntries,
-            final String packageName, ApplicationInfo appInfo) {
+            final String packageName, ApplicationInfo appInfo, boolean applyFilters) {
+
+        if (appInfo == null) {
+            try {
+                appInfo = mPm.getApplicationInfo(packageName,
+                        PackageManager.GET_DISABLED_COMPONENTS
+                        | PackageManager.GET_UNINSTALLED_PACKAGES);
+            } catch (PackageManager.NameNotFoundException e) {
+                Log.w(TAG, "Unable to find info for package " + packageName);
+                return null;
+            }
+        }
+
+        if (applyFilters) {
+            // Hide user apps if needed
+            if (!shouldShowUserApps() &&
+                    (appInfo.flags & ApplicationInfo.FLAG_SYSTEM) == 0) {
+                return null;
+            }
+            // Hide system apps if needed
+            if (!shouldShowSystemApps() &&
+                     (appInfo.flags & ApplicationInfo.FLAG_SYSTEM) != 0) {
+                return null;
+            }
+        }
+
         AppEntry appEntry = appEntries.get(packageName);
         if (appEntry == null) {
-            if (appInfo == null) {
-                try {
-                    appInfo = mPm.getApplicationInfo(packageName,
-                            PackageManager.MATCH_DISABLED_COMPONENTS
-                            | PackageManager.MATCH_ANY_USER);
-                } catch (PackageManager.NameNotFoundException e) {
-                    Log.w(TAG, "Unable to find info for package " + packageName);
-                    return null;
-                }
-            }
             appEntry = new AppEntry(this, appInfo);
             appEntry.loadLabel(context);
             appEntries.put(packageName, appEntry);
@@ -523,12 +594,35 @@ public class AppOpsState {
         return appEntry;
     }
 
-    public List<AppOpEntry> buildState(OpsTemplate tpl, int uid, String packageName) {
-        return buildState(tpl, uid, packageName, RECENCY_COMPARATOR);
+    private boolean shouldShowUserApps() {
+        return mPreferences.getBoolean("show_user_apps", true);
+    }
+
+    private boolean shouldShowSystemApps() {
+        return mPreferences.getBoolean("show_system_apps", true);
+    }
+
+    public List<AppOpEntry> buildState(OpsTemplate tpl, int uid, String packageName,
+            boolean privacyGuard) {
+        return buildState(tpl, uid, packageName, RECENCY_COMPARATOR, privacyGuard);
     }
 
     public List<AppOpEntry> buildState(OpsTemplate tpl, int uid, String packageName,
             Comparator<AppOpEntry> comparator) {
+        return buildState(tpl, uid, packageName, comparator, false);
+    }
+
+    private boolean isPrivacyGuardOp(int op) {
+        for (int privacyGuardOp : AppOpsManager.PRIVACY_GUARD_OP_STATES) {
+            if (privacyGuardOp == op) {
+                return true;
+            }
+        }
+        return false;
+    }
+
+    public List<AppOpEntry> buildState(OpsTemplate tpl, int uid, String packageName,
+            Comparator<AppOpEntry> comparator, boolean privacyGuard) {
         final Context context = mContext;
 
         final HashMap<String, AppEntry> appEntries = new HashMap<String, AppEntry>();
@@ -537,7 +631,25 @@ public class AppOpsState {
         final ArrayList<String> perms = new ArrayList<String>();
         final ArrayList<Integer> permOps = new ArrayList<Integer>();
         final int[] opToOrder = new int[AppOpsManager._NUM_OP];
+
+        final Set<Integer> privacyGuardOps = new HashSet<>();
+
         for (int i=0; i<tpl.ops.length; i++) {
+            if (privacyGuard && isPrivacyGuardOp(tpl.ops[i])) {
+                // If there's a permission for this Privacy Guard OP, then
+                // we don't have to treat it in a special way. The application
+                // should have the permission declared if it uses it, so we
+                // will add this later when we query PackageManager
+                String perm = AppOpsManager.opToPermission(tpl.ops[i]);
+                if (perm != null) {
+                    if (DEBUG) Log.d(TAG, "Adding " + AppOpsManager.opToName(tpl.ops[i])
+                            + " (" + tpl.ops[i] + ") to privacyGuardOps");
+                    privacyGuardOps.add(tpl.ops[i]);
+                } else {
+                    if (DEBUG) Log.d(TAG, "Not adding " + AppOpsManager.opToName(tpl.ops[i])
+                            + " (" + tpl.ops[i] + ") with perm " + perm + " to privacyGuardOps");
+                }
+            }
             if (tpl.showPerms[i]) {
                 String perm = AppOpsManager.opToPermission(tpl.ops[i]);
                 if (perm != null && !perms.contains(perm)) {
@@ -548,6 +660,9 @@ public class AppOpsState {
             }
         }
 
+        // Whether to apply hide user / system app filters
+        final boolean applyFilters = (packageName == null);
+
         List<AppOpsManager.PackageOps> pkgs;
         if (packageName != null) {
             pkgs = mAppOps.getOpsForPackage(uid, packageName, tpl.ops);
@@ -558,12 +673,21 @@ public class AppOpsState {
         if (pkgs != null) {
             for (int i=0; i<pkgs.size(); i++) {
                 AppOpsManager.PackageOps pkgOps = pkgs.get(i);
-                AppEntry appEntry = getAppEntry(context, appEntries, pkgOps.getPackageName(), null);
+                AppEntry appEntry = getAppEntry(context, appEntries, pkgOps.getPackageName(), null,
+                        applyFilters);
                 if (appEntry == null) {
                     continue;
                 }
                 for (int j=0; j<pkgOps.getOps().size(); j++) {
                     AppOpsManager.OpEntry opEntry = pkgOps.getOps().get(j);
+                    if (privacyGuard && privacyGuardOps.contains(opEntry.getOp())) {
+                        // This OP is here because the user enabled Privacy Guard
+                        // for this application.
+                        if (DEBUG) Log.d(TAG, "Not adding "
+                                + AppOpsManager.opToName(opEntry.getOp())
+                                + " (" + opEntry.getOp() + ")");
+                        continue;
+                    }
                     addOp(entries, pkgOps, appEntry, opEntry, packageName == null,
                             packageName == null ? 0 : opToOrder[opEntry.getOp()]);
                 }
@@ -586,7 +710,7 @@ public class AppOpsState {
         for (int i=0; i<apps.size(); i++) {
             PackageInfo appInfo = apps.get(i);
             AppEntry appEntry = getAppEntry(context, appEntries, appInfo.packageName,
-                    appInfo.applicationInfo);
+                    appInfo.applicationInfo, applyFilters);
             if (appEntry == null) {
                 continue;
             }
@@ -595,7 +719,7 @@ public class AppOpsState {
             if (appInfo.requestedPermissions != null) {
                 for (int j=0; j<appInfo.requestedPermissions.length; j++) {
                     if (appInfo.requestedPermissionsFlags != null) {
-                        if ((appInfo.requestedPermissionsFlags[j]
+                        if (!privacyGuard && (appInfo.requestedPermissionsFlags[j]
                                 & PackageInfo.REQUESTED_PERMISSION_GRANTED) == 0) {
                             if (DEBUG) Log.d(TAG, "Pkg " + appInfo.packageName + " perm "
                                     + appInfo.requestedPermissions[j] + " not granted; skipping");
@@ -620,7 +744,7 @@ public class AppOpsState {
 
                         }
                         AppOpsManager.OpEntry opEntry = new AppOpsManager.OpEntry(
-                                permOps.get(k), AppOpsManager.MODE_ALLOWED, 0, 0, 0, -1, null);
+                                permOps.get(k), AppOpsManager.MODE_ALLOWED, 0, 0, 0, -1, null, 0, 0);
                         dummyOps.add(opEntry);
                         addOp(entries, pkgOps, appEntry, opEntry, packageName == null,
                                 packageName == null ? 0 : opToOrder[opEntry.getOp()]);
diff --git a/src/com/android/settings/applications/AppOpsSummary.java b/src/com/android/settings/applications/AppOpsSummary.java
index ba2a3c9..6d817fd 100644
--- a/src/com/android/settings/applications/AppOpsSummary.java
+++ b/src/com/android/settings/applications/AppOpsSummary.java
@@ -16,20 +16,35 @@
 
 package com.android.settings.applications;
 
+import android.app.Activity;
+import android.app.AlertDialog;
+import android.app.AppOpsManager;
 import android.app.Fragment;
 import android.app.FragmentManager;
-import android.content.res.TypedArray;
+import android.content.Context;
+import android.content.DialogInterface;
+import android.content.res.Resources;
+import android.content.SharedPreferences;
 import android.os.Bundle;
 import android.preference.PreferenceFrameLayout;
 import android.support.v13.app.FragmentPagerAdapter;
 import android.support.v4.view.PagerTabStrip;
 import android.support.v4.view.ViewPager;
+import android.util.TypedValue;
 import android.view.LayoutInflater;
+import android.view.Menu;
+import android.view.MenuInflater;
+import android.view.MenuItem;
 import android.view.View;
 import android.view.ViewGroup;
 
 import com.android.internal.logging.nano.MetricsProto.MetricsEvent;
 import com.android.settings.core.InstrumentedPreferenceFragment;
+
+import java.util.ArrayList;
+import java.util.List;
+
+import com.android.settings.development.DevelopmentSettings;
 import com.android.settings.R;
 
 public class AppOpsSummary extends InstrumentedPreferenceFragment {
@@ -40,14 +55,12 @@ public class AppOpsSummary extends InstrumentedPreferenceFragment {
     private View mRootView;
     private ViewPager mViewPager;
 
+    private MyPagerAdapter mAdapter;
+
+    private Activity mActivity;
+    private SharedPreferences mPreferences;
+
     CharSequence[] mPageNames;
-    static AppOpsState.OpsTemplate[] sPageTemplates = new AppOpsState.OpsTemplate[] {
-        AppOpsState.LOCATION_TEMPLATE,
-        AppOpsState.PERSONAL_TEMPLATE,
-        AppOpsState.MESSAGING_TEMPLATE,
-        AppOpsState.MEDIA_TEMPLATE,
-        AppOpsState.DEVICE_TEMPLATE
-    };
 
     int mCurPos;
 
@@ -57,19 +70,21 @@ public class AppOpsSummary extends InstrumentedPreferenceFragment {
     }
 
     class MyPagerAdapter extends FragmentPagerAdapter implements ViewPager.OnPageChangeListener {
+        private AppOpsState.OpsTemplate[] mPageTemplates;
 
-        public MyPagerAdapter(FragmentManager fm) {
+        public MyPagerAdapter(FragmentManager fm, AppOpsState.OpsTemplate[] templates) {
             super(fm);
+            mPageTemplates = templates;
         }
 
         @Override
         public Fragment getItem(int position) {
-            return new AppOpsCategory(sPageTemplates[position]);
+            return new AppOpsCategory(mPageTemplates[position]);
         }
 
         @Override
         public int getCount() {
-            return sPageTemplates.length;
+            return mPageTemplates.length;
         }
 
         @Override
@@ -86,6 +101,10 @@ public class AppOpsSummary extends InstrumentedPreferenceFragment {
             mCurPos = position;
         }
 
+        public int getCurrentPage() {
+            return mCurPos;
+        }
+
         @Override
         public void onPageScrollStateChanged(int state) {
             if (state == ViewPager.SCROLL_STATE_IDLE) {
@@ -94,6 +113,14 @@ public class AppOpsSummary extends InstrumentedPreferenceFragment {
         }
     }
 
+    private void resetAdapter() {
+        // trigger adapter load, preserving the selected page
+        int curPos = mAdapter.getCurrentPage();
+        mViewPager.setAdapter(mAdapter);
+        mViewPager.setOnPageChangeListener(mAdapter);
+        mViewPager.setCurrentItem(curPos);
+    }
+
     @Override
     public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {
         // initialize the inflater
@@ -104,22 +131,23 @@ public class AppOpsSummary extends InstrumentedPreferenceFragment {
         mContentContainer = container;
         mRootView = rootView;
 
-        mPageNames = getResources().getTextArray(R.array.app_ops_categories);
+        mPageNames = getResources().getTextArray(R.array.app_ops_categories_lineage);
 
         mViewPager = (ViewPager) rootView.findViewById(R.id.pager);
-        MyPagerAdapter adapter = new MyPagerAdapter(getChildFragmentManager());
-        mViewPager.setAdapter(adapter);
-        mViewPager.setOnPageChangeListener(adapter);
+        mAdapter = new MyPagerAdapter(getChildFragmentManager(),
+                filterTemplates(AppOpsState.ALL_TEMPLATES));
+        mViewPager.setAdapter(mAdapter);
+        mViewPager.setOnPageChangeListener(mAdapter);
         PagerTabStrip tabs = (PagerTabStrip) rootView.findViewById(R.id.tabs);
 
-        // This should be set in the XML layout, but PagerTabStrip lives in
-        // support-v4 and doesn't have styleable attributes.
-        final TypedArray ta = tabs.getContext().obtainStyledAttributes(
-                new int[] { android.R.attr.colorAccent });
-        final int colorAccent = ta.getColor(0, 0);
-        ta.recycle();
+        // HACK - https://code.google.com/p/android/issues/detail?id=213359
+        ((ViewPager.LayoutParams)tabs.getLayoutParams()).isDecor = true;
 
-        tabs.setTabIndicatorColorResource(colorAccent);
+        Resources.Theme theme = tabs.getContext().getTheme();
+        TypedValue typedValue = new TypedValue();
+        theme.resolveAttribute(android.R.attr.colorAccent, typedValue, true);
+        final int colorAccent = getContext().getColor(typedValue.resourceId);
+        tabs.setTabIndicatorColor(colorAccent);
 
         // We have to do this now because PreferenceFrameLayout looks at it
         // only when the view is added.
@@ -127,6 +155,100 @@ public class AppOpsSummary extends InstrumentedPreferenceFragment {
             ((PreferenceFrameLayout.LayoutParams) rootView.getLayoutParams()).removeBorders = true;
         }
 
+        mActivity = getActivity();
+
         return rootView;
     }
+
+    private AppOpsState.OpsTemplate[] filterTemplates(AppOpsState.OpsTemplate[] templates) {
+        List<AppOpsState.OpsTemplate> validTemplates = new ArrayList(templates.length);
+        for (AppOpsState.OpsTemplate template : templates) {
+            if (template == AppOpsState.SU_TEMPLATE
+                    && !DevelopmentSettings.isRootForAppsEnabled()) {
+                continue;
+            }
+            validTemplates.add(template);
+        }
+        return validTemplates.toArray(new AppOpsState.OpsTemplate[0]);
+    }
+
+    private boolean shouldShowUserApps() {
+        return mPreferences.getBoolean("show_user_apps", true);
+    }
+
+    private boolean shouldShowSystemApps() {
+        return mPreferences.getBoolean("show_system_apps", true);
+    }
+
+    @Override
+    public void onActivityCreated(Bundle savedInstanceState) {
+        super.onActivityCreated(savedInstanceState);
+
+        // get shared preferences
+        mPreferences = mActivity.getSharedPreferences("appops_manager", Activity.MODE_PRIVATE);
+
+        setHasOptionsMenu(true);
+    }
+
+    @Override
+    public void onCreateOptionsMenu(Menu menu, MenuInflater inflater) {
+        super.onCreateOptionsMenu(menu, inflater);
+        inflater.inflate(R.menu.appops_manager, menu);
+        menu.findItem(R.id.show_user_apps).setChecked(shouldShowUserApps());
+        menu.findItem(R.id.show_system_apps).setChecked(shouldShowSystemApps());
+    }
+
+    private void resetCounters() {
+        final AppOpsManager appOps =
+                (AppOpsManager) mActivity.getSystemService(Context.APP_OPS_SERVICE);
+        if (appOps == null) {
+            return;
+        }
+        appOps.resetCounters();
+        // reload content
+        resetAdapter();
+    }
+
+    private void resetCountersConfirm() {
+        new AlertDialog.Builder(getActivity())
+            .setIcon(android.R.drawable.ic_dialog_alert)
+            .setTitle(R.string.app_ops_reset_confirm_title)
+            .setMessage(R.string.app_ops_reset_confirm_mesg)
+            .setPositiveButton(android.R.string.ok, new DialogInterface.OnClickListener()
+                {
+                    @Override
+                    public void onClick(DialogInterface dialog, int which) {
+                        resetCounters();
+                    }
+                })
+            .setNegativeButton(android.R.string.cancel, null)
+            .show();
+    }
+
+    @Override
+    public boolean onOptionsItemSelected(MenuItem item) {
+        switch (item.getItemId()) {
+            case R.id.show_user_apps:
+                final String prefNameUserApps = "show_user_apps";
+                // set the menu checkbox and save it in shared preference
+                item.setChecked(!item.isChecked());
+                mPreferences.edit().putBoolean(prefNameUserApps, item.isChecked()).commit();
+                // reload content
+                resetAdapter();
+                return true;
+            case R.id.show_system_apps:
+                final String prefNameSysApps = "show_system_apps";
+                // set the menu checkbox and save it in shared preference
+                item.setChecked(!item.isChecked());
+                mPreferences.edit().putBoolean(prefNameSysApps, item.isChecked()).commit();
+                // reload view content
+                resetAdapter();
+                return true;
+            case R.id.reset_counters:
+                resetCountersConfirm();
+                return true;
+            default:
+                return super.onContextItemSelected(item);
+        }
+    }
 }
-- 
2.7.4

