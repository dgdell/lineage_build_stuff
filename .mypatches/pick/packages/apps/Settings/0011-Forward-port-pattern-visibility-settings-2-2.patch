From 59ebc6ff636ccb77eb721f1293aa5a69d490db0c Mon Sep 17 00:00:00 2001
From: Michael Bestas <mikeioannina@gmail.com>
Date: Sat, 4 Apr 2015 04:43:43 +0300
Subject: [PATCH 11/16] Forward port pattern visibility settings (2/2)

Change-Id: Ic627953c5df854c442671a98b5da539b994da18b
---
 res/xml/screen_lock_settings.xml              | 10 ++-
 ...ractPatternSwitchPreferenceController.java | 73 +++++++++++++++++++
 ...atternDotsVisiblePreferenceController.java | 41 +++++++++++
 ...tternErrorVisiblePreferenceController.java | 41 +++++++++++
 .../PatternVisiblePreferenceController.java   | 42 ++---------
 .../screenlock/ScreenLockSettings.java        |  4 +
 6 files changed, 174 insertions(+), 37 deletions(-)
 create mode 100644 src/com/android/settings/security/screenlock/AbstractPatternSwitchPreferenceController.java
 create mode 100644 src/com/android/settings/security/screenlock/PatternDotsVisiblePreferenceController.java
 create mode 100644 src/com/android/settings/security/screenlock/PatternErrorVisiblePreferenceController.java

diff --git a/res/xml/screen_lock_settings.xml b/res/xml/screen_lock_settings.xml
index d0ef4ddc8d..9a3752bb54 100644
--- a/res/xml/screen_lock_settings.xml
+++ b/res/xml/screen_lock_settings.xml
@@ -25,6 +25,14 @@
         android:key="visiblepattern"
         android:title="@string/lockpattern_settings_enable_visible_pattern_title" />
 
+    <SwitchPreference
+        android:key="visible_error_pattern"
+        android:title="@string/lockpattern_settings_enable_error_path_title"/>
+
+    <SwitchPreference
+        android:key="visibledots"
+        android:title="@string/lockpattern_settings_enable_dots_title"/>
+
     <!-- available in pin/pattern/password -->
     <com.android.settings.TimeoutListPreference
         android:key="lock_after_timeout"
@@ -59,4 +67,4 @@
         android:title="@string/lockscreen_visualizer_title"
         android:defaultValue="true" />
 
-</PreferenceScreen>
\ No newline at end of file
+</PreferenceScreen>
diff --git a/src/com/android/settings/security/screenlock/AbstractPatternSwitchPreferenceController.java b/src/com/android/settings/security/screenlock/AbstractPatternSwitchPreferenceController.java
new file mode 100644
index 0000000000..7f45e1095f
--- /dev/null
+++ b/src/com/android/settings/security/screenlock/AbstractPatternSwitchPreferenceController.java
@@ -0,0 +1,73 @@
+/*
+ * Copyright (C) 2017 The Android Open Source Project
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.android.settings.security.screenlock;
+
+import android.app.admin.DevicePolicyManager;
+import android.content.Context;
+import android.support.v7.preference.Preference;
+import android.support.v7.preference.TwoStatePreference;
+
+import com.android.internal.widget.LockPatternUtils;
+import com.android.settings.core.PreferenceControllerMixin;
+import com.android.settingslib.core.AbstractPreferenceController;
+
+public abstract class AbstractPatternSwitchPreferenceController
+        extends AbstractPreferenceController
+        implements PreferenceControllerMixin, Preference.OnPreferenceChangeListener {
+
+    private final String mKey;
+    private final int mUserId;
+    private final LockPatternUtils mLockPatternUtils;
+
+    public AbstractPatternSwitchPreferenceController(Context context, String key,
+            int userId, LockPatternUtils lockPatternUtils) {
+        super(context);
+        mKey = key;
+        mUserId = userId;
+        mLockPatternUtils = lockPatternUtils;
+    }
+
+    @Override
+    public boolean isAvailable() {
+        return isPatternLock();
+    }
+
+    @Override
+    public String getPreferenceKey() {
+        return mKey;
+    }
+
+    @Override
+    public void updateState(Preference preference) {
+        ((TwoStatePreference) preference).setChecked(isEnabled(mLockPatternUtils, mUserId));
+    }
+
+    private boolean isPatternLock() {
+        return mLockPatternUtils.isSecure(mUserId)
+                && mLockPatternUtils.getKeyguardStoredPasswordQuality(mUserId)
+                == DevicePolicyManager.PASSWORD_QUALITY_SOMETHING;
+    }
+
+    @Override
+    public boolean onPreferenceChange(Preference preference, Object newValue) {
+        setEnabled(mLockPatternUtils, mUserId, (Boolean) newValue);
+        return true;
+    }
+
+    protected abstract boolean isEnabled(LockPatternUtils utils, int userId);
+    protected abstract void setEnabled(LockPatternUtils utils, int userId, boolean enabled);
+}
diff --git a/src/com/android/settings/security/screenlock/PatternDotsVisiblePreferenceController.java b/src/com/android/settings/security/screenlock/PatternDotsVisiblePreferenceController.java
new file mode 100644
index 0000000000..8da044d449
--- /dev/null
+++ b/src/com/android/settings/security/screenlock/PatternDotsVisiblePreferenceController.java
@@ -0,0 +1,41 @@
+/*
+ * Copyright (C) 2017 The Android Open Source Project
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.android.settings.security.screenlock;
+
+import android.content.Context;
+
+import com.android.internal.widget.LockPatternUtils;
+
+public class PatternDotsVisiblePreferenceController
+        extends AbstractPatternSwitchPreferenceController {
+    private static final String PREF_KEY = "visibledots";
+
+    public PatternDotsVisiblePreferenceController(Context context, int userId,
+            LockPatternUtils lockPatternUtils) {
+        super(context, PREF_KEY, userId, lockPatternUtils);
+    }
+
+    @Override
+    protected boolean isEnabled(LockPatternUtils utils, int userId) {
+        return utils.isVisibleDotsEnabled(userId);
+    }
+
+    @Override
+    protected void setEnabled(LockPatternUtils utils, int userId, boolean enabled) {
+        utils.setVisibleDotsEnabled(enabled, userId);
+    }
+}
diff --git a/src/com/android/settings/security/screenlock/PatternErrorVisiblePreferenceController.java b/src/com/android/settings/security/screenlock/PatternErrorVisiblePreferenceController.java
new file mode 100644
index 0000000000..b9a18c194f
--- /dev/null
+++ b/src/com/android/settings/security/screenlock/PatternErrorVisiblePreferenceController.java
@@ -0,0 +1,41 @@
+/*
+ * Copyright (C) 2017 The Android Open Source Project
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.android.settings.security.screenlock;
+
+import android.content.Context;
+
+import com.android.internal.widget.LockPatternUtils;
+
+public class PatternErrorVisiblePreferenceController
+        extends AbstractPatternSwitchPreferenceController {
+    private static final String PREF_KEY = "visible_error_pattern";
+
+    public PatternErrorVisiblePreferenceController(Context context, int userId,
+            LockPatternUtils lockPatternUtils) {
+        super(context, PREF_KEY, userId, lockPatternUtils);
+    }
+
+    @Override
+    protected boolean isEnabled(LockPatternUtils utils, int userId) {
+        return utils.isShowErrorPath(userId);
+    }
+
+    @Override
+    protected void setEnabled(LockPatternUtils utils, int userId, boolean enabled) {
+        utils.setShowErrorPath(enabled, userId);
+    }
+}
diff --git a/src/com/android/settings/security/screenlock/PatternVisiblePreferenceController.java b/src/com/android/settings/security/screenlock/PatternVisiblePreferenceController.java
index beddd4b69f..2f8b641a87 100644
--- a/src/com/android/settings/security/screenlock/PatternVisiblePreferenceController.java
+++ b/src/com/android/settings/security/screenlock/PatternVisiblePreferenceController.java
@@ -16,55 +16,25 @@
 
 package com.android.settings.security.screenlock;
 
-import android.app.admin.DevicePolicyManager;
 import android.content.Context;
-import android.support.v7.preference.Preference;
-import android.support.v7.preference.TwoStatePreference;
 
 import com.android.internal.widget.LockPatternUtils;
-import com.android.settings.core.PreferenceControllerMixin;
-import com.android.settingslib.core.AbstractPreferenceController;
-
-public class PatternVisiblePreferenceController extends AbstractPreferenceController
-        implements PreferenceControllerMixin, Preference.OnPreferenceChangeListener {
 
+public class PatternVisiblePreferenceController extends AbstractPatternSwitchPreferenceController {
     private static final String PREF_KEY = "visiblepattern";
 
-    private final int mUserId;
-    private final LockPatternUtils mLockPatternUtils;
-
     public PatternVisiblePreferenceController(Context context, int userId,
             LockPatternUtils lockPatternUtils) {
-        super(context);
-        mUserId = userId;
-        mLockPatternUtils = lockPatternUtils;
-    }
-
-    @Override
-    public boolean isAvailable() {
-        return isPatternLock();
+        super(context, PREF_KEY, userId, lockPatternUtils);
     }
 
     @Override
-    public String getPreferenceKey() {
-        return PREF_KEY;
-    }
-
-    @Override
-    public void updateState(Preference preference) {
-        ((TwoStatePreference) preference).setChecked(
-                mLockPatternUtils.isVisiblePatternEnabled(mUserId));
-    }
-
-    private boolean isPatternLock() {
-        return mLockPatternUtils.isSecure(mUserId)
-                && mLockPatternUtils.getKeyguardStoredPasswordQuality(mUserId)
-                == DevicePolicyManager.PASSWORD_QUALITY_SOMETHING;
+    protected boolean isEnabled(LockPatternUtils utils, int userId) {
+        return utils.isVisiblePatternEnabled(userId);
     }
 
     @Override
-    public boolean onPreferenceChange(Preference preference, Object newValue) {
-        mLockPatternUtils.setVisiblePatternEnabled((Boolean) newValue, mUserId);
-        return true;
+    protected void setEnabled(LockPatternUtils utils, int userId, boolean enabled) {
+        utils.setVisiblePatternEnabled(enabled, userId);
     }
 }
diff --git a/src/com/android/settings/security/screenlock/ScreenLockSettings.java b/src/com/android/settings/security/screenlock/ScreenLockSettings.java
index 8ed43cf698..04a2f17693 100644
--- a/src/com/android/settings/security/screenlock/ScreenLockSettings.java
+++ b/src/com/android/settings/security/screenlock/ScreenLockSettings.java
@@ -76,6 +76,10 @@ public class ScreenLockSettings extends DashboardFragment
         final List<AbstractPreferenceController> controllers = new ArrayList<>();
         controllers.add(new PatternVisiblePreferenceController(
                 context, MY_USER_ID, lockPatternUtils));
+        controllers.add(new PatternErrorVisiblePreferenceController(
+                context, MY_USER_ID, lockPatternUtils));
+        controllers.add(new PatternDotsVisiblePreferenceController(
+                context, MY_USER_ID, lockPatternUtils));
         controllers.add(new PowerButtonInstantLockPreferenceController(
                 context, MY_USER_ID, lockPatternUtils));
         controllers.add(new LockAfterTimeoutPreferenceController(
-- 
2.17.1

