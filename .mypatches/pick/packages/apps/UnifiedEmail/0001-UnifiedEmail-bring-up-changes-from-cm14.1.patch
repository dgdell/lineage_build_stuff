From 77b89f09186e87fbcb020ef8e32f1a6098669f15 Mon Sep 17 00:00:00 2001
From: monojp <martin@herndl.org>
Date: Fri, 6 Apr 2018 23:00:00 +0200
Subject: [PATCH] UnifiedEmail: bring up changes from cm14.1 migrate to
 lineage-sdk LightsCapabilities and LineageNotification

Includes the following commits:
c8bdc90ae 5d4a6ec26 eaf41f836 66ec7d762 ad4f76791 352e05e5b e546490ad
f4dfa256f 36353571a 912d00cfd d362d5045 c51b44146 188ce67a7 bdad984d0
281f491e5 137e7e496 7fd67cc7d 58db9e521 20ec274a0 e5baf2005 ceb768a79
297ced1b0 a887ec03d 2cc0a176a a46bbf2fb 2c917f8bd 26ae69cf6 562478d2e
630a11dd0 d9bbf389c 07f9eb847 830a0be3a e88a1815a 91cd4fab6 11f87bf6e
15dab97ec 5b6f234dd a010e1c69 1056d2759 469178624 69981f3b2 b3dfbd5a1
e75982b2e 886d52508 e04ba51b6 fc6f9cc5c 50888c185 3bad40b41 f4c209ec1
58f7c2727 fc1125dcf 5462df5cd e353ae2ea 2dd00df30

Change-Id: I1ac3462ad665c1cde301d1b09675ddf1861a3e3f
---
 Android.mk                                    |   6 +-
 AndroidManifest.xml                           |   4 +-
 proguard.flags                                |   1 +
 res/drawable-hdpi/ic_load_more_holo_light.png | Bin 0 -> 3094 bytes
 .../ic_notification_mail_24dp.png             | Bin 771 -> 388 bytes
 .../ic_notification_multiple_mail_24dp.png    | Bin 400 -> 15823 bytes
 res/drawable-mdpi/ic_load_more_holo_light.png | Bin 0 -> 3066 bytes
 .../ic_notification_mail_24dp.png             | Bin 736 -> 294 bytes
 .../ic_notification_multiple_mail_24dp.png    | Bin 214 -> 15676 bytes
 res/drawable-v21/ic_drawer_junk_24dp.xml      |  37 +
 .../ic_load_more_holo_light.png               | Bin 0 -> 3298 bytes
 .../ic_notification_mail_24dp.png             | Bin 947 -> 441 bytes
 .../ic_notification_multiple_mail_24dp.png    | Bin 385 -> 18317 bytes
 .../ic_notification_mail_24dp.png             | Bin 786 -> 672 bytes
 .../ic_notification_multiple_mail_24dp.png    | Bin 1517 -> 15229 bytes
 .../ic_notification_mail_24dp.png             | Bin 0 -> 777 bytes
 .../ic_notification_multiple_mail_24dp.png    | Bin 0 -> 17152 bytes
 res/drawable/ic_email.xml                     |  10 +
 res/drawable/save.xml                         |  33 +
 .../conversation_message_attachment_bar.xml   |  26 +-
 res/layout/conversation_message_footer.xml    |   8 +
 res/layout/dialog_notification_lights.xml     | 116 +++
 .../dialog_notification_lights_title.xml      |  49 +
 res/layout/notification_pulse_time_item.xml   |  25 +
 res/layout/preference_activity.xml            |  38 +
 .../preference_folder_notification_light.xml  | 114 +++
 res/menu/message_header_overflow_menu.xml     |   2 +
 ...ge_header_overflow_menu_land_or_tablet.xml |   2 +
 res/values-v21/themes.xml                     |  12 -
 res/values-zh-rCN/strings.xml                 |   1 +
 res/values/cm_arrays.xml                      |  66 ++
 res/values/cm_dimens.xml                      |  20 +
 res/values/cm_strings.xml                     |  55 ++
 res/values/colors.xml                         |   2 +
 res/values/strings.xml                        |   2 +
 res/values/styles.xml                         |   6 +-
 res/values/themes.xml                         |  15 +-
 res/xml/general_preferences.xml               |  18 +
 .../emailcommon/internet/MimeUtility.java     |  23 +-
 .../emailcommon/mail/FetchProfile.java        |  21 +
 .../utility/ConversionUtilities.java          |  13 +-
 .../mail/browse/AttachmentActionHandler.java  |  96 +-
 .../mail/browse/ConversationItemView.java     |   8 +-
 .../mail/browse/ConversationMessage.java      |   7 +
 .../mail/browse/MessageAttachmentBar.java     | 136 ++-
 .../mail/browse/MessageFooterView.java        |  74 +-
 .../mail/browse/MessageHeaderView.java        |  10 +
 .../android/mail/compose/ComposeActivity.java |  54 +-
 .../mail/compose/RecipientAdapter.java        | 229 ++++-
 .../mail/photo/MailPhotoViewActivity.java     |   3 +
 .../mail/photomanager/LetterTileProvider.java |   2 +-
 .../mail/preferences/FolderPreferences.java   |  47 +
 .../android/mail/preferences/MailPrefs.java   |  18 +
 .../notifications/AlphaPatternDrawable.java   | 125 +++
 .../notifications/ColorPanelView.java         | 171 ++++
 .../notifications/ColorPickerView.java        | 860 ++++++++++++++++++
 .../FolderNotificationLightPreference.java    | 306 +++++++
 .../notifications/LightSettingsDialog.java    | 451 +++++++++
 .../android/mail/providers/Attachment.java    |  23 +-
 src/com/android/mail/providers/Folder.java    |   8 +-
 src/com/android/mail/providers/Message.java   |  19 +-
 src/com/android/mail/providers/Settings.java  |   4 +-
 .../android/mail/providers/UIProvider.java    |  35 +-
 .../mail/ui/AbstractActivityController.java   |  27 +-
 .../mail/ui/AccountFeedbackActivity.java      |  20 +-
 src/com/android/mail/ui/AccountItemView.java  |  10 +-
 .../mail/ui/AddableFolderSelectorAdapter.java |   5 +-
 .../android/mail/ui/ConversationUpdater.java  |   6 +
 .../mail/ui/ConversationViewFragment.java     |   5 +-
 .../mail/ui/FolderSelectionDialog.java        |  10 +-
 .../ui/MaterialSearchSuggestionsList.java     |   2 +
 .../mail/ui/NestedFolderTeaserView.java       |   9 +-
 .../ui/SecureConversationViewController.java  |   8 +-
 .../ui/SecureConversationViewFragment.java    |   2 +-
 .../android/mail/ui/SwipeableListView.java    |   7 +-
 .../mail/ui/SystemFolderSelectorAdapter.java  |  14 +-
 .../ui/settings/BasePreferenceActivity.java   |  49 +
 .../ui/settings/GeneralPrefsFragment.java     |  78 ++
 .../ui/settings/MailPreferenceActivity.java   |  19 +-
 .../android/mail/utils/NotificationUtils.java |  78 +-
 .../mail/widget/BaseWidgetProvider.java       |   1 -
 81 files changed, 3511 insertions(+), 250 deletions(-)
 create mode 100755 res/drawable-hdpi/ic_load_more_holo_light.png
 create mode 100755 res/drawable-mdpi/ic_load_more_holo_light.png
 create mode 100644 res/drawable-v21/ic_drawer_junk_24dp.xml
 create mode 100755 res/drawable-xhdpi/ic_load_more_holo_light.png
 create mode 100644 res/drawable-xxxhdpi/ic_notification_mail_24dp.png
 create mode 100644 res/drawable-xxxhdpi/ic_notification_multiple_mail_24dp.png
 create mode 100644 res/drawable/ic_email.xml
 create mode 100644 res/drawable/save.xml
 mode change 100644 => 100755 res/layout/conversation_message_footer.xml
 create mode 100644 res/layout/dialog_notification_lights.xml
 create mode 100644 res/layout/dialog_notification_lights_title.xml
 create mode 100644 res/layout/notification_pulse_time_item.xml
 create mode 100644 res/layout/preference_activity.xml
 create mode 100644 res/layout/preference_folder_notification_light.xml
 mode change 100644 => 100755 res/menu/message_header_overflow_menu.xml
 mode change 100644 => 100755 res/menu/message_header_overflow_menu_land_or_tablet.xml
 delete mode 100644 res/values-v21/themes.xml
 create mode 100644 res/values/cm_arrays.xml
 create mode 100644 res/values/cm_dimens.xml
 create mode 100644 res/values/cm_strings.xml
 mode change 100644 => 100755 src/com/android/emailcommon/mail/FetchProfile.java
 mode change 100644 => 100755 src/com/android/mail/browse/AttachmentActionHandler.java
 mode change 100644 => 100755 src/com/android/mail/browse/ConversationMessage.java
 mode change 100644 => 100755 src/com/android/mail/browse/MessageAttachmentBar.java
 mode change 100644 => 100755 src/com/android/mail/browse/MessageFooterView.java
 mode change 100644 => 100755 src/com/android/mail/browse/MessageHeaderView.java
 create mode 100644 src/com/android/mail/preferences/notifications/AlphaPatternDrawable.java
 create mode 100644 src/com/android/mail/preferences/notifications/ColorPanelView.java
 create mode 100644 src/com/android/mail/preferences/notifications/ColorPickerView.java
 create mode 100644 src/com/android/mail/preferences/notifications/FolderNotificationLightPreference.java
 create mode 100644 src/com/android/mail/preferences/notifications/LightSettingsDialog.java
 mode change 100644 => 100755 src/com/android/mail/providers/Attachment.java
 mode change 100644 => 100755 src/com/android/mail/providers/Message.java
 mode change 100644 => 100755 src/com/android/mail/providers/UIProvider.java
 mode change 100644 => 100755 src/com/android/mail/ui/AbstractActivityController.java
 mode change 100644 => 100755 src/com/android/mail/ui/ConversationUpdater.java
 mode change 100644 => 100755 src/com/android/mail/ui/SecureConversationViewController.java
 create mode 100644 src/com/android/mail/ui/settings/BasePreferenceActivity.java

diff --git a/Android.mk b/Android.mk
index e61aa361f..113559ffe 100644
--- a/Android.mk
+++ b/Android.mk
@@ -43,14 +43,14 @@ LOCAL_STATIC_JAVA_LIBRARIES += android-support-v13
 LOCAL_STATIC_JAVA_LIBRARIES += android-opt-bitmap
 LOCAL_STATIC_JAVA_LIBRARIES += android-opt-datetimepicker
 LOCAL_STATIC_JAVA_LIBRARIES += owasp-html-sanitizer
-
-LOCAL_SDK_VERSION := current
+LOCAL_STATIC_JAVA_LIBRARIES += com.android.emailcommon
+LOCAL_STATIC_JAVA_LIBRARIES += org.lineageos.platform.internal
 
 LOCAL_SRC_FILES := $(call all-java-files-under, $(src_dirs)) \
         $(call all-logtags-files-under, $(src_dirs))
 LOCAL_RESOURCE_DIR := $(addprefix $(LOCAL_PATH)/, $(res_dirs))
 LOCAL_AAPT_FLAGS := --auto-add-overlay
-LOCAL_AAPT_FLAGS += --extra-packages com.android.ex.chips:com.android.ex.photo:android.support.v7.appcompat:android.support.v7.gridlayout:com.android.bitmap:com.android.datetimepicker
+LOCAL_AAPT_FLAGS += --extra-packages com.android.ex.chips:com.android.ex.photo:android.support.v7.appcompat:android.support.v7.gridlayout:com.android.bitmap:com.android.datetimepicker:com.android.emailcommon
 
 LOCAL_PROGUARD_FLAG_FILES := proguard.flags
 ifeq (eng,$(TARGET_BUILD_VARIANT))
diff --git a/AndroidManifest.xml b/AndroidManifest.xml
index b0bb881d9..83504b47d 100644
--- a/AndroidManifest.xml
+++ b/AndroidManifest.xml
@@ -32,7 +32,7 @@
     <application
         android:icon="@mipmap/ic_launcher_mail"
         android:label="@string/app_name"
-        android:theme="@style/UnifiedEmailTheme"
+        android:theme="@style/UnifiedEmailTheme.Appcompat"
         android:supportsRtl="false" >
         <!-- Enable search in all activities -->
         <meta-data android:name="android.app.default_searchable"
@@ -112,7 +112,7 @@
         <activity
                 android:name=".browse.EmlViewerActivity"
                 android:label="@string/app_name"
-                android:theme="@style/UnifiedEmailTheme" >
+                android:theme="@style/UnifiedEmailTheme.Appcompat" >
             <intent-filter>
                 <action android:name="android.intent.action.VIEW" />
                 <category android:name="android.intent.category.DEFAULT" />
diff --git a/proguard.flags b/proguard.flags
index f88d37fce..2f4766fe9 100644
--- a/proguard.flags
+++ b/proguard.flags
@@ -5,6 +5,7 @@
 -dontwarn android.support.v4.**
 -dontwarn android.support.v13.**
 -dontwarn com.android.ex.photo.**
+-dontwarn com.android.emailcommon.**
 
 # keep names that are used by reflection, or from javascript
 
diff --git a/res/drawable-hdpi/ic_load_more_holo_light.png b/res/drawable-hdpi/ic_load_more_holo_light.png
new file mode 100755
index 0000000000000000000000000000000000000000..609208af64b6ed12074e38f27d3d4fe35324de78
GIT binary patch
literal 3094
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

literal 0
HcmV?d00001

diff --git a/res/drawable-hdpi/ic_notification_mail_24dp.png b/res/drawable-hdpi/ic_notification_mail_24dp.png
index d40e2fe1e30e9517e01e6ffff6e28c777449491f..ab157b5b5b177a034c65210440c861bff6b258fa 100644
GIT binary patch
delta 361
zcmV-v0ha!Q2808UB!3`dNK#Dz0D2|>0Dy!50Qvv`0D$NK0Cg|`0P0`>06Lfe02gqa
zx=}m;0007FOGiWi|A&vvzW@LM5lKWrR7l6|l|K)`Kp4hvK*C@!SuIwB#cCCHA4Fp9
z;?GyGT6_YlwTr=O5ep4-D?xZX*EWsnUo;X)pLcohz2|<{OMkBS3W#Jvq@dq}vKV2D
zceTZkD_x)wKGnbt+J6k%xj~k?&|(8Lx-I#D1PU1A8VR{Tp;Lr`WYnOBVpKXjtK6U&
z%H}A89&}%b&Y6tqDbpPY0u1yW<J5zh+8bqgG{dR-f}~bx*wq#`PIZl@U2V|utUwTO
z!vsaMp6A|YhGN1@j!XQi`-?jSWZl}fJy&N~S;zPGM}VZ}s5pO96^j5@3=nYQp>hm`
z8NLBYEg4~o4T@3<`g@R;)Ki<-<1gFM@omV#+m6!S|4*O?8Y+lh0s{U300000NkvXX
Hu0mjfrrDd`

delta 747
zcmZo+Zf2XHQqPp+?e4<xzrFv=eg*~x&H|6fVg?3oArNM~bhqvgNU*HHF&#*&fN=%8
zbUy<F<8x0J#}JR>cc<F>-*%8_uTP&Z{fR%wup}Wnbmgl<hYlP#apu$=ua3R*8zdKQ
z_{<sclWDGF568+Nv1=YvHI`^>-T1fU!_gL#`i;IXrhHF1X?553eewG9<(Ce%IZkQ{
z50d-8Inek1m5Ep7d7qx<m^mr(1c&OXY|o8#D_37o*n0JPbJedU+eH-~Z;1YT!QJ$$
zAG6{tmp6)5C7vFVLPDZjCMarh##(jQD$UYhK4|xdH)*z<z+?k$p`-=Jx6R(juN=@l
zq4=IM(-EV3cNYhrU;HYnY)X9*WsB_#{5-Uox9()F`^5S%Q7}5j_v5LUbvK+MY>tHI
zHCo?NzF;fBoW5qK4=>;R%H9~h%pHQ+b9P34pS(cg#pdo08#{RQ8jqOnNMTO=D7gDe
z@pI0AS<mfLucodobl`9}!DxDY_o>WxGyK?lUlknYJ0zrVt$yc&rc##%*Ea>mVf$w)
z6s;EyyThJ$p&(y-&J(>U&GX)icE8Uu%k7`quxX8Efsd@>E1CYU`xw4FDLtz;JLde2
z_m(Hb{!E(}u;~0Ry_M@+;x6*XvP|l!SsFEI$|-$2o;{ZyA6jj8Zdy~w+ZHYJRTA7h
zr@DHp<K%AEPHOH^3I6%7eg@BH7O4~0AIB(&WGJMHFA2=fo6YmB`rIL(Soxn?@lUs$
z_$aQl@725MTb!MN@h@898d2h0l$uzQnV+W+l9`*zV5o0wsBdVfCt*4Vs6Z8@ASJOR
z)hZdJDwV;=z|c_Fz(Uu^G{n%*%Fx2f#8lV7+{(b<=t{Fxh7@ESx%nxXX_ZhNCb~vu
zAqJLK#->07(ILA|*&b+x49JS${Irtt#G+IN$CUh}R0X%pqSW&IqU>S?=U~&qt&h!s
P>KHs-{an^LB{Ts5-{Uff

diff --git a/res/drawable-hdpi/ic_notification_multiple_mail_24dp.png b/res/drawable-hdpi/ic_notification_multiple_mail_24dp.png
index a733c2addf4283df37ffad946538daece2b940bc..acffddeb2aa2675ea716f631a25962ac6230dda4 100644
GIT binary patch
literal 15823
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
RBjzL5T^&pPPq(cZ`VWliY61WN

literal 400
zcmV;B0dM|^P)<h;3K|Lk000e1NJLTq001xm001xu1^@s6R|5Hm00043Nkl<ZXx{DE
zK}Q8q7{>AcY$D<kty=W~?kXZ$MYM{DRuK^qts-uQQbgN`xJ0XnxT}a(5fRY`XmwX{
zxkR)%ZQjMZiFD7*nW^XO&RLA-H{NsJGn0i7sPo7K5I_I{1Q6iA0aA%G0sbN&D>!s0
z0#N1<ASAAJ0R%`5SOZ$XL<zxPfkU7j`xF`iR)HKCFCcgq*ayym&)BEX3~=ut>%dMV
zNEbK)&Rp<m;34)NxC3_GgNLoOa$xKi!QbqSw}B5A`~a9OaueSg<k3MkY>$loAb8Je
z{L}@Xvfy)No<cVUd9wKkunBB`1L*<BzzOhfYm*jyKIJjmu~P7mErT?Gz6;)W!E<1t
zN`2tkAkQ{$Sip`8-URl5#VR+lD}%hawWhuCr8;%uOW*=n0hR~o#39B9P0Fi;09Clm
u4g6b0009K3IiT`G009ILKmY-14fq0p@a&;qMZ5g~0000<MNUMnLSTYCSf{Z7

diff --git a/res/drawable-mdpi/ic_load_more_holo_light.png b/res/drawable-mdpi/ic_load_more_holo_light.png
new file mode 100755
index 0000000000000000000000000000000000000000..ab9ddc8d1edee1dbe8dec266eb15bb3c0162b189
GIT binary patch
literal 3066
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
IM6N<$f(C-N7ytkO

literal 0
HcmV?d00001

diff --git a/res/drawable-mdpi/ic_notification_mail_24dp.png b/res/drawable-mdpi/ic_notification_mail_24dp.png
index 86e06b9c3fe6fef35e07bfc6bc90adc39abd9f9c..dd1d13407b019157aadae76b5f68bb5a95da05ea 100644
GIT binary patch
delta 234
zcmV<G02Tk>1*QU!83+Ub002sU^>dLvFMk4JOGiWi|A&vvzW@LLvq?ljR5;7s)3I&B
zKoo%CC+H}sNd}?t2uY2UEWiq^;1yT^Brg+0>O>L3p{Ag-_0b?~V=PFQ<Xv~~|GK*n
zKRfYT!Lv`d=EGA3Htw0P3c#yfXS(wOO%MiBMJq0(2Ir;*7Dhtiy^*ga!pO1>I9HhI
z>zUevy{VqQnZv2L0PtokJj!Gqgt1j^dj(LM8wz1)u59eC0?18Fe7Ej9LD&2%u)Qna
k)Sq{LGvC&q_uu~0M>^(NINm3%pa1{>07*qoM6N<$f=wiB3jhEB

delta 679
zcmZ3+^ni7Oq$(Q&1H*%I+aExRCEd~2k%3`jKlh(RRv@3TILO_JVcj{ImlGBB>)DdL
z-CY>|gW!U_%O?ZnISV`@i-EKU7`vU!wgc+f;OXKR;&FWI)csi@fda?szvnsJ>4-YQ
z&XFmaB);K7km~t_4VUjZ&3CwXD`?B+O`Ep}vBWzbJQNkcEi6>@{%_=)@<(6K-@Ds;
zv+?k`b7y|0?Yn7gy&+{~NPR<==MTNv2Lzi93+yE88NM1uaF!gHdFL<Ro2e}48+9LW
z7qH%7<!hK~c~JU+$Of)G%z6y(8*i^zvHr^27vHbOs$a5<_Bu1~mx9FYgG>BaO$#i4
zEq;;jwAH)yU*W7DtB&L`@i%Xj^x<lrzVgw`U1HH|?*;BZdVR?)y<H#ghPv<ETrbAc
z{4<>C>iJh^Zv<Yydi~>8%VXQ_b?=_In@{z|`>$VCR_Xoo+Pk#w?9EQzuQ^Gl-*2>^
z^1wiJnpjQ9`md|*oY1_#ewBQcZcek|j0GV<U&3k^^;I8Oe)ag?GTCo4{!dG|Wxd{r
zIX3Q$?E|X~!vDD+2whN1d$s3`)DkPss0T_P%<8{gy^-ek$7XUA<6?%s<m}|xnqO@k
zCteh(4S4o<{madf9%6|FI+{GYYRuFdZhm;pDyOR96Be;2xB0H-?*#4}37eSzmDiq1
zF|SG5Bs@*K_23H@t^eYa%U<%-F(tonR!qnU(E-MzYKdz^NlIc#s#S7PDv)9@GB7mO
zH8jvIH#841GPE+ZurjvPH88g_FnGlHupC84ZhlH;S|wZuR0B|{F+_vMim2B>4U!-$
tg7ec#$`gxH85~pclTsBta}(23gHjVyDhp4h+5i<Xc)I$ztaD0e0svm8Cq@7O

diff --git a/res/drawable-mdpi/ic_notification_multiple_mail_24dp.png b/res/drawable-mdpi/ic_notification_multiple_mail_24dp.png
index 8071c272d037b30ccd97eb4f9bbc4bdd3d128114..7d20244e4753b7ca06791b462a84fb2043f7d585 100644
GIT binary patch
literal 15676
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
AP5=M^

literal 214
zcmeAS@N?(olHy`uVBq!ia0vp^3LwnE1|*BCs=ffJxt=bLArXh)UOUU#V8Fw6p--_y
z{oqZOgL94i7cPIH*nXk8H#19AnMHr;{l)eR83hlY;NmN2U}kAvv;RF))bwcH4O)f^
zu1~6GpTKi?GMmBNt!7R_X9Z0gTK`Q{J89ljENGK`o<U^7TBegGZS2iQ71ubfYx2!^
z<h;33>9$$LBdH<}-5uHT42}l;M=thq+`qti^gSax5BrbBR~Y{@$rxO6HOu<ntO0Z=
NgQu&X%Q~loCIE!1P8R?G

diff --git a/res/drawable-v21/ic_drawer_junk_24dp.xml b/res/drawable-v21/ic_drawer_junk_24dp.xml
new file mode 100644
index 000000000..55387d1ee
--- /dev/null
+++ b/res/drawable-v21/ic_drawer_junk_24dp.xml
@@ -0,0 +1,37 @@
+<!--
+Copyright (C) 2015 The CyanogenMod Project
+
+   Licensed under the Apache License, Version 2.0 (the "License");
+    you may not use this file except in compliance with the License.
+    You may obtain a copy of the License at
+
+         http://www.apache.org/licenses/LICENSE-2.0
+
+    Unless required by applicable law or agreed to in writing, software
+    distributed under the License is distributed on an "AS IS" BASIS,
+    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+    See the License for the specific language governing permissions and
+    limitations under the License.
+-->
+<vector xmlns:android="http://schemas.android.com/apk/res/android"
+    android:width="24dp"
+    android:height="24dp"
+    android:viewportWidth="24"
+    android:viewportHeight="24">
+
+    <path
+        android:strokeColor="#8a000000"
+        android:strokeWidth="3.0329999924"
+        android:strokeLineJoin="round"
+        android:strokeLineCap="square"
+        android:pathData="M 18.059100532,5.958148849 L 18.12528584,6.0243341568 6.0133740238,18.136245972
+5.947188716,18.070060664 Z m 2.823864097,6.089049038 c 0,2.417900391
+-0.990203638,4.606898359 -2.591146322,6.191421231 -1.600942682,1.58452287
+-3.81262441,2.564570644 -6.255580588,2.564570644 -2.4429561741,0
+-4.6546379016,-0.980047774 -6.2555805849,-2.564570644 -1.6009426828,-1.584522872
+-2.5911463216,-3.77352084 -2.5911463218,-6.191421231 3e-10,-2.4179003844
+0.9902036389,-4.6068983529 2.5911463219,-6.1914212239 1.600942683,-1.5845228708
+3.8126244109,-2.5645706444 6.2555805848,-2.5645706442 2.442956178,-4e-10
+4.654637906,0.980047773 6.255580588,2.564570644 1.600942684,1.584522871
+2.591146322,3.7735208397 2.591146322,6.1914212241 z" />
+</vector>
diff --git a/res/drawable-xhdpi/ic_load_more_holo_light.png b/res/drawable-xhdpi/ic_load_more_holo_light.png
new file mode 100755
index 0000000000000000000000000000000000000000..b6eeb18a9f8f957dbdd59181e2a6a5327ad70f0a
GIT binary patch
literal 3298
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

literal 0
HcmV?d00001

diff --git a/res/drawable-xhdpi/ic_notification_mail_24dp.png b/res/drawable-xhdpi/ic_notification_mail_24dp.png
index 0317760eeeb6db91ea4a2a5c3574734df3ae25bd..1b2b89565a1db33177479973d9649565cae68f8f 100644
GIT binary patch
delta 415
zcmV;Q0bu^K2e|`~B!3`dNK#Dz0D2|>0Dy!50Qvv`0D$NK0Cg|`0P0`>06Lfe02gqa
zx=}m;0007FOGiWi|A&vvzW@LMMoC0LR9M69*D+24K^TVN33L?HXcQBSvDAuNP?G2c
zxB^$;3S2;w4cJiV6{zqCQXmC^xF&Rv*TU=wJM+7{&KP5ue}5ZxXXbl~uNf5TcOMmi
z0Q@hY&VU83vtY=%4LD_quUT?p0z-UGWCHJAfj1LK=9c-7W9QuH-y)!>&|_0Ld_#}Q
zUXBPT6xWOk#gDnN=7@lzM29$6cua?qlw$&S)bzIoPnq$LH1z%&_t^lf=~C9;TTI39
z7g~B>nJ(*{wSR8_fC){#VlO=@_48@+oLbKSU`wB>UQL(&RjQ&&pRI8|69Aaewv@hK
zYMWQ<*<1j?h`Qc$Ohm+yem`R*p34oSOP5M@0Mez~OLYWxOShNm3?!vXrFsF1OaKB9
zfWH7@ukn_P*MnDJU;>w{yv47$kgo6UH`G|VzK6e10T?)3-~;j@WiAJ9XyE_=002ov
JPDHLkV1ln{wm<*?

delta 925
zcmdnVyqSH1N<CAOx4R3&|Mvbf`xzJ*I14-?iy0WWg+Q3`(%rg0Ai=T%$8;cV0LJIu
z^@KApFirP#aSVw#{C2u+hKQp?+x(d~Gp;l&;V^Srqr$jxgAgnC#_JQ@45#)^ojR>-
zn%cIm1ofoE<ZQ*JUInp(YBw@OHwv-(p1Jp~KDn?uEqrfr{}Tt*_hr_f_uAio^X|+c
zzJJv$oD!bO5A>WgB^gwot`JI5;p!{qm2kh-xPjHKv5@KY0VRD8$%#$QXO!nlB;Pli
z@z3d89aDdWV-Lrgi;10*X**9uCp6DFHzE8S+lOi0XN(RD$zEgFoh@+U#~JnqjOQaB
z*#rngo7a1L89h)8k7Rvd9J$@fY}fYoo>0Al#?YYB^|ALa_wVYl?e#J)@T+|nXgEXi
zX!E_$t;sJHrj&*3eeGyCOY+EKyYS}+)@U27f90;<J!58P#WnM+%!||aZ3wwvu`RIt
zX#c8n=B(F3Yu_Xq&hU9OrTo{k7nS=TPnqGv_Hjf1)}-H_^$CkV{krEJG*w|<@zSE(
zU)Jq<wDZ^<?|tiwa{u@(cpdt6-{m9|$)lX&XR|GL-76NKyW;GuZ*{#3*EfiXy|NaU
zy63k$M*3>1zxgrons8}ZjSVj!&0{~3VbUpluf+GNX}*=B+TuW)2YaJJwHxn!-uP%v
zNUnp;L+|*iMW5tc=M+D!H$Q(%p4CkDZrP@3$?L1L@2T(o+x=aUrK)wk?d1~}Ki3_*
zUi%`Osqlfj0wb$?#UWia%|;IvFSVUVh5G_RHnY`uu&J(iUh&j(<+{oHUcIhe!7|&@
zO6IYqxkUOLX`81KbM33xS8O|D_L-}!aBlDc%>^0JH^Uf&g2J9S%Lv`#cBog_8gWIJ
z!$8OKO8FMSME3;u2l4_h_GVoACUafv8Y@%dmZizR&wI4!#fK|A*S1W)tuevajc;%K
ziX-oGbN$8dJ0+?bFqJhl*o#$K|Gs~CMa}yM`G?C7&0MmD>y_(IV1gAbag8W(E=o--
z$;{7F2+7P%WiZq?Hq<vX)RQos!%)w_pbAovl30>zl?+mr%3x$*XsByop=)FsVrXb(
zXkleys%v0wWngf0rCBP_NQ8#m{FKbJN~i`CT_dv)14}DoQy_w9kX@&257Zz7vLQG>
ut)x7$D3!r6B|j-u!7Z~WwLHH_EW232IoPyt>ti#ZLIzJ)KbLh*2~7ZD?}h~c

diff --git a/res/drawable-xhdpi/ic_notification_multiple_mail_24dp.png b/res/drawable-xhdpi/ic_notification_multiple_mail_24dp.png
index 03bf26ceced613584fbd36dcb363780017c84033..0f7dd87e7d978bf1cc094f5ad98f79cb5505ce08 100644
GIT binary patch
literal 18317
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

literal 385
zcmeAS@N?(olHy`uVBq!ia0vp^4j|0I1|(Ny7T#lEVD#{GaSW-r_4ZaQSCfNC+rybJ
zmQ5`YWof-&b}Lzd!%JYxw6Nk`fd-i+GSAo7@K>xfzJK`SeCH^aE3>i}hs6QSL4X5R
z*{>f;?X369vH}V=-D6Js`%G!d1;&Zi4#oTtj_gnVthrtSQZ691;AF{vU!8{4L9gZr
zx?FzueAl17fhq3_MJ7gF3c0(^e%t=U-e((mYdv@px#~Jt4Yqb#C4A8Qlfm%UcP@{>
z)a4JRD*kxMT~@*%-EqmV!cw`SsA1hZWdU>kgYSi(tFcEg6-Eo#SU0Sb6B9^2C~tiI
zG~a^N%Ndi>IsTQzs7E*0xg_q$+o<s4Ji`}7J-KFn=37j)GPgd}H`%E>=`X!vcfiFX
zM$Ju=!KwGi90rN5e}Q7lA8H6ILVQ}m&+)luDKmrvB^zR1^UCkuWRX7c&k>N2r>mdK
II;Vst0QE(U-T(jq

diff --git a/res/drawable-xxhdpi/ic_notification_mail_24dp.png b/res/drawable-xxhdpi/ic_notification_mail_24dp.png
index ba98c67a953761670e4d2d6ba0c4b0c88378644f..aad635766aead62577b23835680d6feee143027c 100644
GIT binary patch
literal 672
zcmeAS@N?(olHy`uVBq!ia0vp^9w5xY3?!3`olAk#-T<Ev*Z)HqJoef(0q7C?k|4ie
z2DbFm@BW`kW0gL4Mv~)VVcv-^pCX?}aCQ7KIH}L{QEHX%!w1VG1ZMnQ{<WO>yxE1B
zd{0B4ZI+Y&eC$Ye2Kx_-YtK$HFfaytx;TbJ9DaK}I{1)*K-)vth}9kGf&wcQmUDF|
zJc|7H|9sOWjmSF}RGQ=7mLHz5@I24^FKP@%GvCBdzj^Z6g~FY86Y}rgJiqulAJ-L2
z8>jP6jajVR-p>`#c+Edo=*1a%EA@b)vcM9-uIVS$nH^WgY)sX9Dl|i}VfCuH!F#XG
zPf}RHnrJ1=X6n(*koPLnZ|{fSnh*M<w$GlC)?DvpowfDqbw6_>!@%u}>#poGcDnJJ
z|4O6gFQcM8j{DowI6l^`@VoIs>r>L<_W90ohcZmqg1@{!VIY@Tf0seg&hN*I)h8ya
z|GmSZ=r{lB#&64x=NE07uKD*XTSw<Pmu-#L7H^*TRzYZPe-7u%i$70Xn;<r~_YFhl
z#hEAcE@)W^-{kdLw0WZJLJKSTo049$9hf*(E+no0=jXA&y#B>p2l;;&)EoD0D{Z}T
qYiU~L*;zZajGxU?oqY0NS@A+o_p^G!%f0|(iow&>&t;ucLK6U@ADi0%

literal 786
zcmeAS@N?(olHy`uVBq!ia0vp^9w5xY1|&n@ZgvM!EX7WqAsj$Z!;#Vf<Z~8yL>4nJ
za0`Jj<E6WGe}IBAC9V-A!TD(=<%vb942~)JNvR5MnMJAP`9;~q3eLf%g<Bt+0o93u
z)HxTWCYEI8=P86_=B6?j>KhyC8yf0Kn9gBfV9NG%aSW-L^LF;dz{d^(F4gPb{Xg+w
z4x<v243p#>X9bqYjEWsRdMv_>MQr<c6q@$&dxmOP`&OsC^%D8KDrQQ{7ODL&r$$P%
zPbxU~Ir$yav_5X39SV&Y#2=qGzu#r|3*=Wcv8-hI`iD8d{kAqkeUVu31aXG;jB4fw
z<)1tz9q*qP`{+hj%Hj3i&YQe!*2k8dInbWj)haMcz=`$2$)bBs6<mrTiY>>AF0H5z
z;7H_tz;~eT%+J=F%sXCZnHm35`|EniM9Y-9?|F=gIRDC@RcSr1GUU#m?b~*X|Kd(&
z`T3l$Zc3%tPpUcp^9<{I6?xvTdBVvvSSRMXhl$6P9Id>Rvi9Sh)gLt+m+ZA(ddZ|T
zb}{Q$9Zg@$tesH;H_H-?6R)p{2;OWMQ!nIbTkm-<CgO>2`Jb&%_B~tDbYhz^e_Nhi
zLCh?#*z_VtTTAO`qm?&VCgvW$CR}!N)~u}(?}avTy{cTc_Hk)a&n=5%pIx?!3%YEp
z-?zT^u6<15y$})ME6Ki>Wma}d{@}3r`+d61d(ZcbIqRZA-8aN`Tw};vF7du2^4{cq
ztRLJCANnqHS0ev}^7ED;&MwKR%g(IqocTAHw|JJ<a<#NRmZN(X`CeB1>b;HoqSS%f
zos*vV2b{5OXzOfE-@e{4(o+4*+yyhjx6Jovd>Sll>~Ucd3*!Oz@1L*tnCe7b5Q?~B
xoAD7_9O4mkeDyj&apU{jk2tZ$K3L};cH4rYjqBfD;|Hco22WQ%mvv4FO#raWK&}7)

diff --git a/res/drawable-xxhdpi/ic_notification_multiple_mail_24dp.png b/res/drawable-xxhdpi/ic_notification_multiple_mail_24dp.png
index 67dcf5c203ed8b3dc70a52603837d34d130663e9..eb119968cd8e375b36495cc763234d3d9bb3bfa2 100644
GIT binary patch
literal 15229
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

literal 1517
zcmbVLZ%i9y7=OoDVZ&~?p%heh9-?Hiy}SPJNrAT4gElKG1tS_vcC=SGY46(WK?^#D
z%NCtD_i0W>+=iK%%!NfooRe*d;&e_H=N54U3}Z?bGP7y?gC7vzgBJGz_rXivd*0`L
zp5OET+3l^WP_D^e0{~FEDk&eNTji6ffd8pC;$}$lBxjveBLt;5BeK925E@v-6=oV)
zAIk*VqUYHX09FRM+B&Juvzhb@VGSeeXcFNFL<3M#mWVL^W>!KP*hY@GqPIRdiy~aW
ziaurV;GT$sZQ?51MYg8Bs@C7$?6(BavQnfZK|%vzR$`DuIK;=ugcV(|OTxSSjG@Sa
ziqvdH7lW$vcoBynvWP*0tNpkUM~sAq(CJMk)8mL1CvXhcVuV&rm`I(L#Bn6~q0pNc
z2$DXEPWpnJ6>XBF2#I0wcw7_LX#}wmBP<q+Y(uM6Lk)GTjhC2&nvWHxEKqFBFLDuy
z6L>_n$TSEok`;xKE~XHUcsxsn`B<`0uw+<*iC}~V$HHMbuLbRx<YWI0V_EH3ZCixJ
zd~8f;5&f_q!NL?6*6!|(WJMSaxkcn)Q<xAX_*=p(FS#fy3MHBV7a(z)87Byn9ye)m
zqnRMgHY4TKQ#9^0n`uHvr)(^THQ8~y9XHr%vlAknxLK>G9khYQX%l78+o%-Q#m6Lu
z_p>R#9Q2#S+U|-a9U{v}f><jEq0|I;n*>RSH3<>KQDZ<njGyCWUT)7~wiGLJt!#i6
zg)p*EUy@tKKVj72S_iGyo3utbZwrB2C>`xE;07ZcD*{bo1OKOH7z_rJhvSZ6Nj<>{
zl&?#p51FOqVR^VQB3zBi!POlAq&?)KY_*B8n^$e_&&qSoMX%pG^dge8v%D8cPyc-1
zOY5C|iC1@cZybB8c9UjjfBk(Wos&iN_fKVQMzVUkT?YceU*{(;c`6^fH99cTQ|!5H
z{q|WDZfhqzE1-D*(gDZ>AR7P#fbs=F`JUfgW++L1-=t9mCUO<zURaSyKvI4bY^&}{
ziDinEch0?%^~C;XR*lc@J9Tb)S99s=L#~Nqqu%`O{@d3?J}0`#@P}&3G2@=OyuW&Q
z@Dbm-0^5*l;%WU4d7X~FjY_JuqCPP``+oEIL_vkZ+iUb~=qntF?!NN;Ox5eY!jS_R
zGh@c0FG5`{*t=;zo_|=O$iA@lfwGT6L;bxM!O6AE*lZu`cynd(^d&HLgn9Y+FYg7F
zQP=g;iZ6ABPSww<hT!+J-PisaQWV>V71>?+drWP6dr#>?>(e{c!yo))*{i&0IdO9O
zFbJJ_RPywwI!>#f>o-(_o{e9jRPOvheny0OaPG)K_gVLAdG0y)w&sIpPQ0zTy6&B|
zQS8IkroXRTP<H3GRNO$uRJ;CcuekZ-$n@yEzT-GO8FCHkKmI!Sd&bO$L()J|_jka*
wMU^Vw?cBrNrWA7rt?c?#=KiZkfYWSGy9ZDO*>lxLL8+|ja#m6O_N_bq0S2}0ga7~l

diff --git a/res/drawable-xxxhdpi/ic_notification_mail_24dp.png b/res/drawable-xxxhdpi/ic_notification_mail_24dp.png
new file mode 100644
index 0000000000000000000000000000000000000000..50c1d691271cee82e31fbffc76c279c36d1f72e3
GIT binary patch
literal 777
zcmeAS@N?(olHy`uVBq!ia0vp^2_VeD0wg^q?%xcg6p}rHd>I(3)EF2VS{N990fib~
zFff!FFfhDIU|_JC!N4G1FlSew4N!t9$=lt9;eUJonf*Y{G*1`DkcwMxZ|(P=>?m>I
zW4>e0qC_J>S(C!cw_Y5X&(OVTqC|Ly{UR5~S2q}sJFx~Qn^+hdTstCP&otRrBvz*6
z0-s-kl(44N1UHTA-|y|NeqX!(WO1_fm!Erf=KtPz_UXS%x3$$77&#mmm;@RaSQLOv
zg-VBco^F;WJA2gscs7^sNjc17;Lv*e3wz1J=n&0M>T(YZOx>98=;lk<djv4fE7ZQg
z`+v&rDu;Ph0khNpyJ>y!WUn|>av<Ky`^*al={fuo9~ztZHXQxfz!=T*l3}iX%<@A8
zZja4oByQat73|RG=yhhPTv<2kvrMgLhHMNm&n%TS`}UvXeI@u=f_Xu|=Bc^X7f#<=
za)QfxR%H((!}7?aL!W<S-+AnQ2E+|tS#<33hxnPx(#-lT8T<pcFFtC2!2Qbq#lA8d
zPU-MI)&0)wCF7g$L#;m|<gS+SndEglnHHS1;oc%5Kf&e7+>6`7?Te>K*!*Bf;A5yb
z?|W_P`yDQ8yUNOYKQwv2ayPJMc(cK2qVG}bvcU3gu{I53*ZA%23DFD(%HM6C=5gij
z;<*Vkg9H6P>M=Bg-+4Iu(bpgQul%mh{Jw5;$j(K-r4NZdklLELMULTH;BA-JoC$JU
zbGO`MNDI8}{#sN(KWlr&Ugna(#}c_*4KG#{_L!+Ugj~tHxQwl%@0Q)I5XQj3+itV1
z7DQj!b}@}1z%^Gs*R5f1;BMF1k_%)_`!1$&eb@+&Fr>HxGC#2XIJ&Xncz@vo%{R*F
z@;g^B>ljHJEI8vV`+%vGkJaj*8LQoEhJcqgw<O+u4QFOsVJP<C$9l<hYrX}~`Rm`W
zvzgpe*rzPn|8KVb9#h-8`_A5oqye_+>o4{y7jJ?4Z`0X<>6O9L)z4*}Q$iB}8BIV_

literal 0
HcmV?d00001

diff --git a/res/drawable-xxxhdpi/ic_notification_multiple_mail_24dp.png b/res/drawable-xxxhdpi/ic_notification_multiple_mail_24dp.png
new file mode 100644
index 0000000000000000000000000000000000000000..20e1077811a69e0f99ceaeee150809b629914172
GIT binary patch
literal 17152
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

literal 0
HcmV?d00001

diff --git a/res/drawable/ic_email.xml b/res/drawable/ic_email.xml
new file mode 100644
index 000000000..fea62c2b1
--- /dev/null
+++ b/res/drawable/ic_email.xml
@@ -0,0 +1,10 @@
+<?xml version="1.0" encoding="utf-8"?>
+<vector xmlns:android="http://schemas.android.com/apk/res/android"
+    android:height="24dp"
+    android:width="24dp"
+    android:viewportWidth="24"
+    android:viewportHeight="24">
+    <path
+        android:fillColor="@android:color/black"
+        android:pathData="M20,8L12,13L4,8V6L12,11L20,6M20,4H4C2.89,4 2,4.89 2,6V18A2,2 0 0,0 4,20H20A2,2 0 0,0 22,18V6C22,4.89 21.1,4 20,4Z" />
+</vector>
diff --git a/res/drawable/save.xml b/res/drawable/save.xml
new file mode 100644
index 000000000..5a7f17080
--- /dev/null
+++ b/res/drawable/save.xml
@@ -0,0 +1,33 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!--
+     Copyright (c) 2016, The Linux Foundation. All rights reserved.
+
+     Redistribution and use in source and binary forms, with or without
+     modification, are permitted provided that the following conditions are
+     met:
+         * Redistributions of source code must retain the above copyright
+           notice, this list of conditions and the following disclaimer.
+         * Redistributions in binary form must reproduce the above
+           copyright notice, this list of conditions and the following
+           disclaimer in the documentation and/or other materials provided
+           with the distribution.
+         * Neither the name of The Linux Foundation nor the names of its
+           contributors may be used to endorse or promote products derived
+           from this software without specific prior written permission.
+
+     THIS SOFTWARE IS PROVIDED "AS IS" AND ANY EXPRESS OR IMPLIED
+     WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
+     MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT
+     ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS
+     BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
+     CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
+     SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
+     BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
+     WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE
+     OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN
+     IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+-->
+<vector android:height="20dp" android:viewportHeight="60.0"
+    android:viewportWidth="60.0" android:width="20dp" xmlns:android="http://schemas.android.com/apk/res/android">
+    <path android:fillColor="#FF7F7F7F" android:pathData="M44.8,0H6C2.7,0 0,2.7 0,6v48c0,3.3 2.7,6 6,6h48c3.3,0 6,-2.7 6,-6V15.2c0,-1.6 -0.6,-3.1 -1.8,-4.2L49,1.8C47.9,0.6 46.4,0 44.8,0zM42,22H12V6h30V22zM37,9h-4v10h4V9z"/>
+</vector>
diff --git a/res/layout/conversation_message_attachment_bar.xml b/res/layout/conversation_message_attachment_bar.xml
index 4fe12c0bd..58a1b7d67 100644
--- a/res/layout/conversation_message_attachment_bar.xml
+++ b/res/layout/conversation_message_attachment_bar.xml
@@ -68,15 +68,29 @@
             <include layout="@layout/conversation_message_attachment_bar_progress_bar"/>
         </RelativeLayout>
 
-        <ImageView
-            android:id="@+id/overflow"
-            style="@style/OverflowButtonStyle"
-            android:layout_width="48dip"
-            android:layout_height="match_parent" />
+        <TextView
+            android:id="@+id/attachment_bar_divider"
+            android:layout_width="1dip"
+            android:layout_height="40dip"
+            android:background="@color/attachment_bar_divider_line"
+            android:layout_gravity="center_vertical"
+            android:layout_marginLeft="18dp"/>
+
+        <RelativeLayout
+            android:layout_width="46dp"
+            android:layout_height="match_parent">
+            <ImageView
+                android:id="@+id/save_attachment"
+                android:src="@drawable/save"
+                android:layout_width="24dp"
+                android:layout_height="24dp"
+                android:layout_centerInParent="true"
+                android:background="?android:attr/selectableItemBackgroundBorderless"/>
+        </RelativeLayout>
 
         <ImageButton
             android:id="@+id/cancel_attachment"
-            android:layout_width="48dip"
+            android:layout_width="46dip"
             android:layout_height="match_parent"
             android:background="?android:attr/selectableItemBackground"
             android:clickable="true"
diff --git a/res/layout/conversation_message_footer.xml b/res/layout/conversation_message_footer.xml
old mode 100644
new mode 100755
index 7d3ac7c64..cfa306d50
--- a/res/layout/conversation_message_footer.xml
+++ b/res/layout/conversation_message_footer.xml
@@ -37,6 +37,14 @@
         android:visibility="gone"
         style="@style/AttachmentPaddingStyle" />
 
+    <LinearLayout
+        android:id="@+id/attachment_placeholder_load_more"
+        android:layout_width="match_parent"
+        android:layout_height="wrap_content"
+        android:visibility="gone"
+        android:orientation="vertical"
+        style="@style/AttachmentMarginStyle" />
+
     <com.android.mail.ui.AttachmentTileGrid
         android:id="@+id/attachment_tile_grid"
         android:layout_width="match_parent"
diff --git a/res/layout/dialog_notification_lights.xml b/res/layout/dialog_notification_lights.xml
new file mode 100644
index 000000000..343cc41b4
--- /dev/null
+++ b/res/layout/dialog_notification_lights.xml
@@ -0,0 +1,116 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!--
+     Copyright (C) 2010 Daniel Nilsson
+     Copyright (C) 2015 The CyanogenMod Project
+
+     Licensed under the Apache License, Version 2.0 (the "License");
+     you may not use this file except in compliance with the License.
+     You may obtain a copy of the License at
+
+     http://www.apache.org/licenses/LICENSE-2.0
+
+     Unless required by applicable law or agreed to in writing, software
+     distributed under the License is distributed on an "AS IS" BASIS,
+     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+     See the License for the specific language governing permissions and
+     limitations under the License.
+-->
+<ScrollView xmlns:android="http://schemas.android.com/apk/res/android"
+      android:layout_width="match_parent"
+      android:layout_height="match_parent"
+      android:paddingStart="8dp"
+      android:paddingEnd="8dp"
+      android:scrollbars="vertical"
+      android:scrollbarStyle="outsideOverlay"
+      android:scrollbarDefaultDelayBeforeFade="1500"
+      android:scrollbarAlwaysDrawVerticalTrack="true"
+      android:fillViewport="true">
+
+    <RelativeLayout
+        android:layout_width="match_parent"
+        android:layout_height="match_parent" >
+
+        <com.android.mail.preferences.notifications.ColorPickerView
+            android:id="@+id/color_picker_view"
+            android:layout_width="match_parent"
+            android:layout_height="wrap_content"
+            android:layout_centerHorizontal="true"
+            android:layout_marginStart="10dp"
+            android:layout_marginEnd="10dp" />
+
+        <LinearLayout
+            android:id="@+id/color_panel_view"
+            android:layout_width="match_parent"
+            android:layout_height="40dp"
+            android:layout_alignStart="@id/color_picker_view"
+            android:layout_alignEnd="@id/color_picker_view"
+            android:layout_below="@id/color_picker_view"
+            android:layout_marginBottom="4dp"
+            android:layout_marginTop="4dp"
+            android:orientation="horizontal" >
+
+            <EditText
+                android:id="@+id/hex_color_input"
+                android:layout_width="0px"
+                android:maxLength="6"
+                android:digits="0123456789ABCDEFabcdef"
+                android:inputType="textNoSuggestions"
+                android:layout_height="match_parent"
+                android:layout_weight="0.5" />
+
+            <com.android.mail.preferences.notifications.ColorPanelView
+                android:id="@+id/color_panel"
+                android:layout_width="0px"
+                android:layout_height="match_parent"
+                android:layout_weight="0.5" />
+        </LinearLayout>
+
+        <LinearLayout
+            android:id="@+id/speed_title_view"
+            android:layout_width="match_parent"
+            android:layout_height="wrap_content"
+            android:layout_below="@id/color_panel_view"
+            android:layout_marginStart="10dp"
+            android:layout_marginEnd="10dp"
+            android:layout_marginTop="4dp"
+            android:orientation="vertical" >
+
+            <View
+                android:id="@+id/lights_dialog_divider"
+                android:layout_width="match_parent"
+                android:layout_height="2dp"
+                android:background="@android:drawable/divider_horizontal_dark" />
+
+            <TextView
+                android:layout_width="match_parent"
+                android:layout_height="wrap_content"
+                android:layout_marginTop="4dp"
+                android:text="@string/pulse_speed_title"
+                android:textAppearance="?android:attr/textAppearanceSmall" />
+
+            <LinearLayout
+                android:layout_width="match_parent"
+                android:layout_height="wrap_content"
+                android:orientation="horizontal"
+                android:paddingBottom="4dip" >
+
+                <Spinner
+                    android:id="@+id/on_spinner"
+                    android:layout_width="match_parent"
+                    android:layout_height="wrap_content"
+                    android:layout_weight="1" />
+
+                <View
+                    android:layout_width="8dip"
+                    android:layout_height="match_parent" />
+
+                <Spinner
+                    android:id="@+id/off_spinner"
+                    android:layout_width="match_parent"
+                    android:layout_height="wrap_content"
+                    android:layout_weight="1" />
+            </LinearLayout>
+        </LinearLayout>
+
+    </RelativeLayout>
+</ScrollView>
diff --git a/res/layout/dialog_notification_lights_title.xml b/res/layout/dialog_notification_lights_title.xml
new file mode 100644
index 000000000..b03518a79
--- /dev/null
+++ b/res/layout/dialog_notification_lights_title.xml
@@ -0,0 +1,49 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!--
+     Copyright (C) 2010 Daniel Nilsson
+     Copyright (C) 2015 The CyanogenMod Project
+
+     Licensed under the Apache License, Version 2.0 (the "License");
+     you may not use this file except in compliance with the License.
+     You may obtain a copy of the License at
+
+     http://www.apache.org/licenses/LICENSE-2.0
+
+     Unless required by applicable law or agreed to in writing, software
+     distributed under the License is distributed on an "AS IS" BASIS,
+     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+     See the License for the specific language governing permissions and
+     limitations under the License.
+-->
+
+<FrameLayout xmlns:android="http://schemas.android.com/apk/res/android"
+    android:layout_width="match_parent"
+    android:layout_height="wrap_content">
+
+    <LinearLayout
+        android:layout_width="match_parent"
+        android:layout_height="wrap_content"
+        android:orientation="horizontal"
+        android:gravity="center_vertical"
+        android:layout_marginTop="10dip"
+        android:layout_marginBottom="10dip"
+        android:layout_marginStart="16dip"
+        android:layout_marginEnd="16dip">
+
+        <com.android.internal.widget.DialogTitle android:id="@android:id/title"
+            style="@android:style/TextAppearance.DialogWindowTitle"
+            android:singleLine="true"
+            android:ellipsize="end"
+            android:layout_width="0dp"
+            android:layout_height="wrap_content"
+            android:layout_weight="1"
+            android:textStyle="bold"
+            android:textAlignment="viewStart" />
+
+        <Switch
+            android:id="@android:id/toggle"
+            android:layout_width="wrap_content"
+            android:layout_height="wrap_content" />
+
+    </LinearLayout>
+</FrameLayout>
diff --git a/res/layout/notification_pulse_time_item.xml b/res/layout/notification_pulse_time_item.xml
new file mode 100644
index 000000000..49076736a
--- /dev/null
+++ b/res/layout/notification_pulse_time_item.xml
@@ -0,0 +1,25 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!--
+     Copyright (C) 2015 The CyanogenMod Project
+
+     Licensed under the Apache License, Version 2.0 (the "License");
+     you may not use this file except in compliance with the License.
+     You may obtain a copy of the License at
+
+          http://www.apache.org/licenses/LICENSE-2.0
+
+     Unless required by applicable law or agreed to in writing, software
+     distributed under the License is distributed on an "AS IS" BASIS,
+     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+     See the License for the specific language governing permissions and
+     limitations under the License.
+-->
+<TextView xmlns:android="http://schemas.android.com/apk/res/android"
+    android:id="@+id/textViewName"
+    android:layout_width="match_parent"
+    android:layout_height="match_parent"
+    android:paddingStart="4dp"
+    android:paddingEnd="4dp"
+    android:paddingTop="8dp"
+    android:paddingBottom="8dp"
+    android:textAppearance="@android:style/TextAppearance.Material.Subhead" />
\ No newline at end of file
diff --git a/res/layout/preference_activity.xml b/res/layout/preference_activity.xml
new file mode 100644
index 000000000..ef37257d0
--- /dev/null
+++ b/res/layout/preference_activity.xml
@@ -0,0 +1,38 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!--
+     Copyright (C) 2015 The CyanogenMod Project
+
+     Licensed under the Apache License, Version 2.0 (the "License");
+     you may not use this file except in compliance with the License.
+     You may obtain a copy of the License at
+
+          http://www.apache.org/licenses/LICENSE-2.0
+
+     Unless required by applicable law or agreed to in writing, software
+     distributed under the License is distributed on an "AS IS" BASIS,
+     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+     See the License for the specific language governing permissions and
+     limitations under the License.
+-->
+<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
+    android:orientation="vertical"
+    android:layout_width="match_parent"
+    android:layout_height="match_parent">
+
+    <android.widget.Toolbar
+        android:id="@+id/toolbar"
+        android:layout_width="match_parent"
+        android:layout_height="wrap_content"
+        android:elevation="4dp"
+        android:theme="@style/HeaderTheme"
+        android:background="@color/primary_color"
+        android:navigationIcon="?attr/homeAsUpIndicator"
+        android:minHeight="?android:attr/actionBarSize" />
+
+    <FrameLayout
+        android:id="@android:id/content"
+        android:layout_width="match_parent"
+        android:layout_height="0dp"
+        android:layout_weight="1" />
+
+</LinearLayout>
diff --git a/res/layout/preference_folder_notification_light.xml b/res/layout/preference_folder_notification_light.xml
new file mode 100644
index 000000000..952a8074e
--- /dev/null
+++ b/res/layout/preference_folder_notification_light.xml
@@ -0,0 +1,114 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!-- Copyright (C) 2015 The CyanogenMod Project
+
+     Licensed under the Apache License, Version 2.0 (the "License");
+     you may not use this file except in compliance with the License.
+     You may obtain a copy of the License at
+
+          http://www.apache.org/licenses/LICENSE-2.0
+
+     Unless required by applicable law or agreed to in writing, software
+     distributed under the License is distributed on an "AS IS" BASIS,
+     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+     See the License for the specific language governing permissions and
+     limitations under the License.
+-->
+
+<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
+    android:id="@+id/app_light_pref"
+    android:layout_width="match_parent"
+    android:layout_height="wrap_content"
+    android:minHeight="?android:attr/listPreferredItemHeightSmall"
+    android:gravity="center_vertical"
+    android:paddingStart="?android:attr/listPreferredItemPaddingStart"
+    android:paddingEnd="?android:attr/listPreferredItemPaddingEnd"
+    android:background="?android:attr/selectableItemBackground">
+
+    <ImageView
+        android:id="@android:id/icon"
+        android:layout_width="wrap_content"
+        android:layout_height="wrap_content"
+        android:layout_marginEnd="12dip"
+        android:padding="2dp"
+        android:maxWidth="36dip"
+        android:maxHeight="36dip"
+        android:adjustViewBounds="true"
+        android:layout_gravity="center" />
+
+    <RelativeLayout
+        android:layout_width="wrap_content"
+        android:layout_height="wrap_content"
+        android:layout_weight="1"
+        android:paddingTop="16dip"
+        android:paddingBottom="16dip">
+
+        <TextView
+            android:id="@android:id/title"
+            android:layout_width="wrap_content"
+            android:layout_height="wrap_content"
+            android:singleLine="true"
+            android:textAppearance="@android:style/TextAppearance.Material.Subhead"
+            android:textColor="?android:attr/textColorPrimary"
+            android:ellipsize="marquee"
+            android:fadingEdge="horizontal" />
+
+        <TextView
+            android:id="@android:id/summary"
+            android:layout_width="wrap_content"
+            android:layout_height="wrap_content"
+            android:layout_below="@android:id/title"
+            android:layout_alignStart="@android:id/title"
+            android:visibility="gone"
+            android:textAlignment="viewStart"
+            android:textAppearance="@android:style/TextAppearance.Material.Body1"
+            android:textColor="?android:attr/textColorSecondary"
+            android:maxLines="1" />
+    </RelativeLayout>
+
+    <FrameLayout
+        android:layout_width="wrap_content"
+        android:layout_height="wrap_content">
+
+        <LinearLayout
+            android:id="@+id/lights_status"
+            android:layout_width="wrap_content"
+            android:layout_height="wrap_content"
+            android:orientation="horizontal">
+
+            <LinearLayout
+                android:layout_width="wrap_content"
+                android:layout_height="wrap_content"
+                android:orientation="vertical" >
+
+                <TextView
+                    android:id="@+id/textViewTimeOnValue"
+                    android:layout_width="wrap_content"
+                    android:layout_height="wrap_content"
+                    android:layout_gravity="end"
+                    android:textAppearance="@android:style/TextAppearance.Material.Notification.Line2" />
+
+                <TextView
+                    android:id="@+id/textViewTimeOffValue"
+                    android:layout_width="wrap_content"
+                    android:layout_height="wrap_content"
+                    android:layout_gravity="end"
+                    android:textAppearance="@android:style/TextAppearance.Material.Notification.Line2" />
+            </LinearLayout>
+
+            <ImageView
+                android:id="@+id/light_color"
+                android:layout_width="32dip"
+                android:layout_height="wrap_content"
+                android:layout_gravity="center"/>
+        </LinearLayout>
+
+        <TextView
+            android:id="@+id/lights_default"
+            android:layout_width="wrap_content"
+            android:layout_height="wrap_content"
+            android:layout_gravity="center_vertical|end"
+            android:textAppearance="@android:style/TextAppearance.Material.Notification.Line2"
+            android:text="@string/pref_lights_default" />
+    </FrameLayout>
+
+</LinearLayout>
diff --git a/res/menu/message_header_overflow_menu.xml b/res/menu/message_header_overflow_menu.xml
old mode 100644
new mode 100755
index 788ac2a25..62702c660
--- a/res/menu/message_header_overflow_menu.xml
+++ b/res/menu/message_header_overflow_menu.xml
@@ -23,6 +23,8 @@
           android:title="@string/reply_all" />
     <item android:id="@+id/forward"
           android:title="@string/forward" />
+    <item android:id="@+id/load_more"
+          android:title="@string/load_more"/>
     <item android:id="@+id/add_star"
           android:title="@string/add_star" />
     <item android:id="@+id/remove_star"
diff --git a/res/menu/message_header_overflow_menu_land_or_tablet.xml b/res/menu/message_header_overflow_menu_land_or_tablet.xml
old mode 100644
new mode 100755
index 8f7f1ba53..12e0fc6c3
--- a/res/menu/message_header_overflow_menu_land_or_tablet.xml
+++ b/res/menu/message_header_overflow_menu_land_or_tablet.xml
@@ -21,6 +21,8 @@
           android:title="@string/reply" />
     <item android:id="@+id/reply_all"
           android:title="@string/reply_all" />
+    <item android:id="@+id/load_more"
+          android:title="@string/load_more"/>
     <item android:id="@+id/add_star"
           android:title="@string/add_star" />
     <item android:id="@+id/remove_star"
diff --git a/res/values-v21/themes.xml b/res/values-v21/themes.xml
deleted file mode 100644
index a25b42836..000000000
--- a/res/values-v21/themes.xml
+++ /dev/null
@@ -1,12 +0,0 @@
-<?xml version="1.0" encoding="utf-8"?>
-<resources>
-    <style name="UnifiedEmailTheme" parent="@android:style/Theme.Material.Light.DarkActionBar">
-        <item name="android:actionModeBackground">@color/action_mode_background</item>
-        <item name="android:actionOverflowButtonStyle">@style/ActionBarOverflowButtonStyle</item>
-        <item name="android:listViewWhiteStyle">@android:style/Widget.Material.Light.ListView</item>
-        <item name="android:colorPrimary">@color/primary_color</item>
-        <item name="android:colorPrimaryDark">@color/primary_dark_color</item>
-        <item name="android:colorAccent">@color/accent_blue</item>
-        <item name="android:colorEdgeEffect">@color/edge_effect_color</item>
-    </style>
-</resources>
\ No newline at end of file
diff --git a/res/values-zh-rCN/strings.xml b/res/values-zh-rCN/strings.xml
index 8937b6f55..cb5333be2 100644
--- a/res/values-zh-rCN/strings.xml
+++ b/res/values-zh-rCN/strings.xml
@@ -481,4 +481,5 @@
     <string name="security_hold_required_text" msgid="6619955920101834286">"<xliff:g id="EMAIL_ADDRESS">%1$s</xliff:g>需要进行安全更新"</string>
     <string name="update_security_text" msgid="3527335757205741077">"立即更新"</string>
     <string name="forms_are_disabled" msgid="2876312737118986789">"Gmail已停用表单"</string>
+    <string name="save_to">保存文件至:</string>
 </resources>
diff --git a/res/values/cm_arrays.xml b/res/values/cm_arrays.xml
new file mode 100644
index 000000000..6a2b33ee5
--- /dev/null
+++ b/res/values/cm_arrays.xml
@@ -0,0 +1,66 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!--
+     Copyright (C) 2015 The CyanogenMod Project.
+
+     Licensed under the Apache License, Version 2.0 (the "License");
+     you may not use this file except in compliance with the License.
+     You may obtain a copy of the License at
+
+          http://www.apache.org/licenses/LICENSE-2.0
+
+     Unless required by applicable law or agreed to in writing, software
+     distributed under the License is distributed on an "AS IS" BASIS,
+     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+     See the License for the specific language governing permissions and
+     limitations under the License.
+-->
+<resources>
+    <!-- Suggested contacts mode preference -->
+    <string-array name="suggested_contacts_mode_entries" translatable="false">
+        <item>@string/prefDialogTitle_suggestedContactsMode_none</item>
+        <item>@string/prefDialogTitle_suggestedContactsMode_recents</item>
+        <item>@string/prefDialogTitle_suggestedContactsMode_all</item>
+    </string-array>
+    <string-array name="suggested_contacts_mode_summaries" translatable="false">
+        <item>@string/prefDialogTitle_suggestedContactsMode_summary_none</item>
+        <item>@string/prefDialogTitle_suggestedContactsMode_summary_recents</item>
+        <item>@string/prefDialogTitle_suggestedContactsMode_summary_all</item>
+    </string-array>
+    <string-array name="suggested_contacts_mode_values" translatable="false">
+        <item>none</item>
+        <item>recents</item>
+        <item>all</item>
+    </string-array>
+
+    <!-- Values for the notification lights pulse spinners -->
+    <string-array name="notification_pulse_length_entries" translatable="false">
+        <item>@string/pulse_length_always_on</item>
+        <item>@string/pulse_length_very_short</item>
+        <item>@string/pulse_length_short</item>
+        <item>@string/pulse_length_normal</item>
+        <item>@string/pulse_length_long</item>
+        <item>@string/pulse_length_very_long</item>
+    </string-array>
+    <string-array name="notification_pulse_length_values" translatable="false">
+        <item>1</item>
+        <item>250</item>
+        <item>500</item>
+        <item>1000</item>
+        <item>2500</item>
+        <item>5000</item>
+    </string-array>
+    <string-array name="notification_pulse_speed_entries" translatable="false">
+        <item>@string/pulse_speed_very_fast</item>
+        <item>@string/pulse_speed_fast</item>
+        <item>@string/pulse_speed_normal</item>
+        <item>@string/pulse_speed_slow</item>
+        <item>@string/pulse_speed_very_slow</item>
+    </string-array>
+    <string-array name="notification_pulse_speed_values" translatable="false">
+        <item>250</item>
+        <item>500</item>
+        <item>1000</item>
+        <item>2500</item>
+        <item>5000</item>
+    </string-array>
+</resources>
diff --git a/res/values/cm_dimens.xml b/res/values/cm_dimens.xml
new file mode 100644
index 000000000..3e46f1358
--- /dev/null
+++ b/res/values/cm_dimens.xml
@@ -0,0 +1,20 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!--
+     Copyright (C) 2015 The CyanogenMod Project.
+
+     Licensed under the Apache License, Version 2.0 (the "License");
+     you may not use this file except in compliance with the License.
+     You may obtain a copy of the License at
+
+          http://www.apache.org/licenses/LICENSE-2.0
+
+     Unless required by applicable law or agreed to in writing, software
+     distributed under the License is distributed on an "AS IS" BASIS,
+     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+     See the License for the specific language governing permissions and
+     limitations under the License.
+-->
+<resources>
+    <dimen name="notification_lights_button_width">16dip</dimen>
+    <dimen name="notification_lights_button_height">32dip</dimen>
+</resources>
diff --git a/res/values/cm_strings.xml b/res/values/cm_strings.xml
new file mode 100644
index 000000000..7a7fd112f
--- /dev/null
+++ b/res/values/cm_strings.xml
@@ -0,0 +1,55 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!--
+     Copyright (C) 2015 The CyanogenMod Project.
+
+     Licensed under the Apache License, Version 2.0 (the "License");
+     you may not use this file except in compliance with the License.
+     You may obtain a copy of the License at
+
+          http://www.apache.org/licenses/LICENSE-2.0
+
+     Unless required by applicable law or agreed to in writing, software
+     distributed under the License is distributed on an "AS IS" BASIS,
+     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+     See the License for the specific language governing permissions and
+     limitations under the License.
+-->
+<resources>
+    <!-- Suggested contacts preferences -->
+    <string name="prefDefault_suggestedContactsMode" translatable="false">none</string>
+    <string name="prefDialogTitle_suggestedContactsMode">Mode</string>
+    <string name="prefDialogTitle_suggestedContactsMode_none">Disabled</string>
+    <string name="prefDialogTitle_suggestedContactsMode_summary_none">Suggested contacts feature is disabled</string>
+    <string name="prefDialogTitle_suggestedContactsMode_recents">Recents</string>
+    <string name="prefDialogTitle_suggestedContactsMode_summary_recents">Only recently suggested contacts will be selectable</string>
+    <string name="prefDialogTitle_suggestedContactsMode_all">All</string>
+    <string name="prefDialogTitle_suggestedContactsMode_summary_all">All suggested contacts will be selectable</string>
+    <string name="preference_header_suggested_contacts">Suggested contacts</string>
+    <string name="preference_suggested_contacts_mode">Suggested contacts mode</string>
+    <string name="preference_suggested_contacts_clear_all">Clear suggested contacts</string>
+    <string name="suggested_contacts_cleared">Suggested contacts cleared.</string>
+    <string name="clear_suggested_contacts_dialog_title">Clear suggested contacts?</string>
+    <string name="clear_suggested_contacts_dialog_message">All the suggested contacts previously stored will be removed.</string>
+
+    <!-- Notification lights dialogs -->
+    <string name="edit_light_settings">Folder light settings</string>
+    <string name="pulse_speed_title">Pulse length and speed</string>
+    <string name="default_time">Normal</string>
+    <string name="custom_time">Custom</string>
+    <string name="dialog_delete_title">Delete</string>
+    <string name="dialog_delete_message">Remove selected item?</string>
+    <string name="pref_lights_default">Default</string>
+
+    <!-- Values for the notification lights pulse spinners -->
+    <string name="pulse_length_always_on">Always on</string>
+    <string name="pulse_length_very_short">Very short</string>
+    <string name="pulse_length_short">Short</string>
+    <string name="pulse_length_normal">Normal</string>
+    <string name="pulse_length_long">Long</string>
+    <string name="pulse_length_very_long">Very long</string>
+    <string name="pulse_speed_very_fast">Very fast</string>
+    <string name="pulse_speed_fast">Fast</string>
+    <string name="pulse_speed_normal">Normal</string>
+    <string name="pulse_speed_slow">Slow</string>
+    <string name="pulse_speed_very_slow">Very slow</string>
+</resources>
diff --git a/res/values/colors.xml b/res/values/colors.xml
index 6455cf89c..b5a92d9a1 100644
--- a/res/values/colors.xml
+++ b/res/values/colors.xml
@@ -194,4 +194,6 @@
 
     <color name="text_color_undo_notification">#feb500</color>
     <color name="text_color_undo_notification_description">@android:color/white</color>
+
+    <color name="attachment_bar_divider_line">#1A000000</color>
 </resources>
diff --git a/res/values/strings.xml b/res/values/strings.xml
index 608acdbfb..b8eeb03cd 100644
--- a/res/values/strings.xml
+++ b/res/values/strings.xml
@@ -1167,4 +1167,6 @@
 
     <!-- activity name of the photoviewer -->
     <string name="photo_view_activity" translatable="false">com.android.mail.photo.MailPhotoViewActivity</string>
+    <string name="download_first">Please Download first</string>
+    <string name="save_to">Save the file to:</string>
 </resources>
diff --git a/res/values/styles.xml b/res/values/styles.xml
index 5e533750a..ad1e9d92a 100644
--- a/res/values/styles.xml
+++ b/res/values/styles.xml
@@ -375,7 +375,7 @@
         <item name="android:scaleType">center</item>
     </style>
 
-    <style name="MessageHeaderOverflowButtonStyle" parent="@style/OverflowButtonStyle">
+    <style name="MessageHeaderOverflowButtonStyle" parent="@style/SaveAttachmentButtonStyle">
         <item name="android:layout_width">@dimen/message_header_overflow_button_width</item>
         <item name="android:layout_height">@dimen/message_header_action_button_height</item>
         <item name="android:layout_marginTop">@dimen/message_header_action_button_margin_top</item>
@@ -454,8 +454,8 @@
         <item name="android:layout_marginTop">16dip</item>
     </style>
 
-    <style name="OverflowButtonStyle" parent="@style/Widget.AppCompat.ActionButton.Overflow">
-        <item name="android:src">@drawable/ic_overflow_24dp</item>
+    <style name="SaveAttachmentButtonStyle" parent="@style/Widget.AppCompat.ActionButton.Overflow">
+        <item name="android:src">@drawable/save</item>
     </style>
 
     <style name="ActionBarOverflowButtonStyle" parent="@android:style/Widget.Holo.ActionButton.Overflow">
diff --git a/res/values/themes.xml b/res/values/themes.xml
index 2cee63872..824c639a9 100644
--- a/res/values/themes.xml
+++ b/res/values/themes.xml
@@ -1,14 +1,5 @@
 <?xml version="1.0" encoding="utf-8"?>
 <resources xmlns:tools="http://schemas.android.com/tools">
-    <style name="UnifiedEmailTheme" parent="@android:style/Theme.Holo.Light.DarkActionBar">
-        <item name="android:actionBarStyle">@style/ActionBarStyle</item>
-        <item name="android:actionBarWidgetTheme">@style/ActionBarWidgetTheme</item>
-        <item name="android:actionModeBackground">@color/action_mode_background</item>
-        <item name="android:actionOverflowButtonStyle">@style/ActionBarOverflowButtonStyle</item>
-        <item name="android:homeAsUpIndicator">@drawable/ic_arrow_back_wht_24dp_with_rtl</item>
-        <item name="android:listViewWhiteStyle">@android:style/Widget.Holo.Light.ListView</item>
-    </style>
-
     <style name="ActionBarWidgetTheme" parent="@android:style/Theme.Holo">
         <item name="android:dropDownListViewStyle">@style/ActionBarDividerlessListViewStyle</item>
         <item name="android:popupMenuStyle">@android:style/Widget.Holo.Light.ListPopupWindow</item>
@@ -40,6 +31,12 @@
         <item name="android:statusBarColor" tools:ignore="NewApi">@color/mail_activity_status_bar_color</item>
     </style>
 
+    <style name="HeaderTheme" parent="ThemeOverlay.AppCompat.Dark.ActionBar">
+        <item name="android:colorAccent">@color/primary_color</item>
+        <item name="android:popupTheme">@style/ThemeOverlay.AppCompat.Light</item>
+        <item name="android:colorBackground">@color/primary_color</item>
+    </style>
+
     <style name="MailActivityTheme" parent="@style/UnifiedEmailTheme.Appcompat.Toolbar" />
 
     <style name="ComposeTheme" parent="@style/UnifiedEmailTheme.Appcompat">
diff --git a/res/xml/general_preferences.xml b/res/xml/general_preferences.xml
index 49e6b0d5e..1d484439b 100644
--- a/res/xml/general_preferences.xml
+++ b/res/xml/general_preferences.xml
@@ -67,6 +67,24 @@
             android:title="@string/preference_advance_to_title"
             gm:entrySummaries="@array/prefSummaries_autoAdvance" />
 
+    <PreferenceCategory
+            android:title="@string/preference_header_suggested_contacts"
+            android:key="suggested-contacts">
+
+        <com.android.mail.ui.settings.FancySummaryListPreference
+                android:defaultValue="@string/prefDefault_suggestedContactsMode"
+                android:dialogTitle="@string/prefDialogTitle_suggestedContactsMode"
+                android:entries="@array/suggested_contacts_mode_entries"
+                android:entryValues="@array/suggested_contacts_mode_values"
+                android:key="suggested-contacts-mode"
+                android:title="@string/preference_suggested_contacts_mode"
+                gm:entrySummaries="@array/suggested_contacts_mode_summaries" />
+
+        <Preference
+                android:key="suggested-contacts-clear-all"
+                android:title="@string/preference_suggested_contacts_clear_all" />
+    </PreferenceCategory>
+
     <PreferenceCategory
             android:title="@string/preference_header_action_confirmations"
             android:key="removal-actions-group">
diff --git a/src/com/android/emailcommon/internet/MimeUtility.java b/src/com/android/emailcommon/internet/MimeUtility.java
index 7e1c1b97f..93765ff62 100644
--- a/src/com/android/emailcommon/internet/MimeUtility.java
+++ b/src/com/android/emailcommon/internet/MimeUtility.java
@@ -219,23 +219,25 @@ public class MimeUtility {
      * Reads the Part's body and returns a String based on any charset conversion that needed
      * to be done.
      * @param part The part containing a body
+     * @param outInputStreams A list of input streams the opened body stream should be added to.
+     *                        If null is passed the stream should be closed.
      * @return a String containing the converted text in the body, or null if there was no text
      * or an error during conversion.
      */
-    public static String getTextFromPart(Part part) {
+    public static String getTextFromPart(Part part, ArrayList<InputStream> outInputStreams) {
+        InputStream in = null;
+        ByteArrayOutputStream out = null;
         try {
             if (part != null && part.getBody() != null) {
-                InputStream in = part.getBody().getInputStream();
+                in = part.getBody().getInputStream();
                 String mimeType = part.getMimeType();
                 if (mimeType != null && MimeUtility.mimeTypeMatches(mimeType, "text/*")) {
                     /*
                      * Now we read the part into a buffer for further processing. Because
                      * the stream is now wrapped we'll remove any transfer encoding at this point.
                      */
-                    ByteArrayOutputStream out = new ByteArrayOutputStream();
+                    out = new ByteArrayOutputStream();
                     IOUtils.copy(in, out);
-                    in.close();
-                    in = null;      // we want all of our memory back, and close might not release
 
                     /*
                      * We've got a text part, so let's see if it needs to be processed further.
@@ -256,9 +258,7 @@ public class MimeUtility {
                     /*
                      * Convert and return as new String
                      */
-                    String result = out.toString(charset);
-                    out.close();
-                    return result;
+                    return out.toString(charset);
                 }
             }
 
@@ -276,6 +276,13 @@ public class MimeUtility {
              * null and let the upper layers handle the missing content.
              */
             Log.e(LOG_TAG, "Unable to getTextFromPart " + e.toString());
+        } finally {
+            IOUtils.closeQuietly(out);
+            if (outInputStreams != null && in != null) {
+                outInputStreams.add(in);
+            } else {
+                IOUtils.closeQuietly(in);
+            }
         }
         return null;
     }
diff --git a/src/com/android/emailcommon/mail/FetchProfile.java b/src/com/android/emailcommon/mail/FetchProfile.java
old mode 100644
new mode 100755
index bfa48d30f..b3dda40f6
--- a/src/com/android/emailcommon/mail/FetchProfile.java
+++ b/src/com/android/emailcommon/mail/FetchProfile.java
@@ -82,4 +82,25 @@ public class FetchProfile extends ArrayList<Fetchable> {
         }
         return null;
     }
+
+    /**
+     * To save the allow sync size for this fetch action. And the default value is Entire mail
+     * as the {@link Integer#MAX_VALUE} which is defined in Utility;
+     */
+    private int mAllowSyncSize = Integer.MAX_VALUE;
+
+    public void setAllowSyncSize(int size) {
+        mAllowSyncSize = size;
+    }
+
+    public int getAllowSyncSize() {
+        return mAllowSyncSize;
+    }
+
+    @Override
+    public void clear() {
+        super.clear();
+        // Reset the mAllowSyncSize as default value.
+        mAllowSyncSize = Integer.MAX_VALUE;
+    }
 }
diff --git a/src/com/android/emailcommon/utility/ConversionUtilities.java b/src/com/android/emailcommon/utility/ConversionUtilities.java
index 7bfe7d967..0c8cbfdfa 100644
--- a/src/com/android/emailcommon/utility/ConversionUtilities.java
+++ b/src/com/android/emailcommon/utility/ConversionUtilities.java
@@ -23,6 +23,7 @@ import com.android.emailcommon.mail.Part;
 
 import android.text.TextUtils;
 
+import java.io.InputStream;
 import java.util.ArrayList;
 
 public class ConversionUtilities {
@@ -62,13 +63,21 @@ public class ConversionUtilities {
      * Parse body text (plain and/or HTML) from MimeMessage to {@link BodyFieldData}.
      */
     public static BodyFieldData parseBodyFields(ArrayList<Part> viewables)
-    throws MessagingException {
+            throws MessagingException {
+        return  parseBodyFields(viewables, null);
+    }
+
+    /**
+     * Parse body text (plain and/or HTML) from MimeMessage to {@link BodyFieldData}.
+     */
+    public static BodyFieldData parseBodyFields(ArrayList<Part> viewables,
+            ArrayList<InputStream> outInputStreams) throws MessagingException {
         final BodyFieldData data = new BodyFieldData();
         StringBuffer sbHtml = null;
         StringBuffer sbText = null;
 
         for (Part viewable : viewables) {
-            String text = MimeUtility.getTextFromPart(viewable);
+            String text = MimeUtility.getTextFromPart(viewable, outInputStreams);
             // Deploy text as marked by the various tags
             boolean isHtml = "text/html".equalsIgnoreCase(viewable.getMimeType());
 
diff --git a/src/com/android/mail/browse/AttachmentActionHandler.java b/src/com/android/mail/browse/AttachmentActionHandler.java
old mode 100644
new mode 100755
index ee569a650..838f76c5e
--- a/src/com/android/mail/browse/AttachmentActionHandler.java
+++ b/src/com/android/mail/browse/AttachmentActionHandler.java
@@ -19,6 +19,7 @@ package com.android.mail.browse;
 
 
 import android.app.DialogFragment;
+import android.app.DownloadManager;
 import android.app.Fragment;
 import android.app.FragmentManager;
 import android.app.FragmentTransaction;
@@ -26,10 +27,13 @@ import android.content.ActivityNotFoundException;
 import android.content.ContentValues;
 import android.content.Context;
 import android.content.Intent;
+import android.media.MediaScannerConnection;
 import android.net.Uri;
+import android.os.Environment;
 import android.os.Handler;
 import android.os.Parcelable;
 
+import android.widget.Toast;
 import com.android.mail.providers.Attachment;
 import com.android.mail.providers.Message;
 import com.android.mail.providers.UIProvider;
@@ -37,10 +41,19 @@ import com.android.mail.providers.UIProvider.AttachmentColumns;
 import com.android.mail.providers.UIProvider.AttachmentContentValueKeys;
 import com.android.mail.providers.UIProvider.AttachmentDestination;
 import com.android.mail.providers.UIProvider.AttachmentState;
+import com.android.mail.R;
 import com.android.mail.utils.LogTag;
 import com.android.mail.utils.LogUtils;
+import com.android.mail.utils.MimeType;
 import com.android.mail.utils.Utils;
 
+import org.apache.commons.io.IOUtils;
+
+import java.io.File;
+import java.io.FileOutputStream;
+import java.io.InputStream;
+import java.io.IOException;
+import java.io.OutputStream;
 import java.util.ArrayList;
 
 public class AttachmentActionHandler {
@@ -101,7 +114,7 @@ public class AttachmentActionHandler {
                         mAttachment.destination == destination)) {
             mView.viewAttachment();
         } else {
-            showDownloadingDialog();
+
             startDownloadingAttachment(destination);
         }
     }
@@ -120,9 +133,32 @@ public class AttachmentActionHandler {
                 mAttachment, destination, rendition, additionalPriority, delayDownload);
     }
 
+    public void saveAttachment(int destination){
+
+        if (mAttachment.state == AttachmentState.SAVED
+                && destination == AttachmentDestination.EXTERNAL){
+            performAttachmentSave(mAttachment);
+        }else{
+            Toast.makeText(mContext, mContext.getResources().getString(R.string.download_first),
+                    Toast.LENGTH_SHORT).show();
+        }
+    }
+
     private void startDownloadingAttachment(
             Attachment attachment, int destination, int rendition, int additionalPriority,
             boolean delayDownload) {
+        //do not auto install apk from stream . must save first so that can be install
+        if (attachment.state == AttachmentState.SAVED
+                && destination == AttachmentDestination.EXTERNAL
+                && !MimeType.isInstallable(attachment.getContentType())) {
+            File savedFile = performAttachmentSave(attachment);
+            if (savedFile != null && mView != null) {
+                // The attachment is saved successfully from cache.
+                mView.viewAttachment();
+                return;
+            }
+        }
+
         final ContentValues params = new ContentValues(5);
         params.put(AttachmentColumns.STATE, AttachmentState.DOWNLOADING);
         params.put(AttachmentColumns.DESTINATION, destination);
@@ -284,4 +320,62 @@ public class AttachmentActionHandler {
             // no-op
         }
     }
+
+    private File createUniqueFile(File directory, String filename) throws IOException {
+        File file = new File(directory, filename);
+        if (file.createNewFile()) {
+            return file;
+        }
+        // Get the extension of the file, if any.
+        int index = filename.lastIndexOf('.');
+        String format;
+        if (index != -1) {
+            String name = filename.substring(0, index);
+            String extension = filename.substring(index);
+            format = name + "-%d" + extension;
+        } else {
+            format = filename + "-%d";
+        }
+
+        for (int i = 2; i < Integer.MAX_VALUE; i++) {
+            file = new File(directory, String.format(format, i));
+            if (file.createNewFile()) {
+                return file;
+            }
+        }
+        return null;
+    }
+
+    private File performAttachmentSave(final Attachment attachment) {
+        try {
+            File downloads = Environment.getExternalStoragePublicDirectory(
+                    Environment.DIRECTORY_DOWNLOADS);
+            downloads.mkdirs();
+            File file = createUniqueFile(downloads, attachment.getName());
+            Uri contentUri = attachment.contentUri;
+            InputStream in = mContext.getContentResolver().openInputStream(contentUri);
+            OutputStream out = new FileOutputStream(file);
+            int size = IOUtils.copy(in, out);
+            out.flush();
+            out.close();
+            in.close();
+            String absolutePath = file.getAbsolutePath();
+            MediaScannerConnection.scanFile(mContext, new String[] {absolutePath},
+                    null, null);
+            DownloadManager dm =
+                    (DownloadManager) mContext.getSystemService(Context.DOWNLOAD_SERVICE);
+            dm.addCompletedDownload(attachment.getName(), attachment.getName(),
+                    false /* do not use media scanner */,
+                    attachment.getContentType(), absolutePath, size,
+                    true /* show notification */);
+            Toast.makeText(mContext,
+                    mContext.getResources().getString(R.string.save_to) + absolutePath,
+                    Toast.LENGTH_SHORT).show();
+            return file;
+        } catch (IOException ioe) {
+            // Ignore. Callers will handle it from the return code.
+        }
+
+        return null;
+    }
 }
diff --git a/src/com/android/mail/browse/ConversationItemView.java b/src/com/android/mail/browse/ConversationItemView.java
index e2dcf472f..3af8ec141 100644
--- a/src/com/android/mail/browse/ConversationItemView.java
+++ b/src/com/android/mail/browse/ConversationItemView.java
@@ -557,15 +557,17 @@ public class ConversationItemView extends View
         Utils.traceEndSection();
 
         final int ignoreFolderType;
-        if (mDisplayedFolder.isInbox()) {
+        if (mDisplayedFolder != null && mDisplayedFolder.isInbox()) {
             ignoreFolderType = FolderType.INBOX;
         } else {
             ignoreFolderType = -1;
         }
 
         Utils.traceBeginSection("load folders");
-        mHeader.folderDisplayer.loadConversationFolders(mHeader.conversation,
-                mDisplayedFolder.folderUri, ignoreFolderType);
+        if(mDisplayedFolder != null) {
+            mHeader.folderDisplayer.loadConversationFolders(mHeader.conversation,
+                    mDisplayedFolder.folderUri, ignoreFolderType);
+        }
         Utils.traceEndSection();
 
         if (mHeader.showDateText) {
diff --git a/src/com/android/mail/browse/ConversationMessage.java b/src/com/android/mail/browse/ConversationMessage.java
old mode 100644
new mode 100755
index 36ab441b2..781dd4594
--- a/src/com/android/mail/browse/ConversationMessage.java
+++ b/src/com/android/mail/browse/ConversationMessage.java
@@ -116,6 +116,13 @@ public final class ConversationMessage extends Message {
         }
     }
 
+    public void loadMore() {
+        final ConversationUpdater listController = mController.getListController();
+        if (listController != null) {
+            listController.loadMore(this);
+        }
+    }
+
     /**
      * Public object that knows how to construct Messages given Cursors.
      */
diff --git a/src/com/android/mail/browse/MessageAttachmentBar.java b/src/com/android/mail/browse/MessageAttachmentBar.java
old mode 100644
new mode 100755
index 0274d6651..659628231
--- a/src/com/android/mail/browse/MessageAttachmentBar.java
+++ b/src/com/android/mail/browse/MessageAttachmentBar.java
@@ -20,8 +20,11 @@ package com.android.mail.browse;
 import android.app.AlertDialog;
 import android.app.FragmentManager;
 import android.content.ActivityNotFoundException;
+import android.content.AsyncQueryHandler;
+import android.content.ContentResolver;
 import android.content.Context;
 import android.content.Intent;
+import android.net.Uri;
 import android.support.v4.text.BidiFormatter;
 import android.text.TextUtils;
 import android.util.AttributeSet;
@@ -61,6 +64,7 @@ public class MessageAttachmentBar extends FrameLayout implements OnClickListener
         OnMenuItemClickListener, AttachmentViewInterface {
 
     private Attachment mAttachment;
+    private ImageView mIcon;
     private TextView mTitle;
     private TextView mSubTitle;
     private String mAttachmentSizeText;
@@ -68,11 +72,13 @@ public class MessageAttachmentBar extends FrameLayout implements OnClickListener
     private ProgressBar mProgress;
     private ImageButton mCancelButton;
     private PopupMenu mPopup;
-    private ImageView mOverflowButton;
+    private ImageView mSaveAttachmentButton;
+    private TextView mAttachmentBarDivider;
 
     private final AttachmentActionHandler mActionHandler;
     private boolean mSaveClicked;
     private Account mAccount;
+    private final static String FORMAT_RAW = "RAW";
 
     private final Runnable mUpdateRunnable = new Runnable() {
             @Override
@@ -141,8 +147,11 @@ public class MessageAttachmentBar extends FrameLayout implements OnClickListener
                 attachment.getContentType(), attachment.flags);
 
         final String attachmentName = attachment.getName();
-        if ((attachment.flags & Attachment.FLAG_DUMMY_ATTACHMENT) != 0) {
-            mTitle.setText(R.string.load_attachment);
+        if (attachment.isLoadMore()) {
+            mIcon.setImageResource(R.drawable.ic_load_more_holo_light);
+            mTitle.setText(R.string.load_more);
+            mSaveAttachmentButton.setVisibility(View.GONE);
+            mAttachmentBarDivider.setVisibility(View.GONE);
         } else if (prevAttachment == null
                 || !TextUtils.equals(attachmentName, prevAttachment.getName())) {
             mTitle.setText(attachmentName);
@@ -164,14 +173,16 @@ public class MessageAttachmentBar extends FrameLayout implements OnClickListener
     protected void onFinishInflate() {
         super.onFinishInflate();
 
+        mIcon = (ImageView) findViewById(R.id.attachment_icon);
         mTitle = (TextView) findViewById(R.id.attachment_title);
         mSubTitle = (TextView) findViewById(R.id.attachment_subtitle);
         mProgress = (ProgressBar) findViewById(R.id.attachment_progress);
-        mOverflowButton = (ImageView) findViewById(R.id.overflow);
+        mSaveAttachmentButton = (ImageView) findViewById(R.id.save_attachment);
         mCancelButton = (ImageButton) findViewById(R.id.cancel_attachment);
+        mAttachmentBarDivider = (TextView) findViewById(R.id.attachment_bar_divider);
 
         setOnClickListener(this);
-        mOverflowButton.setOnClickListener(this);
+        mSaveAttachmentButton.setOnClickListener(this);
         mCancelButton.setOnClickListener(this);
     }
 
@@ -187,55 +198,12 @@ public class MessageAttachmentBar extends FrameLayout implements OnClickListener
     }
 
     private boolean onClick(final int res, final View v) {
-        if (res == R.id.preview_attachment) {
-            previewAttachment();
-        } else if (res == R.id.save_attachment) {
-            if (mAttachment.canSave()) {
-                mActionHandler.startDownloadingAttachment(AttachmentDestination.EXTERNAL);
-                mSaveClicked = true;
-
-                Analytics.getInstance().sendEvent(
-                        "save_attachment", Utils.normalizeMimeType(mAttachment.getContentType()),
-                        "attachment_bar", mAttachment.size);
-            }
-        } else if (res == R.id.download_again) {
-            if (mAttachment.isPresentLocally()) {
-                mActionHandler.showDownloadingDialog();
-                mActionHandler.startRedownloadingAttachment(mAttachment);
-
-                Analytics.getInstance().sendEvent("redownload_attachment",
-                        Utils.normalizeMimeType(mAttachment.getContentType()), "attachment_bar",
-                        mAttachment.size);
-            }
-        } else if (res == R.id.cancel_attachment) {
-            mActionHandler.cancelAttachment();
-            mSaveClicked = false;
+        if (res == R.id.save_attachment) {
 
+            mActionHandler.saveAttachment(AttachmentDestination.EXTERNAL);
             Analytics.getInstance().sendEvent(
-                    "cancel_attachment", Utils.normalizeMimeType(mAttachment.getContentType()),
-                    "attachment_bar", mAttachment.size);
-        } else if (res == R.id.attachment_extra_option1) {
-            mActionHandler.handleOption1();
-        } else if (res == R.id.overflow) {
-            // If no overflow items are visible, just bail out.
-            // We shouldn't be able to get here anyhow since the overflow
-            // button should be hidden.
-            if (shouldShowOverflow()) {
-                if (mPopup == null) {
-                    mPopup = new PopupMenu(getContext(), v);
-                    mPopup.getMenuInflater().inflate(R.menu.message_footer_overflow_menu,
-                            mPopup.getMenu());
-                    mPopup.setOnMenuItemClickListener(this);
-                }
-
-                final Menu menu = mPopup.getMenu();
-                menu.findItem(R.id.preview_attachment).setVisible(shouldShowPreview());
-                menu.findItem(R.id.save_attachment).setVisible(shouldShowSave());
-                menu.findItem(R.id.download_again).setVisible(shouldShowDownloadAgain());
-                menu.findItem(R.id.attachment_extra_option1).setVisible(shouldShowExtraOption1());
-
-                mPopup.show();
-            }
+                        "save_attachment", Utils.normalizeMimeType(mAttachment.getContentType()),
+                        "attachment_bar", mAttachment.size);
         } else {
             // Handles clicking the attachment
             // in any area that is not the overflow
@@ -244,24 +212,16 @@ public class MessageAttachmentBar extends FrameLayout implements OnClickListener
             final String mime = Utils.normalizeMimeType(mAttachment.getContentType());
             final String action;
 
-            if ((mAttachment.flags & Attachment.FLAG_DUMMY_ATTACHMENT) != 0) {
-                // This is a dummy. We need to download it, but not attempt to open or preview.
-                mActionHandler.showDownloadingDialog();
-                mActionHandler.setViewOnFinish(false);
-                mActionHandler.startDownloadingAttachment(AttachmentDestination.CACHE);
+            if (mAttachment.isLoadMore()) {
+                // Changed to use the Message's load more uri to get the entire mail.
+                if (mAttachment.messageLoadMoreUri != null) {
+                    LoadMoreAction loadmore = new LoadMoreAction(getContext().getContentResolver(),
+                            mAttachment.messageLoadMoreUri);
+                    loadmore.sendCommand();
+                }
 
                 action = null;
             }
-            // If we can install, install.
-            else if (MimeType.isInstallable(mAttachment.getContentType())) {
-                // Save to external because the package manager only handles
-                // file:// uris not content:// uris. We do the same
-                // workaround in
-                // UiProvider#getUiAttachmentsCursorForUIAttachments()
-                mActionHandler.showAttachment(AttachmentDestination.EXTERNAL);
-
-                action = "attachment_bar_install";
-            }
             // If we can view or play with an on-device app,
             // view or play.
             else if (MimeType.isViewable(
@@ -281,8 +241,8 @@ public class MessageAttachmentBar extends FrameLayout implements OnClickListener
                 AlertDialog.Builder builder = new AlertDialog.Builder(getContext());
                 int dialogMessage = R.string.no_application_found;
                 builder.setTitle(R.string.more_info_attachment)
-                       .setMessage(dialogMessage)
-                       .show();
+                        .setMessage(dialogMessage)
+                        .show();
 
                 action = "attachment_bar_no_viewer";
             }
@@ -302,7 +262,7 @@ public class MessageAttachmentBar extends FrameLayout implements OnClickListener
     }
 
     private boolean shouldShowSave() {
-        return mAttachment.canSave() && !mSaveClicked;
+        return mAttachment.canSave() && !mSaveClicked && !mAttachment.isLoadMore();
     }
 
     private boolean shouldShowDownloadAgain() {
@@ -311,15 +271,19 @@ public class MessageAttachmentBar extends FrameLayout implements OnClickListener
         return mAttachment.supportsDownloadAgain() && mAttachment.isDownloadFinishedOrFailed();
     }
 
+    private boolean shouldCanInstall() {
+        return mAttachment.isInstallable();
+    }
+
     private boolean shouldShowExtraOption1() {
         return !mHideExtraOptionOne &&
                 mActionHandler.shouldShowExtraOption1(mAccount.getType(),
                         mAttachment.getContentType());
     }
 
-    private boolean shouldShowOverflow() {
-        return (shouldShowPreview() || shouldShowSave() || shouldShowDownloadAgain() ||
-                shouldShowExtraOption1()) && !shouldShowCancel();
+    private boolean shouldShowSaveAttachment() {
+        return (shouldShowPreview() || shouldShowSave() || shouldCanInstall())
+                && !shouldShowCancel();
     }
 
     private boolean shouldShowCancel() {
@@ -338,8 +302,16 @@ public class MessageAttachmentBar extends FrameLayout implements OnClickListener
                 | Intent.FLAG_ACTIVITY_CLEAR_WHEN_TASK_RESET);
 
         final String contentType = mAttachment.getContentType();
+
+        Uri contentUri = mAttachment.contentUri;
+        String contentUriString = mAttachment.contentUri.toString();
+        if (contentUriString.endsWith(FORMAT_RAW)) {
+            contentUri = Uri.parse(contentUriString.replace(FORMAT_RAW,
+                    mAttachment.getName()));
+        }
+
         Utils.setIntentDataAndTypeAndNormalize(
-                intent, mAttachment.contentUri, contentType);
+                intent, contentUri, contentType);
 
         // For EML files, we want to open our dedicated
         // viewer rather than let any activity open it.
@@ -391,7 +363,8 @@ public class MessageAttachmentBar extends FrameLayout implements OnClickListener
         // To avoid visibility state transition bugs, every button's visibility should be touched
         // once by this routine.
         setButtonVisible(mCancelButton, shouldShowCancel());
-        setButtonVisible(mOverflowButton, shouldShowOverflow());
+        setButtonVisible(mSaveAttachmentButton, shouldShowSaveAttachment());
+        setButtonVisible(mAttachmentBarDivider, shouldShowSaveAttachment());
     }
 
     @Override
@@ -432,4 +405,17 @@ public class MessageAttachmentBar extends FrameLayout implements OnClickListener
         }
         mSubTitle.setText(sb.toString());
     }
+
+    private class LoadMoreAction extends AsyncQueryHandler {
+        private final Uri mLoadMoreUri;
+
+        public LoadMoreAction(ContentResolver resolver, Uri loadMoreUri) {
+            super(resolver);
+            mLoadMoreUri = loadMoreUri;
+        }
+
+        public void sendCommand() {
+            startQuery(0, null, mLoadMoreUri, null, null, null, null);
+        }
+    }
 }
diff --git a/src/com/android/mail/browse/MessageFooterView.java b/src/com/android/mail/browse/MessageFooterView.java
old mode 100644
new mode 100755
index d5b65d776..3cd25fa9a
--- a/src/com/android/mail/browse/MessageFooterView.java
+++ b/src/com/android/mail/browse/MessageFooterView.java
@@ -40,6 +40,7 @@ import com.android.mail.browse.ConversationViewAdapter.MessageHeaderItem;
 import com.android.mail.providers.Account;
 import com.android.mail.providers.Attachment;
 import com.android.mail.providers.Message;
+import com.android.mail.providers.UIProvider.MessageFlagLoaded;
 import com.android.mail.ui.AccountFeedbackActivity;
 import com.android.mail.ui.AttachmentTile;
 import com.android.mail.ui.AttachmentTileGrid;
@@ -59,6 +60,7 @@ public class MessageFooterView extends LinearLayout implements DetachListener,
     private FragmentManager mFragmentManager;
     private AttachmentCursor mAttachmentsCursor;
     private View mViewEntireMessagePrompt;
+    private LinearLayout mAttachmentLoadMore;
     private AttachmentTileGrid mAttachmentGrid;
     private LinearLayout mAttachmentBarList;
 
@@ -100,6 +102,7 @@ public class MessageFooterView extends LinearLayout implements DetachListener,
         super.onFinishInflate();
 
         mViewEntireMessagePrompt = findViewById(R.id.view_entire_message_prompt);
+        mAttachmentLoadMore = (LinearLayout) findViewById(R.id.attachment_placeholder_load_more);
         mAttachmentGrid = (AttachmentTileGrid) findViewById(R.id.attachment_tile_grid);
         mAttachmentBarList = (LinearLayout) findViewById(R.id.attachment_bar_list);
 
@@ -129,9 +132,11 @@ public class MessageFooterView extends LinearLayout implements DetachListener,
             // attachmentsListUri changes so that we don't
             // repeat the work of layout and measure when
             // we're only updating the attachments.
+            mAttachmentLoadMore.removeAllViewsInLayout();
             mAttachmentGrid.removeAllViewsInLayout();
             mAttachmentBarList.removeAllViewsInLayout();
             mViewEntireMessagePrompt.setVisibility(View.GONE);
+            mAttachmentLoadMore.setVisibility(View.GONE);
             mAttachmentGrid.setVisibility(View.GONE);
             mAttachmentBarList.setVisibility(View.GONE);
         }
@@ -146,14 +151,18 @@ public class MessageFooterView extends LinearLayout implements DetachListener,
         }
 
         // Do an initial render if initLoader didn't already do one
-        if (mAttachmentGrid.getChildCount() == 0 &&
-                mAttachmentBarList.getChildCount() == 0) {
+        if (mAttachmentLoadMore.getChildCount() == 0
+                && mAttachmentGrid.getChildCount() == 0
+                && mAttachmentBarList.getChildCount() == 0) {
             renderAttachments(false);
         }
 
         final ConversationMessage message = mMessageHeaderItem.getMessage();
         mViewEntireMessagePrompt.setVisibility(
                 message.clipped && !TextUtils.isEmpty(message.permalink) ? VISIBLE : GONE);
+        boolean showLoadMore =
+                message.messageFlagLoaded == MessageFlagLoaded.FLAG_LOADED_PARTIAL_COMPLETE;
+        mAttachmentLoadMore.setVisibility(showLoadMore ? View.VISIBLE : View.GONE);
         setVisibility(mMessageHeaderItem.isExpanded() ? VISIBLE : GONE);
     }
 
@@ -179,6 +188,7 @@ public class MessageFooterView extends LinearLayout implements DetachListener,
         }
 
         // filter the attachments into tiled and non-tiled
+        Attachment loadMore = null;
         final int maxSize = attachments.size();
         final List<Attachment> tiledAttachments = new ArrayList<Attachment>(maxSize);
         final List<Attachment> barAttachments = new ArrayList<Attachment>(maxSize);
@@ -187,20 +197,26 @@ public class MessageFooterView extends LinearLayout implements DetachListener,
             // attachments in secure views are displayed in the footer so the user may interact with
             // them; for normal views there is no need to show inline attachments in the footer
             // since users can interact with them in place
-            if (!attachment.isInlineAttachment() || mCallbacks.isSecure()) {
-                if (AttachmentTile.isTiledAttachment(attachment)) {
-                    tiledAttachments.add(attachment);
-                } else {
-                    barAttachments.add(attachment);
-                }
+            if (attachment.isInlineAttachment()) {
+                LogUtils.d(LOG_TAG, "attachment(" + attachment.contentUri
+                        + ") is inline attachment. Ignore and do not show it!");
+                continue;
+            }
+
+            if (attachment.isLoadMore()) {
+                loadMore = attachment;
+                loadMore.messageLoadMoreUri = mMessageHeaderItem.getMessage().loadMoreUri;
+            } else if (AttachmentTile.isTiledAttachment(attachment)) {
+                tiledAttachments.add(attachment);
+            } else {
+                barAttachments.add(attachment);
             }
         }
 
         mMessageHeaderItem.getMessage().attachmentsJson = Attachment.toJSONArray(attachments);
 
-        // All attachments are inline, don't display anything.
-        if (tiledAttachments.isEmpty() && barAttachments.isEmpty()) {
-            return;
+        if (loadMore != null) {
+            renderLoadMore(loadMore, loaderResult);
         }
 
         if (!tiledAttachments.isEmpty()) {
@@ -211,6 +227,13 @@ public class MessageFooterView extends LinearLayout implements DetachListener,
         }
     }
 
+    private void renderLoadMore(Attachment loadMore, boolean loaderResult) {
+        if (loadMore == null) return;
+
+        mAttachmentLoadMore.setVisibility(View.VISIBLE);
+        renderAttachment(mAttachmentLoadMore, getAccount(), loadMore, loaderResult);
+    }
+
     private void renderTiledAttachments(List<Attachment> tiledAttachments, boolean loaderResult) {
         mAttachmentGrid.setVisibility(View.VISIBLE);
 
@@ -224,20 +247,25 @@ public class MessageFooterView extends LinearLayout implements DetachListener,
 
         final Account account = getAccount();
         for (Attachment attachment : barAttachments) {
-            final Uri id = attachment.getIdentifierUri();
-            MessageAttachmentBar barAttachmentView =
-                    (MessageAttachmentBar) mAttachmentBarList.findViewWithTag(id);
-
-            if (barAttachmentView == null) {
-                barAttachmentView = MessageAttachmentBar.inflate(mInflater, this);
-                barAttachmentView.setTag(id);
-                barAttachmentView.initialize(mFragmentManager);
-                mAttachmentBarList.addView(barAttachmentView);
-            }
+            renderAttachment(mAttachmentBarList, account, attachment, loaderResult);
+        }
+    }
 
-            barAttachmentView.render(attachment, account, mMessageHeaderItem.getMessage(),
-                    loaderResult, getBidiFormatter());
+    private void renderAttachment(LinearLayout parentView, Account account, Attachment attachment,
+            boolean loaderResult) {
+        final Uri id = attachment.getIdentifierUri();
+        MessageAttachmentBar barAttachmentView =
+                (MessageAttachmentBar) parentView.findViewWithTag(id);
+
+        if (barAttachmentView == null) {
+            barAttachmentView = MessageAttachmentBar.inflate(mInflater, this);
+            barAttachmentView.setTag(id);
+            barAttachmentView.initialize(mFragmentManager);
+            parentView.addView(barAttachmentView);
         }
+
+        barAttachmentView.render(attachment, account, mMessageHeaderItem.getMessage(),
+                loaderResult, getBidiFormatter());
     }
 
     private Integer getAttachmentLoaderId() {
diff --git a/src/com/android/mail/browse/MessageHeaderView.java b/src/com/android/mail/browse/MessageHeaderView.java
old mode 100644
new mode 100755
index 724125e5d..da620c05b
--- a/src/com/android/mail/browse/MessageHeaderView.java
+++ b/src/com/android/mail/browse/MessageHeaderView.java
@@ -58,6 +58,8 @@ import com.android.mail.providers.Conversation;
 import com.android.mail.providers.Message;
 import com.android.mail.providers.Settings;
 import com.android.mail.providers.UIProvider;
+import com.android.mail.providers.UIProvider.AccountCapabilities;
+import com.android.mail.providers.UIProvider.MessageFlagLoaded;
 import com.android.mail.text.EmailAddressSpan;
 import com.android.mail.ui.AbstractConversationViewFragment;
 import com.android.mail.ui.ImageCanvas;
@@ -923,6 +925,8 @@ public class MessageHeaderView extends SnapHeader implements OnClickListener,
                     text + "\n\n" + mCallbacks.getMessageTransforms(mMessage));
         } else if (id == R.id.edit_draft) {
             ComposeActivity.editDraft(getContext(), getAccount(), mMessage);
+        } else if (id == R.id.load_more) {
+            mMessage.loadMore();
         } else if (id == R.id.overflow) {
             if (mPopup == null) {
                 mPopup = new PopupMenu(getContext(), v);
@@ -937,6 +941,12 @@ public class MessageHeaderView extends SnapHeader implements OnClickListener,
             m.findItem(R.id.reply_all).setVisible(!defaultReplyAll);
             m.findItem(R.id.print_message).setVisible(Utils.isRunningKitkatOrLater());
 
+            // Update the load more menu visible value.
+            MenuItem fetch = m.findItem(R.id.load_more);
+            if (fetch != null) {
+                fetch.setVisible(mMessage.messageFlagLoaded
+                        == MessageFlagLoaded.FLAG_LOADED_PARTIAL_COMPLETE);
+            }
             final boolean isStarred = mMessage.starred;
             boolean showStar = true;
             final Conversation conversation = mMessage.getConversation();
diff --git a/src/com/android/mail/compose/ComposeActivity.java b/src/com/android/mail/compose/ComposeActivity.java
index 3dd9e8744..0c3d897ce 100644
--- a/src/com/android/mail/compose/ComposeActivity.java
+++ b/src/com/android/mail/compose/ComposeActivity.java
@@ -156,7 +156,8 @@ public class ComposeActivity extends AppCompatActivity
     public static final int REPLY = 0;
     public static final int REPLY_ALL = 1;
     public static final int FORWARD = 2;
-    public static final int EDIT_DRAFT = 3;
+    public static final int FORWARD_DROP_UNLOADED_ATTS = 3;
+    public static final int EDIT_DRAFT = 4;
 
     // Integer extra holding one of the above compose action
     protected static final String EXTRA_ACTION = "action";
@@ -346,6 +347,7 @@ public class ComposeActivity extends AppCompatActivity
     private boolean mRespondedInline;
     private boolean mPerformedSendOrDiscard = false;
 
+    private ArrayList<Attachment> mInsertAttachments;
     // OnKeyListener solely used for intercepting CTRL+ENTER event for SEND.
     private final View.OnKeyListener mKeyListenerForSendShortcut = new View.OnKeyListener() {
         @Override
@@ -523,7 +525,7 @@ public class ComposeActivity extends AppCompatActivity
             actionBar.setIcon(null);
             actionBar.setDisplayUseLogoEnabled(false);
         }
-
+        mInsertAttachments = new ArrayList<Attachment>();
         mInnerSavedState = (savedInstanceState != null) ?
                 savedInstanceState.getBundle(KEY_INNER_SAVED_STATE) : null;
         checkValidAccounts();
@@ -1547,8 +1549,19 @@ public class ComposeActivity extends AppCompatActivity
         }
         initRecipientsFromRefMessage(mRefMessage, action);
         initQuotedTextFromRefMessage(mRefMessage, action);
-        if (action == ComposeActivity.FORWARD || mAttachmentsChanged) {
-            initAttachments(mRefMessage);
+        if (action == ComposeActivity.FORWARD
+                || action == ComposeActivity.FORWARD_DROP_UNLOADED_ATTS
+                || mAttachmentsChanged) {
+            if ((action == REPLY || action == REPLY_ALL)) {
+                if (mInsertAttachments != null && mInsertAttachments.size() != 0) {
+                    addAttachments(mInsertAttachments,
+                            action == ComposeActivity.FORWARD_DROP_UNLOADED_ATTS);
+                }
+            } else {
+                initAttachments(mRefMessage,
+                        action == ComposeActivity.FORWARD_DROP_UNLOADED_ATTS);
+            }
+
         }
     }
 
@@ -1832,13 +1845,24 @@ public class ComposeActivity extends AppCompatActivity
 
     @VisibleForTesting
     protected void initAttachments(Message refMessage) {
-        addAttachments(refMessage.getAttachments());
+        initAttachments(refMessage, false);
+    }
+
+    @VisibleForTesting
+    protected void initAttachments(Message refMessage, boolean dropUnloaded) {
+        if (mInsertAttachments != null && mInsertAttachments.size() != 0) {
+            mInsertAttachments.addAll(refMessage.getAttachments());
+            addAttachments(mInsertAttachments, dropUnloaded);
+        } else {
+            addAttachments(refMessage.getAttachments(), dropUnloaded);
+        }
+
     }
 
     /**
      * @return true if at least one file is attached.
      */
-    public boolean addAttachments(List<Attachment> attachments) {
+    public boolean addAttachments(List<Attachment> attachments, boolean dropUnloaded) {
         boolean attached = false;
         AttachmentFailureException error = null;
         for (Attachment a : attachments) {
@@ -1979,7 +2003,7 @@ public class ComposeActivity extends AppCompatActivity
                 showErrorToast(getString(R.string.attachment_permission_denied));
             }
         }
-        return addAttachments(attachments);
+        return addAttachments(attachments, false);
     }
 
     protected void initQuotedText(CharSequence quotedText, boolean shouldQuoteText) {
@@ -2480,6 +2504,7 @@ public class ComposeActivity extends AppCompatActivity
         sendOrSaveWithSanityChecks(false, true, false, false);
         logSendOrSave(false /* save */);
         mPerformedSendOrDiscard = true;
+        mInsertAttachments.clear();
     }
 
     private void doSave(boolean showToast) {
@@ -3556,9 +3581,16 @@ public class ComposeActivity extends AppCompatActivity
         // 1) Body
         // 2) Attachments
         // If the user made changes to attachments, keep their changes.
-        if (!mAttachmentsChanged) {
-            mAttachmentsView.deleteAllAttachments();
+        if (mAttachmentsChanged && mRefMessage != null) {
+            mInsertAttachments.clear();
+            for (Attachment attachment : mAttachmentsView.getAttachments()) {
+                if (!((ArrayList<Attachment>) mRefMessage.getAttachments()).contains(attachment)) {
+                    mInsertAttachments.add(attachment);
+                }
+            }
         }
+        mAttachmentsView.deleteAllAttachments();
+
     }
 
     private class ComposeModeAdapter extends ArrayAdapter<String> {
@@ -3732,7 +3764,9 @@ public class ComposeActivity extends AppCompatActivity
                 if (!mAccount.expungeMessageUri.equals(Uri.EMPTY)) {
                     getContentResolver().update(mAccount.expungeMessageUri, values, null, null);
                 } else {
-                    getContentResolver().delete(mDraft.uri, null, null);
+                    if (mDraft.uri != null) {
+                        getContentResolver().delete(mDraft.uri, null, null);
+                    }
                 }
                 // This is not strictly necessary (since we should not try to
                 // save the draft after calling this) but it ensures that if we
diff --git a/src/com/android/mail/compose/RecipientAdapter.java b/src/com/android/mail/compose/RecipientAdapter.java
index 2f84eea65..a34cdc27c 100644
--- a/src/com/android/mail/compose/RecipientAdapter.java
+++ b/src/com/android/mail/compose/RecipientAdapter.java
@@ -1,5 +1,6 @@
 /**
  * Copyright (c) 2007, Google Inc.
+ * Copyright (c) 2015, The CyanogenMod Project
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -15,14 +16,240 @@
  */
 package com.android.mail.compose;
 
+import com.android.emailcommon.provider.EmailContent;
+import com.android.emailcommon.provider.SuggestedContact;
 import com.android.ex.chips.BaseRecipientAdapter;
+import com.android.ex.chips.RecipientEntry;
+import com.android.mail.preferences.MailPrefs;
 import com.android.mail.providers.Account;
 
+import java.util.ArrayList;
+import java.util.Calendar;
+import java.util.HashMap;
+import java.util.HashSet;
+import java.util.Locale;
+import java.util.Map;
+import java.util.Set;
+
+import android.content.ContentProviderOperation;
+import android.content.ContentResolver;
+import android.content.ContentUris;
 import android.content.Context;
+import android.content.OperationApplicationException;
+import android.content.SharedPreferences;
+import android.content.SharedPreferences.OnSharedPreferenceChangeListener;
+import android.database.Cursor;
+import android.net.Uri;
+import android.os.AsyncTask;
+import android.os.RemoteException;
+import android.provider.ContactsContract;
+import android.provider.ContactsContract.CommonDataKinds.Email;
+import android.provider.ContactsContract.CommonDataKinds.StructuredName;
+import android.provider.ContactsContract.Contacts.Data;
+import android.provider.ContactsContract.RawContacts;
+import android.util.Log;
+
+public class RecipientAdapter extends BaseRecipientAdapter
+implements OnSharedPreferenceChangeListener {
+
+    private static final boolean DEBUG = false;
+    private static final String TAG = "RecipientAdapter";
+
+    private static final int MAX_SUGGESTED_CONTACTS_ENTRIES = 3;
+
+    private static final int MAX_DAYS_FOR_RECENTS_SUGGESTED_CONTACTS = -7;
+
+    private String mSuggestedContactsMode;
+    private long mAccountId;
 
-public class RecipientAdapter extends BaseRecipientAdapter {
     public RecipientAdapter(Context context, Account account) {
         super(context);
         setAccount(account.getAccountManagerAccount());
+        mAccountId = -1;
+
+        // Load the account id because we needed to access the suggested contacts data
+        // (in async mode because will do i/o writes)
+        loadAccountKey(account);
+
+        mSuggestedContactsMode = MailPrefs.get(getContext()).getSuggestedContactMode();
+        MailPrefs.get(context).registerOnSharedPreferenceChangeListener(this);
+    }
+
+    @Override
+    protected void finalize() throws Throwable {
+        MailPrefs.get(getContext()).unregisterOnSharedPreferenceChangeListener(this);
+        super.finalize();
+    }
+
+    @Override
+    public void onSharedPreferenceChanged(SharedPreferences sharedPreferences, String key) {
+        if (key.equals(MailPrefs.PreferenceKeys.SUGGESTED_CONTACTS_MODE)) {
+            mSuggestedContactsMode = MailPrefs.get(getContext()).getSuggestedContactMode();
+        }
+    }
+
+    @Override
+    protected Set<SuggestionEntry> loadSuggestedEntries(CharSequence constraint, int maxResults) {
+        Set<SuggestionEntry> entries = new HashSet<>();
+        if (!mSuggestedContactsMode.equals(MailPrefs.SuggestedContactsMode.NONE)) {
+            boolean recentsMode = mSuggestedContactsMode.equals(
+                    MailPrefs.SuggestedContactsMode.RECENTS);
+
+            String selection = SuggestedContact.ACCOUNT_KEY + " = ?" +
+                    " and LOWER(" + SuggestedContact.DISPLAY_NAME + ") like LOWER(?) ESCAPE '\\' ";
+            String[] args = new String[recentsMode ? 3 : 2];
+            args[0] = String.valueOf(mAccountId);
+            args[1] = "%" + constraint + "%";
+            String sort = SuggestedContact.LAST_SEEN + " DESC LIMIT "
+                    + Math.min(MAX_SUGGESTED_CONTACTS_ENTRIES, maxResults);
+            if (recentsMode) {
+                Calendar c = Calendar.getInstance(Locale.getDefault());
+                c.add(Calendar.DAY_OF_YEAR, MAX_DAYS_FOR_RECENTS_SUGGESTED_CONTACTS);
+                selection += " and " + SuggestedContact.LAST_SEEN + " >= ? ";
+                args[2] = String.valueOf(c.getTimeInMillis());
+            }
+
+            Cursor cursor = getContext().getContentResolver().query(SuggestedContact.CONTENT_URI,
+                    SuggestedContact.PROJECTION, selection, args, sort);
+            try {
+                if (cursor != null) {
+                    Set<String> cachedAddresses = new HashSet<>();
+                    Map<String, Integer> cachedContacts = new HashMap<>();
+                    int contactsIds = -100;
+                    while (cursor.moveToNext()) {
+                        long suggestionId = cursor.getLong(
+                                cursor.getColumnIndexOrThrow(SuggestedContact._ID));
+                        String address = cursor.getString(
+                                cursor.getColumnIndexOrThrow(SuggestedContact.ADDRESS));
+                        String name = cursor.getString(
+                                cursor.getColumnIndexOrThrow(SuggestedContact.NAME));
+                        String displayName = cursor.getString(
+                                cursor.getColumnIndexOrThrow(SuggestedContact.DISPLAY_NAME));
+
+                        if (!cachedAddresses.contains(address)) {
+                            int contactId = (cachedContacts.containsKey(name)) ?
+                                    cachedContacts.get(name) : contactsIds++;
+                            SuggestionEntry entry = new SuggestionEntry(
+                                    suggestionId, displayName, address, name, contactId);
+                            entries.add(entry);
+                            cachedAddresses.add(address);
+
+                            cachedContacts.put(name, contactId);
+                        }
+                    }
+                }
+            } catch (IllegalArgumentException e) {
+                Log.w(TAG, "Failed to perform search over suggested contacts table", e);
+
+            } finally {
+                if (cursor != null) {
+                    cursor.close();
+                }
+            }
+        }
+
+        if (DEBUG) {
+            Log.i(TAG, "Found " + entries.size() + " entries in suggested contacts");
+        }
+
+        return entries;
+    }
+
+    protected void onAddSuggestion(final RecipientEntry entry, final SuggestionAddCallback cb) {
+        new AsyncTask<Void, Void, Boolean>() {
+            @Override
+            protected Boolean doInBackground(Void... args) {
+                return createSuggestedContact(entry);
+            }
+            @Override
+            protected void onPostExecute(Boolean result) {
+                if (result) {
+                    cb.onSucess();
+                } else {
+                    cb.onFailed();
+                }
+            }
+        }.execute();
+    }
+
+    protected void onDeleteSuggestion(final RecipientEntry entry,
+            final SuggestionRemoveCallback cb) {
+        new AsyncTask<Void, Void, Boolean>() {
+            @Override
+            protected Boolean doInBackground(Void... args) {
+                return deleteSuggestedContact(entry);
+            }
+            @Override
+            protected void onPostExecute(Boolean result) {
+                if (result) {
+                    cb.onSucess();
+                } else {
+                    cb.onFailed();
+                }
+            }
+        }.execute();
+    }
+
+    private void loadAccountKey(final Account account) {
+        new AsyncTask<Void, Void, Void>() {
+            @Override
+            protected Void doInBackground(Void... params) {
+                Cursor c = getContext().getContentResolver().query(
+                        com.android.emailcommon.provider.Account.CONTENT_URI,
+                        EmailContent.ID_PROJECTION,
+                        com.android.emailcommon.provider.Account.AccountColumns.EMAIL_ADDRESS
+                            + " = ?",
+                        new String[]{account.getAccountId()}, null);
+                try {
+                    if (c != null && c.moveToFirst()) {
+                        mAccountId = c.getLong(0);
+                    }
+                } finally {
+                    if (c != null) {
+                        c.close();
+                    }
+                }
+                return null;
+            }
+        }.execute();
+    }
+
+    private boolean createSuggestedContact(RecipientEntry entry) {
+        ContentResolver cr = getContext().getContentResolver();
+        ArrayList<ContentProviderOperation> ops = new ArrayList<ContentProviderOperation>();
+        int rawContactInsertIndex = ops.size();
+
+        ops.add(ContentProviderOperation.newInsert(RawContacts.CONTENT_URI)
+                .withValue(RawContacts.ACCOUNT_TYPE, null)
+                .withValue(RawContacts.ACCOUNT_NAME, null)
+                .build());
+        ops.add(ContentProviderOperation
+                .newInsert(ContactsContract.Data.CONTENT_URI)
+                .withValueBackReference(Data.RAW_CONTACT_ID, rawContactInsertIndex)
+                .withValue(Data.MIMETYPE, StructuredName.CONTENT_ITEM_TYPE)
+                .withValue(StructuredName.DISPLAY_NAME, entry.getDisplayName())
+                .build());
+        ops.add(ContentProviderOperation
+                .newInsert(ContactsContract.Data.CONTENT_URI)
+                .withValueBackReference(Data.RAW_CONTACT_ID, rawContactInsertIndex)
+                .withValue(Data.MIMETYPE, Email.CONTENT_ITEM_TYPE)
+                .withValue(Email.DATA, entry.getDestination())
+                .withValue(Email.TYPE, Email.TYPE_OTHER)
+                .build());
+
+        try {
+            cr.applyBatch(ContactsContract.AUTHORITY, ops);
+            return true;
+
+        } catch (RemoteException | OperationApplicationException e) {
+            Log.e(TAG, "Failed to create the suggested contact.", e);
+        }
+        return false;
+    }
+
+    private boolean deleteSuggestedContact(RecipientEntry entry) {
+        ContentResolver cr = getContext().getContentResolver();
+        final Uri uri = ContentUris.withAppendedId(SuggestedContact.CONTENT_URI, entry.getDataId());
+        return cr.delete(uri, null, null) == 1;
     }
 }
diff --git a/src/com/android/mail/photo/MailPhotoViewActivity.java b/src/com/android/mail/photo/MailPhotoViewActivity.java
index 2926d3f60..7f379cf8c 100644
--- a/src/com/android/mail/photo/MailPhotoViewActivity.java
+++ b/src/com/android/mail/photo/MailPhotoViewActivity.java
@@ -51,6 +51,9 @@ public class MailPhotoViewActivity extends PhotoViewActivity implements
      */
     public static void startMailPhotoViewActivity(final Context context, final String account,
             final String accountType, final ConversationMessage msg, final int photoIndex) {
+        if (msg.attachmentListUri == null) {
+            return;
+        }
         final Intents.PhotoViewIntentBuilder builder =
                 Intents.newPhotoViewIntentBuilder(context,
                         context.getString(R.string.photo_view_activity));
diff --git a/src/com/android/mail/photomanager/LetterTileProvider.java b/src/com/android/mail/photomanager/LetterTileProvider.java
index 2593e2195..8fb24e2d6 100644
--- a/src/com/android/mail/photomanager/LetterTileProvider.java
+++ b/src/com/android/mail/photomanager/LetterTileProvider.java
@@ -83,7 +83,7 @@ public class LetterTileProvider {
     public Bitmap getLetterTile(final Dimensions dimensions, final String displayName,
             final String address) {
         final String display = !TextUtils.isEmpty(displayName) ? displayName : address;
-        final char firstChar = display.charAt(0);
+        final char firstChar = !TextUtils.isEmpty(display) ? display.charAt(0) : '\0';
 
         // get an empty bitmap
         final Bitmap bitmap = getBitmap(dimensions, false /* getDefault */);
diff --git a/src/com/android/mail/preferences/FolderPreferences.java b/src/com/android/mail/preferences/FolderPreferences.java
index fe007d609..a34ba940a 100644
--- a/src/com/android/mail/preferences/FolderPreferences.java
+++ b/src/com/android/mail/preferences/FolderPreferences.java
@@ -21,7 +21,9 @@ import android.database.Cursor;
 import android.media.RingtoneManager;
 import android.net.Uri;
 import android.provider.Settings;
+import android.text.TextUtils;
 
+import com.android.mail.preferences.notifications.FolderNotificationLightPreference;
 import com.android.mail.providers.Account;
 import com.android.mail.providers.Folder;
 import com.android.mail.providers.UIProvider.AccountCapabilities;
@@ -48,6 +50,8 @@ public class FolderPreferences extends VersionedPrefs {
         public static final String NOTIFICATION_RINGTONE = "notification-ringtone";
         /** Boolean value indicating whether we should explicitly vibrate */
         public static final String NOTIFICATION_VIBRATE = "notification-vibrate";
+        /** Boolean value indicating whether the notification has a custom notificaition light */
+        public static final String NOTIFICATION_LIGHTS = "notification-lights";
         /**
          * Boolean value indicating whether we notify for every message (<code>true</code>), or just
          * once for the folder (<code>false</code>)
@@ -60,10 +64,43 @@ public class FolderPreferences extends VersionedPrefs {
                         .add(NOTIFICATIONS_ENABLED)
                         .add(NOTIFICATION_RINGTONE)
                         .add(NOTIFICATION_VIBRATE)
+                        .add(NOTIFICATION_LIGHTS)
                         .add(NOTIFICATION_NOTIFY_EVERY_MESSAGE)
                         .build();
     }
 
+    public static final class NotificationLight {
+        public final boolean mOn;
+        public final int mColor;
+        public final int mTimeOn;
+        public final int mTimeOff;
+
+        private NotificationLight(boolean on, int color, int timeOn, int timeOff) {
+            mOn = on;
+            mColor = color;
+            mTimeOn = timeOn;
+            mTimeOff = timeOff;
+        }
+
+        public String toStringPref() {
+            if (!mOn) {
+                return "";
+            }
+            return TextUtils.join("|", new Integer[]{mColor, mTimeOn, mTimeOff});
+        }
+
+        public static NotificationLight fromStringPref(String pref) {
+            if (TextUtils.isEmpty(pref)) {
+                return new NotificationLight(false, FolderNotificationLightPreference.DEFAULT_COLOR,
+                        FolderNotificationLightPreference.DEFAULT_TIME,
+                        FolderNotificationLightPreference.DEFAULT_TIME);
+            }
+            String[] data = pref.split("\\|");
+            return new NotificationLight(true, Integer.parseInt(data[0]),
+                    Integer.parseInt(data[1]), Integer.parseInt(data[2]));
+        }
+    }
+
     private final Folder mFolder;
     /** An id that is constant across app installations. */
     private final String mPersistentId;
@@ -236,6 +273,16 @@ public class FolderPreferences extends VersionedPrefs {
         notifyBackupPreferenceChanged();
     }
 
+    public NotificationLight getNotificationLight() {
+        String pref = getSharedPreferences().getString(PreferenceKeys.NOTIFICATION_LIGHTS, "");
+        return NotificationLight.fromStringPref(pref);
+    }
+
+    public void setNotificationLights(final NotificationLight lights) {
+        getEditor().putString(PreferenceKeys.NOTIFICATION_LIGHTS, lights.toStringPref()).apply();
+        notifyBackupPreferenceChanged();
+    }
+
     public boolean isEveryMessageNotificationEnabled() {
         return getSharedPreferences()
                 .getBoolean(PreferenceKeys.NOTIFICATION_NOTIFY_EVERY_MESSAGE, false);
diff --git a/src/com/android/mail/preferences/MailPrefs.java b/src/com/android/mail/preferences/MailPrefs.java
index c8d83cdf2..fc34ee77c 100644
--- a/src/com/android/mail/preferences/MailPrefs.java
+++ b/src/com/android/mail/preferences/MailPrefs.java
@@ -139,6 +139,8 @@ public final class MailPrefs extends VersionedPrefs {
         // State indicating that we have migrated all accounts.
         public static final int MIGRATION_STATE_ALL = 2;
 
+        public static final String SUGGESTED_CONTACTS_MODE = "suggested-contacts-mode";
+
         public static final ImmutableSet<String> BACKUP_KEYS =
                 new ImmutableSet.Builder<String>()
                 .add(DEFAULT_REPLY_ALL)
@@ -154,6 +156,7 @@ public final class MailPrefs extends VersionedPrefs {
                 .add(CONFIRM_SEND)
                 .add(CONVERSATION_OVERVIEW_MODE)
                 .add(SNAP_HEADER_MODE)
+                .add(SUGGESTED_CONTACTS_MODE)
                 .build();
     }
 
@@ -163,6 +166,12 @@ public final class MailPrefs extends VersionedPrefs {
         public static final String DISABLED = "disabled";
     }
 
+    public static final class SuggestedContactsMode {
+        public static final String NONE = "none";
+        public static final String RECENTS = "recents";
+        public static final String ALL = "all";
+    }
+
     @Retention(RetentionPolicy.SOURCE)
     @StringDef({
             RemovalActions.ARCHIVE,
@@ -604,4 +613,13 @@ public final class MailPrefs extends VersionedPrefs {
         getEditor().putLong(
                 PreferenceKeys.ANALYTICS_NB_ACCOUNT_LATEST_REPORT, timeMs);
     }
+
+    public String getSuggestedContactMode() {
+        return getSharedPreferences().getString(
+                PreferenceKeys.SUGGESTED_CONTACTS_MODE, SuggestedContactsMode.NONE);
+    }
+
+    public void setSuggestedContactMode(String mode) {
+        getEditor().putString(PreferenceKeys.SUGGESTED_CONTACTS_MODE, mode).apply();
+    }
 }
diff --git a/src/com/android/mail/preferences/notifications/AlphaPatternDrawable.java b/src/com/android/mail/preferences/notifications/AlphaPatternDrawable.java
new file mode 100644
index 000000000..70daf6cbb
--- /dev/null
+++ b/src/com/android/mail/preferences/notifications/AlphaPatternDrawable.java
@@ -0,0 +1,125 @@
+/*
+ * Copyright (C) 2010 Daniel Nilsson
+ * Copyright (C) 2015 The CyanogenMod Project
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.android.mail.preferences.notifications;
+
+import android.graphics.Bitmap;
+import android.graphics.Canvas;
+import android.graphics.ColorFilter;
+import android.graphics.Paint;
+import android.graphics.Rect;
+import android.graphics.Bitmap.Config;
+import android.graphics.drawable.Drawable;
+
+/**
+ * This drawable that draws a simple white and gray chess board pattern. It's
+ * pattern you will often see as a background behind a partly transparent image
+ * in many applications.
+ *
+ * @author Daniel Nilsson
+ */
+public class AlphaPatternDrawable extends Drawable {
+
+    private int mRectangleSize = 10;
+
+    private Paint mPaint = new Paint();
+    private Paint mPaintWhite = new Paint();
+    private Paint mPaintGray = new Paint();
+
+    private int numRectanglesHorizontal;
+    private int numRectanglesVertical;
+
+    /**
+     * Bitmap in which the pattern will be cached.
+     */
+    private Bitmap mBitmap;
+
+    public AlphaPatternDrawable(int rectangleSize) {
+        mRectangleSize = rectangleSize;
+        mPaintWhite.setColor(0xffffffff);
+        mPaintGray.setColor(0xffcbcbcb);
+    }
+
+    @Override
+    public void draw(Canvas canvas) {
+        if (mBitmap != null) {
+            canvas.drawBitmap(mBitmap, null, getBounds(), mPaint);
+        }
+    }
+
+    @Override
+    public int getOpacity() {
+        return 0;
+    }
+
+    @Override
+    public void setAlpha(int alpha) {
+        throw new UnsupportedOperationException("Alpha is not supported by this drawwable.");
+    }
+
+    @Override
+    public void setColorFilter(ColorFilter cf) {
+        throw new UnsupportedOperationException("ColorFilter is not supported by this drawwable.");
+    }
+
+    @Override
+    protected void onBoundsChange(Rect bounds) {
+        super.onBoundsChange(bounds);
+
+        int height = bounds.height();
+        int width = bounds.width();
+
+        numRectanglesHorizontal = (int) Math.ceil((width / mRectangleSize));
+        numRectanglesVertical = (int) Math.ceil(height / mRectangleSize);
+
+        generatePatternBitmap();
+    }
+
+    /**
+     * This will generate a bitmap with the pattern as big as the rectangle we
+     * were allow to draw on. We do this to cache the bitmap so we don't need
+     * to recreate it each time draw() is called since it takes a few
+     * milliseconds.
+     */
+    private void generatePatternBitmap() {
+
+        if (getBounds().width() <= 0 || getBounds().height() <= 0) {
+            return;
+        }
+
+        mBitmap = Bitmap.createBitmap(getBounds().width(), getBounds().height(), Config.ARGB_8888);
+        Canvas canvas = new Canvas(mBitmap);
+
+        Rect r = new Rect();
+        boolean verticalStartWhite = true;
+        for (int i = 0; i <= numRectanglesVertical; i++) {
+            boolean isWhite = verticalStartWhite;
+            for (int j = 0; j <= numRectanglesHorizontal; j++) {
+                r.top = i * mRectangleSize;
+                r.left = j * mRectangleSize;
+                r.bottom = r.top + mRectangleSize;
+                r.right = r.left + mRectangleSize;
+
+                canvas.drawRect(r, isWhite ? mPaintWhite : mPaintGray);
+
+                isWhite = !isWhite;
+            }
+
+            verticalStartWhite = !verticalStartWhite;
+        }
+    }
+}
diff --git a/src/com/android/mail/preferences/notifications/ColorPanelView.java b/src/com/android/mail/preferences/notifications/ColorPanelView.java
new file mode 100644
index 000000000..604bf0fcc
--- /dev/null
+++ b/src/com/android/mail/preferences/notifications/ColorPanelView.java
@@ -0,0 +1,171 @@
+/*
+ * Copyright (C) 2010 Daniel Nilsson
+ * Copyright (C) 2015 The CyanogenMod Project
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.android.mail.preferences.notifications;
+
+import android.content.Context;
+import android.graphics.Canvas;
+import android.graphics.Paint;
+import android.graphics.RectF;
+import android.util.AttributeSet;
+import android.view.View;
+
+/**
+ * This class draws a panel which which will be filled with a color which can be
+ * set. It can be used to show the currently selected color which you will get
+ * from the {@link ColorPickerView}.
+ *
+ * @author Daniel Nilsson
+ */
+public class ColorPanelView extends View {
+
+    /**
+     * The width in pixels of the border surrounding the color panel.
+     */
+    private final static float BORDER_WIDTH_PX = 1;
+
+    private static float mDensity = 1f;
+
+    private int mBorderColor = 0xff6E6E6E;
+    private int mColor = 0xff000000;
+
+    private Paint mBorderPaint;
+    private Paint mColorPaint;
+
+    private RectF mDrawingRect;
+    private RectF mColorRect;
+
+    private AlphaPatternDrawable mAlphaPattern;
+
+    public ColorPanelView(Context context) {
+        this(context, null);
+    }
+
+    public ColorPanelView(Context context, AttributeSet attrs) {
+        this(context, attrs, 0);
+    }
+
+    public ColorPanelView(Context context, AttributeSet attrs, int defStyle) {
+        super(context, attrs, defStyle);
+
+        init();
+    }
+
+    private void init() {
+        mBorderPaint = new Paint();
+        mColorPaint = new Paint();
+        mDensity = getContext().getResources().getDisplayMetrics().density;
+    }
+
+    @Override
+    protected void onDraw(Canvas canvas) {
+
+        final RectF rect = mColorRect;
+
+        if (BORDER_WIDTH_PX > 0) {
+            mBorderPaint.setColor(mBorderColor);
+            canvas.drawRect(mDrawingRect, mBorderPaint);
+        }
+
+        if (mAlphaPattern != null) {
+            mAlphaPattern.draw(canvas);
+        }
+
+        mColorPaint.setColor(mColor);
+
+        canvas.drawRect(rect, mColorPaint);
+    }
+
+    @Override
+    protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {
+
+        int width = MeasureSpec.getSize(widthMeasureSpec);
+        int height = MeasureSpec.getSize(heightMeasureSpec);
+
+        setMeasuredDimension(width, height);
+    }
+
+    @Override
+    protected void onSizeChanged(int w, int h, int oldw, int oldh) {
+        super.onSizeChanged(w, h, oldw, oldh);
+
+        mDrawingRect = new RectF();
+        mDrawingRect.left = getPaddingLeft();
+        mDrawingRect.right = w - getPaddingRight();
+        mDrawingRect.top = getPaddingTop();
+        mDrawingRect.bottom = h - getPaddingBottom();
+
+        setUpColorRect();
+
+    }
+
+    private void setUpColorRect() {
+        final RectF dRect = mDrawingRect;
+
+        float left = dRect.left + BORDER_WIDTH_PX;
+        float top = dRect.top + BORDER_WIDTH_PX;
+        float bottom = dRect.bottom - BORDER_WIDTH_PX;
+        float right = dRect.right - BORDER_WIDTH_PX;
+
+        mColorRect = new RectF(left, top, right, bottom);
+
+        mAlphaPattern = new AlphaPatternDrawable((int) (5 * mDensity));
+
+        mAlphaPattern.setBounds(Math.round(mColorRect.left),
+                Math.round(mColorRect.top),
+                Math.round(mColorRect.right),
+                Math.round(mColorRect.bottom));
+
+    }
+
+    /**
+     * Set the color that should be shown by this view.
+     *
+     * @param color
+     */
+    public void setColor(int color) {
+        mColor = color;
+        invalidate();
+    }
+
+    /**
+     * Get the color currently show by this view.
+     *
+     * @return
+     */
+    public int getColor() {
+        return mColor;
+    }
+
+    /**
+     * Set the color of the border surrounding the panel.
+     *
+     * @param color
+     */
+    public void setBorderColor(int color) {
+        mBorderColor = color;
+        invalidate();
+    }
+
+    /**
+     * Get the color of the border surrounding the panel.
+     */
+    public int getBorderColor() {
+        return mBorderColor;
+    }
+
+}
diff --git a/src/com/android/mail/preferences/notifications/ColorPickerView.java b/src/com/android/mail/preferences/notifications/ColorPickerView.java
new file mode 100644
index 000000000..87bdb8a05
--- /dev/null
+++ b/src/com/android/mail/preferences/notifications/ColorPickerView.java
@@ -0,0 +1,860 @@
+/*
+ * Copyright (C) 2010 Daniel Nilsson
+ * Copyright (C) 2015 The CyanogenMod Project
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.android.mail.preferences.notifications;
+
+import android.content.Context;
+import android.graphics.Canvas;
+import android.graphics.Color;
+import android.graphics.ComposeShader;
+import android.graphics.LinearGradient;
+import android.graphics.Paint;
+import android.graphics.Point;
+import android.graphics.PorterDuff.Mode;
+import android.graphics.RectF;
+import android.graphics.Shader;
+import android.graphics.Paint.Align;
+import android.graphics.Paint.Style;
+import android.graphics.Shader.TileMode;
+import android.os.Build;
+import android.util.AttributeSet;
+import android.view.MotionEvent;
+import android.view.View;
+
+/**
+ * Displays a color picker to the user and allow them to select a color. A
+ * slider for the alpha channel is also available. Enable it by setting
+ * setAlphaSliderVisible(boolean) to true.
+ *
+ * @author Daniel Nilsson
+ */
+public class ColorPickerView extends View {
+
+    public interface OnColorChangedListener {
+        public void onColorChanged(int color);
+    }
+
+    private final static int PANEL_SAT_VAL = 0;
+    private final static int PANEL_HUE = 1;
+    private final static int PANEL_ALPHA = 2;
+
+    /**
+     * The width in pixels of the border surrounding all color panels.
+     */
+    private final static float BORDER_WIDTH_PX = 1;
+
+    /**
+     * The width in dp of the hue panel.
+     */
+    private float HUE_PANEL_WIDTH = 30f;
+    /**
+     * The height in dp of the alpha panel
+     */
+    private float ALPHA_PANEL_HEIGHT = 20f;
+    /**
+     * The distance in dp between the different color panels.
+     */
+    private float PANEL_SPACING = 10f;
+    /**
+     * The radius in dp of the color palette tracker circle.
+     */
+    private float PALETTE_CIRCLE_TRACKER_RADIUS = 5f;
+    /**
+     * The dp which the tracker of the hue or alpha panel will extend outside of
+     * its bounds.
+     */
+    private float RECTANGLE_TRACKER_OFFSET = 2f;
+
+    private static float mDensity = 1f;
+
+    private OnColorChangedListener mListener;
+
+    private Paint mSatValPaint;
+    private Paint mSatValTrackerPaint;
+
+    private Paint mHuePaint;
+    private Paint mHueTrackerPaint;
+
+    private Paint mAlphaPaint;
+    private Paint mAlphaTextPaint;
+
+    private Paint mBorderPaint;
+
+    private Shader mValShader;
+    private Shader mSatShader;
+    private Shader mHueShader;
+    private Shader mAlphaShader;
+
+    private int mAlpha = 0xff;
+    private float mHue = 360f;
+    private float mSat = 0f;
+    private float mVal = 0f;
+
+    private String mAlphaSliderText = "Alpha";
+    private int mSliderTrackerColor = 0xff1c1c1c;
+    private int mBorderColor = 0xff6E6E6E;
+    private boolean mShowAlphaPanel = false;
+
+    /*
+     * To remember which panel that has the "focus" when processing hardware
+     * button data.
+     */
+    private int mLastTouchedPanel = PANEL_SAT_VAL;
+
+    /**
+     * Offset from the edge we must have or else the finger tracker will get
+     * clipped when it is drawn outside of the view.
+     */
+    private float mDrawingOffset;
+
+    /*
+     * Distance form the edges of the view of where we are allowed to draw.
+     */
+    private RectF mDrawingRect;
+
+    private RectF mSatValRect;
+    private RectF mHueRect;
+    private RectF mAlphaRect;
+
+    private AlphaPatternDrawable mAlphaPattern;
+
+    private Point mStartTouchPoint = null;
+
+    public ColorPickerView(Context context) {
+        this(context, null);
+    }
+
+    public ColorPickerView(Context context, AttributeSet attrs) {
+        this(context, attrs, 0);
+    }
+
+    public ColorPickerView(Context context, AttributeSet attrs, int defStyle) {
+        super(context, attrs, defStyle);
+        init();
+    }
+
+    private void init() {
+        mDensity = getContext().getResources().getDisplayMetrics().density;
+        PALETTE_CIRCLE_TRACKER_RADIUS *= mDensity;
+        RECTANGLE_TRACKER_OFFSET *= mDensity;
+        HUE_PANEL_WIDTH *= mDensity;
+        ALPHA_PANEL_HEIGHT *= mDensity;
+        PANEL_SPACING = PANEL_SPACING * mDensity;
+
+        mDrawingOffset = calculateRequiredOffset();
+        initPaintTools();
+
+        // Needed for receiving track ball motion events.
+        setFocusableInTouchMode(true);
+        setFocusable(true);
+        setClickable(true);
+    }
+
+    private void initPaintTools() {
+        mSatValPaint = new Paint();
+        mSatValTrackerPaint = new Paint();
+        mHuePaint = new Paint();
+        mHueTrackerPaint = new Paint();
+        mAlphaPaint = new Paint();
+        mAlphaTextPaint = new Paint();
+        mBorderPaint = new Paint();
+
+        mSatValTrackerPaint.setStyle(Style.STROKE);
+        mSatValTrackerPaint.setStrokeWidth(2f * mDensity);
+        mSatValTrackerPaint.setAntiAlias(true);
+
+        mHueTrackerPaint.setColor(mSliderTrackerColor);
+        mHueTrackerPaint.setStyle(Style.STROKE);
+        mHueTrackerPaint.setStrokeWidth(2f * mDensity);
+        mHueTrackerPaint.setAntiAlias(true);
+
+        mAlphaTextPaint.setColor(0xff1c1c1c);
+        mAlphaTextPaint.setTextSize(14f * mDensity);
+        mAlphaTextPaint.setAntiAlias(true);
+        mAlphaTextPaint.setTextAlign(Align.CENTER);
+        mAlphaTextPaint.setFakeBoldText(true);
+    }
+
+    private float calculateRequiredOffset() {
+        float offset = Math.max(PALETTE_CIRCLE_TRACKER_RADIUS, RECTANGLE_TRACKER_OFFSET);
+        offset = Math.max(offset, BORDER_WIDTH_PX * mDensity);
+
+        return offset * 1.5f;
+    }
+
+    private int[] buildHueColorArray() {
+        int[] hue = new int[361];
+
+        int count = 0;
+        for (int i = hue.length - 1; i >= 0; i--, count++) {
+            hue[count] = Color.HSVToColor(new float[] {
+                    i, 1f, 1f
+            });
+        }
+        return hue;
+    }
+
+    @Override
+    public void setEnabled(boolean enabled) {
+        super.setEnabled(enabled);
+        postInvalidate();
+    }
+
+    @Override
+    protected void onDraw(Canvas canvas) {
+        if (mDrawingRect.width() <= 0 || mDrawingRect.height() <= 0) {
+            return;
+        }
+        drawSatValPanel(canvas);
+        drawHuePanel(canvas);
+        drawAlphaPanel(canvas);
+    }
+
+    private void drawSatValPanel(Canvas canvas) {
+        final RectF rect = mSatValRect;
+        int rgb = Color.HSVToColor(new float[] {
+                mHue, 1f, 1f
+        });
+
+        if (BORDER_WIDTH_PX > 0) {
+            mBorderPaint.setColor(mBorderColor);
+            canvas.drawRect(mDrawingRect.left, mDrawingRect.top, rect.right + BORDER_WIDTH_PX,
+                    rect.bottom + BORDER_WIDTH_PX, mBorderPaint);
+        }
+
+        // On Honeycomb+ we need to use software rendering to create the shader properly
+        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.HONEYCOMB) {
+            setLayerType(View.LAYER_TYPE_SOFTWARE, null);
+        }
+
+        // Get the overlaying gradients ready and create the ComposeShader
+        if (mValShader == null) {
+            mValShader = new LinearGradient(rect.left, rect.top, rect.left, rect.bottom,
+                    0xffffffff, 0xff000000, TileMode.CLAMP);
+        }
+        mSatShader = new LinearGradient(rect.left, rect.top, rect.right, rect.top,
+                0xffffffff, rgb, TileMode.CLAMP);
+        ComposeShader mShader = new ComposeShader(mValShader, mSatShader, Mode.MULTIPLY);
+        mSatValPaint.setShader(mShader);
+        canvas.drawRect(rect, mSatValPaint);
+
+        if (isEnabled()) {
+            Point p = satValToPoint(mSat, mVal);
+            mSatValTrackerPaint.setColor(0xff000000);
+            canvas.drawCircle(p.x, p.y, PALETTE_CIRCLE_TRACKER_RADIUS - 1f * mDensity,
+                    mSatValTrackerPaint);
+
+            mSatValTrackerPaint.setColor(0xffdddddd);
+            canvas.drawCircle(p.x, p.y, PALETTE_CIRCLE_TRACKER_RADIUS, mSatValTrackerPaint);
+        }
+    }
+
+    private void drawHuePanel(Canvas canvas) {
+        final RectF rect = mHueRect;
+
+        if (BORDER_WIDTH_PX > 0) {
+            mBorderPaint.setColor(mBorderColor);
+            canvas.drawRect(rect.left - BORDER_WIDTH_PX,
+                    rect.top - BORDER_WIDTH_PX,
+                    rect.right + BORDER_WIDTH_PX,
+                    rect.bottom + BORDER_WIDTH_PX,
+                    mBorderPaint);
+        }
+
+        if (mHueShader == null) {
+            mHueShader = new LinearGradient(rect.left, rect.top, rect.left, rect.bottom,
+                    buildHueColorArray(), null, TileMode.CLAMP);
+            mHuePaint.setShader(mHueShader);
+        }
+
+        canvas.drawRect(rect, mHuePaint);
+
+        if (isEnabled()) {
+            float rectHeight = 4 * mDensity / 2;
+
+            Point p = hueToPoint(mHue);
+
+            RectF r = new RectF();
+            r.left = rect.left - RECTANGLE_TRACKER_OFFSET;
+            r.right = rect.right + RECTANGLE_TRACKER_OFFSET;
+            r.top = p.y - rectHeight;
+            r.bottom = p.y + rectHeight;
+
+            canvas.drawRoundRect(r, 2, 2, mHueTrackerPaint);
+        }
+    }
+
+    private void drawAlphaPanel(Canvas canvas) {
+        if (!mShowAlphaPanel || mAlphaRect == null || mAlphaPattern == null) {
+            return;
+        }
+
+        final RectF rect = mAlphaRect;
+
+        if (BORDER_WIDTH_PX > 0) {
+            mBorderPaint.setColor(mBorderColor);
+            canvas.drawRect(rect.left - BORDER_WIDTH_PX,
+                    rect.top - BORDER_WIDTH_PX,
+                    rect.right + BORDER_WIDTH_PX,
+                    rect.bottom + BORDER_WIDTH_PX,
+                    mBorderPaint);
+        }
+
+        mAlphaPattern.draw(canvas);
+
+        float[] hsv = new float[] {
+                mHue, mSat, mVal
+        };
+        int color = Color.HSVToColor(hsv);
+        int acolor = Color.HSVToColor(0, hsv);
+
+        mAlphaShader = new LinearGradient(rect.left, rect.top, rect.right, rect.top,
+                color, acolor, TileMode.CLAMP);
+
+        mAlphaPaint.setShader(mAlphaShader);
+
+        canvas.drawRect(rect, mAlphaPaint);
+
+        if (isEnabled()) {
+            if (mAlphaSliderText != null && mAlphaSliderText != "") {
+                canvas.drawText(mAlphaSliderText, rect.centerX(), rect.centerY() + 4 * mDensity,
+                        mAlphaTextPaint);
+            }
+
+            float rectWidth = 4 * mDensity / 2;
+            Point p = alphaToPoint(mAlpha);
+
+            RectF r = new RectF();
+            r.left = p.x - rectWidth;
+            r.right = p.x + rectWidth;
+            r.top = rect.top - RECTANGLE_TRACKER_OFFSET;
+            r.bottom = rect.bottom + RECTANGLE_TRACKER_OFFSET;
+
+            canvas.drawRoundRect(r, 2, 2, mHueTrackerPaint);
+        }
+    }
+
+    private Point hueToPoint(float hue) {
+        final RectF rect = mHueRect;
+        final float height = rect.height();
+
+        Point p = new Point();
+        p.y = (int) (height - (hue * height / 360f) + rect.top);
+        p.x = (int) rect.left;
+        return p;
+    }
+
+    private Point satValToPoint(float sat, float val) {
+
+        final RectF rect = mSatValRect;
+        final float height = rect.height();
+        final float width = rect.width();
+
+        Point p = new Point();
+
+        p.x = (int) (sat * width + rect.left);
+        p.y = (int) ((1f - val) * height + rect.top);
+
+        return p;
+    }
+
+    private Point alphaToPoint(int alpha) {
+        final RectF rect = mAlphaRect;
+        final float width = rect.width();
+
+        Point p = new Point();
+        p.x = (int) (width - (alpha * width / 0xff) + rect.left);
+        p.y = (int) rect.top;
+        return p;
+    }
+
+    private float[] pointToSatVal(float x, float y) {
+        final RectF rect = mSatValRect;
+        float[] result = new float[2];
+        float width = rect.width();
+        float height = rect.height();
+
+        if (x < rect.left) {
+            x = 0f;
+        } else if (x > rect.right) {
+            x = width;
+        } else {
+            x = x - rect.left;
+        }
+
+        if (y < rect.top) {
+            y = 0f;
+        } else if (y > rect.bottom) {
+            y = height;
+        } else {
+            y = y - rect.top;
+        }
+
+        result[0] = 1.f / width * x;
+        result[1] = 1.f - (1.f / height * y);
+        return result;
+    }
+
+    private float pointToHue(float y) {
+        final RectF rect = mHueRect;
+        float height = rect.height();
+
+        if (y < rect.top) {
+            y = 0f;
+        } else if (y > rect.bottom) {
+            y = height;
+        } else {
+            y = y - rect.top;
+        }
+        return 360f - (y * 360f / height);
+    }
+
+    private int pointToAlpha(int x) {
+        final RectF rect = mAlphaRect;
+        final int width = (int) rect.width();
+
+        if (x < rect.left) {
+            x = 0;
+        } else if (x > rect.right) {
+            x = width;
+        } else {
+            x = x - (int) rect.left;
+        }
+        return 0xff - (x * 0xff / width);
+    }
+
+    @Override
+    public boolean onTrackballEvent(MotionEvent event) {
+        if (!isEnabled()) {
+            return super.onTrackballEvent(event);
+        }
+
+        float x = event.getX();
+        float y = event.getY();
+        boolean update = false;
+
+        if (event.getAction() == MotionEvent.ACTION_MOVE) {
+            switch (mLastTouchedPanel) {
+                case PANEL_SAT_VAL:
+                    float sat,
+                    val;
+                    sat = mSat + x / 50f;
+                    val = mVal - y / 50f;
+                    if (sat < 0f) {
+                        sat = 0f;
+                    } else if (sat > 1f) {
+                        sat = 1f;
+                    }
+
+                    if (val < 0f) {
+                        val = 0f;
+                    } else if (val > 1f) {
+                        val = 1f;
+                    }
+                    mSat = sat;
+                    mVal = val;
+                    update = true;
+                    break;
+                case PANEL_HUE:
+                    float hue = mHue - y * 10f;
+                    if (hue < 0f) {
+                        hue = 0f;
+                    } else if (hue > 360f) {
+                        hue = 360f;
+                    }
+                    mHue = hue;
+                    update = true;
+                    break;
+                case PANEL_ALPHA:
+                    if (!mShowAlphaPanel || mAlphaRect == null) {
+                        update = false;
+                    } else {
+                        int alpha = (int) (mAlpha - x * 10);
+                        if (alpha < 0) {
+                            alpha = 0;
+                        } else if (alpha > 0xff) {
+                            alpha = 0xff;
+                        }
+                        mAlpha = alpha;
+                        update = true;
+                    }
+                    break;
+            }
+        }
+
+        if (update) {
+            if (mListener != null) {
+                mListener.onColorChanged(Color.HSVToColor(mAlpha, new float[] {
+                        mHue, mSat, mVal
+                }));
+            }
+            invalidate();
+            return true;
+        }
+        return super.onTrackballEvent(event);
+    }
+
+    @Override
+    public boolean onTouchEvent(MotionEvent event) {
+        if (!isEnabled()) {
+            return super.onTouchEvent(event);
+        }
+
+        boolean update = false;
+
+        switch (event.getAction()) {
+            case MotionEvent.ACTION_DOWN:
+                mStartTouchPoint = new Point((int) event.getX(), (int) event.getY());
+                update = moveTrackersIfNeeded(event);
+                break;
+            case MotionEvent.ACTION_MOVE:
+                update = moveTrackersIfNeeded(event);
+                break;
+            case MotionEvent.ACTION_UP:
+                mStartTouchPoint = null;
+                update = moveTrackersIfNeeded(event);
+                break;
+        }
+
+        if (update) {
+            requestFocus();
+            if (mListener != null) {
+                mListener.onColorChanged(Color.HSVToColor(mAlpha, new float[] {
+                        mHue, mSat, mVal
+                }));
+            }
+            invalidate();
+            return true;
+        }
+
+        return super.onTouchEvent(event);
+    }
+
+    private boolean moveTrackersIfNeeded(MotionEvent event) {
+
+        if (mStartTouchPoint == null)
+            return false;
+
+        boolean update = false;
+        int startX = mStartTouchPoint.x;
+        int startY = mStartTouchPoint.y;
+
+        if (mHueRect.contains(startX, startY)) {
+            mLastTouchedPanel = PANEL_HUE;
+            mHue = pointToHue(event.getY());
+            update = true;
+        } else if (mSatValRect.contains(startX, startY)) {
+            mLastTouchedPanel = PANEL_SAT_VAL;
+            float[] result = pointToSatVal(event.getX(), event.getY());
+            mSat = result[0];
+            mVal = result[1];
+            update = true;
+        } else if (mAlphaRect != null && mAlphaRect.contains(startX, startY)) {
+            mLastTouchedPanel = PANEL_ALPHA;
+            mAlpha = pointToAlpha((int) event.getX());
+            update = true;
+        }
+
+        return update;
+    }
+
+    @Override
+    protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {
+        int width = 0;
+        int height = 0;
+
+        int widthMode = MeasureSpec.getMode(widthMeasureSpec);
+        int heightMode = MeasureSpec.getMode(heightMeasureSpec);
+
+        int widthAllowed = MeasureSpec.getSize(widthMeasureSpec);
+        int heightAllowed = MeasureSpec.getSize(heightMeasureSpec);
+
+        widthAllowed = chooseWidth(widthMode, widthAllowed);
+        heightAllowed = chooseHeight(heightMode, heightAllowed);
+
+        if (!mShowAlphaPanel) {
+            height = (int) (widthAllowed - PANEL_SPACING - HUE_PANEL_WIDTH);
+
+            // If calculated height (based on the width) is more than the
+            // allowed height.
+            if (height > heightAllowed && heightMode != MeasureSpec.UNSPECIFIED) {
+                height = heightAllowed;
+                width = (int) (height + PANEL_SPACING + HUE_PANEL_WIDTH);
+            } else {
+                width = widthAllowed;
+            }
+        } else {
+
+            width = (int) (heightAllowed - ALPHA_PANEL_HEIGHT + HUE_PANEL_WIDTH);
+
+            if (width > widthAllowed && widthMode != MeasureSpec.UNSPECIFIED) {
+                width = widthAllowed;
+                height = (int) (widthAllowed - HUE_PANEL_WIDTH + ALPHA_PANEL_HEIGHT);
+            } else {
+                height = heightAllowed;
+            }
+        }
+        setMeasuredDimension(width, height);
+    }
+
+    private int chooseWidth(int mode, int size) {
+        if (mode == MeasureSpec.AT_MOST || mode == MeasureSpec.EXACTLY) {
+            return size;
+        } else { // (mode == MeasureSpec.UNSPECIFIED)
+            return getPrefferedWidth();
+        }
+    }
+
+    private int chooseHeight(int mode, int size) {
+        if (mode == MeasureSpec.AT_MOST || mode == MeasureSpec.EXACTLY) {
+            return size;
+        } else { // (mode == MeasureSpec.UNSPECIFIED)
+            return getPrefferedHeight();
+        }
+    }
+
+    private int getPrefferedWidth() {
+        int width = getPrefferedHeight();
+        if (mShowAlphaPanel) {
+            width -= (PANEL_SPACING + ALPHA_PANEL_HEIGHT);
+        }
+        return (int) (width + HUE_PANEL_WIDTH + PANEL_SPACING);
+    }
+
+    private int getPrefferedHeight() {
+        int height = (int) (200 * mDensity);
+        if (mShowAlphaPanel) {
+            height += PANEL_SPACING + ALPHA_PANEL_HEIGHT;
+        }
+        return height;
+    }
+
+    @Override
+    protected void onSizeChanged(int w, int h, int oldw, int oldh) {
+        super.onSizeChanged(w, h, oldw, oldh);
+
+        mDrawingRect = new RectF();
+        mDrawingRect.left = mDrawingOffset + getPaddingLeft();
+        mDrawingRect.right = w - mDrawingOffset - getPaddingRight();
+        mDrawingRect.top = mDrawingOffset + getPaddingTop();
+        mDrawingRect.bottom = h - mDrawingOffset - getPaddingBottom();
+
+        setUpSatValRect();
+        setUpHueRect();
+        setUpAlphaRect();
+    }
+
+    private void setUpSatValRect() {
+        final RectF dRect = mDrawingRect;
+        float panelSide = dRect.height() - BORDER_WIDTH_PX * 2;
+
+        if (mShowAlphaPanel) {
+            panelSide -= PANEL_SPACING + ALPHA_PANEL_HEIGHT;
+        }
+
+        float left = dRect.left + BORDER_WIDTH_PX;
+        float top = dRect.top + BORDER_WIDTH_PX;
+        float bottom = top + panelSide;
+        float right = left + panelSide;
+        mSatValRect = new RectF(left, top, right, bottom);
+    }
+
+    private void setUpHueRect() {
+        final RectF dRect = mDrawingRect;
+
+        float left = dRect.right - HUE_PANEL_WIDTH + BORDER_WIDTH_PX;
+        float top = dRect.top + BORDER_WIDTH_PX;
+        float bottom = dRect.bottom - BORDER_WIDTH_PX
+                - (mShowAlphaPanel ? (PANEL_SPACING + ALPHA_PANEL_HEIGHT) : 0);
+        float right = dRect.right - BORDER_WIDTH_PX;
+
+        mHueRect = new RectF(left, top, right, bottom);
+    }
+
+    private void setUpAlphaRect() {
+        if (!mShowAlphaPanel) {
+            return;
+        }
+
+        final RectF dRect = mDrawingRect;
+        float left = dRect.left + BORDER_WIDTH_PX;
+        float top = dRect.bottom - ALPHA_PANEL_HEIGHT + BORDER_WIDTH_PX;
+        float bottom = dRect.bottom - BORDER_WIDTH_PX;
+        float right = dRect.right - BORDER_WIDTH_PX;
+
+        mAlphaRect = new RectF(left, top, right, bottom);
+        mAlphaPattern = new AlphaPatternDrawable((int) (5 * mDensity));
+        mAlphaPattern.setBounds(Math.round(mAlphaRect.left), Math
+                .round(mAlphaRect.top), Math.round(mAlphaRect.right), Math
+                .round(mAlphaRect.bottom));
+    }
+
+    /**
+     * Set a OnColorChangedListener to get notified when the color selected by
+     * the user has changed.
+     *
+     * @param listener
+     */
+    public void setOnColorChangedListener(OnColorChangedListener listener) {
+        mListener = listener;
+    }
+
+    /**
+     * Set the color of the border surrounding all panels.
+     *
+     * @param color
+     */
+    public void setBorderColor(int color) {
+        mBorderColor = color;
+        invalidate();
+    }
+
+    /**
+     * Get the color of the border surrounding all panels.
+     */
+    public int getBorderColor() {
+        return mBorderColor;
+    }
+
+    /**
+     * Get the current color this view is showing.
+     *
+     * @return the current color.
+     */
+    public int getColor() {
+        return Color.HSVToColor(mAlpha, new float[] {
+                mHue, mSat, mVal
+        });
+    }
+
+    /**
+     * Set the color the view should show.
+     *
+     * @param color The color that should be selected.
+     */
+    public void setColor(int color) {
+        setColor(color, false);
+    }
+
+    /**
+     * Set the color this view should show.
+     *
+     * @param color The color that should be selected.
+     * @param callback If you want to get a callback to your
+     *            OnColorChangedListener.
+     */
+    public void setColor(int color, boolean callback) {
+        int alpha = Color.alpha(color);
+        int red = Color.red(color);
+        int blue = Color.blue(color);
+        int green = Color.green(color);
+        float[] hsv = new float[3];
+
+        Color.RGBToHSV(red, green, blue, hsv);
+        mAlpha = alpha;
+        mHue = hsv[0];
+        mSat = hsv[1];
+        mVal = hsv[2];
+
+        if (callback && mListener != null) {
+            mListener.onColorChanged(Color.HSVToColor(mAlpha, new float[] {
+                    mHue, mSat, mVal
+            }));
+        }
+        invalidate();
+    }
+
+    /**
+     * Get the drawing offset of the color picker view. The drawing offset is
+     * the distance from the side of a panel to the side of the view minus the
+     * padding. Useful if you want to have your own panel below showing the
+     * currently selected color and want to align it perfectly.
+     *
+     * @return The offset in pixels.
+     */
+    public float getDrawingOffset() {
+        return mDrawingOffset;
+    }
+
+    /**
+     * Set if the user is allowed to adjust the alpha panel. Default is false.
+     * If it is set to false no alpha will be set.
+     *
+     * @param visible
+     */
+    public void setAlphaSliderVisible(boolean visible) {
+        if (mShowAlphaPanel != visible) {
+            mShowAlphaPanel = visible;
+
+            /*
+             * Reset all shader to force a recreation. Otherwise they will not
+             * look right after the size of the view has changed.
+             */
+            mValShader = null;
+            mSatShader = null;
+            mHueShader = null;
+            mAlphaShader = null;
+            requestLayout();
+        }
+
+    }
+
+    public boolean isAlphaSliderVisible() {
+        return mShowAlphaPanel;
+    }
+
+    public void setSliderTrackerColor(int color) {
+        mSliderTrackerColor = color;
+        mHueTrackerPaint.setColor(mSliderTrackerColor);
+        invalidate();
+    }
+
+    public int getSliderTrackerColor() {
+        return mSliderTrackerColor;
+    }
+
+    /**
+     * Set the text that should be shown in the alpha slider. Set to null to
+     * disable text.
+     *
+     * @param res string resource id.
+     */
+    public void setAlphaSliderText(int res) {
+        String text = getContext().getString(res);
+        setAlphaSliderText(text);
+    }
+
+    /**
+     * Set the text that should be shown in the alpha slider. Set to null to
+     * disable text.
+     *
+     * @param text Text that should be shown.
+     */
+    public void setAlphaSliderText(String text) {
+        mAlphaSliderText = text;
+        invalidate();
+    }
+
+    /**
+     * Get the current value of the text that will be shown in the alpha slider.
+     *
+     * @return
+     */
+    public String getAlphaSliderText() {
+        return mAlphaSliderText;
+    }
+}
diff --git a/src/com/android/mail/preferences/notifications/FolderNotificationLightPreference.java b/src/com/android/mail/preferences/notifications/FolderNotificationLightPreference.java
new file mode 100644
index 000000000..d1665c028
--- /dev/null
+++ b/src/com/android/mail/preferences/notifications/FolderNotificationLightPreference.java
@@ -0,0 +1,306 @@
+/*
+ * Copyright (C) 2015 The CyanogenMod Project
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.android.mail.preferences.notifications;
+
+import android.app.AlertDialog;
+import android.app.Dialog;
+import android.content.Context;
+import android.content.DialogInterface;
+import android.content.res.Resources;
+import android.graphics.drawable.ShapeDrawable;
+import android.graphics.drawable.shapes.RectShape;
+import android.preference.DialogPreference;
+import android.text.TextUtils;
+import android.util.AttributeSet;
+import android.view.View;
+import android.widget.ImageView;
+import android.widget.TextView;
+
+import com.android.mail.R;
+
+public class FolderNotificationLightPreference extends DialogPreference {
+
+    public static final int DEFAULT_TIME = 1000;
+    public static final int DEFAULT_COLOR = 0xffffff;
+
+    private View mLightsStatusView;
+    private View mLightsDefaultView;
+    private ImageView mLightColorView;
+    private TextView mOnValueView;
+    private TextView mOffValueView;
+
+    private boolean mOn;
+    private int mColorValue;
+    private int mOnValue;
+    private int mOffValue;
+    private boolean mOnOffChangeable;
+
+    private Resources mResources;
+
+    /**
+     * @param context
+     * @param attrs
+     */
+    public FolderNotificationLightPreference(Context context, AttributeSet attrs) {
+        super(context, attrs);
+        mOn = false;
+        mColorValue = DEFAULT_COLOR;
+        mOnValue = DEFAULT_TIME;
+        mOffValue = DEFAULT_TIME;
+        mOnOffChangeable = true;
+        init();
+    }
+
+    /**
+     * @param context
+     * @param color
+     * @param onValue
+     * @param offValue
+     */
+    public FolderNotificationLightPreference(Context context, int color,
+            int onValue, int offValue) {
+        super(context, null);
+        mOn = false;
+        mColorValue = color;
+        mOnValue = onValue;
+        mOffValue = offValue;
+        mOnOffChangeable = true;
+        init();
+    }
+
+    /**
+     * @param context
+     * @param color
+     * @param onValue
+     * @param offValue
+     */
+    public FolderNotificationLightPreference(Context context, int color, int onValue,
+            int offValue, boolean onOffChangeable) {
+        super(context, null);
+        mOn = false;
+        mColorValue = color;
+        mOnValue = onValue;
+        mOffValue = offValue;
+        mOnOffChangeable = onOffChangeable;
+        init();
+    }
+
+    private void init() {
+        setLayoutResource(R.layout.preference_folder_notification_light);
+        mResources = getContext().getResources();
+    }
+
+    public void onStart() {
+        LightSettingsDialog d = (LightSettingsDialog) getDialog();
+        if (d != null) {
+            d.onStart();
+        }
+    }
+
+    public void onStop() {
+        LightSettingsDialog d = (LightSettingsDialog) getDialog();
+        if (d != null) {
+            d.onStop();
+        }
+    }
+
+    @Override
+    protected void onBindView(View view) {
+        super.onBindView(view);
+
+        mLightsStatusView = view.findViewById(R.id.lights_status);
+        mLightsDefaultView = view.findViewById(R.id.lights_default);
+        mLightColorView = (ImageView) view.findViewById(R.id.light_color);
+        mOnValueView = (TextView) view.findViewById(R.id.textViewTimeOnValue);
+        mOffValueView = (TextView) view.findViewById(R.id.textViewTimeOffValue);
+
+        // Hide the summary text - it takes up too much space on a low res device
+        // We use it for storing the package name for the longClickListener
+        TextView tView = (TextView) view.findViewById(android.R.id.summary);
+        tView.setVisibility(View.GONE);
+
+        updatePreferenceViews();
+    }
+
+    private void updatePreferenceViews() {
+        final int width = (int) mResources.getDimension(R.dimen.notification_lights_button_width);
+        final int height = (int) mResources.getDimension(R.dimen.notification_lights_button_height);
+
+        if (mLightColorView != null) {
+            mLightColorView.setEnabled(true);
+            // adjust if necessary to prevent material whiteout
+            final int imageColor = ((mColorValue & 0xF0F0F0) == 0xF0F0F0) ?
+                    (mColorValue - 0x101010) : mColorValue;
+            mLightColorView.setImageDrawable(createRectShape(width, height,
+                    0xFF000000 + imageColor));
+        }
+        if (mOnValueView != null) {
+            mOnValueView.setText(mapLengthValue(mOnValue));
+        }
+        if (mOffValueView != null) {
+            if (mOnValue == 1) {
+                mOffValueView.setVisibility(View.GONE);
+            } else {
+                mOffValueView.setVisibility(View.VISIBLE);
+            }
+            mOffValueView.setText(mapSpeedValue(mOffValue));
+        }
+
+        if (mLightsStatusView != null) {
+            mLightsStatusView.setVisibility(mOn ? View.VISIBLE : View.GONE);
+        }
+        if (mLightsDefaultView != null) {
+            mLightsDefaultView.setVisibility(!mOn ? View.VISIBLE : View.GONE);
+        }
+    }
+
+    protected Dialog createDialog() {
+        final LightSettingsDialog d = new LightSettingsDialog(getContext(), mOn,
+                0xFF000000 + mColorValue, mOnValue, mOffValue, mOnOffChangeable);
+        d.setAlphaSliderVisible(false);
+
+        d.setButton(AlertDialog.BUTTON_POSITIVE, mResources.getString(android.R.string.ok),
+                new DialogInterface.OnClickListener() {
+            @Override
+            public void onClick(DialogInterface dialog, int which) {
+                mOn = d.getEnabled();
+                mColorValue =  d.getColor() - 0xFF000000; // strip alpha, led does not support it
+                mOnValue = d.getPulseSpeedOn();
+                mOffValue = d.getPulseSpeedOff();
+                updatePreferenceViews();
+                callChangeListener(mOn
+                        ? TextUtils.join("|", new Integer[]{mColorValue, mOnValue, mOffValue})
+                        : "");
+            }
+        });
+        d.setButton(AlertDialog.BUTTON_NEGATIVE, mResources.getString(R.string.cancel),
+                new DialogInterface.OnClickListener() {
+            @Override
+            public void onClick(DialogInterface dialog, int which) {
+            }
+        });
+
+        return d;
+    }
+
+    public boolean getOn() {
+        return mOn;
+    }
+
+    public void setOn(boolean on) {
+        mOn = on;
+        updatePreferenceViews();
+    }
+
+    public int getColor() {
+        return mColorValue;
+    }
+
+    public void setColor(int color) {
+        mColorValue = color;
+        updatePreferenceViews();
+    }
+
+    public void setOnValue(int value) {
+        mOnValue = value;
+        updatePreferenceViews();
+    }
+
+    public int getOnValue() {
+        return mOnValue;
+    }
+
+    public void setOffValue(int value) {
+        mOffValue = value;
+        updatePreferenceViews();
+    }
+
+    public int getOffValue() {
+        return mOffValue;
+    }
+
+    public void setAllValues(int color, int onValue, int offValue) {
+        mColorValue = color;
+        mOnValue = onValue;
+        mOffValue = offValue;
+        mOnOffChangeable = true;
+        updatePreferenceViews();
+    }
+
+    public void setAllValues(int color, int onValue, int offValue, boolean onOffChangeable) {
+        mColorValue = color;
+        mOnValue = onValue;
+        mOffValue = offValue;
+        mOnOffChangeable = onOffChangeable;
+        updatePreferenceViews();
+    }
+
+    public void setOnOffValue(int onValue, int offValue) {
+        mOnValue = onValue;
+        mOffValue = offValue;
+        updatePreferenceViews();
+    }
+
+    public void setOnOffChangeable(boolean value) {
+        mOnOffChangeable = value;
+    }
+
+    /**
+     * Utility methods
+     */
+    private static ShapeDrawable createRectShape(int width, int height, int color) {
+        ShapeDrawable shape = new ShapeDrawable(new RectShape());
+        shape.setIntrinsicHeight(height);
+        shape.setIntrinsicWidth(width);
+        shape.getPaint().setColor(color);
+        return shape;
+    }
+
+    private String mapLengthValue(Integer time) {
+        if (time == DEFAULT_TIME) {
+            return getContext().getString(R.string.default_time);
+        }
+
+        String[] timeNames = mResources.getStringArray(R.array.notification_pulse_length_entries);
+        String[] timeValues = mResources.getStringArray(R.array.notification_pulse_length_values);
+
+        for (int i = 0; i < timeValues.length; i++) {
+            if (Integer.decode(timeValues[i]).equals(time)) {
+                return timeNames[i];
+            }
+        }
+
+        return getContext().getString(R.string.custom_time);
+    }
+
+    private String mapSpeedValue(Integer time) {
+        if (time == DEFAULT_TIME) {
+            return getContext().getString(R.string.default_time);
+        }
+
+        String[] timeNames = mResources.getStringArray(R.array.notification_pulse_speed_entries);
+        String[] timeValues = mResources.getStringArray(R.array.notification_pulse_speed_values);
+
+        for (int i = 0; i < timeValues.length; i++) {
+            if (Integer.decode(timeValues[i]).equals(time)) {
+                return timeNames[i];
+            }
+        }
+
+        return getContext().getString(R.string.custom_time);
+    }
+}
diff --git a/src/com/android/mail/preferences/notifications/LightSettingsDialog.java b/src/com/android/mail/preferences/notifications/LightSettingsDialog.java
new file mode 100644
index 000000000..a00541e1a
--- /dev/null
+++ b/src/com/android/mail/preferences/notifications/LightSettingsDialog.java
@@ -0,0 +1,451 @@
+/*
+ * Copyright (C) 2010 Daniel Nilsson
+ * Copyright (C) 2015 The CyanogenMod Project
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.android.mail.preferences.notifications;
+
+import android.app.Activity;
+import android.app.AlertDialog;
+import android.app.Notification;
+import android.app.NotificationManager;
+import android.content.Context;
+import android.graphics.Color;
+import android.graphics.PixelFormat;
+import android.os.Bundle;
+import android.os.Handler;
+import android.os.Message;
+import android.text.Editable;
+import android.text.TextWatcher;
+import android.text.InputFilter;
+import android.util.Pair;
+import android.view.LayoutInflater;
+import android.view.View;
+import android.view.View.OnFocusChangeListener;
+import android.view.ViewGroup;
+import android.view.inputmethod.InputMethodManager;
+import android.widget.AdapterView;
+import android.widget.BaseAdapter;
+import android.widget.CompoundButton;
+import android.widget.CompoundButton.OnCheckedChangeListener;
+import android.widget.EditText;
+import android.widget.Spinner;
+import android.widget.SpinnerAdapter;
+import android.widget.Switch;
+import android.widget.TextView;
+
+import com.android.mail.R;
+
+import org.lineageos.internal.notification.LineageNotification;
+
+import java.util.ArrayList;
+import java.util.Locale;
+
+public class LightSettingsDialog extends AlertDialog implements
+        ColorPickerView.OnColorChangedListener, TextWatcher, OnFocusChangeListener {
+
+    private final static String STATE_KEY_COLOR = "LightSettingsDialog:color";
+    // Minimum delay between LED notification updates
+    private final static long LED_UPDATE_DELAY_MS = 250;
+
+    private Switch mSwitch;
+
+    private ColorPickerView mColorPicker;
+
+    private EditText mHexColorInput;
+    private ColorPanelView mNewColor;
+    private Spinner mPulseSpeedOn;
+    private Spinner mPulseSpeedOff;
+    private LayoutInflater mInflater;
+
+    private NotificationManager mNotificationManager;
+
+    private boolean mReadyForLed;
+    private boolean mLedLastEnabled;
+    private int mLedLastColor;
+    private int mLedLastSpeedOn;
+    private int mLedLastSpeedOff;
+
+    private boolean mFromResume;
+
+    protected LightSettingsDialog(Context context, boolean enabled, int initialColor,
+            int initialSpeedOn, int initialSpeedOff) {
+        super(context);
+
+        init(context, enabled, initialColor, initialSpeedOn, initialSpeedOff, true);
+    }
+
+    protected LightSettingsDialog(Context context, boolean enabled, int initialColor,
+            int initialSpeedOn, int initialSpeedOff, boolean onOffChangeable) {
+        super(context);
+
+        init(context, enabled, initialColor, initialSpeedOn, initialSpeedOff, onOffChangeable);
+    }
+
+    private void init(Context context, boolean enabled, int color, int speedOn, int speedOff,
+            boolean onOffChangeable) {
+        mNotificationManager =
+                (NotificationManager) context.getSystemService(Context.NOTIFICATION_SERVICE);
+
+        mReadyForLed = false;
+        mLedLastColor = 0;
+        mLedLastEnabled = enabled;
+
+        // To fight color banding.
+        getWindow().setFormat(PixelFormat.RGBA_8888);
+        setUp(enabled, color, speedOn, speedOff, onOffChangeable);
+    }
+
+    /**
+     * This function sets up the dialog with the proper values.  If the speedOff parameters
+     * has a -1 value disable both spinners
+     *
+     * @param enabled - if the dialog is enabled
+     * @param color - the color to set
+     * @param speedOn - the flash time in ms
+     * @param speedOff - the flash length in ms
+     */
+    private void setUp(boolean enabled, int color, int speedOn,
+            int speedOff, boolean onOffChangeable) {
+        mInflater = (LayoutInflater) getContext()
+                .getSystemService(Context.LAYOUT_INFLATER_SERVICE);
+        View layout = mInflater.inflate(R.layout.dialog_notification_lights, null);
+        View title = mInflater.inflate(R.layout.dialog_notification_lights_title, null);
+
+        mColorPicker = (ColorPickerView) layout.findViewById(R.id.color_picker_view);
+        mHexColorInput = (EditText) layout.findViewById(R.id.hex_color_input);
+        mNewColor = (ColorPanelView) layout.findViewById(R.id.color_panel);
+
+        mColorPicker.setOnColorChangedListener(this);
+        mColorPicker.setColor(color, true);
+
+        mHexColorInput.setOnFocusChangeListener(this);
+        mPulseSpeedOn = (Spinner) layout.findViewById(R.id.on_spinner);
+        PulseSpeedAdapter pulseSpeedAdapter = new PulseSpeedAdapter(
+                R.array.notification_pulse_length_entries,
+                R.array.notification_pulse_length_values,
+                speedOn);
+        mPulseSpeedOn.setAdapter(pulseSpeedAdapter);
+        mPulseSpeedOn.setSelection(pulseSpeedAdapter.getTimePosition(speedOn));
+        mPulseSpeedOn.setOnItemSelectedListener(mPulseSelectionListener);
+
+        mPulseSpeedOff = (Spinner) layout.findViewById(R.id.off_spinner);
+        pulseSpeedAdapter = new PulseSpeedAdapter(R.array.notification_pulse_speed_entries,
+                R.array.notification_pulse_speed_values,
+                speedOff);
+        mPulseSpeedOff.setAdapter(pulseSpeedAdapter);
+        mPulseSpeedOff.setSelection(pulseSpeedAdapter.getTimePosition(speedOff));
+        mPulseSpeedOff.setOnItemSelectedListener(mPulseSelectionListener);
+
+        mPulseSpeedOn.setEnabled(onOffChangeable);
+        mPulseSpeedOff.setEnabled((speedOn != 1) && onOffChangeable);
+
+        setView(layout);
+
+        TextView titleView = (TextView) title.findViewById(android.R.id.title);
+        mSwitch = (Switch) title.findViewById(android.R.id.toggle);
+        titleView.setText(R.string.edit_light_settings);
+        setCustomTitle(title);
+
+        mSwitch.setChecked(enabled);
+        updateDialogEnableState(enabled);
+        mSwitch.setOnCheckedChangeListener(new OnCheckedChangeListener() {
+            @Override
+            public void onCheckedChanged(CompoundButton buttonView, boolean isChecked) {
+                updateDialogEnableState(isChecked);
+            }
+        });
+
+        mReadyForLed = true;
+        updateLed();
+    }
+
+    private void updateDialogEnableState(boolean enabled) {
+        mColorPicker.setEnabled(enabled);
+        mHexColorInput.setEnabled(enabled);
+        mNewColor.setEnabled(enabled);
+        mPulseSpeedOn.setEnabled(enabled);
+        mPulseSpeedOff.setEnabled(enabled);
+        if (enabled) {
+            updateLed();
+        } else {
+            dismissLed();
+        }
+        mLedLastEnabled = enabled;
+    }
+
+    private AdapterView.OnItemSelectedListener mPulseSelectionListener =
+            new AdapterView.OnItemSelectedListener() {
+        @Override
+        public void onItemSelected(AdapterView<?> parent, View view, int position, long id) {
+            if (parent == mPulseSpeedOn) {
+                mPulseSpeedOff.setEnabled(mPulseSpeedOn.isEnabled() && getPulseSpeedOn() != 1);
+            }
+            updateLed();
+        }
+
+        @Override
+        public void onNothingSelected(AdapterView<?> parent) {
+        }
+    };
+
+    @Override
+    public Bundle onSaveInstanceState() {
+        dismissLed();
+        mFromResume = true;
+
+        Bundle state = super.onSaveInstanceState();
+        state.putInt(STATE_KEY_COLOR, getColor());
+        return state;
+    }
+
+    @Override
+    public void onWindowFocusChanged(boolean hasFocus) {
+        if (hasFocus && mFromResume) {
+            updateLed();
+        }
+        mFromResume = false;
+    }
+
+    @Override
+    public void onRestoreInstanceState(Bundle state) {
+        updateLed();
+        super.onRestoreInstanceState(state);
+        mColorPicker.setColor(state.getInt(STATE_KEY_COLOR), true);
+    }
+
+    @Override
+    public void onStop() {
+        super.onStop();
+        dismissLed();
+    }
+
+    @Override
+    public void onStart() {
+        super.onStart();
+        updateLed();
+    }
+
+    @Override
+    public void onColorChanged(int color) {
+        final boolean hasAlpha = mColorPicker.isAlphaSliderVisible();
+        final String format = hasAlpha ? "%08x" : "%06x";
+        final int mask = hasAlpha ? 0xFFFFFFFF : 0x00FFFFFF;
+
+        mNewColor.setColor(color);
+        mHexColorInput.setText(String.format(Locale.US, format, color & mask));
+
+        updateLed();
+    }
+
+    public void setAlphaSliderVisible(boolean visible) {
+        mHexColorInput.setFilters(new InputFilter[] { new InputFilter.LengthFilter(visible ? 8 : 6) } );
+        mColorPicker.setAlphaSliderVisible(visible);
+    }
+
+    public boolean getEnabled() {
+        return mSwitch.isChecked();
+    }
+
+    public int getColor() {
+        return mColorPicker.getColor();
+    }
+
+    @SuppressWarnings("unchecked")
+    public int getPulseSpeedOn() {
+        return ((Pair<String, Integer>) mPulseSpeedOn.getSelectedItem()).second;
+    }
+
+    @SuppressWarnings("unchecked")
+    public int getPulseSpeedOff() {
+        // return 0 if 'Always on' is selected
+        return getPulseSpeedOn() == 1 ? 0 : ((Pair<String, Integer>) mPulseSpeedOff.getSelectedItem()).second;
+    }
+
+    private Handler mLedHandler = new Handler() {
+        public void handleMessage(Message msg) {
+            updateLed();
+        }
+    };
+
+    private void updateLed() {
+        if (!mReadyForLed || !mSwitch.isChecked()) {
+            return;
+        }
+
+        final boolean enabled = mSwitch.isChecked();
+        final int color = getColor() & 0xFFFFFF;
+        final int speedOn, speedOff;
+        if (mPulseSpeedOn.isEnabled()) {
+            speedOn = getPulseSpeedOn();
+            speedOff = getPulseSpeedOff();
+        } else {
+            speedOn = 1;
+            speedOff = 0;
+        }
+
+        if (mLedLastEnabled == enabled && mLedLastColor == color && mLedLastSpeedOn == speedOn
+                && mLedLastSpeedOff == speedOff) {
+            return;
+        }
+
+        // Dampen rate of consecutive LED changes
+        if (mLedHandler.hasMessages(0)) {
+            return;
+        }
+        mLedHandler.sendEmptyMessageDelayed(0, LED_UPDATE_DELAY_MS);
+
+        mLedLastEnabled = enabled;
+        mLedLastColor = color;
+        mLedLastSpeedOn = speedOn;
+        mLedLastSpeedOff = speedOff;
+
+        final Bundle b = new Bundle();
+        b.putBoolean(LineageNotification.EXTRA_FORCE_SHOW_LIGHTS, true);
+
+        final Notification.Builder builder = new Notification.Builder(getContext());
+        builder.setLights(color, speedOn, speedOff);
+        builder.setSmallIcon(R.drawable.ic_email);
+        builder.setExtras(b);
+
+        mNotificationManager.notify(R.layout.notification_pulse_time_item, builder.build());
+    }
+
+    public void dismissLed() {
+        mNotificationManager.cancel(R.layout.notification_pulse_time_item);
+        // ensure we later reset LED if dialog is
+        // hidden and then made visible
+        mLedLastColor = 0;
+    }
+
+    class PulseSpeedAdapter extends BaseAdapter implements SpinnerAdapter {
+        private ArrayList<Pair<String, Integer>> times;
+
+        public PulseSpeedAdapter(int timeNamesResource, int timeValuesResource) {
+            times = new ArrayList<Pair<String, Integer>>();
+
+            String[] time_names = getContext().getResources().getStringArray(timeNamesResource);
+            String[] time_values = getContext().getResources().getStringArray(timeValuesResource);
+
+            for(int i = 0; i < time_values.length; ++i) {
+                times.add(new Pair<String, Integer>(time_names[i], Integer.decode(time_values[i])));
+            }
+
+        }
+
+        /**
+         * This constructor apart from taking a usual time entry array takes the
+         * currently configured time value which might cause the addition of a
+         * "Custom" time entry in the spinner in case this time value does not
+         * match any of the predefined ones in the array.
+         *
+         * @param timeNamesResource The time entry names array
+         * @param timeValuesResource The time entry values array
+         * @param customTime Current time value that might be one of the
+         *            predefined values or a totally custom value
+         */
+        public PulseSpeedAdapter(int timeNamesResource, int timeValuesResource, Integer customTime) {
+            this(timeNamesResource, timeValuesResource);
+
+            // Check if we also need to add the custom value entry
+            if (getTimePosition(customTime) == -1) {
+                times.add(new Pair<String, Integer>(getContext().getResources()
+                        .getString(R.string.custom_time), customTime));
+            }
+        }
+
+        /**
+         * Will return the position of the spinner entry with the specified
+         * time. Returns -1 if there is no such entry.
+         *
+         * @param time Time in ms
+         * @return Position of entry with given time or -1 if not found.
+         */
+        public int getTimePosition(Integer time) {
+            for (int position = 0; position < getCount(); ++position) {
+                if (getItem(position).second.equals(time)) {
+                    return position;
+                }
+            }
+
+            return -1;
+        }
+
+        @Override
+        public int getCount() {
+            return times.size();
+        }
+
+        @Override
+        public Pair<String, Integer> getItem(int position) {
+            return times.get(position);
+        }
+
+        @Override
+        public long getItemId(int position) {
+            return position;
+        }
+
+        @Override
+        public View getView(int position, View view, ViewGroup parent) {
+            if (view == null) {
+                view = mInflater.inflate(R.layout.notification_pulse_time_item, parent, false);
+            }
+
+            Pair<String, Integer> entry = getItem(position);
+            ((TextView) view.findViewById(R.id.textViewName)).setText(entry.first);
+
+            return view;
+        }
+    }
+
+    @Override
+    public void beforeTextChanged(CharSequence s, int start, int count, int after) {
+    }
+
+    @Override
+    public void onTextChanged(CharSequence s, int start, int before, int count) {
+    }
+
+    @Override
+    public void afterTextChanged(Editable s) {
+        String hexColor = mHexColorInput.getText().toString();
+        if (!hexColor.isEmpty()) {
+            try {
+                int color = Color.parseColor('#' + hexColor);
+                if (!mColorPicker.isAlphaSliderVisible()) {
+                    color |= 0xFF000000; // set opaque
+                }
+                mColorPicker.setColor(color);
+                mNewColor.setColor(color);
+                updateLed();
+            } catch (IllegalArgumentException ex) {
+                // Number format is incorrect, ignore
+            }
+        }
+    }
+
+    @Override
+    public void onFocusChange(View v, boolean hasFocus) {
+        if (!hasFocus) {
+            mHexColorInput.removeTextChangedListener(this);
+            InputMethodManager inputMethodManager = (InputMethodManager) getContext()
+                    .getSystemService(Activity.INPUT_METHOD_SERVICE);
+            inputMethodManager.hideSoftInputFromWindow(v.getWindowToken(), 0);
+        } else {
+            mHexColorInput.addTextChangedListener(this);
+        }
+    }
+}
diff --git a/src/com/android/mail/providers/Attachment.java b/src/com/android/mail/providers/Attachment.java
old mode 100644
new mode 100755
index 4ed33f83e..4f8c969a7
--- a/src/com/android/mail/providers/Attachment.java
+++ b/src/com/android/mail/providers/Attachment.java
@@ -176,6 +176,13 @@ public class Attachment implements Parcelable {
     private boolean supportsDownloadAgain;
 
 
+    /**
+     * Might be null.
+     *
+     * @see MessageColumns#MESSAGE_LOAD_MORE_URI
+     */
+    public Uri messageLoadMoreUri = null;
+
     public Attachment() {
     }
 
@@ -195,6 +202,8 @@ public class Attachment implements Parcelable {
         type = in.readInt();
         flags = in.readInt();
         virtualMimeType = in.readString();
+        partId = in.readString();
+        messageLoadMoreUri = in.readParcelable(null);
     }
 
     public Attachment(Cursor cursor) {
@@ -221,6 +230,7 @@ public class Attachment implements Parcelable {
         type = cursor.getInt(cursor.getColumnIndex(AttachmentColumns.TYPE));
         flags = cursor.getInt(cursor.getColumnIndex(AttachmentColumns.FLAGS));
         virtualMimeType = cursor.getString(cursor.getColumnIndex(AttachmentColumns.VIRTUAL_MIME_TYPE));
+        partId = cursor.getString(cursor.getColumnIndex(AttachmentColumns.CONTENT_ID));
     }
 
     public Attachment(JSONObject srcJson) {
@@ -239,6 +249,7 @@ public class Attachment implements Parcelable {
         type = srcJson.optInt(AttachmentColumns.TYPE);
         flags = srcJson.optInt(AttachmentColumns.FLAGS);
         virtualMimeType = srcJson.optString(AttachmentColumns.VIRTUAL_MIME_TYPE, null);
+        partId = srcJson.optString(AttachmentColumns.CONTENT_ID, null);
     }
 
     /**
@@ -269,6 +280,7 @@ public class Attachment implements Parcelable {
             partId = cid;
             flags = 0;
             virtualMimeType = null;
+            messageLoadMoreUri = null;
 
             // insert attachment into content provider so that we can open the file
             final ContentResolver resolver = context.getContentResolver();
@@ -363,6 +375,8 @@ public class Attachment implements Parcelable {
         dest.writeInt(type);
         dest.writeInt(flags);
         dest.writeString(virtualMimeType);
+        dest.writeString(partId);
+        dest.writeParcelable(messageLoadMoreUri, flags);
     }
 
     public JSONObject toJSON() throws JSONException {
@@ -383,6 +397,7 @@ public class Attachment implements Parcelable {
         result.put(AttachmentColumns.TYPE, type);
         result.put(AttachmentColumns.FLAGS, flags);
         result.put(AttachmentColumns.VIRTUAL_MIME_TYPE, virtualMimeType);
+        result.put(AttachmentColumns.CONTENT_ID, partId);
 
         return result;
     }
@@ -431,7 +446,7 @@ public class Attachment implements Parcelable {
     }
 
     public boolean canSave() {
-        return !isSavedToExternal() && !isInstallable();
+        return !isInstallable();
     }
 
     public boolean canShare() {
@@ -463,6 +478,10 @@ public class Attachment implements Parcelable {
         return state == AttachmentState.FAILED || state == AttachmentState.SAVED;
     }
 
+    public boolean isLoadMore() {
+        return (flags & Attachment.FLAG_DUMMY_ATTACHMENT) != 0;
+    }
+
     public boolean supportsDownloadAgain() {
         return supportsDownloadAgain;
     }
@@ -542,7 +561,7 @@ public class Attachment implements Parcelable {
      * quoted text).
      */
     public boolean isInlineAttachment() {
-        return type != UIProvider.AttachmentType.STANDARD;
+        return type != UIProvider.AttachmentType.STANDARD && !TextUtils.isEmpty(partId);
     }
 
     @Override
diff --git a/src/com/android/mail/providers/Folder.java b/src/com/android/mail/providers/Folder.java
index 9b6fa5033..bd701a10c 100644
--- a/src/com/android/mail/providers/Folder.java
+++ b/src/com/android/mail/providers/Folder.java
@@ -507,13 +507,17 @@ public class Folder implements Parcelable, Comparable<Folder> {
      * Construct a folder that queries for search results. Do not call on the UI
      * thread.
      */
-    public static ObjectCursorLoader<Folder> forSearchResults(Account account, String query,
-            String queryIdentifier, Context context) {
+    public static ObjectCursorLoader<Folder> forSearchResults(Account account, Folder folder,
+            String query, String queryIdentifier, Context context) {
         if (account.searchUri != null) {
             final Uri.Builder searchBuilder = account.searchUri.buildUpon();
             searchBuilder.appendQueryParameter(UIProvider.SearchQueryParameters.QUERY, query);
             searchBuilder.appendQueryParameter(UIProvider.SearchQueryParameters.QUERY_IDENTIFER,
                     queryIdentifier);
+            if (folder != null) {
+                searchBuilder.appendQueryParameter(UIProvider.SearchQueryParameters.FOLDER_ID,
+                        String.valueOf(folder.id));
+            }
             final Uri searchUri = searchBuilder.build();
             return new ObjectCursorLoader<Folder>(context, searchUri, UIProvider.FOLDERS_PROJECTION,
                     FACTORY);
diff --git a/src/com/android/mail/providers/Message.java b/src/com/android/mail/providers/Message.java
old mode 100644
new mode 100755
index b90f76b2e..eda4e544e
--- a/src/com/android/mail/providers/Message.java
+++ b/src/com/android/mail/providers/Message.java
@@ -217,6 +217,15 @@ public class Message implements Parcelable, HtmlMessage {
      */
     public String permalink;
 
+    /**
+     * @see UIProvider.MessageColumns#MESSAGE_FLAG_LOADED
+     */
+    public int messageFlagLoaded;
+    /**
+     * @see UIProvider.MessageColumns#MESSAGE_LOAD_MORE_URI
+     */
+    public Uri loadMoreUri;
+
     private transient String[] mFromAddresses = null;
     private transient String[] mToAddresses = null;
     private transient String[] mCcAddresses = null;
@@ -298,6 +307,8 @@ public class Message implements Parcelable, HtmlMessage {
         dest.writeInt(sendingState);
         dest.writeInt(clipped ? 1 : 0);
         dest.writeString(permalink);
+        dest.writeInt(messageFlagLoaded);
+        dest.writeParcelable(loadMoreUri, 0);
     }
 
     private Message(Parcel in) {
@@ -334,6 +345,8 @@ public class Message implements Parcelable, HtmlMessage {
         sendingState = in.readInt();
         clipped = in.readInt() != 0;
         permalink = in.readString();
+        messageFlagLoaded = in.readInt();
+        loadMoreUri = in.readParcelable(null);
     }
 
     public Message() {
@@ -414,6 +427,9 @@ public class Message implements Parcelable, HtmlMessage {
             sendingState = cursor.getInt(UIProvider.MESSAGE_SENDING_STATE_COLUMN);
             clipped = cursor.getInt(UIProvider.MESSAGE_CLIPPED_COLUMN) != 0;
             permalink = cursor.getString(UIProvider.MESSAGE_PERMALINK_COLUMN);
+            messageFlagLoaded = cursor.getInt(UIProvider.MESSAGE_FLAG_LOADED_COLUMN);
+            loadMoreUri = Utils.getValidUri(
+                    cursor.getString(UIProvider.MESSAGE_LOAD_MORE_URI_COLUMN));
         }
     }
 
@@ -716,7 +732,8 @@ public class Message implements Parcelable, HtmlMessage {
             body = bodyHtml;
         } else if (!TextUtils.isEmpty(bodyText)) {
             final SpannableString spannable = new SpannableString(bodyText);
-            Linkify.addLinks(spannable, Linkify.EMAIL_ADDRESSES);
+            Linkify.addLinks(spannable, Linkify.EMAIL_ADDRESSES | Linkify.WEB_URLS
+                    | Linkify.PHONE_NUMBERS);
             body = Html.toHtml(spannable);
         }
         return body;
diff --git a/src/com/android/mail/providers/Settings.java b/src/com/android/mail/providers/Settings.java
index b17923948..ddb18ab3e 100644
--- a/src/com/android/mail/providers/Settings.java
+++ b/src/com/android/mail/providers/Settings.java
@@ -48,9 +48,9 @@ public class Settings implements Parcelable {
 
     static final Settings EMPTY_SETTINGS = new Settings();
 
-    // Max size for attachments (5 megs). Will be overridden by an account
+    // Max size for attachments (25 megs). Will be overridden by an account
     // setting, if found.
-    private static final int DEFAULT_MAX_ATTACHMENT_SIZE = 5 * 1024 * 1024;
+    private static final int DEFAULT_MAX_ATTACHMENT_SIZE = 25 * 1024 * 1024;
 
     public static final int SWIPE_SETTING_ARCHIVE = 0;
     public static final int SWIPE_SETTING_DELETE = 1;
diff --git a/src/com/android/mail/providers/UIProvider.java b/src/com/android/mail/providers/UIProvider.java
old mode 100644
new mode 100755
index 3bb6da54a..95ca30f27
--- a/src/com/android/mail/providers/UIProvider.java
+++ b/src/com/android/mail/providers/UIProvider.java
@@ -732,6 +732,11 @@ public class UIProvider {
         */
         public static final String QUERY_IDENTIFER = "query_identifier";
 
+        /**
+         * Parameter used to specify the folder to search in
+         */
+        public static final String FOLDER_ID = "folder_id";
+
         private SearchQueryParameters() {}
     }
 
@@ -1625,7 +1630,9 @@ public class UIProvider {
         MessageColumns.VIA_DOMAIN,
         MessageColumns.SENDING_STATE,
         MessageColumns.CLIPPED,
-        MessageColumns.PERMALINK
+        MessageColumns.PERMALINK,
+        MessageColumns.MESSAGE_FLAG_LOADED,
+        MessageColumns.MESSAGE_LOAD_MORE_URI
     };
 
     /** Separates attachment info parts in strings in a message. */
@@ -1674,6 +1681,8 @@ public class UIProvider {
     public static final int MESSAGE_SENDING_STATE_COLUMN = 35;
     public static final int MESSAGE_CLIPPED_COLUMN = 36;
     public static final int MESSAGE_PERMALINK_COLUMN = 37;
+    public static final int MESSAGE_FLAG_LOADED_COLUMN = 38;
+    public static final int MESSAGE_LOAD_MORE_URI_COLUMN = 39;
 
     public static final class CursorStatus {
         // The cursor is actively loading more data
@@ -1730,6 +1739,19 @@ public class UIProvider {
         public static final int CALENDAR_INVITE =   1 << 4;
     }
 
+    /**
+     * These values are also defined in the EmailContent.
+     */
+    public static final class MessageFlagLoaded {
+        public static final int FLAG_LOADED_UNLOADED = 0;
+        public static final int FLAG_LOADED_COMPLETE = 1;
+        public static final int FLAG_LOADED_PARTIAL = 2;
+        public static final int FLAG_LOADED_PARTIAL_COMPLETE = 3;
+        public static final int FLAG_LOADED_PARTIAL_FETCHING = 4;
+        public static final int FLAG_LOADED_DELETED = 5;
+        public static final int FLAG_LOADED_UNKNOWN = 6;
+    }
+
     public static final class MessageColumns {
         /**
          * This string column contains a content provider URI that points to this single message.
@@ -1904,6 +1926,17 @@ public class UIProvider {
          */
         public static final String PERMALINK = "permalink";
 
+        /**
+         * This integer column indicates the state of the message loaded
+         * and it defined in {@link MessageFlagLoaded}
+         */
+        public static final String MESSAGE_FLAG_LOADED = "messageFlagLoaded";
+
+        /**
+         * String with the content provider Uri used to request fetch entire content.
+         */
+        public static final String MESSAGE_LOAD_MORE_URI = "messageLoadMoreUri";
+
         private MessageColumns() {}
     }
 
diff --git a/src/com/android/mail/ui/AbstractActivityController.java b/src/com/android/mail/ui/AbstractActivityController.java
old mode 100644
new mode 100755
index a7de33b60..698748630
--- a/src/com/android/mail/ui/AbstractActivityController.java
+++ b/src/com/android/mail/ui/AbstractActivityController.java
@@ -26,6 +26,7 @@ import android.app.Fragment;
 import android.app.FragmentManager;
 import android.app.LoaderManager;
 import android.app.SearchManager;
+import android.content.AsyncQueryHandler;
 import android.content.ContentProviderOperation;
 import android.content.ContentResolver;
 import android.content.ContentValues;
@@ -875,9 +876,10 @@ public abstract class AbstractActivityController implements ActivityController,
      * @param intent Intent that the app was started with. This intent contains the search query.
      */
     private void fetchSearchFolder(Intent intent) {
-        final Bundle args = new Bundle(1);
+        final Bundle args = new Bundle(2);
         args.putString(ConversationListContext.EXTRA_SEARCH_QUERY, intent
                 .getStringExtra(ConversationListContext.EXTRA_SEARCH_QUERY));
+        args.putParcelable(Utils.EXTRA_FOLDER, intent.getParcelableExtra(Utils.EXTRA_FOLDER));
         mActivity.getLoaderManager().restartLoader(LOADER_SEARCH, args, mFolderCallbacks);
     }
 
@@ -2062,6 +2064,27 @@ public abstract class AbstractActivityController implements ActivityController,
         }.run(mResolver, msg.uri, values, null /* selection*/, null /* selectionArgs */);
     }
 
+    @Override
+    public void loadMore(ConversationMessage msg) {
+        if (msg != null && msg.loadMoreUri != null) {
+            LoadMoreAction action = new LoadMoreAction(mResolver, msg.loadMoreUri);
+            action.sendCommand();
+        }
+    }
+
+    private class LoadMoreAction extends AsyncQueryHandler {
+        private final Uri mLoadMoreUri;
+
+        public LoadMoreAction(ContentResolver resolver, Uri loadMoreUri) {
+            super(resolver);
+            mLoadMoreUri = loadMoreUri;
+        }
+
+        public void sendCommand() {
+            startQuery(0, null, mLoadMoreUri, null, null, null, null);
+        }
+    }
+
     @Override
     public void requestFolderRefresh() {
         if (mFolder == null) {
@@ -2247,6 +2270,7 @@ public abstract class AbstractActivityController implements ActivityController,
         intent.setAction(Intent.ACTION_SEARCH);
         intent.putExtra(ConversationListContext.EXTRA_SEARCH_QUERY, query);
         intent.putExtra(Utils.EXTRA_ACCOUNT, mAccount);
+        intent.putExtra(Utils.EXTRA_FOLDER, mFolder);
         intent.setComponent(mActivity.getComponentName());
         mSearchViewController.showSearchActionBar(
                 MaterialSearchViewController.SEARCH_VIEW_STATE_GONE);
@@ -3508,6 +3532,7 @@ public abstract class AbstractActivityController implements ActivityController,
                 case LOADER_SEARCH:
                     LogUtils.d(LOG_TAG, "LOADER_SEARCH created");
                     return Folder.forSearchResults(mAccount,
+                            (Folder) args.getParcelable(Utils.EXTRA_FOLDER),
                             args.getString(ConversationListContext.EXTRA_SEARCH_QUERY),
                             // We can just use current time as a unique identifier for this search
                             Long.toString(SystemClock.uptimeMillis()),
diff --git a/src/com/android/mail/ui/AccountFeedbackActivity.java b/src/com/android/mail/ui/AccountFeedbackActivity.java
index e3cb59275..bbcb9f5e4 100644
--- a/src/com/android/mail/ui/AccountFeedbackActivity.java
+++ b/src/com/android/mail/ui/AccountFeedbackActivity.java
@@ -17,14 +17,6 @@
 
 package com.android.mail.ui;
 
-import android.content.Intent;
-import android.net.Uri;
-import android.os.Bundle;
-import android.support.v7.app.ActionBar;
-import android.support.v7.app.AppCompatActivity;
-import android.view.Menu;
-import android.view.MenuItem;
-
 import com.android.mail.R;
 import com.android.mail.browse.ConversationAccountController;
 import com.android.mail.content.ObjectCursor;
@@ -32,12 +24,20 @@ import com.android.mail.providers.Account;
 import com.android.mail.providers.UIProvider;
 import com.android.mail.utils.Utils;
 
+import android.app.ActionBar;
+import android.app.Activity;
+import android.content.Intent;
+import android.net.Uri;
+import android.os.Bundle;
+import android.view.Menu;
+import android.view.MenuItem;
+
 /**
  * Activity that provides support for querying an {@link Account}
  * as well as showing settings/help/send feedback in the action
  * overflow menu.
  */
-public abstract class AccountFeedbackActivity extends AppCompatActivity
+public abstract class AccountFeedbackActivity extends Activity
         implements ConversationAccountController, AccountLoadCallbacks.AccountLoadCallbackListener {
     public static final String EXTRA_ACCOUNT_URI = "extra-account-uri";
 
@@ -57,7 +57,7 @@ public abstract class AccountFeedbackActivity extends AppCompatActivity
         super.onCreate(savedInstanceState);
         setContentView(R.layout.account_feedback_activity);
 
-        final ActionBar actionBar = getSupportActionBar();
+        final ActionBar actionBar = getActionBar();
         actionBar.setDisplayHomeAsUpEnabled(true);
 
         final Intent intent = getIntent();
diff --git a/src/com/android/mail/ui/AccountItemView.java b/src/com/android/mail/ui/AccountItemView.java
index 5b87f7edf..69a9457f6 100644
--- a/src/com/android/mail/ui/AccountItemView.java
+++ b/src/com/android/mail/ui/AccountItemView.java
@@ -70,15 +70,15 @@ public class AccountItemView extends LinearLayout {
      */
     public void bind(final Context context, final Account account, final boolean isCurrentAccount,
             final BitmapCache imagesCache, final ContactResolver contactResolver) {
-        if (!TextUtils.isEmpty(account.getSenderName())) {
-            mAccountDisplayName.setText(account.getSenderName());
-            mAccountAddress.setText(account.getEmailAddress());
-            mAccountAddress.setVisibility(View.VISIBLE);
-        } else if (!TextUtils.isEmpty(account.getDisplayName()) &&
+        if (!TextUtils.isEmpty(account.getDisplayName()) &&
                 !TextUtils.equals(account.getDisplayName(), account.getEmailAddress())) {
             mAccountDisplayName.setText(account.getDisplayName());
             mAccountAddress.setText(account.getEmailAddress());
             mAccountAddress.setVisibility(View.VISIBLE);
+        } else if (!TextUtils.isEmpty(account.getSenderName())) {
+            mAccountDisplayName.setText(account.getSenderName());
+            mAccountAddress.setText(account.getEmailAddress());
+            mAccountAddress.setVisibility(View.VISIBLE);
         } else {
             mAccountDisplayName.setText(account.getEmailAddress());
             mAccountAddress.setVisibility(View.GONE);
diff --git a/src/com/android/mail/ui/AddableFolderSelectorAdapter.java b/src/com/android/mail/ui/AddableFolderSelectorAdapter.java
index fb1599511..972e2cf54 100644
--- a/src/com/android/mail/ui/AddableFolderSelectorAdapter.java
+++ b/src/com/android/mail/ui/AddableFolderSelectorAdapter.java
@@ -90,7 +90,10 @@ public class AddableFolderSelectorAdapter extends FolderSelectorAdapter {
                 }
 
                 if (Folder.isType(type, UIProvider.FolderType.INBOX)
-                        || Folder.isType(type, UIProvider.FolderType.DEFAULT)) {
+                        || Folder.isType(type, UIProvider.FolderType.DEFAULT)
+                        || Folder.isType(type, UIProvider.FolderType.DRAFT)
+                        || Folder.isType(type, UIProvider.FolderType.TRASH)
+                        || Folder.isType(type, UIProvider.FolderType.SPAM)) {
                     folder[UIProvider.FOLDER_ID_COLUMN] = folderCursor
                             .getLong(UIProvider.FOLDER_ID_COLUMN);
                     folder[UIProvider.FOLDER_PERSISTENT_ID_COLUMN] = folderCursor
diff --git a/src/com/android/mail/ui/ConversationUpdater.java b/src/com/android/mail/ui/ConversationUpdater.java
old mode 100644
new mode 100755
index 745d7d2a2..9787236b7
--- a/src/com/android/mail/ui/ConversationUpdater.java
+++ b/src/com/android/mail/ui/ConversationUpdater.java
@@ -126,6 +126,12 @@ public interface ConversationUpdater extends ConversationListCallbacks {
      */
     void starMessage(ConversationMessage msg, boolean starred);
 
+    /**
+     * Try to fetch the entire content of this message. This method requires a
+     * {@link ConversationMessage} to propagate the change to the owning {@link Conversation}.
+     */
+    void loadMore(ConversationMessage msg);
+
     /**
      * Get a destructive action for selected conversations. The action corresponds to Menu item
      * identifiers, for example R.id.unread, or R.id.delete.
diff --git a/src/com/android/mail/ui/ConversationViewFragment.java b/src/com/android/mail/ui/ConversationViewFragment.java
index 0f52cc705..0ccfb8233 100644
--- a/src/com/android/mail/ui/ConversationViewFragment.java
+++ b/src/com/android/mail/ui/ConversationViewFragment.java
@@ -1255,10 +1255,7 @@ public class ConversationViewFragment extends AbstractConversationViewFragment i
 
             // Finally we handle the special keys
             if (keyCode == KeyEvent.KEYCODE_BACK && id != R.id.conversation_topmost_overlay) {
-                if (isActionUp) {
-                    mTopmostOverlay.requestFocus();
-                }
-                return true;
+                return mTopmostOverlay.requestFocus();
             } else if (keyCode == KeyEvent.KEYCODE_ENTER &&
                     id == R.id.conversation_topmost_overlay) {
                 if (isActionUp) {
diff --git a/src/com/android/mail/ui/FolderSelectionDialog.java b/src/com/android/mail/ui/FolderSelectionDialog.java
index 0e1ea1cd7..ce3a9a7b3 100644
--- a/src/com/android/mail/ui/FolderSelectionDialog.java
+++ b/src/com/android/mail/ui/FolderSelectionDialog.java
@@ -22,6 +22,7 @@ import android.app.Dialog;
 import android.app.DialogFragment;
 import android.content.DialogInterface.OnClickListener;
 import android.os.Bundle;
+import android.os.Parcelable;
 import android.view.View;
 import android.widget.AdapterView;
 
@@ -32,6 +33,7 @@ import com.android.mail.providers.Folder;
 import com.android.mail.providers.UIProvider;
 import com.android.mail.utils.LogTag;
 
+import java.util.ArrayList;
 import java.util.Arrays;
 import java.util.Collection;
 
@@ -86,7 +88,13 @@ public abstract class FolderSelectionDialog extends DialogFragment implements On
         mCurrentFolder = args.getParcelable(ARG_FOLDER_TAG);
         mAccount = args.getParcelable(ARG_ACCOUNT_TAG);
         mBatch = args.getBoolean(ARG_BATCH_TAG);
-        mTarget = Arrays.asList((Conversation[])args.getParcelableArray(ARG_TARGET_TAG));
+        mTarget = new ArrayList<>();
+        Parcelable[] temps = args.getParcelableArray(ARG_TARGET_TAG);
+        if(temps != null){
+            for(Parcelable temp:temps){
+                mTarget.add((Conversation) temp);
+            }
+        }
     }
 
     @Override
diff --git a/src/com/android/mail/ui/MaterialSearchSuggestionsList.java b/src/com/android/mail/ui/MaterialSearchSuggestionsList.java
index e40d42ff5..c4f4224b3 100644
--- a/src/com/android/mail/ui/MaterialSearchSuggestionsList.java
+++ b/src/com/android/mail/ui/MaterialSearchSuggestionsList.java
@@ -134,6 +134,8 @@ public class MaterialSearchSuggestionsList extends LinearLayout
                         result.add(new SuggestionItem(suggestion, iconUri));
                     } while (c.moveToNext());
                 }
+            } catch (IllegalStateException e) {
+                // db could have been closed due to cleanup, simply don't do anything.
             } finally {
                 if (c != null) {
                     c.close();
diff --git a/src/com/android/mail/ui/NestedFolderTeaserView.java b/src/com/android/mail/ui/NestedFolderTeaserView.java
index f3fe63e0e..39302ea46 100644
--- a/src/com/android/mail/ui/NestedFolderTeaserView.java
+++ b/src/com/android/mail/ui/NestedFolderTeaserView.java
@@ -277,13 +277,14 @@ public class NestedFolderTeaserView extends LinearLayout implements Conversation
             // Clear out the folder views
             mNestedFolderContainer.removeAllViews();
 
+            if (mSortedFolderHolders != null) {
             // We either show all folders if it's not over the threshold, or we show none.
-            if (mSortedFolderHolders.size() <= sCollapsedFolderThreshold || !mCollapsed) {
-                for (final FolderHolder folderHolder : mSortedFolderHolders) {
-                    mNestedFolderContainer.addView(folderHolder.getItemView());
+                if (mSortedFolderHolders.size() <= sCollapsedFolderThreshold || !mCollapsed) {
+                    for (final FolderHolder folderHolder : mSortedFolderHolders) {
+                        mNestedFolderContainer.addView(folderHolder.getItemView());
+                    }
                 }
             }
-
             updateShowMoreView();
             mListUpdated = false;
         }
diff --git a/src/com/android/mail/ui/SecureConversationViewController.java b/src/com/android/mail/ui/SecureConversationViewController.java
old mode 100644
new mode 100755
index 325ad56ce..10a7a10e6
--- a/src/com/android/mail/ui/SecureConversationViewController.java
+++ b/src/com/android/mail/ui/SecureConversationViewController.java
@@ -44,6 +44,7 @@ import com.android.mail.browse.WebViewContextMenu;
 import com.android.mail.print.PrintUtils;
 import com.android.mail.providers.Conversation;
 import com.android.mail.providers.Message;
+import com.android.mail.providers.UIProvider.MessageFlagLoaded;
 import com.android.mail.utils.ConversationViewUtils;
 
 /**
@@ -212,9 +213,14 @@ public class SecureConversationViewController implements
         mSnapHeaderView.unbind();
         mSnapHeaderView.bind(item, false);
 
-        if (mMessage.hasAttachments) {
+        if (mMessage.hasAttachments
+                || mMessage.messageFlagLoaded == MessageFlagLoaded.FLAG_LOADED_PARTIAL_COMPLETE) {
+            // Do not have the attachment, but the flag is partial complete, it must contains
+            // the load more placeholder, and we will show it.
             mMessageFooterView.setVisibility(View.VISIBLE);
             mMessageFooterView.bind(item, false);
+        } else {
+            mMessageFooterView.setVisibility(View.GONE);
         }
     }
 
diff --git a/src/com/android/mail/ui/SecureConversationViewFragment.java b/src/com/android/mail/ui/SecureConversationViewFragment.java
index 7c8038035..c33622596 100644
--- a/src/com/android/mail/ui/SecureConversationViewFragment.java
+++ b/src/com/android/mail/ui/SecureConversationViewFragment.java
@@ -157,8 +157,8 @@ public class SecureConversationViewFragment extends AbstractConversationViewFrag
     @Override
     public void setupConversationHeaderView(ConversationViewHeader headerView) {
         headerView.setCallbacks(this, this, getListController());
-        headerView.setFolders(mConversation);
         headerView.setSubject(mConversation.subject);
+        headerView.setFolders(mConversation);
         headerView.setStarred(mConversation.starred);
     }
 
diff --git a/src/com/android/mail/ui/SwipeableListView.java b/src/com/android/mail/ui/SwipeableListView.java
index 39429d03b..6adad0475 100644
--- a/src/com/android/mail/ui/SwipeableListView.java
+++ b/src/com/android/mail/ui/SwipeableListView.java
@@ -170,14 +170,15 @@ public class SwipeableListView extends ListView implements Callback, OnScrollLis
         if (mScrolling) {
             return super.onInterceptTouchEvent(ev);
         } else {
-            return (!mPreventSwipesEntirely && mSwipeHelper.onInterceptTouchEvent(ev))
-                    || super.onInterceptTouchEvent(ev);
+            return (mEnableSwipe && !mPreventSwipesEntirely
+                    && mSwipeHelper.onInterceptTouchEvent(ev)) || super.onInterceptTouchEvent(ev);
         }
     }
 
     @Override
     public boolean onTouchEvent(MotionEvent ev) {
-        return (!mPreventSwipesEntirely && mSwipeHelper.onTouchEvent(ev)) || super.onTouchEvent(ev);
+        return (mEnableSwipe && !mPreventSwipesEntirely
+                && mSwipeHelper.onTouchEvent(ev)) || super.onTouchEvent(ev);
     }
 
     @Override
diff --git a/src/com/android/mail/ui/SystemFolderSelectorAdapter.java b/src/com/android/mail/ui/SystemFolderSelectorAdapter.java
index 57d2fc362..a28084400 100644
--- a/src/com/android/mail/ui/SystemFolderSelectorAdapter.java
+++ b/src/com/android/mail/ui/SystemFolderSelectorAdapter.java
@@ -21,6 +21,7 @@ import android.content.Context;
 import android.database.Cursor;
 
 import com.android.mail.providers.Folder;
+import com.android.mail.providers.UIProvider.FolderCapabilities;
 
 import java.util.Set;
 
@@ -42,14 +43,9 @@ public final class SystemFolderSelectorAdapter extends FolderSelectorAdapter {
      */
     @Override
     protected boolean meetsRequirements(Folder folder) {
-        /*
-         * TODO: Only show inboxes until we have a way to exclude things like STARRED and SPAM,
-         * but allow other system folders.
-         */
-        return folder.isInbox();
-
-        // We only want to show system folders.
-        // return folder.supportsCapability(FolderCapabilities.CAN_ACCEPT_MOVED_MESSAGES)
-        //             && folder.isProviderFolder();
+        // We only want to show system folders with move capability.
+        return folder.isInbox() ||
+                (folder.supportsCapability(FolderCapabilities.CAN_ACCEPT_MOVED_MESSAGES)
+                && folder.isProviderFolder());
     }
 }
diff --git a/src/com/android/mail/ui/settings/BasePreferenceActivity.java b/src/com/android/mail/ui/settings/BasePreferenceActivity.java
new file mode 100644
index 000000000..c55bb4c6d
--- /dev/null
+++ b/src/com/android/mail/ui/settings/BasePreferenceActivity.java
@@ -0,0 +1,49 @@
+/*
+ * Copyright (C) 2015 The Android Open Source Project
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.android.mail.ui.settings;
+
+import android.os.Bundle;
+import android.preference.PreferenceActivity;
+import android.view.LayoutInflater;
+import android.view.View;
+import android.view.ViewGroup;
+import android.widget.Toolbar;
+
+import com.android.mail.R;
+
+public abstract class BasePreferenceActivity extends PreferenceActivity {
+
+    @Override
+    protected void onCreate(Bundle savedInstanceState) {
+        super.onCreate(savedInstanceState);
+
+        Toolbar toolbar = (Toolbar) findViewById(R.id.toolbar);
+        setActionBar(toolbar);
+    }
+
+    @Override
+    public void setContentView(int layoutResID) {
+        final LayoutInflater inflater = getLayoutInflater();
+        View contentView = inflater.inflate(R.layout.preference_activity, null);
+
+        ViewGroup contentWrapper = (ViewGroup) contentView.findViewById(android.R.id.content);
+        inflater.inflate(layoutResID, contentWrapper);
+
+        getWindow().setContentView(contentView);
+    }
+
+}
diff --git a/src/com/android/mail/ui/settings/GeneralPrefsFragment.java b/src/com/android/mail/ui/settings/GeneralPrefsFragment.java
index a5e41c91e..b47100700 100644
--- a/src/com/android/mail/ui/settings/GeneralPrefsFragment.java
+++ b/src/com/android/mail/ui/settings/GeneralPrefsFragment.java
@@ -21,17 +21,21 @@ import android.app.AlertDialog;
 import android.content.Context;
 import android.content.DialogInterface;
 import android.content.DialogInterface.OnClickListener;
+import android.database.Cursor;
 import android.os.AsyncTask;
 import android.os.Bundle;
 import android.preference.CheckBoxPreference;
 import android.preference.ListPreference;
 import android.preference.Preference;
 import android.preference.Preference.OnPreferenceChangeListener;
+import android.preference.Preference.OnPreferenceClickListener;
+import android.provider.SearchRecentSuggestions;
 import android.view.Menu;
 import android.view.MenuInflater;
 import android.view.MenuItem;
 import android.widget.Toast;
 
+import com.android.emailcommon.provider.SuggestedContact;
 import com.android.mail.preferences.MailPrefs;
 import com.android.mail.preferences.MailPrefs.PreferenceKeys;
 import com.android.mail.providers.SuggestionsProvider;
@@ -48,6 +52,7 @@ public class GeneralPrefsFragment extends MailPreferenceFragment
 
     // Keys used to reference pref widgets which don't map directly to preference entries
     static final String AUTO_ADVANCE_WIDGET = "auto-advance-widget";
+    static final String SUGGESTED_CONTACTS_CLEAR_ALL = "suggested-contacts-clear-all";
 
     static final String CALLED_FROM_TEST = "called-from-test";
 
@@ -57,8 +62,11 @@ public class GeneralPrefsFragment extends MailPreferenceFragment
     protected MailPrefs mMailPrefs;
 
     private AlertDialog mClearSearchHistoryDialog;
+    private AlertDialog mClearSuggestedContactsDialog;
 
     private ListPreference mAutoAdvance;
+    private Preference mClearAllSuggestedContacts;
+
     private static final int[] AUTO_ADVANCE_VALUES = {
             AutoAdvance.NEWER,
             AutoAdvance.OLDER,
@@ -82,6 +90,17 @@ public class GeneralPrefsFragment extends MailPreferenceFragment
         addPreferencesFromResource(R.xml.general_preferences);
 
         mAutoAdvance = (ListPreference) findPreference(AUTO_ADVANCE_WIDGET);
+
+        mClearAllSuggestedContacts = findPreference(SUGGESTED_CONTACTS_CLEAR_ALL);
+        mClearAllSuggestedContacts.setOnPreferenceClickListener(new OnPreferenceClickListener() {
+            @Override
+            public boolean onPreferenceClick(Preference preference) {
+                clearSuggestedContacts();
+                return true;
+            }
+        });
+        mClearAllSuggestedContacts.setEnabled(false);
+        computeSuggestedContacts();
     }
 
     @Override
@@ -155,6 +174,45 @@ public class GeneralPrefsFragment extends MailPreferenceFragment
                 .show();
     }
 
+    private void clearSuggestedContacts() {
+        mClearSuggestedContactsDialog = new AlertDialog.Builder(getActivity())
+            .setMessage(R.string.clear_suggested_contacts_dialog_message)
+            .setTitle(R.string.clear_suggested_contacts_dialog_title)
+            .setIconAttribute(android.R.attr.alertDialogIcon)
+            .setPositiveButton(R.string.clear, this)
+            .setNegativeButton(R.string.cancel, this)
+            .show();
+    }
+
+    private void computeSuggestedContacts() {
+        final Context context = getActivity();
+        new AsyncTask<Void, Void, Integer>() {
+            @Override
+            protected Integer doInBackground(Void... params) {
+                Cursor c = context.getContentResolver().query(
+                        SuggestedContact.CONTENT_URI,
+                        new String[] {"count(*) AS count"},
+                        null,
+                        null,
+                        null);
+                try {
+                    if (c != null && c.moveToFirst()) {
+                        return c.getInt(0);
+                    }
+                } finally {
+                    if (c != null) {
+                        c.close();
+                    }
+                }
+                return 0;
+            }
+            @Override
+            protected void onPostExecute(Integer result) {
+                mClearAllSuggestedContacts.setEnabled(result > 0);
+            }
+        }.execute();
+    }
+
 
     @Override
     public void onClick(DialogInterface dialog, int which) {
@@ -176,6 +234,23 @@ public class GeneralPrefsFragment extends MailPreferenceFragment
                 Toast.makeText(getActivity(), R.string.search_history_cleared, Toast.LENGTH_SHORT)
                         .show();
             }
+        } else if (dialog.equals(mClearSuggestedContactsDialog)) {
+            if (which == DialogInterface.BUTTON_POSITIVE) {
+                final Context context = getActivity();
+                // Clear the suggested contacts in the background, as it causes a disk
+                // write.
+                new AsyncTask<Void, Void, Void>() {
+                    @Override
+                    protected Void doInBackground(Void... params) {
+                        context.getContentResolver().delete(
+                                SuggestedContact.CONTENT_URI, null, null);
+                        computeSuggestedContacts();
+                        return null;
+                    }
+                }.execute();
+                Toast.makeText(getActivity(), R.string.suggested_contacts_cleared,
+                        Toast.LENGTH_SHORT).show();
+            }
         }
     }
 
@@ -185,6 +260,9 @@ public class GeneralPrefsFragment extends MailPreferenceFragment
         if (mClearSearchHistoryDialog != null && mClearSearchHistoryDialog.isShowing()) {
             mClearSearchHistoryDialog.dismiss();
         }
+        if (mClearSuggestedContactsDialog != null && mClearSuggestedContactsDialog.isShowing()) {
+            mClearSuggestedContactsDialog.dismiss();
+        }
     }
 
     @Override
diff --git a/src/com/android/mail/ui/settings/MailPreferenceActivity.java b/src/com/android/mail/ui/settings/MailPreferenceActivity.java
index 57bb75575..348dffb46 100644
--- a/src/com/android/mail/ui/settings/MailPreferenceActivity.java
+++ b/src/com/android/mail/ui/settings/MailPreferenceActivity.java
@@ -17,14 +17,12 @@
 
 package com.android.mail.ui.settings;
 
-import android.app.ActionBar;
 import android.app.Fragment;
 import android.app.LoaderManager.LoaderCallbacks;
 import android.content.CursorLoader;
 import android.content.Loader;
 import android.database.Cursor;
 import android.os.Bundle;
-import android.preference.PreferenceActivity;
 import android.text.TextUtils;
 
 import com.android.mail.R;
@@ -37,7 +35,7 @@ import com.google.common.annotations.VisibleForTesting;
 import java.lang.ref.WeakReference;
 import java.util.List;
 
-public class MailPreferenceActivity extends PreferenceActivity {
+public class MailPreferenceActivity extends BasePreferenceActivity {
 
     public static final String PREFERENCE_FRAGMENT_ID = "preference_fragment_id";
 
@@ -51,13 +49,6 @@ public class MailPreferenceActivity extends PreferenceActivity {
     protected void onCreate(Bundle savedInstanceState) {
         super.onCreate(savedInstanceState);
 
-        final ActionBar actionBar = getActionBar();
-        if (actionBar != null) {
-            // Hide the app icon.
-            actionBar.setIcon(android.R.color.transparent);
-            actionBar.setDisplayUseLogoEnabled(false);
-        }
-
         getLoaderManager().initLoader(ACCOUNT_LOADER_ID, null, new AccountLoaderCallbacks());
     }
 
@@ -138,4 +129,12 @@ public class MailPreferenceActivity extends PreferenceActivity {
      */
     public void onBuildExtraHeaders(List<Header> target) {
     }
+
+    @Override
+    public void switchToHeader(String fragmentName, Bundle args) {
+        super.switchToHeader(fragmentName, args);
+        if (args != null && args.containsKey(MailAccountPrefsFragment.ARG_ACCOUNT_EMAIL)) {
+            showBreadCrumbs(args.getString(MailAccountPrefsFragment.ARG_ACCOUNT_EMAIL), null);
+        }
+    }
 }
diff --git a/src/com/android/mail/utils/NotificationUtils.java b/src/com/android/mail/utils/NotificationUtils.java
index 456d47adc..69a9cd26a 100644
--- a/src/com/android/mail/utils/NotificationUtils.java
+++ b/src/com/android/mail/utils/NotificationUtils.java
@@ -56,6 +56,7 @@ import com.android.mail.photomanager.LetterTileProvider;
 import com.android.mail.preferences.AccountPreferences;
 import com.android.mail.preferences.FolderPreferences;
 import com.android.mail.preferences.MailPrefs;
+import com.android.mail.preferences.FolderPreferences.NotificationLight;
 import com.android.mail.providers.Account;
 import com.android.mail.providers.Conversation;
 import com.android.mail.providers.Folder;
@@ -73,6 +74,8 @@ import com.google.common.collect.Lists;
 import com.google.common.collect.Sets;
 import com.google.common.io.Closeables;
 
+import org.lineageos.internal.notification.LightsCapabilities;
+
 import java.io.InputStream;
 import java.lang.ref.WeakReference;
 import java.util.ArrayList;
@@ -547,6 +550,26 @@ public class NotificationUtils {
             final Account account, boolean getAttention, boolean ignoreUnobtrusiveSetting,
             NotificationKey key, final ContactFetcher contactFetcher) {
 
+        // Check that the folder supports notifications, prior to create all the
+        // NotificationManager stuff
+        final boolean isInbox = folder.folderUri.equals(account.settings.defaultInbox);
+        final FolderPreferences folderPreferences =
+                new FolderPreferences(context, account.getAccountId(), folder, isInbox);
+
+        if (isInbox) {
+            final AccountPreferences accountPreferences =
+                    new AccountPreferences(context, account.getAccountId());
+            moveNotificationSetting(accountPreferences, folderPreferences);
+        }
+
+        if (!folderPreferences.areNotificationsEnabled()) {
+            LogUtils.i(LOG_TAG, "Notifications are disabled for this folder; not notifying");
+            // Don't notify
+            return;
+        }
+
+
+
         NotificationManagerCompat nm = NotificationManagerCompat.from(context);
 
         final NotificationMap notificationMap = getNotificationMap(context);
@@ -675,22 +698,6 @@ public class NotificationUtils {
 
             boolean eventInfoConfigured = false;
 
-            final boolean isInbox = folder.folderUri.equals(account.settings.defaultInbox);
-            final FolderPreferences folderPreferences =
-                    new FolderPreferences(context, account.getAccountId(), folder, isInbox);
-
-            if (isInbox) {
-                final AccountPreferences accountPreferences =
-                        new AccountPreferences(context, account.getAccountId());
-                moveNotificationSetting(accountPreferences, folderPreferences);
-            }
-
-            if (!folderPreferences.areNotificationsEnabled()) {
-                LogUtils.i(LOG_TAG, "Notifications are disabled for this folder; not notifying");
-                // Don't notify
-                return;
-            }
-
             if (unreadCount > 0) {
                 // How can I order this properly?
                 if (cursor.moveToNext()) {
@@ -767,26 +774,31 @@ public class NotificationUtils {
              * We do not want to notify if this is coming back from an Undo notification, hence the
              * oldWhen check.
              */
-            if (getAttention && oldWhen == 0 && hasNewConversationNotification) {
-                final AccountPreferences accountPreferences =
-                        new AccountPreferences(context, account.getAccountId());
-                if (accountPreferences.areNotificationsEnabled()) {
-                    if (vibrate) {
-                        defaults |= Notification.DEFAULT_VIBRATE;
-                    }
-
-                    notification.setSound(TextUtils.isEmpty(ringtoneUri) ? null
-                            : Uri.parse(ringtoneUri));
-                    LogUtils.i(LOG_TAG, "New email in %s vibrateWhen: %s, playing notification: %s",
-                            LogUtils.sanitizeName(LOG_TAG, account.getEmailAddress()), vibrate,
-                            ringtoneUri);
+            if (getAttention && oldWhen == 0) {
+                if (!hasNewConversationNotification) {
+                    notification.setOnlyAlertOnce(true);
+                } else if (vibrate) {
+                    defaults |= Notification.DEFAULT_VIBRATE;
                 }
+
+                notification.setSound(TextUtils.isEmpty(ringtoneUri) ? null
+                        : Uri.parse(ringtoneUri));
+                LogUtils.i(LOG_TAG, "New email in %s vibrateWhen: %s, playing notification: %s",
+                        LogUtils.sanitizeName(LOG_TAG, account.getEmailAddress()), vibrate,
+                        ringtoneUri);
             }
 
             // TODO(skennedy) Why do we do any of the above if we're just going to bail here?
             if (eventInfoConfigured) {
-                defaults |= Notification.DEFAULT_LIGHTS;
-                notification.setDefaults(defaults);
+                NotificationLight notificationLight = folderPreferences.getNotificationLight();
+                if (notificationLight.mOn && LightsCapabilities.supports(
+                        context, LightsCapabilities.LIGHTS_RGB_NOTIFICATION_LED)) {
+                    notification.setLights(notificationLight.mColor,
+                            notificationLight.mTimeOn, notificationLight.mTimeOff);
+                } else {
+                    defaults |= Notification.DEFAULT_LIGHTS;
+                    notification.setDefaults(defaults);
+                }
 
                 if (oldWhen != 0) {
                     // We do not want to display the ticker again if we are re-displaying this
@@ -1525,7 +1537,9 @@ public class NotificationUtils {
         final TextAppearanceSpan notificationSubjectSpan = new TextAppearanceSpan(
                 context, R.style.NotificationPrimaryText);
 
-        final String snippet = getMessageBodyWithoutElidedText(message);
+        String snippet = getMessageBodyWithoutElidedText(message);
+        // Remove email signatures
+        snippet = !TextUtils.isEmpty(snippet) ? snippet.replaceAll("(?ms)^-- .*", "") : "";
 
         // Change multiple newlines (with potential white space between), into a single new line
         final String collapsedSnippet =
diff --git a/src/com/android/mail/widget/BaseWidgetProvider.java b/src/com/android/mail/widget/BaseWidgetProvider.java
index bbfe1ccb1..41880da07 100644
--- a/src/com/android/mail/widget/BaseWidgetProvider.java
+++ b/src/com/android/mail/widget/BaseWidgetProvider.java
@@ -340,7 +340,6 @@ public abstract class BaseWidgetProvider extends AppWidgetProvider {
             final Intent configureIntent = new Intent(context, MailboxSelectionActivity.class);
             configureIntent.putExtra(AppWidgetManager.EXTRA_APPWIDGET_ID, appWidgetId);
             configureIntent.setData(Uri.parse(configureIntent.toUri(Intent.URI_INTENT_SCHEME)));
-            configureIntent.setFlags(Intent.FLAG_ACTIVITY_NO_HISTORY);
             PendingIntent clickIntent = PendingIntent.getActivity(context, 0, configureIntent,
                     PendingIntent.FLAG_UPDATE_CURRENT);
             remoteViews.setOnClickPendingIntent(R.id.widget_configuration, clickIntent);
-- 
2.17.0

