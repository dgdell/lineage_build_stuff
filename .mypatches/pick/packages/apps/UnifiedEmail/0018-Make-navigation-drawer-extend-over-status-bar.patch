From 5e4e494c26405c271e3b97d7f79bb02e3440138b Mon Sep 17 00:00:00 2001
From: Danny Baumann <dannybaumann@web.de>
Date: Fri, 29 Jan 2016 10:26:18 +0100
Subject: [PATCH 18/19] Make navigation drawer extend over status bar.

Change-Id: I5059efcbfaa73b323c6794ec67582a9759f21ebb
---
 res/layout/drawer_fragment.xml                |   2 +-
 res/layout/one_pane_activity.xml              |  15 +-
 res/layout/two_pane_activity.xml              |   3 +-
 res/values-land/constants.xml                 |   2 +-
 res/values/attrs.xml                          |   3 +
 res/values/strings.xml                        |   2 +
 .../mail/ui/AbstractActivityController.java   |   4 +-
 .../android/mail/ui/FolderListFragment.java   |  57 ++++++-
 .../android/mail/ui/OnePaneController.java    |  17 ++-
 .../mail/ui/ScrimInsetsFrameLayout.java       | 142 ++++++++++++++++++
 10 files changed, 235 insertions(+), 12 deletions(-)
 create mode 100644 src/com/android/mail/ui/ScrimInsetsFrameLayout.java

diff --git a/res/layout/drawer_fragment.xml b/res/layout/drawer_fragment.xml
index 298bb9fa2..9b6cf2657 100644
--- a/res/layout/drawer_fragment.xml
+++ b/res/layout/drawer_fragment.xml
@@ -17,6 +17,6 @@
 -->
 <fragment xmlns:android="http://schemas.android.com/apk/res/android"
           class="com.android.mail.ui.DrawerFragment"
-          android:tag="@string/drawer_pullout_tag"
+          android:tag="@string/folder_list_tag"
           android:layout_width="match_parent"
           android:layout_height="match_parent" />
diff --git a/res/layout/one_pane_activity.xml b/res/layout/one_pane_activity.xml
index 6705f556a..c61854c66 100644
--- a/res/layout/one_pane_activity.xml
+++ b/res/layout/one_pane_activity.xml
@@ -16,6 +16,7 @@
 -->
 
 <android.support.v4.widget.DrawerLayout xmlns:android="http://schemas.android.com/apk/res/android"
+    xmlns:app="http://schemas.android.com/apk/res-auto"
     android:id="@+id/drawer_container"
     android:layout_width="match_parent"
     android:layout_height="match_parent"
@@ -52,9 +53,19 @@
     </LinearLayout>
 
     <!--A drawer for phones: a pull-out that gives the list of folders. -->
-    <include layout="@layout/drawer_fragment"
+    <com.android.mail.ui.ScrimInsetsFrameLayout
+        android:id="@+id/drawer_scrim_layout"
         android:layout_width="@dimen/drawer_width"
         android:layout_height="match_parent"
-        android:layout_gravity="start" />
+        android:layout_gravity="start"
+        android:fitsSystemWindows="true"
+        android:tag="@string/drawer_pullout_tag"
+        app:insetForeground="#4000">
+
+        <include layout="@layout/drawer_fragment"
+            android:layout_width="match_parent"
+            android:layout_height="match_parent" />
+
+    </com.android.mail.ui.ScrimInsetsFrameLayout>
 
 </android.support.v4.widget.DrawerLayout>
diff --git a/res/layout/two_pane_activity.xml b/res/layout/two_pane_activity.xml
index de1e21f8e..13be3dad3 100644
--- a/res/layout/two_pane_activity.xml
+++ b/res/layout/two_pane_activity.xml
@@ -40,7 +40,8 @@
                 android:id="@+id/drawer"
                 android:layout_width="@dimen/two_pane_drawer_width_open"
                 android:layout_height="match_parent"
-                android:layout_gravity="left">
+                android:layout_gravity="left"
+                android:tag="@string/drawer_pullout_tag">
 
                 <include layout="@layout/drawer_fragment"
                     android:layout_width="match_parent"
diff --git a/res/values-land/constants.xml b/res/values-land/constants.xml
index 546ff53e0..b6c8dfd45 100644
--- a/res/values-land/constants.xml
+++ b/res/values-land/constants.xml
@@ -3,4 +3,4 @@
     <!-- Maximum width in characters of the senders in the thread list -->
     <integer name="senders_with_attachment_lengths">40</integer>
     <integer name="senders_lengths">42</integer>
-</resources>
\ No newline at end of file
+</resources>
diff --git a/res/values/attrs.xml b/res/values/attrs.xml
index 55fad03a0..b9e98a1f8 100644
--- a/res/values/attrs.xml
+++ b/res/values/attrs.xml
@@ -37,4 +37,7 @@
     <declare-styleable name="ConversationHeaderDrawableState">
         <attr name="state_starred" format="boolean" />
     </declare-styleable>
+    <declare-styleable name="ScrimInsetsView">
+        <attr name="insetForeground" format="reference|color" />
+    </declare-styleable>
 </resources>
diff --git a/res/values/strings.xml b/res/values/strings.xml
index 608acdbfb..7a31a60ad 100644
--- a/res/values/strings.xml
+++ b/res/values/strings.xml
@@ -1012,6 +1012,8 @@
 
     <!-- String tag identifying the drawer pullout view -->
     <string name="drawer_pullout_tag" translatable="false">drawer_pullout</string>
+    <!-- String tag identifying the folder list fragment -->
+    <string name="folder_list_tag" translatable="false">folder_list</string>
 
     <!-- Menu item that displays the help page. [CHAR LIMIT=50]-->
     <string name="help_and_info">Help</string>
diff --git a/src/com/android/mail/ui/AbstractActivityController.java b/src/com/android/mail/ui/AbstractActivityController.java
index d38539071..a3e633286 100644
--- a/src/com/android/mail/ui/AbstractActivityController.java
+++ b/src/com/android/mail/ui/AbstractActivityController.java
@@ -604,8 +604,8 @@ public abstract class AbstractActivityController implements ActivityController,
      * the controller and perform the task immediately on {@link Fragment#onActivityCreated(Bundle)}
      */
     protected FolderListFragment getFolderListFragment() {
-        final String drawerPulloutTag = mActivity.getString(R.string.drawer_pullout_tag);
-        final Fragment fragment = mFragmentManager.findFragmentByTag(drawerPulloutTag);
+        final String folderListTag = mActivity.getString(R.string.folder_list_tag);
+        final Fragment fragment = mFragmentManager.findFragmentByTag(folderListTag);
         if (isValidFragment(fragment)) {
             return (FolderListFragment) fragment;
         }
diff --git a/src/com/android/mail/ui/FolderListFragment.java b/src/com/android/mail/ui/FolderListFragment.java
index 3ac54f04d..e29e0ae7e 100644
--- a/src/com/android/mail/ui/FolderListFragment.java
+++ b/src/com/android/mail/ui/FolderListFragment.java
@@ -38,6 +38,7 @@ import android.widget.BaseAdapter;
 import android.widget.ImageView;
 import android.widget.ListAdapter;
 import android.widget.ListView;
+import android.widget.Space;
 
 import com.android.bitmap.BitmapCache;
 import com.android.bitmap.UnrefedBitmapCache;
@@ -173,6 +174,7 @@ public class FolderListFragment extends ListFragment implements
 
     /** Adapter used by the list that wraps both the folder adapter and the accounts adapter. */
     private MergedAdapter<ListAdapter> mMergedAdapter;
+    private HeaderAdapter mHeaderAdapter;
     /** Adapter containing the list of accounts. */
     private AccountsAdapter mAccountsAdapter;
     /** Adapter containing the list of folders and, optionally, headers and the wait view. */
@@ -363,6 +365,7 @@ public class FolderListFragment extends ListFragment implements
             selectedFolder = currentFolder;
         }
 
+        mHeaderAdapter = new HeaderAdapter();
         mAccountsAdapter = newAccountsAdapter();
         mFooterAdapter = new FooterAdapter();
 
@@ -420,9 +423,10 @@ public class FolderListFragment extends ListFragment implements
 
         mMergedAdapter = new MergedAdapter<>();
         if (mAccountsAdapter != null) {
-            mMergedAdapter.setAdapters(mAccountsAdapter, mFolderAdapter, mFooterAdapter);
+            mMergedAdapter.setAdapters(mHeaderAdapter, mAccountsAdapter,
+                    mFolderAdapter, mFooterAdapter);
         } else {
-            mMergedAdapter.setAdapters(mFolderAdapter, mFooterAdapter);
+            mMergedAdapter.setAdapters(mHeaderAdapter, mFolderAdapter, mFooterAdapter);
         }
 
         mFolderWatcher = new FolderWatcher(mActivity, this);
@@ -445,6 +449,12 @@ public class FolderListFragment extends ListFragment implements
         }
     }
 
+    public void setListTopPadding(int padding) {
+        if (mHeaderAdapter != null) {
+            mHeaderAdapter.setTopPadding(padding);
+        }
+    }
+
     /**
      * Set the instance variables from the arguments provided here.
      * @param args bundle of arguments with keys named ARG_*
@@ -909,8 +919,9 @@ public class FolderListFragment extends ListFragment implements
             final boolean isSelected =
                     item.isHighlighted(mSelectedFolderUri, mSelectedDrawerItemCategory);
             if (type == DrawerItem.VIEW_FOLDER) {
-                mListView.setItemChecked((mAccountsAdapter != null ?
-                        mAccountsAdapter.getCount() : 0) +
+                mListView.setItemChecked(
+                        (mAccountsAdapter != null ? mAccountsAdapter.getCount() : 0) +
+                        mHeaderAdapter.getCount() +
                         position + mListView.getHeaderViewsCount(), isSelected);
             }
             // If this is the current folder, also check to verify that the unread count
@@ -1301,6 +1312,44 @@ public class FolderListFragment extends ListFragment implements
         }
     }
 
+    private static class HeaderAdapter extends BaseAdapter {
+        private int mTopPadding;
+
+        public HeaderAdapter() {
+            mTopPadding = 0;
+        }
+
+        public void setTopPadding(int padding) {
+            if (mTopPadding != padding) {
+                mTopPadding = padding;
+                notifyDataSetChanged();
+            }
+        }
+
+        @Override
+        public int getCount() {
+            return mTopPadding == 0 ? 0 : 1;
+        }
+
+        @Override
+        public Object getItem(int position) {
+            return null;
+        }
+
+        @Override
+        public long getItemId(int position) {
+            return 0;
+        }
+
+        @Override
+        public View getView(int position, View convertView, ViewGroup parent) {
+            final Space space = convertView == null
+                    ? new Space(parent.getContext()) : (Space) convertView;
+            space.setMinimumHeight(mTopPadding);
+            return space;
+        }
+    }
+
     protected static class AccountsAdapter extends BaseAdapter {
 
         private List<DrawerItem> mAccounts;
diff --git a/src/com/android/mail/ui/OnePaneController.java b/src/com/android/mail/ui/OnePaneController.java
index ef42ab9b0..80cc258ee 100644
--- a/src/com/android/mail/ui/OnePaneController.java
+++ b/src/com/android/mail/ui/OnePaneController.java
@@ -24,12 +24,14 @@ import android.app.Fragment;
 import android.app.FragmentManager;
 import android.app.FragmentTransaction;
 import android.content.Intent;
+import android.graphics.Rect;
 import android.os.Bundle;
 import android.support.annotation.LayoutRes;
 import android.support.v4.widget.DrawerLayout;
 import android.view.Gravity;
 import android.view.KeyEvent;
 import android.view.View;
+import android.view.ViewGroup;
 import android.widget.ListView;
 
 import com.android.mail.ConversationListContext;
@@ -46,7 +48,8 @@ import com.android.mail.utils.Utils;
  * limited. This controller also does the layout, since the layout is simpler in the one pane case.
  */
 
-public final class OnePaneController extends AbstractActivityController {
+public final class OnePaneController extends AbstractActivityController implements
+        ScrimInsetsFrameLayout.OnInsetsCallback {
     /** Key used to store {@link #mLastConversationListTransactionId} */
     private static final String CONVERSATION_LIST_TRANSACTION_KEY = "conversation-list-transaction";
     /** Key used to store {@link #mLastConversationTransactionId}. */
@@ -181,6 +184,10 @@ public final class OnePaneController extends AbstractActivityController {
         // CV is initially GONE on 1-pane (mode changes trigger visibility changes)
         mActivity.findViewById(R.id.conversation_pager).setVisibility(View.GONE);
 
+        ScrimInsetsFrameLayout insetsLayout =
+                (ScrimInsetsFrameLayout) mActivity.findViewById(R.id.drawer_scrim_layout);
+        insetsLayout.setOnInsetsCallback(this);
+
         // The parent class sets the correct viewmode and starts the application off.
         super.onCreate(savedInstanceState);
     }
@@ -221,6 +228,14 @@ public final class OnePaneController extends AbstractActivityController {
         }
     }
 
+    @Override
+    public void onInsetsChanged(ScrimInsetsFrameLayout layout, Rect insets) {
+        FolderListFragment ff = getFolderListFragment();
+        if (ff != null) {
+            ff.setListTopPadding(insets.top);
+        }
+    }
+
     @Override
     protected void appendToString(StringBuilder sb) {
         sb.append(" lastConvListTransId=");
diff --git a/src/com/android/mail/ui/ScrimInsetsFrameLayout.java b/src/com/android/mail/ui/ScrimInsetsFrameLayout.java
new file mode 100644
index 000000000..d3e58f92f
--- /dev/null
+++ b/src/com/android/mail/ui/ScrimInsetsFrameLayout.java
@@ -0,0 +1,142 @@
+/*
+* Copyright 2014 Google Inc.
+*
+* Licensed under the Apache License, Version 2.0 (the "License");
+* you may not use this file except in compliance with the License.
+* You may obtain a copy of the License at
+*
+*     http://www.apache.org/licenses/LICENSE-2.0
+*
+* Unless required by applicable law or agreed to in writing, software
+* distributed under the License is distributed on an "AS IS" BASIS,
+* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+* See the License for the specific language governing permissions and
+* limitations under the License.
+*/
+
+package com.android.mail.ui;
+
+import android.content.Context;
+import android.content.res.TypedArray;
+import android.graphics.Canvas;
+import android.graphics.Rect;
+import android.graphics.drawable.Drawable;
+import android.support.v4.view.ViewCompat;
+import android.util.AttributeSet;
+import android.widget.FrameLayout;
+
+import com.android.mail.R;
+
+/**
+ * A layout that draws something in the insets passed to {@link #fitSystemWindows(Rect)}, i.e. the area above UI chrome
+ * (status and navigation bars, overlay action bars).
+ */
+public class ScrimInsetsFrameLayout extends FrameLayout {
+    private Drawable mInsetForeground;
+
+    private Rect mInsets;
+    private Rect mTempRect = new Rect();
+    private OnInsetsCallback mOnInsetsCallback;
+
+    public ScrimInsetsFrameLayout(Context context) {
+        super(context);
+        init(context, null, 0);
+    }
+
+    public ScrimInsetsFrameLayout(Context context, AttributeSet attrs) {
+        super(context, attrs);
+        init(context, attrs, 0);
+    }
+
+    public ScrimInsetsFrameLayout(Context context, AttributeSet attrs, int defStyle) {
+        super(context, attrs, defStyle);
+        init(context, attrs, defStyle);
+    }
+
+    private void init(Context context, AttributeSet attrs, int defStyle) {
+        final TypedArray a = context.obtainStyledAttributes(attrs,
+                R.styleable.ScrimInsetsView, defStyle, 0);
+        if (a == null) {
+            return;
+        }
+        mInsetForeground = a.getDrawable(R.styleable.ScrimInsetsView_insetForeground);
+        a.recycle();
+
+        setWillNotDraw(true);
+    }
+
+    @Override
+    protected boolean fitSystemWindows(Rect insets) {
+        mInsets = new Rect(insets);
+        setWillNotDraw(mInsetForeground == null);
+        ViewCompat.postInvalidateOnAnimation(this);
+        if (mOnInsetsCallback != null) {
+            mOnInsetsCallback.onInsetsChanged(this, insets);
+        }
+        return true; // consume insets
+    }
+
+    @Override
+    public void draw(Canvas canvas) {
+        super.draw(canvas);
+
+        int width = getWidth();
+        int height = getHeight();
+        if (mInsets != null && mInsetForeground != null) {
+            int sc = canvas.save();
+            canvas.translate(getScrollX(), getScrollY());
+
+            // Top
+            mTempRect.set(0, 0, width, mInsets.top);
+            mInsetForeground.setBounds(mTempRect);
+            mInsetForeground.draw(canvas);
+
+            // Bottom
+            mTempRect.set(0, height - mInsets.bottom, width, height);
+            mInsetForeground.setBounds(mTempRect);
+            mInsetForeground.draw(canvas);
+
+            // Left
+            mTempRect.set(0, mInsets.top, mInsets.left, height - mInsets.bottom);
+            mInsetForeground.setBounds(mTempRect);
+            mInsetForeground.draw(canvas);
+
+            // Right
+            mTempRect.set(width - mInsets.right, mInsets.top, width, height - mInsets.bottom);
+            mInsetForeground.setBounds(mTempRect);
+            mInsetForeground.draw(canvas);
+
+            canvas.restoreToCount(sc);
+        }
+    }
+
+    @Override
+    protected void onAttachedToWindow() {
+        super.onAttachedToWindow();
+        if (mInsetForeground != null) {
+            mInsetForeground.setCallback(this);
+        }
+    }
+
+    @Override
+    protected void onDetachedFromWindow() {
+        super.onDetachedFromWindow();
+        if (mInsetForeground != null) {
+            mInsetForeground.setCallback(null);
+        }
+    }
+
+    /**
+     * Allows the calling container to specify a callback for custom processing when insets change (i.e. when
+     * {@link #fitSystemWindows(Rect)} is called. This is useful for setting padding on UI elements based on
+     * UI chrome insets (e.g. a Google Map or a ListView). When using with ListView or GridView, remember to set
+     * clipToPadding to false.
+     */
+    public void setOnInsetsCallback(OnInsetsCallback onInsetsCallback) {
+        mOnInsetsCallback = onInsetsCallback;
+    }
+
+    public static interface OnInsetsCallback {
+        public void onInsetsChanged(ScrimInsetsFrameLayout layout, Rect insets);
+    }
+}
-- 
2.17.1

