From 7e412fbd588da96b063aec7176334e50a23d20db Mon Sep 17 00:00:00 2001
From: Luca Stefani <luca.stefani.ge1@gmail.com>
Date: Mon, 16 Jul 2018 19:36:20 +0200
Subject: [PATCH] Recorder: Use native functions to get H264 info

Change-Id: Ice2339bcb74574817830ceab066e22b08b9dd4c9
---
 .../recorder/screen/EncoderDevice.java        |  89 ++-----
 .../main/java/safesax/BadXmlException.java    |  35 ---
 app/src/main/java/safesax/Children.java       |  97 -------
 app/src/main/java/safesax/Element.java        | 202 ---------------
 .../main/java/safesax/ElementListener.java    |  26 --
 .../main/java/safesax/EndElementListener.java |  29 ---
 .../java/safesax/EndTextElementListener.java  |  31 ---
 app/src/main/java/safesax/Parsers.java        |  51 ----
 app/src/main/java/safesax/RootElement.java    | 241 ------------------
 .../java/safesax/StartElementListener.java    |  33 ---
 .../java/safesax/TextElementListener.java     |  26 --
 11 files changed, 16 insertions(+), 844 deletions(-)
 delete mode 100644 app/src/main/java/safesax/BadXmlException.java
 delete mode 100644 app/src/main/java/safesax/Children.java
 delete mode 100644 app/src/main/java/safesax/Element.java
 delete mode 100644 app/src/main/java/safesax/ElementListener.java
 delete mode 100644 app/src/main/java/safesax/EndElementListener.java
 delete mode 100644 app/src/main/java/safesax/EndTextElementListener.java
 delete mode 100644 app/src/main/java/safesax/Parsers.java
 delete mode 100644 app/src/main/java/safesax/RootElement.java
 delete mode 100644 app/src/main/java/safesax/StartElementListener.java
 delete mode 100644 app/src/main/java/safesax/TextElementListener.java

diff --git a/app/src/main/java/org/lineageos/recorder/screen/EncoderDevice.java b/app/src/main/java/org/lineageos/recorder/screen/EncoderDevice.java
index e4c5ff4..c0f44bf 100644
--- a/app/src/main/java/org/lineageos/recorder/screen/EncoderDevice.java
+++ b/app/src/main/java/org/lineageos/recorder/screen/EncoderDevice.java
@@ -19,32 +19,28 @@ package org.lineageos.recorder.screen;
 import android.content.Context;
 import android.hardware.display.DisplayManager;
 import android.hardware.display.VirtualDisplay;
-import android.media.CamcorderProfile;
+import android.media.EncoderCapabilities;
+import android.media.EncoderCapabilities.VideoEncoderCap;
 import android.media.MediaCodec;
 import android.media.MediaCodecInfo;
 import android.media.MediaFormat;
+import android.media.MediaRecorder;
 import android.text.TextUtils;
 import android.util.Log;
 import android.view.Surface;
 
 import org.lineageos.recorder.R;
-import org.xml.sax.Attributes;
-import org.xml.sax.SAXException;
 
-import java.io.File;
-import java.io.FileInputStream;
 import java.io.IOException;
-import java.io.StringReader;
-import java.util.ArrayList;
-
-import safesax.Element;
-import safesax.ElementListener;
-import safesax.Parsers;
-import safesax.RootElement;
+import java.util.List;
 
 abstract class EncoderDevice {
     final Context context;
     private final String LOGTAG = getClass().getSimpleName();
+
+    private static final List<VideoEncoderCap> videoEncoders =
+            EncoderCapabilities.getVideoEncoders();
+
     // Standard resolution tables, removed values that aren't multiples of 8
     private final int[][] validResolutions = {
             // CEA Resolutions
@@ -149,56 +145,15 @@ abstract class EncoderDevice {
             venc = null;
         }
 
-        int maxWidth;
-        int maxHeight;
-        int bitrate;
-
-        try {
-            File mediaProfiles = new File("/system/etc/media_profiles.xml");
-            FileInputStream fin = new FileInputStream(mediaProfiles);
-            byte[] bytes = new byte[(int) mediaProfiles.length()];
-            //noinspection ResultOfMethodCallIgnored
-            fin.read(bytes);
-            String xml = new String(bytes);
-            RootElement root = new RootElement("MediaSettings");
-            Element encoder = root.requireChild("VideoEncoderCap");
-            final ArrayList<VideoEncoderCap> encoders = new ArrayList<>();
-            encoder.setElementListener(new ElementListener() {
-                @Override
-                public void end() {
-                }
-
-                @Override
-                public void start(Attributes attributes) {
-                    if (!TextUtils.equals(attributes.getValue("name"), "h264"))
-                        return;
-                    encoders.add(new VideoEncoderCap(attributes));
-                }
-            });
-            Parsers.parse(new StringReader(xml), root.getContentHandler());
-            if (encoders.size() != 1) {
-                throw new IOException("derp");
-            }
-
-            VideoEncoderCap v = encoders.get(0);
-            maxWidth = v.maxFrameWidth;
-            maxHeight = v.maxFrameHeight;
-            bitrate = v.maxBitRate;
-        } catch (IOException | SAXException e) {
-            CamcorderProfile profile = CamcorderProfile.get(CamcorderProfile.QUALITY_1080P);
-
-            if (profile == null) {
-                profile = CamcorderProfile.get(CamcorderProfile.QUALITY_720P);
-            }
+        int maxWidth = 640;
+        int maxHeight = 480;
+        int bitrate = 2000000;
 
-            if (profile == null) {
-                maxWidth = 640;
-                maxHeight = 480;
-                bitrate = 2000000;
-            } else {
-                maxWidth = profile.videoFrameWidth;
-                maxHeight = profile.videoFrameHeight;
-                bitrate = profile.videoBitRate;
+        for (VideoEncoderCap cap : videoEncoders) {
+            if (cap.mCodec == MediaRecorder.VideoEncoder.H264) {
+                maxWidth = cap.mMaxFrameWidth;
+                maxHeight = cap.mMaxFrameHeight;
+                bitrate = cap.mMaxBitRate;
             }
         }
 
@@ -286,18 +241,6 @@ abstract class EncoderDevice {
         return surface;
     }
 
-    private static class VideoEncoderCap {
-        final int maxFrameWidth;
-        final int maxFrameHeight;
-        final int maxBitRate;
-
-        VideoEncoderCap(Attributes attributes) {
-            maxFrameWidth = Integer.valueOf(attributes.getValue("maxFrameWidth"));
-            maxFrameHeight = Integer.valueOf(attributes.getValue("maxFrameHeight"));
-            maxBitRate = Integer.valueOf(attributes.getValue("maxBitRate"));
-        }
-    }
-
     abstract class EncoderRunnable implements Runnable {
         MediaCodec venc;
 
diff --git a/app/src/main/java/safesax/BadXmlException.java b/app/src/main/java/safesax/BadXmlException.java
deleted file mode 100644
index ed3b5b8..0000000
--- a/app/src/main/java/safesax/BadXmlException.java
+++ /dev/null
@@ -1,35 +0,0 @@
-/*
- * Copyright (C) 2007 Google Inc.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- * http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package safesax;
-
-import org.xml.sax.Locator;
-import org.xml.sax.SAXParseException;
-
-/**
- * An XML parse exception which includes the line number in the message.
- */
-@SuppressWarnings("ALL")
-class BadXmlException extends SAXParseException {
-
-    public BadXmlException(String message, Locator locator) {
-        super(message, locator);
-    }
-
-    public String getMessage() {
-        return "Line " + getLineNumber() + ": " + super.getMessage();
-    }
-}
diff --git a/app/src/main/java/safesax/Children.java b/app/src/main/java/safesax/Children.java
deleted file mode 100644
index 3ea8d8e..0000000
--- a/app/src/main/java/safesax/Children.java
+++ /dev/null
@@ -1,97 +0,0 @@
-/*
- * Copyright (C) 2007 Google Inc.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- * http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package safesax;
-
-/**
- * Contains element children.
- */
-@SuppressWarnings("ALL")
-class Children {
-
-    final Child[] children = new Child[16];
-
-    /**
-     * Looks up a child by name and creates a new one if necessary.
-     */
-    Element getOrCreate(Element parent, String uri, String localName) {
-        int hash = uri.hashCode() * 31 + localName.hashCode();
-        int index = hash & 15;
-
-        Child current = children[index];
-        if (current == null) {
-            // We have no children in this bucket yet.
-            current = new Child(parent, uri, localName, parent.depth + 1, hash);
-            children[index] = current;
-            return current;
-        } else {
-            // Search this bucket.
-            Child previous;
-            do {
-                if (current.hash == hash
-                        && current.uri.compareTo(uri) == 0
-                        && current.localName.compareTo(localName) == 0) {
-                    // We already have a child with that name.
-                    return current;
-                }
-
-                previous = current;
-                current = current.next;
-            } while (current != null);
-
-            // Add a new child to the bucket.
-            current = new Child(parent, uri, localName, parent.depth + 1, hash);
-            previous.next = current;
-            return current;
-        }
-    }
-
-    /**
-     * Looks up a child by name.
-     */
-    Element get(String uri, String localName) {
-        int hash = uri.hashCode() * 31 + localName.hashCode();
-        int index = hash & 15;
-
-        Child current = children[index];
-        if (current == null) {
-            return null;
-        } else {
-            do {
-                if (current.hash == hash
-                        && current.uri.compareTo(uri) == 0
-                        && current.localName.compareTo(localName) == 0) {
-                    return current;
-                }
-                current = current.next;
-            } while (current != null);
-
-            return null;
-        }
-    }
-
-    static class Child extends Element {
-
-        final int hash;
-        Child next;
-
-        Child(Element parent, String uri, String localName, int depth,
-              int hash) {
-            super(parent, uri, localName, depth);
-            this.hash = hash;
-        }
-    }
-}
diff --git a/app/src/main/java/safesax/Element.java b/app/src/main/java/safesax/Element.java
deleted file mode 100644
index 0773dd3..0000000
--- a/app/src/main/java/safesax/Element.java
+++ /dev/null
@@ -1,202 +0,0 @@
-/*
- * Copyright (C) 2007 Google Inc.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- * http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package safesax;
-
-import org.xml.sax.Locator;
-import org.xml.sax.SAXParseException;
-
-import java.util.ArrayList;
-
-/**
- * An XML element. Provides access to child elements and hooks to listen for
- * events related to this element.
- *
- * @see RootElement
- */
-@SuppressWarnings("ALL")
-public class Element {
-
-    final String uri;
-    final String localName;
-    final int depth;
-    final Element parent;
-    Children children;
-
-    ArrayList<Element> requiredChilden;
-    boolean visited;
-
-    StartElementListener startElementListener;
-    EndElementListener endElementListener;
-    EndTextElementListener endTextElementListener;
-
-    Element(Element parent, String uri, String localName, int depth) {
-        this.parent = parent;
-        this.uri = uri;
-        this.localName = localName;
-        this.depth = depth;
-    }
-
-    /**
-     * Gets the child element with the given name. Uses an empty string as the
-     * namespace.
-     */
-    public Element getChild(String localName) {
-        return getChild("", localName);
-    }
-
-    /**
-     * Gets the child element with the given name.
-     */
-    public Element getChild(String uri, String localName) {
-        if (endTextElementListener != null) {
-            throw new IllegalStateException("This element already has an end"
-                    + " text element listener. It cannot have children.");
-        }
-
-        if (children == null) {
-            children = new Children();
-        }
-
-        return children.getOrCreate(this, uri, localName);
-    }
-
-    /**
-     * Gets the child element with the given name. Uses an empty string as the
-     * namespace. We will throw a {@link org.xml.sax.SAXException} at parsing time
-     * if the specified child is missing. This helps you ensure that your
-     * listeners are called.
-     */
-    public Element requireChild(String localName) {
-        return requireChild("", localName);
-    }
-
-    /**
-     * Gets the child element with the given name. We will throw a {@link
-     * org.xml.sax.SAXException} at parsing time if the specified child is
-     * missing. This helps you ensure that your listeners are called.
-     */
-    public Element requireChild(String uri, String localName) {
-        Element child = getChild(uri, localName);
-
-        if (requiredChilden == null) {
-            requiredChilden = new ArrayList<>();
-            requiredChilden.add(child);
-        } else {
-            if (!requiredChilden.contains(child)) {
-                requiredChilden.add(child);
-            }
-        }
-
-        return child;
-    }
-
-    /**
-     * Sets start and end element listeners at the same time.
-     */
-    public void setElementListener(ElementListener elementListener) {
-        setStartElementListener(elementListener);
-        setEndElementListener(elementListener);
-    }
-
-    /**
-     * Sets start and end text element listeners at the same time.
-     */
-    public void setTextElementListener(TextElementListener elementListener) {
-        setStartElementListener(elementListener);
-        setEndTextElementListener(elementListener);
-    }
-
-    /**
-     * Sets a listener for the start of this element.
-     */
-    public void setStartElementListener(
-            StartElementListener startElementListener) {
-        if (this.startElementListener != null) {
-            throw new IllegalStateException(
-                    "Start element listener has already been set.");
-        }
-        this.startElementListener = startElementListener;
-    }
-
-    /**
-     * Sets a listener for the end of this element.
-     */
-    public void setEndElementListener(EndElementListener endElementListener) {
-        if (this.endElementListener != null) {
-            throw new IllegalStateException(
-                    "End element listener has already been set.");
-        }
-        this.endElementListener = endElementListener;
-    }
-
-    /**
-     * Sets a listener for the end of this text element.
-     */
-    public void setEndTextElementListener(
-            EndTextElementListener endTextElementListener) {
-        if (this.endTextElementListener != null) {
-            throw new IllegalStateException(
-                    "End text element listener has already been set.");
-        }
-
-        if (children != null) {
-            throw new IllegalStateException("This element already has children."
-                    + " It cannot have an end text element listener.");
-        }
-
-        this.endTextElementListener = endTextElementListener;
-    }
-
-    @Override
-    public String toString() {
-        return toString(uri, localName);
-    }
-
-    static String toString(String uri, String localName) {
-        return "'" + (uri.equals("") ? localName : uri + ":" + localName) + "'";
-    }
-
-    /**
-     * Clears flags on required children.
-     */
-    void resetRequiredChildren() {
-        ArrayList<Element> requiredChildren = this.requiredChilden;
-        if (requiredChildren != null) {
-            for (int i = requiredChildren.size() - 1; i >= 0; i--) {
-                requiredChildren.get(i).visited = false;
-            }
-        }
-    }
-
-    /**
-     * Throws an exception if a required child was not present.
-     */
-    void checkRequiredChildren(Locator locator) throws SAXParseException {
-        ArrayList<Element> requiredChildren = this.requiredChilden;
-        if (requiredChildren != null) {
-            for (int i = requiredChildren.size() - 1; i >= 0; i--) {
-                Element child = requiredChildren.get(i);
-                if (!child.visited) {
-                    throw new BadXmlException(
-                            "Element named " + this + " is missing required"
-                                    + " child element named "
-                                    + child + ".", locator);
-                }
-            }
-        }
-    }
-}
diff --git a/app/src/main/java/safesax/ElementListener.java b/app/src/main/java/safesax/ElementListener.java
deleted file mode 100644
index 2b58d56..0000000
--- a/app/src/main/java/safesax/ElementListener.java
+++ /dev/null
@@ -1,26 +0,0 @@
-/*
- * Copyright (C) 2007 Google Inc.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- * http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package safesax;
-
-/**
- * Listens for the beginning and ending of elements.
- */
-@SuppressWarnings("ALL")
-public interface ElementListener extends StartElementListener,
-        EndElementListener {
-
-}
diff --git a/app/src/main/java/safesax/EndElementListener.java b/app/src/main/java/safesax/EndElementListener.java
deleted file mode 100644
index c34eaa4..0000000
--- a/app/src/main/java/safesax/EndElementListener.java
+++ /dev/null
@@ -1,29 +0,0 @@
-/*
- * Copyright (C) 2007 Google Inc.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- * http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package safesax;
-
-/**
- * Listens for the end of elements.
- */
-@SuppressWarnings("ALL")
-public interface EndElementListener {
-
-    /**
-     * Invoked at the end of an element.
-     */
-    void end();
-}
diff --git a/app/src/main/java/safesax/EndTextElementListener.java b/app/src/main/java/safesax/EndTextElementListener.java
deleted file mode 100644
index d4fa153..0000000
--- a/app/src/main/java/safesax/EndTextElementListener.java
+++ /dev/null
@@ -1,31 +0,0 @@
-/*
- * Copyright (C) 2007 Google Inc.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- * http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package safesax;
-
-/**
- * Listens for the end of text elements.
- */
-@SuppressWarnings("ALL")
-public interface EndTextElementListener {
-
-    /**
-     * Invoked at the end of a text element with the body of the element.
-     *
-     * @param body of the element
-     */
-    void end(String body);
-}
diff --git a/app/src/main/java/safesax/Parsers.java b/app/src/main/java/safesax/Parsers.java
deleted file mode 100644
index cf840ef..0000000
--- a/app/src/main/java/safesax/Parsers.java
+++ /dev/null
@@ -1,51 +0,0 @@
-/*
- * Copyright (C) 2007 Google Inc.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- * http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package safesax;
-
-import org.xml.sax.ContentHandler;
-import org.xml.sax.InputSource;
-import org.xml.sax.SAXException;
-import org.xml.sax.XMLReader;
-
-import java.io.IOException;
-import java.io.Reader;
-
-import javax.xml.parsers.ParserConfigurationException;
-import javax.xml.parsers.SAXParserFactory;
-
-/**
- * Parsing utility methods.
- */
-@SuppressWarnings("ALL")
-public class Parsers {
-
-    /**
-     * Parses XML from the given reader with namespace support enabled.
-     */
-    public static void parse(Reader in, ContentHandler contentHandler)
-            throws SAXException, IOException {
-        try {
-            XMLReader reader
-                    = SAXParserFactory.newInstance().newSAXParser().getXMLReader();
-            reader.setFeature("http://xml.org/sax/features/namespaces", true);
-            reader.setContentHandler(contentHandler);
-            reader.parse(new InputSource(in));
-        } catch (ParserConfigurationException e) {
-            throw new RuntimeException(e);
-        }
-    }
-}
diff --git a/app/src/main/java/safesax/RootElement.java b/app/src/main/java/safesax/RootElement.java
deleted file mode 100644
index e28704f..0000000
--- a/app/src/main/java/safesax/RootElement.java
+++ /dev/null
@@ -1,241 +0,0 @@
-/*
- * Copyright (C) 2007 Google Inc.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- * http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package safesax;
-
-import org.xml.sax.Attributes;
-import org.xml.sax.ContentHandler;
-import org.xml.sax.Locator;
-import org.xml.sax.SAXException;
-import org.xml.sax.helpers.DefaultHandler;
-
-/**
- * The root XML element. The entry point for this API. Not safe for concurrent
- * use.
- *
- * <p>For example, passing this XML:
- *
- * <pre>
- * &lt;feed xmlns='http://www.w3.org/2005/Atom'>
- *   &lt;entry>
- *     &lt;id>crazybob&lt;/id>
- *   &lt;/entry>
- * &lt;/feed>
- * </pre>
- *
- * to this code:
- *
- * <pre>
- * static final String ATOM_NAMESPACE = "http://www.w3.org/2005/Atom";
- *
- * ...
- *
- * RootElement root = new RootElement(ATOM_NAMESPACE, "feed");
- * Element entry = root.getChild(ATOM_NAMESPACE, "entry");
- * entry.getChild(ATOM_NAMESPACE, "id").setEndTextElementListener(
- *   new EndTextElementListener() {
- *     public void end(String body) {
- *       System.out.println("Entry ID: " + body);
- *     }
- *   });
- *
- * XMLReader reader = ...;
- * reader.setContentHandler(root.getContentHandler());
- * reader.parse(...);
- * </pre>
- *
- * would output:
- *
- * <pre>
- * Entry ID: crazybob
- * </pre>
- */
-@SuppressWarnings("ALL")
-public class RootElement extends Element {
-
-    final Handler handler = new Handler();
-
-    /** Proxy the locator so the user can retrieve it before parsing starts. */
-    final Locator locator = new Locator() {
-
-        public String getPublicId() {
-            Locator locator = handler.locator;
-            return locator == null ? null : locator.getPublicId();
-        }
-
-        public String getSystemId() {
-            Locator locator = handler.locator;
-            return locator == null ? null : locator.getSystemId();
-        }
-
-        public int getLineNumber() {
-            Locator locator = handler.locator;
-            return locator == null ? -1 : locator.getLineNumber();
-        }
-
-        public int getColumnNumber() {
-            Locator locator = handler.locator;
-            return locator == null ? -1 : locator.getColumnNumber();
-        }
-    };
-
-
-    /**
-     * Constructs a new root element with the given name.
-     *
-     * @param uri       the namespace
-     * @param localName the local name
-     */
-    public RootElement(String uri, String localName) {
-        super(null, uri, localName, 0);
-    }
-
-    /**
-     * Constructs a new root element with the given name. Uses an empty string as
-     * the namespace.
-     *
-     * @param localName the local name
-     */
-    public RootElement(String localName) {
-        this("", localName);
-    }
-
-    /**
-     * Gets the SAX {@code ContentHandler}. Pass this to your SAX parser.
-     */
-    public ContentHandler getContentHandler() {
-        return this.handler;
-    }
-
-    /**
-     * Gets the SAX locator which can be used to find the current position
-     * within the XML.
-     */
-    public Locator getLocator() {
-        return locator;
-    }
-
-    class Handler extends DefaultHandler {
-
-        Locator locator;
-        int depth = -1;
-        Element current = null;
-        StringBuilder bodyBuilder = null;
-
-        @Override
-        public void setDocumentLocator(Locator locator) {
-            this.locator = locator;
-        }
-
-        @Override
-        public void startElement(String uri, String localName, String qName,
-                                 Attributes attributes) throws SAXException {
-            int depth = ++this.depth;
-
-            if (depth == 0) {
-                // This is the root element.
-                startRoot(uri, localName, attributes);
-                return;
-            }
-
-            // Prohibit mixed text and elements.
-            if (bodyBuilder != null) {
-                throw new BadXmlException("Encountered mixed content"
-                        + " within text element named " + current + ".",
-                        locator);
-            }
-
-            // If we're one level below the current element.
-            if (depth == current.depth + 1) {
-                // Look for a child to push onto the stack.
-                Children children = current.children;
-                if (children != null) {
-                    Element child = children.get(uri, localName);
-                    if (child != null) {
-                        start(child, attributes);
-                    }
-                }
-            }
-        }
-
-        void startRoot(String uri, String localName, Attributes attributes)
-                throws SAXException {
-            Element root = RootElement.this;
-            if (root.uri.compareTo(uri) != 0
-                    || root.localName.compareTo(localName) != 0) {
-                throw new BadXmlException("Root element name does"
-                        + " not match. Expected: " + root + ", Got: "
-                        + Element.toString(uri, localName), locator);
-            }
-
-            start(root, attributes);
-        }
-
-        void start(Element e, Attributes attributes) {
-            // Push element onto the stack.
-            this.current = e;
-
-            if (e.startElementListener != null) {
-                e.startElementListener.start(attributes);
-            }
-
-            if (e.endTextElementListener != null) {
-                this.bodyBuilder = new StringBuilder();
-            }
-
-            e.resetRequiredChildren();
-            e.visited = true;
-        }
-
-        @Override
-        public void characters(char[] buffer, int start, int length)
-                throws SAXException {
-            if (bodyBuilder != null) {
-                bodyBuilder.append(buffer, start, length);
-            }
-        }
-
-        @Override
-        public void endElement(String uri, String localName, String qName)
-                throws SAXException {
-            Element current = this.current;
-
-            // If we've ended the current element...
-            if (depth == current.depth) {
-                current.checkRequiredChildren(locator);
-
-                // Invoke end element listener.
-                if (current.endElementListener != null) {
-                    current.endElementListener.end();
-                }
-
-                // Invoke end text element listener.
-                if (bodyBuilder != null) {
-                    String body = bodyBuilder.toString();
-                    bodyBuilder = null;
-
-                    // We can assume that this listener is present.
-                    current.endTextElementListener.end(body);
-                }
-
-                // Pop element off the stack.
-                this.current = current.parent;
-            }
-
-            depth--;
-        }
-    }
-}
diff --git a/app/src/main/java/safesax/StartElementListener.java b/app/src/main/java/safesax/StartElementListener.java
deleted file mode 100644
index b49f6bf..0000000
--- a/app/src/main/java/safesax/StartElementListener.java
+++ /dev/null
@@ -1,33 +0,0 @@
-/*
- * Copyright (C) 2007 Google Inc.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- * http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package safesax;
-
-import org.xml.sax.Attributes;
-
-/**
- * Listens for the beginning of elements.
- */
-@SuppressWarnings("ALL")
-public interface StartElementListener {
-
-    /**
-     * Invoked at the beginning of an element.
-     *
-     * @param attributes from the element
-     */
-    void start(Attributes attributes);
-}
diff --git a/app/src/main/java/safesax/TextElementListener.java b/app/src/main/java/safesax/TextElementListener.java
deleted file mode 100644
index 75c7d5f..0000000
--- a/app/src/main/java/safesax/TextElementListener.java
+++ /dev/null
@@ -1,26 +0,0 @@
-/*
- * Copyright (C) 2007 Google Inc.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- * http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package safesax;
-
-/**
- * Listens for the beginning and ending of text elements.
- */
-@SuppressWarnings("ALL")
-interface TextElementListener extends StartElementListener,
-        EndTextElementListener {
-
-}
-- 
2.17.1

