From 95d0cc239ccbe937f8d15c911f47dee12a17a771 Mon Sep 17 00:00:00 2001
From: Niranjan Artal <nartal@nvidia.com>
Date: Tue, 31 Oct 2017 12:57:45 -0700
Subject: [PATCH] Add sendNvCustomCommandNative to fix licensed builds

Change-Id: I75e516619b4693b7815ea36cf29723da01e9ff5a
Reviewed-on: https://git-master.nvidia.com/r/1589444
Reviewed-by: Gaurav Asati <gasati@nvidia.com>
Reviewed-by: Niranjan Artal <nartal@nvidia.com>
Tested-by: Niranjan Artal <nartal@nvidia.com>
---
 ...oid_bluetooth_btservice_AdapterService.cpp | 31 +++++++++++++++++++
 .../bluetooth/btservice/AdapterService.java   | 19 ++++++++++++
 2 files changed, 50 insertions(+)

diff --git a/jni/com_android_bluetooth_btservice_AdapterService.cpp b/jni/com_android_bluetooth_btservice_AdapterService.cpp
index dc2e07aa..9f3ca6ad 100644
--- a/jni/com_android_bluetooth_btservice_AdapterService.cpp
+++ b/jni/com_android_bluetooth_btservice_AdapterService.cpp
@@ -729,6 +729,36 @@ static jboolean startDiscoveryNative(JNIEnv* env, jobject obj) {
   return (ret == BT_STATUS_SUCCESS) ? JNI_TRUE : JNI_FALSE;
 }
 
+static jint sendNvCustomCommandNative(JNIEnv* env, jobject obj, jbyteArray address,
+                jint cmd, jbyteArray data, jint bufferSize) {
+    ALOGV("%s: cmd = %d, data = %s, bufferSize = %d", __FUNCTION__, cmd, data, bufferSize);
+
+    jint status;
+    jbyte *addr = NULL;
+    jint ret = -1;
+    jbyte *c_report = NULL;
+
+    if (!sBluetoothInterface) return ret;
+
+    if (address)
+        addr = env->GetByteArrayElements(address, NULL);
+
+    if (data)
+        c_report = env->GetByteArrayElements(data, NULL);
+
+    /*if ((status = sBluetoothInterface->send_nv_custom_command((bt_bdaddr_t *) addr, cmd, (const char *)c_report, bufferSize))
+            != BT_STATUS_SUCCESS) {
+        ALOGE("NvCustom_remote_response, status: %d", status);
+    }*/
+
+    if (c_report)
+        env->ReleaseByteArrayElements(data, c_report, 0);
+    if (addr)
+        env->ReleaseByteArrayElements(address, addr, 0);
+    return status;
+
+}
+
 static jboolean cancelDiscoveryNative(JNIEnv* env, jobject obj) {
   ALOGV("%s", __func__);
 
@@ -1221,6 +1251,7 @@ static JNINativeMethod sMethods[] = {
     {"getDevicePropertyNative", "([BI)Z", (void*)getDevicePropertyNative},
     {"setDevicePropertyNative", "([BI[B)Z", (void*)setDevicePropertyNative},
     {"startDiscoveryNative", "()Z", (void*)startDiscoveryNative},
+    {"sendNvCustomCommandNative", "([BI[BI)I", (void*) sendNvCustomCommandNative},
     {"cancelDiscoveryNative", "()Z", (void*)cancelDiscoveryNative},
     {"createBondNative", "([BI)Z", (void*)createBondNative},
     {"createBondOutOfBandNative", "([BILandroid/bluetooth/OobData;)Z",
diff --git a/src/com/android/bluetooth/btservice/AdapterService.java b/src/com/android/bluetooth/btservice/AdapterService.java
index e04ca8bf..b9585a06 100644
--- a/src/com/android/bluetooth/btservice/AdapterService.java
+++ b/src/com/android/bluetooth/btservice/AdapterService.java
@@ -923,6 +923,17 @@ public class AdapterService extends Service {
             return service.startDiscovery();
         }
 
+        public int sendNvCustomCommand(BluetoothDevice device, int cmd, byte[] data, int bufferSize) {
+            if (!Utils.checkCaller()) {
+                Log.w(TAG, "sendNvCustomCommand() - Not allowed for non-active user");
+                return -1;
+            }
+
+            AdapterService service = getService();
+            if (service == null) return -1;
+            return service.sendNvCustomCommand(device, cmd, data, bufferSize);
+        }
+
         public boolean cancelDiscovery() {
             if (!Utils.checkCaller()) {
                 Log.w(TAG, "cancelDiscovery() - Not allowed for non-active user");
@@ -1506,6 +1517,13 @@ public class AdapterService extends Service {
         return startDiscoveryNative();
     }
 
+     int sendNvCustomCommand(BluetoothDevice device, int cmd, byte[] data, int bufferSize) {
+         enforceCallingOrSelfPermission(BLUETOOTH_ADMIN_PERM,
+                                        "Need BLUETOOTH ADMIN permission");
+
+        return sendNvCustomCommandNative(Utils.getByteAddress(device), cmd, data, bufferSize);
+    }
+
      boolean cancelDiscovery() {
         debugLog("cancelDiscovery");
         enforceCallingOrSelfPermission(BLUETOOTH_ADMIN_PERM,
@@ -2265,6 +2283,7 @@ public class AdapterService extends Service {
     /*package*/ native int getConnectionStateNative(byte[] address);
 
     private native boolean startDiscoveryNative();
+    private native int sendNvCustomCommandNative(byte[] address, int cmd, byte[] data, int bufferSize);
     private native boolean cancelDiscoveryNative();
 
     private native boolean pinReplyNative(byte[] address, boolean accept, int len, byte[] pin);
-- 
2.17.1

