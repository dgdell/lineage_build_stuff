From ad85db877a2c657a12f0f80a473bb1a44080036c Mon Sep 17 00:00:00 2001
From: yuichiro fujiwara <yuichiro.fujiwara@sony.com>
Date: Thu, 30 Mar 2017 17:39:02 +0900
Subject: [PATCH 2/5] Place MyInfo shortcut on drawer

MyInfo screen can be launched from the navigation drawer.

Bug: 38188686
Change-Id: I0ad1a44a19d14b736368553dd8102eb776c5c51b
---
 res/drawable/quantum_ic_drawer_my_info_32.xml |  19 ++++
 res/layout/drawer_secondline_item.xml         |  31 +++++
 res/values/ids.xml                            |   3 +
 res/values/styles.xml                         |   9 ++
 .../contacts/activities/PeopleActivity.java   |  19 ++++
 .../contacts/drawer/DrawerAdapter.java        |  82 +++++++++++++-
 .../contacts/drawer/DrawerFragment.java       |  31 ++++-
 .../android/contacts/profile/ProfileItem.java |  48 ++++++++
 .../contacts/profile/ProfileLoader.java       | 107 ++++++++++++++++++
 9 files changed, 347 insertions(+), 2 deletions(-)
 create mode 100644 res/drawable/quantum_ic_drawer_my_info_32.xml
 create mode 100644 res/layout/drawer_secondline_item.xml
 create mode 100644 src/com/android/contacts/profile/ProfileItem.java
 create mode 100644 src/com/android/contacts/profile/ProfileLoader.java

diff --git a/res/drawable/quantum_ic_drawer_my_info_32.xml b/res/drawable/quantum_ic_drawer_my_info_32.xml
new file mode 100644
index 000000000..4e310cb4a
--- /dev/null
+++ b/res/drawable/quantum_ic_drawer_my_info_32.xml
@@ -0,0 +1,19 @@
+<vector xmlns:android="http://schemas.android.com/apk/res/android"
+        android:width="32dp"
+        android:height="32dp"
+        android:viewportWidth="32.0"
+        android:viewportHeight="32.0">
+    <path
+        android:pathData="M15.8,1C7.5,1 0.9,7.7 1,16c0.1,8.3 6.9,15 15.2,15S31.1,24.3 31,16C30.9,7.7 24.1,1 15.8,1z"
+        android:fillColor="#4185F3"/>
+    <path
+        android:pathData="M16,12.3m-3.8,0a3.8,3.8 0,1 1,7.6 0a3.8,3.8 0,1 1,-7.6 0"
+        android:fillAlpha="0.2"
+        android:fillColor="#FFFFFF"
+        android:strokeAlpha="0.2"/>
+    <path
+        android:pathData="M23.5,23.5h-15v-1.9c0,-2.5 5,-3.8 7.5,-3.8s7.5,1.3 7.5,3.8V23.5z"
+        android:fillAlpha="0.2"
+        android:fillColor="#FFFFFF"
+        android:strokeAlpha="0.2"/>
+</vector>
diff --git a/res/layout/drawer_secondline_item.xml b/res/layout/drawer_secondline_item.xml
new file mode 100644
index 000000000..4749940a8
--- /dev/null
+++ b/res/layout/drawer_secondline_item.xml
@@ -0,0 +1,31 @@
+<?xml version="1.0" encoding="utf-8"?>
+
+<LinearLayout
+    xmlns:android="http://schemas.android.com/apk/res/android"
+    style="@style/DrawerItemStyle">
+
+    <ImageView
+        android:id="@+id/icon"
+        style="@style/DrawerItemIconStyle"/>
+
+    <LinearLayout
+        android:id="@+id/secondline_container"
+        android:layout_width="0dp"
+        android:layout_height="wrap_content"
+        android:layout_weight="1"
+        android:layout_gravity="center_vertical"
+        android:orientation="vertical">
+
+        <TextView
+            android:id="@+id/title"
+            android:textAlignment="viewStart"
+            style="@style/DrawerSecondLineTitleTextStyle" />
+
+        <TextView
+            android:id="@+id/summary"
+            android:textAlignment="viewStart"
+            style="@style/DrawerSecondLineSummaryTextStyle" />
+
+    </LinearLayout>
+
+</LinearLayout>
diff --git a/res/values/ids.xml b/res/values/ids.xml
index a4b8b4b0f..6986fbb0d 100644
--- a/res/values/ids.xml
+++ b/res/values/ids.xml
@@ -44,6 +44,9 @@
     <!-- An ID to be used for contents of a custom dialog so that its state be preserved -->
     <item type="id" name="custom_dialog_content" />
 
+    <!-- Menu ID for profile item -->
+    <item type="id" name="nav_myprofile" />
+
     <!-- Menu group ID for settings and help & feedback  -->
     <item type="id" name="nav_misc" />
 
diff --git a/res/values/styles.xml b/res/values/styles.xml
index ffd800fc1..dc45bcb61 100644
--- a/res/values/styles.xml
+++ b/res/values/styles.xml
@@ -593,4 +593,13 @@ background and text color. See also android:style/Widget.Holo.TextView.ListSepar
         <item name="android:paddingStart">@dimen/drawer_side_padding</item>
         <item name="android:paddingEnd">@dimen/drawer_label_header_end_padding</item>
     </style>
+
+    <style name="DrawerSecondLineTitleTextStyle" parent="DrawerItemTextStyle">
+        <item name="android:layout_width">match_parent</item>
+    </style>
+
+    <style name="DrawerSecondLineSummaryTextStyle" parent="DrawerItemTextStyle">
+        <item name="android:textColor">@color/quantum_black_secondary_text</item>
+        <item name="android:layout_width">match_parent</item>
+    </style>
 </resources>
diff --git a/src/com/android/contacts/activities/PeopleActivity.java b/src/com/android/contacts/activities/PeopleActivity.java
index 5a3804396..6c100a962 100644
--- a/src/com/android/contacts/activities/PeopleActivity.java
+++ b/src/com/android/contacts/activities/PeopleActivity.java
@@ -1206,6 +1206,25 @@ public class PeopleActivity extends AppCompatContactsActivity implements
         onFilterMenuItemClicked(intent);
     }
 
+    /*
+     * Behavior when select MyInfo on Navigation drawer.
+     * Launch in the same way as from Settings->MyInfo.
+     * Refer to DisplayOptionsPreferenceFragment's onPreferenceClick.
+     */
+    @Override
+    public void onProfileViewSelected(long profileContactId) {
+        if (profileContactId != -1) {
+            final Uri uri = ContentUris.withAppendedId(ContactsContract.Contacts.CONTENT_URI,
+                    profileContactId);
+            ImplicitIntentsUtil.startQuickContact(this, uri, ScreenType.ME_CONTACT);
+        } else {
+            final Intent intent = new Intent(Intent.ACTION_INSERT,
+                    ContactsContract.Contacts.CONTENT_URI);
+            intent.putExtra(ContactEditorFragment.INTENT_EXTRA_NEW_LOCAL_PROFILE, true);
+            ImplicitIntentsUtil.startActivityInApp(this, intent);
+        }
+    }
+
     public boolean isGroupView() {
         return mCurrentView == ContactsView.GROUP_VIEW;
     }
diff --git a/src/com/android/contacts/drawer/DrawerAdapter.java b/src/com/android/contacts/drawer/DrawerAdapter.java
index 1f15d86c9..c84e46bc9 100644
--- a/src/com/android/contacts/drawer/DrawerAdapter.java
+++ b/src/com/android/contacts/drawer/DrawerAdapter.java
@@ -18,6 +18,8 @@ package com.android.contacts.drawer;
 
 import android.app.Activity;
 import android.graphics.PorterDuff;
+import android.net.Uri;
+import android.provider.ContactsContract.DisplayNameSources;
 import android.support.annotation.LayoutRes;
 import android.view.LayoutInflater;
 import android.view.View;
@@ -26,12 +28,14 @@ import android.widget.BaseAdapter;
 import android.widget.ImageView;
 import android.widget.TextView;
 
+import com.android.contacts.ContactPhotoManager;
 import com.android.contacts.R;
 import com.android.contacts.activities.PeopleActivity.ContactsView;
 import com.android.contacts.group.GroupListItem;
 import com.android.contacts.list.ContactListFilter;
 import com.android.contacts.model.account.AccountDisplayInfo;
 import com.android.contacts.model.account.AccountDisplayInfoFactory;
+import com.android.contacts.profile.ProfileItem;
 import com.android.contacts.util.SharedPreferenceUtil;
 import com.android.contactsbind.HelpUtils;
 import com.android.contactsbind.ObjectFactory;
@@ -49,9 +53,10 @@ public class DrawerAdapter extends BaseAdapter {
     private static final int VIEW_TYPE_CREATE_LABEL = 5;
     private static final int VIEW_TYPE_NAV_SPACER = 6;
     private static final int VIEW_TYPE_NAV_DIVIDER = 7;
+    private static final int VIEW_TYPE_PROFILE_ENTRY = 8;
 
     // This count must be updated if we add more view types.
-    private static final int VIEW_TYPE_COUNT = 9;
+    private static final int VIEW_TYPE_COUNT = 10;
 
     private static final int TYPEFACE_STYLE_ACTIVATE = R.style.DrawerItemTextActiveStyle;
     private static final int TYPEFACE_STYLE_INACTIVE = R.style.DrawerItemTextInactiveStyle;
@@ -67,6 +72,7 @@ public class DrawerAdapter extends BaseAdapter {
 
     // Adapter elements, ordered in this way mItemsList. The ordering is based on:
     //  [Navigation spacer item]
+    //  [Profile Entry item]
     //  [Primary items] (Contacts, Suggestions)
     //  [Group Header]
     //  [Groups]
@@ -76,6 +82,8 @@ public class DrawerAdapter extends BaseAdapter {
     //  [Misc items] (a divider, Settings, Help & Feedback)
     //  [Navigation spacer item]
     private NavSpacerItem mNavSpacerItem = null;
+    private ProfileEntryItem mProfileEntryItem = null;
+    private DividerItem mProfileEntryItemDivider = null;
     private List<PrimaryItem> mPrimaryItems = new ArrayList<>();
     private HeaderItem mGroupHeader = null;
     private List<GroupEntryItem> mGroupEntries = new ArrayList<>();
@@ -97,6 +105,7 @@ public class DrawerAdapter extends BaseAdapter {
     private void initializeDrawerMenuItems() {
         // Spacer item for dividing sections in drawer
         mNavSpacerItem = new NavSpacerItem(R.id.nav_drawer_spacer);
+        mProfileEntryItemDivider = new DividerItem();
         // Primary items
         mPrimaryItems.add(new PrimaryItem(R.id.nav_all_contacts, R.string.contactsList,
                 R.drawable.quantum_ic_account_circle_vd_theme_24, ContactsView.ALL_CONTACTS));
@@ -125,6 +134,10 @@ public class DrawerAdapter extends BaseAdapter {
     private void rebuildItemsList() {
         mItemsList.clear();
         mItemsList.add(mNavSpacerItem);
+        if (mProfileEntryItem != null) {
+            mItemsList.add(mProfileEntryItem);
+            mItemsList.add(mProfileEntryItemDivider);
+        }
         mItemsList.addAll(mPrimaryItems);
         if (mAreGroupWritableAccountsAvailable || !mGroupEntries.isEmpty()) {
             mItemsList.add(mGroupHeader);
@@ -141,6 +154,11 @@ public class DrawerAdapter extends BaseAdapter {
         mItemsList.add(mNavSpacerItem);
     }
 
+    public void setProfile(ProfileItem profileItem) {
+        mProfileEntryItem = new ProfileEntryItem(R.id.nav_myprofile, profileItem);
+        notifyChangeAndRebuildList();
+    }
+
     public void setGroups(List<GroupListItem> groupListItems, boolean areGroupWritable) {
         final ArrayList<GroupEntryItem> groupEntries = new ArrayList<GroupEntryItem>();
         for (GroupListItem group : groupListItems) {
@@ -188,6 +206,8 @@ public class DrawerAdapter extends BaseAdapter {
     public View getView(int position, View view, ViewGroup viewGroup) {
         final BaseDrawerItem drawerItem = getItem(position);
         switch (drawerItem.viewType) {
+            case VIEW_TYPE_PROFILE_ENTRY:
+                return getProfileEntryView((ProfileEntryItem) drawerItem, view, viewGroup);
             case VIEW_TYPE_PRIMARY_ITEM:
                 return getPrimaryItemView((PrimaryItem) drawerItem, view, viewGroup);
             case VIEW_TYPE_HEADER_ITEM:
@@ -243,6 +263,52 @@ public class DrawerAdapter extends BaseAdapter {
         return result;
     }
 
+    private View getProfileEntryView(ProfileEntryItem item, View result, ViewGroup parent) {
+        if (result == null) {
+            result = mInflater.inflate(R.layout.drawer_secondline_item, parent, false);
+            result.setId(item.id);
+        }
+
+        final ProfileItem profile = item.profile;
+
+        final ImageView icon = (ImageView) result.findViewById(R.id.icon);
+        icon.setScaleType(ImageView.ScaleType.CENTER);
+        if (profile.HasProfile()) {
+            if (profile.getPhotoId() != 0) {
+                icon.setScaleType(ImageView.ScaleType.FIT_CENTER);
+                getPhotoLoader().loadThumbnail(icon, profile.getPhotoId(), false, true, null);
+            } else if (profile.getPhotoUri() != null) {
+                icon.setScaleType(ImageView.ScaleType.FIT_CENTER);
+                getPhotoLoader().loadDirectoryPhoto(icon, Uri.parse(profile.getPhotoUri()), false,
+                        true, null);
+            } else {
+                // There are cases where the image cache may remain, so update once by default.
+                getPhotoLoader().loadDirectoryPhoto(icon, null, false, true, null);
+                icon.setImageResource(R.drawable.quantum_ic_drawer_my_info_32);
+            }
+        } else {
+            // There are cases where the image cache may remain, so update once by default.
+            getPhotoLoader().loadDirectoryPhoto(icon, null, false, true, null);
+            icon.setImageResource(R.drawable.quantum_ic_drawer_my_info_32);
+        }
+
+        final TextView title = (TextView) result.findViewById(R.id.title);
+        title.setText(mActivity.getString(R.string.settings_my_info_title));
+        final TextView summary = (TextView) result.findViewById(R.id.summary);
+        if (profile.HasProfile()) {
+            summary.setText(profile.getDisplayName());
+            if (profile.getDisplayNameSource() == DisplayNameSources.PHONE) {
+                summary.setTextDirection(TextView.TEXT_DIRECTION_LTR);
+            }
+        } else {
+            summary.setText(mActivity.getString(R.string.set_up_profile));
+        }
+        // Apply setTextAppearance to title only.
+        updateSelectedStatus(title, icon, false);
+        result.setTag(profile.HasProfile() ? profile.getContactId() : -1);
+        return result;
+    }
+
     private View getGroupEntryView(GroupEntryItem item, View result, ViewGroup parent) {
         if (result == null || !(result.getTag() instanceof GroupEntryItem)) {
             result = mInflater.inflate(R.layout.drawer_item, parent, false);
@@ -413,6 +479,16 @@ public class DrawerAdapter extends BaseAdapter {
         }
     }
 
+    // Navigation drawer item for a profile.
+    public static class ProfileEntryItem extends BaseDrawerItem {
+        private final ProfileItem profile;
+
+        public ProfileEntryItem(int id, ProfileItem profileItem) {
+            super(VIEW_TYPE_PROFILE_ENTRY, id, /* textResId */ 0, /* iconResId */ 0);
+            this.profile = profileItem;
+        }
+    }
+
     // Navigation drawer item for a group.
     public static class GroupEntryItem extends BaseDrawerItem {
         private final GroupListItem group;
@@ -432,4 +508,8 @@ public class DrawerAdapter extends BaseAdapter {
             this.account = account;
         }
     }
+
+    private ContactPhotoManager getPhotoLoader() {
+        return ContactPhotoManager.getInstance(mActivity);
+    }
 }
diff --git a/src/com/android/contacts/drawer/DrawerFragment.java b/src/com/android/contacts/drawer/DrawerFragment.java
index 485513adf..078c3f7be 100644
--- a/src/com/android/contacts/drawer/DrawerFragment.java
+++ b/src/com/android/contacts/drawer/DrawerFragment.java
@@ -26,6 +26,8 @@ import android.database.Cursor;
 import android.net.Uri;
 import android.os.Bundle;
 import android.os.Handler;
+import android.provider.ContactsContract.DisplayNameSources;
+import android.text.TextUtils;
 import android.view.Gravity;
 import android.view.LayoutInflater;
 import android.view.View;
@@ -46,6 +48,8 @@ import com.android.contacts.model.AccountTypeManager;
 import com.android.contacts.model.account.AccountInfo;
 import com.android.contacts.model.account.AccountsLoader;
 import com.android.contacts.model.account.AccountsLoader.AccountsListener;
+import com.android.contacts.profile.ProfileLoader;
+import com.android.contacts.profile.ProfileLoader.ProfileQuery;
 import com.android.contacts.util.AccountFilterUtil;
 import com.android.contactsbind.ObjectFactory;
 
@@ -58,6 +62,7 @@ public class DrawerFragment extends Fragment implements AccountsListener {
     private static final int LOADER_GROUPS = 1;
     private static final int LOADER_ACCOUNTS = 2;
     private static final int LOADER_FILTERS = 3;
+    private static final int LOADER_PROFILE = 4;
 
     private static final String KEY_CONTACTS_VIEW = "contactsView";
     private static final String KEY_SELECTED_GROUP = "selectedGroup";
@@ -142,6 +147,25 @@ public class DrawerFragment extends Fragment implements AccountsListener {
                 }
             };
 
+    private final LoaderManager.LoaderCallbacks<Cursor> mProfileLoaderListener =
+            new LoaderManager.LoaderCallbacks<Cursor>() {
+                @Override
+                public CursorLoader onCreateLoader(int id, Bundle args) {
+                    return new ProfileLoader(getActivity(),
+                            ProfileLoader.getProjection(getActivity()));
+                }
+
+                @Override
+                public void onLoadFinished(Loader<Cursor> loader, Cursor data) {
+                    // Sending MyInfo information to DrawerAdapter
+                    // when MyInfo exists(User registered MyInfo) or not.
+                    mDrawerAdapter.setProfile(ProfileLoader.getProfileItem(getActivity(), data));
+                }
+
+                public void onLoaderReset(Loader<Cursor> loader) {
+                }
+            };
+
     public DrawerFragment() {}
 
     @Override
@@ -221,6 +245,7 @@ public class DrawerFragment extends Fragment implements AccountsListener {
         AccountsLoader.loadAccounts(this, LOADER_ACCOUNTS,
                 AccountTypeManager.AccountFilter.GROUPS_WRITABLE);
         getLoaderManager().initLoader(LOADER_GROUPS, null, mGroupListLoaderListener);
+        getLoaderManager().initLoader(LOADER_PROFILE, null, mProfileLoaderListener);
     }
 
     @Override
@@ -236,7 +261,10 @@ public class DrawerFragment extends Fragment implements AccountsListener {
                 return;
             }
             final int viewId = v.getId();
-            if (viewId == R.id.nav_all_contacts) {
+            if (viewId == R.id.nav_myprofile) {
+                final long profileContactId = (long) v.getTag();
+                mListener.onProfileViewSelected(profileContactId);
+            } else if (viewId == R.id.nav_all_contacts) {
                 mListener.onContactsViewSelected(ContactsView.ALL_CONTACTS);
                 setNavigationItemChecked(ContactsView.ALL_CONTACTS);
             } else if (viewId == R.id.nav_assistant) {
@@ -313,6 +341,7 @@ public class DrawerFragment extends Fragment implements AccountsListener {
         void onCreateLabelButtonClicked();
         void onOpenSettings();
         void onLaunchHelpFeedback();
+        void onProfileViewSelected(long profileContactId);
     }
 
     private class WindowInsetsListener implements View.OnApplyWindowInsetsListener {
diff --git a/src/com/android/contacts/profile/ProfileItem.java b/src/com/android/contacts/profile/ProfileItem.java
new file mode 100644
index 000000000..fcf43d1f1
--- /dev/null
+++ b/src/com/android/contacts/profile/ProfileItem.java
@@ -0,0 +1,48 @@
+package com.android.contacts.profile;
+
+/**
+ * Meta-data for a contact profile.
+ */
+public final class ProfileItem {
+
+    private final String mDisplayName;
+    private final long mContactId;
+    private final long mPhotoId;
+    private final String mPhotoUri;
+    private final int mDisplayNameSource;
+    private final boolean mHasProfile;
+
+    public ProfileItem(String displayName, long contactId, long photoId, String photoUri,
+                         int displayNameSource, boolean hasProfile) {
+        mDisplayName = displayName;
+        mContactId = contactId;
+        mPhotoId = photoId;
+        mPhotoUri = photoUri;
+        mDisplayNameSource = displayNameSource;
+        mHasProfile = hasProfile;
+    }
+
+    public String getDisplayName() {
+        return mDisplayName;
+    }
+
+    public long getContactId() {
+        return mContactId;
+    }
+
+    public long getPhotoId() {
+        return mPhotoId;
+    }
+
+    public String getPhotoUri() {
+        return mPhotoUri;
+    }
+
+    public int getDisplayNameSource() {
+        return mDisplayNameSource;
+    }
+
+    public boolean HasProfile() {
+        return mHasProfile;
+    }
+}
\ No newline at end of file
diff --git a/src/com/android/contacts/profile/ProfileLoader.java b/src/com/android/contacts/profile/ProfileLoader.java
new file mode 100644
index 000000000..68c5a6b59
--- /dev/null
+++ b/src/com/android/contacts/profile/ProfileLoader.java
@@ -0,0 +1,107 @@
+package com.android.contacts.profile;
+
+import android.content.Context;
+import android.content.CursorLoader;
+import android.database.Cursor;
+import android.provider.ContactsContract.Contacts;
+import android.provider.ContactsContract.DisplayNameSources;
+import android.provider.ContactsContract.Profile;
+import android.text.TextUtils;
+import com.android.contacts.R;
+import com.android.contacts.preference.ContactsPreferences;
+
+/**
+ * Load MyProfile information for display on the navigation drawer.
+ */
+public final class ProfileLoader extends CursorLoader {
+
+    /**
+     * The projections that are used to obtain user profile
+     */
+    public static final class ProfileQuery {
+        /**
+         * Not instantiable.
+         */
+        private ProfileQuery() {}
+
+        public static final String[] PROFILE_PROJECTION_PRIMARY = new String[] {
+                Contacts._ID,                           // 0
+                Contacts.DISPLAY_NAME_PRIMARY,          // 1
+                Contacts.IS_USER_PROFILE,               // 2
+                Contacts.PHOTO_ID,                      // 3
+                Contacts.PHOTO_THUMBNAIL_URI,           // 4
+                Contacts.DISPLAY_NAME_SOURCE            // 5
+        };
+
+        public static final String[] PROFILE_PROJECTION_ALTERNATIVE = new String[] {
+                Contacts._ID,                           // 0
+                Contacts.DISPLAY_NAME_ALTERNATIVE,      // 1
+                Contacts.IS_USER_PROFILE,               // 2
+                Contacts.PHOTO_ID,                      // 3
+                Contacts.PHOTO_THUMBNAIL_URI,           // 4
+                Contacts.DISPLAY_NAME_SOURCE            // 5
+        };
+
+        public static final int CONTACT_ID               = 0;
+        public static final int CONTACT_DISPLAY_NAME     = 1;
+        public static final int CONTACT_IS_USER_PROFILE  = 2;
+        public static final int CONTACT_PHOTO_ID         = 3;
+        public static final int CONTACT_PHOTO_URI        = 4;
+        public static final int DISPLAY_NAME_SOURCE      = 5;
+    }
+
+    /*
+     * Apply the Name format setting(First name first/Last name first)
+     * to the display name of MyInfo at the navigation drawer.
+     * Settings->MyInfo also behaves the same.
+     */
+    public static String[] getProjection(Context context) {
+        final ContactsPreferences contactsPrefs = new ContactsPreferences(context);
+        final int displayOrder = contactsPrefs.getDisplayOrder();
+        if (displayOrder == ContactsPreferences.DISPLAY_ORDER_PRIMARY) {
+            return ProfileQuery.PROFILE_PROJECTION_PRIMARY;
+        }
+        return ProfileQuery.PROFILE_PROJECTION_ALTERNATIVE;
+    }
+
+    /** Returns a {@link ProfileItem} read from the given cursor */
+    public static ProfileItem getProfileItem(Context context, Cursor cursor) {
+        boolean hasProfile = false;
+        String displayName = null;
+        long contactId = -1;
+        long photoId = 0;
+        String photoUri = null;
+        int displayNameSource = DisplayNameSources.UNDEFINED;
+        if (cursor != null && cursor.moveToFirst()) {
+            hasProfile = cursor.getInt(ProfileQuery.CONTACT_IS_USER_PROFILE) == 1;
+            displayName = cursor.getString(ProfileQuery.CONTACT_DISPLAY_NAME);
+            contactId = cursor.getLong(ProfileQuery.CONTACT_ID);
+            photoId = cursor.getLong(ProfileQuery.CONTACT_PHOTO_ID);
+            photoUri = cursor.getString(ProfileQuery.CONTACT_PHOTO_URI);
+            displayNameSource = cursor.getInt(ProfileQuery.DISPLAY_NAME_SOURCE);
+        }
+        if (hasProfile && TextUtils.isEmpty(displayName)) {
+            displayName = context.getResources().getString(R.string.missing_name);
+        }
+        return new ProfileItem(displayName, contactId, photoId, photoUri, displayNameSource,
+                hasProfile);
+    }
+
+    public ProfileLoader(Context context, String[] projection) {
+        super(context,
+                Profile.CONTENT_URI,
+                projection,
+                null,
+                null,
+                null);
+    }
+
+    @Override
+    public Cursor loadInBackground() {
+        try {
+            return super.loadInBackground();
+        } catch (RuntimeException e) {
+            return null;
+        }
+    }
+}
-- 
2.17.1

