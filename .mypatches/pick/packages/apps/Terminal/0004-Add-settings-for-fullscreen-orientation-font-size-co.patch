From 063fd2a124972748e2ab09aabe95031904497e40 Mon Sep 17 00:00:00 2001
From: Tom Marshall <tdm@cyngn.com>
Date: Wed, 31 Dec 2014 14:42:11 -0800
Subject: [PATCH 4/7] Add settings for fullscreen, orientation, font size,
 color

Change-Id: Id631fce7fc6a40a8f982097e3b90e7c58c2cd889

Also use set colors for scrollback lines that aren't filled yet.

Change-Id: I3848eada46ae8df05c72a31c5a8a15b71d06fe76

Properly clear background when changing colors.

Change-Id: Iaab48ac635a8fe089852178813421aa0b570cf87

Some cleanup.

Change-Id: Ifac675898046550cb9e8abd6e7bde7de5bd55a47

Terminal: Cleanup duplicate strings

Change-Id: Ie787221b3d539e267571acacaaef1a7922b9390d

Terminal: Convert CheckBoxPreference to SwitchPreference

Change-Id: I84e4db497393069e01c65d1eabe33223653420de

Terminal: fix preference defaults

Change-Id: Ia1aacaee0eab44fd05b6b2649b3dfb708886a92a
Signed-off-by: Joey Rizzoli <joey@lineageos.org>
---
 AndroidManifest.xml                           |  9 +++
 jni/com_android_terminal_Terminal.cpp         | 79 +++++++++++++++----
 res/menu/activity.xml                         |  3 +
 res/values/arrays.xml                         | 61 ++++++++++++++
 res/values/strings.xml                        | 10 +++
 res/xml/settings.xml                          | 56 +++++++++++++
 src/com/android/terminal/Terminal.java        |  7 ++
 .../android/terminal/TerminalActivity.java    | 62 ++++++++++++++-
 .../terminal/TerminalSettingsActivity.java    | 61 ++++++++++++++
 src/com/android/terminal/TerminalView.java    | 67 ++++++++++++++--
 10 files changed, 392 insertions(+), 23 deletions(-)
 create mode 100644 res/values/arrays.xml
 create mode 100644 res/xml/settings.xml
 create mode 100644 src/com/android/terminal/TerminalSettingsActivity.java

diff --git a/AndroidManifest.xml b/AndroidManifest.xml
index 20627ee..441ba7f 100644
--- a/AndroidManifest.xml
+++ b/AndroidManifest.xml
@@ -42,6 +42,15 @@
             </intent-filter>
         </activity>
 
+        <activity
+            android:name=".TerminalSettingsActivity"
+            android:label="@string/menu_item_settings"
+            android:excludeFromRecents="true">
+            <intent-filter>
+                <action android:name="android.intent.action.MAIN" />
+            </intent-filter>
+        </activity>
+
         <service android:name=".TerminalService" />
     </application>
 
diff --git a/jni/com_android_terminal_Terminal.cpp b/jni/com_android_terminal_Terminal.cpp
index 277ca89..99623a8 100644
--- a/jni/com_android_terminal_Terminal.cpp
+++ b/jni/com_android_terminal_Terminal.cpp
@@ -119,11 +119,13 @@ public:
     bool flushInput();
 
     status_t resize(dimen_t rows, dimen_t cols, dimen_t scrollRows);
+    status_t setColors(int fg, int bg);
 
     status_t onPushline(dimen_t cols, const VTermScreenCell* cells);
     status_t onPopline(dimen_t cols, VTermScreenCell* cells);
+    int onCursorChange(const VTermPos& oldPos, const VTermPos& newPos, bool visible);
 
-    void getCellLocked(VTermPos pos, VTermScreenCell* cell);
+    bool getCellLocked(VTermPos pos, VTermScreenCell* cell);
 
     dimen_t getRows() const;
     dimen_t getCols() const;
@@ -145,6 +147,7 @@ private:
     dimen_t mRows;
     dimen_t mCols;
     bool mKilled;
+    bool mCursorVisible;
 
     ScrollbackLine **mScroll;
     dimen_t mScrollCur;
@@ -185,9 +188,7 @@ static int term_movecursor(VTermPos pos, VTermPos oldpos, int visible, void *use
     ALOGW("term_movecursor");
 #endif
 
-    JNIEnv* env = AndroidRuntime::getJNIEnv();
-    return env->CallIntMethod(term->getCallbacks(), moveCursorMethod, pos.row,
-            pos.col, oldpos.row, oldpos.col, visible);
+    return term->onCursorChange(oldpos, pos, visible != 0);
 }
 
 static int term_settermprop(VTermProp prop, VTermValue *val, void *user) {
@@ -263,9 +264,13 @@ static VTermScreenCallbacks cb = {
     .sb_popline = term_sb_popline,
 };
 
+static inline int toArgb(const VTermColor& color) {
+    return (0xff << 24 | color.red << 16 | color.green << 8 | color.blue);
+}
+
 Terminal::Terminal(jobject callbacks) :
         mCallbacks(callbacks), mRows(25), mCols(80), mKilled(false),
-        mScrollCur(0), mScrollSize(100) {
+        mCursorVisible(true), mScrollCur(0), mScrollSize(100) {
     JNIEnv* env = AndroidRuntime::getJNIEnv();
     mCallbacks = env->NewGlobalRef(callbacks);
 
@@ -430,6 +435,44 @@ status_t Terminal::resize(dimen_t rows, dimen_t cols, dimen_t scrollRows) {
     return 0;
 }
 
+status_t Terminal::setColors(int fg, int bg) {
+    Mutex::Autolock lock(mLock);
+
+    ALOGD("setColors(0x%x, 0x%x)", fg, bg);
+
+    VTermState* state = vterm_obtain_state(mVt);
+    VTermColor oldFgColor, oldBgColor;
+    vterm_state_get_default_colors(state, &oldFgColor, &oldBgColor);
+
+    int changed = fg != toArgb(oldFgColor) || bg != toArgb(oldBgColor);
+    VTermColor fg_color = { (uint8_t)((fg>>16)&0xff),
+                            (uint8_t)((fg>>8)&0xff),
+                            (uint8_t)(fg&0xff) };
+    VTermColor bg_color = { (uint8_t)((bg>>16)&0xff),
+                            (uint8_t)((bg>>8)&0xff),
+                            (uint8_t)(bg&0xff) };
+    vterm_state_set_default_colors(state, &fg_color, &bg_color);
+
+    VTermPos oldPos, newPos;
+    vterm_state_get_cursorpos(state, &oldPos);
+    vterm_state_reset(state, changed);
+    vterm_state_get_cursorpos(state, &newPos);
+
+    if (oldPos.row != newPos.row || oldPos.col != newPos.col) {
+        onCursorChange(oldPos, newPos, mCursorVisible);
+    }
+
+    return 0;
+}
+
+int Terminal::onCursorChange(const VTermPos& oldPos, const VTermPos& newPos, bool visible) {
+    mCursorVisible = visible;
+
+    JNIEnv* env = AndroidRuntime::getJNIEnv();
+    return env->CallIntMethod(getCallbacks(), moveCursorMethod, newPos.row,
+            newPos.col, oldPos.row, oldPos.col, visible);
+}
+
 status_t Terminal::onPushline(dimen_t cols, const VTermScreenCell* cells) {
     ScrollbackLine* line = NULL;
     if (mScrollCur == mScrollSize) {
@@ -478,7 +521,7 @@ status_t Terminal::onPopline(dimen_t cols, VTermScreenCell* cells) {
     return 1;
 }
 
-void Terminal::getCellLocked(VTermPos pos, VTermScreenCell* cell) {
+bool Terminal::getCellLocked(VTermPos pos, VTermScreenCell* cell) {
     // The UI may be asking for cell data while the model is changing
     // underneath it, so we always fill with meaningful data.
 
@@ -490,7 +533,7 @@ void Terminal::getCellLocked(VTermPos pos, VTermScreenCell* cell) {
 #if DEBUG_SCROLLBACK
             cell->bg.red = 255;
 #endif
-            return;
+            return false;
         }
 
         ScrollbackLine* line = mScroll[scrollRow - 1];
@@ -501,7 +544,7 @@ void Terminal::getCellLocked(VTermPos pos, VTermScreenCell* cell) {
 #if DEBUG_SCROLLBACK
             cell->bg.blue = 255;
 #endif
-            return;
+            return true;
         } else {
             // Extend last scrollback cell into invalid region
             line->getCell(line->cols - 1, cell);
@@ -510,7 +553,7 @@ void Terminal::getCellLocked(VTermPos pos, VTermScreenCell* cell) {
 #if DEBUG_SCROLLBACK
             cell->bg.green = 255;
 #endif
-            return;
+            return true;
         }
     }
 
@@ -520,11 +563,12 @@ void Terminal::getCellLocked(VTermPos pos, VTermScreenCell* cell) {
 #if DEBUG_SCROLLBACK
         cell->bg.red = 128;
 #endif
-        return;
+        return false;
     }
 
     // Valid screen cell
     vterm_screen_get_cell(mVts, pos, cell);
+    return true;
 }
 
 dimen_t Terminal::getRows() const {
@@ -568,8 +612,10 @@ static jint com_android_terminal_Terminal_nativeResize(JNIEnv* env,
     return term->resize(rows, cols, scrollRows);
 }
 
-static inline int toArgb(const VTermColor& color) {
-    return (0xff << 24 | color.red << 16 | color.green << 8 | color.blue);
+static jint com_android_terminal_Terminal_nativeSetColors(JNIEnv* env,
+        jclass clazz, jlong ptr, jint fg, jint bg) {
+    Terminal* term = reinterpret_cast<Terminal*>(ptr);
+    return term->setColors(fg, bg);
 }
 
 static inline bool isCellStyleEqual(const VTermScreenCell& a, const VTermScreenCell& b) {
@@ -609,11 +655,13 @@ static jint com_android_terminal_Terminal_nativeGetCellRun(JNIEnv* env,
     size_t colSize = 0;
     while ((size_t) pos.col < term->getCols()) {
         memset(&cell, 0, sizeof(VTermScreenCell));
-        term->getCellLocked(pos, &cell);
+        bool valid = term->getCellLocked(pos, &cell);
 
         if (colSize == 0) {
-            env->SetIntField(run, cellRunFgField, toArgb(cell.fg));
-            env->SetIntField(run, cellRunBgField, toArgb(cell.bg));
+            if (valid) {
+                env->SetIntField(run, cellRunFgField, toArgb(cell.fg));
+                env->SetIntField(run, cellRunBgField, toArgb(cell.bg));
+            }
             memcpy(&firstCell, &cell, sizeof(VTermScreenCell));
         } else {
             if (!isCellStyleEqual(cell, firstCell)) {
@@ -681,6 +729,7 @@ static JNINativeMethod gMethods[] = {
     { "nativeDestroy", "(J)I", (void*)com_android_terminal_Terminal_nativeDestroy },
     { "nativeRun", "(J)I", (void*)com_android_terminal_Terminal_nativeRun },
     { "nativeResize", "(JIII)I", (void*)com_android_terminal_Terminal_nativeResize },
+    { "nativeSetColors", "(JII)I", (void*)com_android_terminal_Terminal_nativeSetColors },
     { "nativeGetCellRun", "(JIILcom/android/terminal/Terminal$CellRun;)I", (void*)com_android_terminal_Terminal_nativeGetCellRun },
     { "nativeGetRows", "(J)I", (void*)com_android_terminal_Terminal_nativeGetRows },
     { "nativeGetCols", "(J)I", (void*)com_android_terminal_Terminal_nativeGetCols },
diff --git a/res/menu/activity.xml b/res/menu/activity.xml
index d1be0ae..74abfd3 100644
--- a/res/menu/activity.xml
+++ b/res/menu/activity.xml
@@ -25,4 +25,7 @@
         android:title="@string/menu_close_tab"
         android:icon="@android:drawable/ic_menu_close_clear_cancel"
         android:showAsAction="ifRoom" />
+    <item
+        android:id="@+id/menu_item_settings"
+        android:title="@string/menu_item_settings" />
 </menu>
diff --git a/res/values/arrays.xml b/res/values/arrays.xml
new file mode 100644
index 0000000..1c83e9b
--- /dev/null
+++ b/res/values/arrays.xml
@@ -0,0 +1,61 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!-- Copyright (C) 2007 The Android Open Source Project
+
+     Licensed under the Apache License, Version 2.0 (the "License");
+     you may not use this file except in compliance with the License.
+     You may obtain a copy of the License at
+
+          http://www.apache.org/licenses/LICENSE-2.0
+
+     Unless required by applicable law or agreed to in writing, software
+     distributed under the License is distributed on an "AS IS" BASIS,
+     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
+     implied.
+     See the License for the specific language governing permissions and
+     limitations under the License.
+-->
+<resources>
+    <string-array name="screen_orientation_labels">
+        <item>Automatic</item>
+        <item>Landscape</item>
+        <item>Portrait</item>
+    </string-array>
+    <string-array name="screen_orientation_values" translatable="false">
+        <item>automatic</item>
+        <item>landscape</item>
+        <item>portrait</item>
+    </string-array>
+
+    <string-array name="font_size_labels">
+        <item>10 pt</item>
+        <item>12 pt</item>
+        <item>14 pt</item>
+        <item>16 pt</item>
+        <item>20 pt</item>
+        <item>24 pt</item>
+    </string-array>
+    <string-array name="font_size_values" translatable="false">
+        <item>10</item>
+        <item>12</item>
+        <item>14</item>
+        <item>16</item>
+        <item>20</item>
+        <item>24</item>
+    </string-array>
+
+    <string-array name="text_colors_labels">
+        <item>Black text on white</item>
+        <item>White text on black</item>
+        <item>Green text on black</item>
+        <item>Amber text on black</item>
+        <item>Red text on black</item>
+    </string-array>
+    <string-array name="text_colors_values" translatable="false">
+        <item>#000000/#ffffff</item>
+        <item>#f0f0f0/#000000</item>
+        <item>#00f000/#000000</item>
+        <item>#f0c000/#000000</item>
+        <item>#f00000/#000000</item>
+    </string-array>
+
+</resources>
diff --git a/res/values/strings.xml b/res/values/strings.xml
index cbcaef3..aa65847 100644
--- a/res/values/strings.xml
+++ b/res/values/strings.xml
@@ -21,4 +21,14 @@
     <string name="menu_new_tab">New tab</string>
     <string name="menu_close_tab">Close tab</string>
 
+    <string name="menu_item_settings">Settings</string>
+
+    <string name="screen_settings">Screen settings</string>
+    <string name="fullscreen_mode_title">Fullscreen mode</string>
+    <string name="screen_orientation_title">Screen orientation</string>
+
+    <string name="text_settings">Text settings</string>
+    <string name="font_size_title">Font size</string>
+    <string name="text_colors_title">Text colors</string>
+
 </resources>
diff --git a/res/xml/settings.xml b/res/xml/settings.xml
new file mode 100644
index 0000000..ea85402
--- /dev/null
+++ b/res/xml/settings.xml
@@ -0,0 +1,56 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!-- Copyright (c) 2014, The Linux Foundation. All rights reserved.
+     Not a Contribution.
+
+     Copyright (C) 2009 The Android Open Source Project
+
+     Licensed under the Apache License, Version 2.0 (the "License");
+     you may not use this file except in compliance with the License.
+     You may obtain a copy of the License at
+          http://www.apache.org/licenses/LICENSE-2.0
+     Unless required by applicable law or agreed to in writing, software
+     distributed under the License is distributed on an "AS IS" BASIS,
+     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+     See the License for the specific language governing permissions and
+     limitations under the License.
+-->
+
+<PreferenceScreen
+    xmlns:android="http://schemas.android.com/apk/res/android"
+    android:title="@string/menu_item_settings">
+    <PreferenceCategory
+        android:title="@string/screen_settings">
+        <SwitchPreference
+            android:key="fullscreen_mode"
+            android:title="@string/fullscreen_mode_title"
+            android:defaultValue="false" />
+        <ListPreference
+            android:key="screen_orientation"
+            android:title="@string/screen_orientation_title"
+            android:summary="%s"
+            android:defaultValue="automatic"
+            android:dialogTitle="@string/screen_orientation_title"
+            android:entries="@array/screen_orientation_labels"
+            android:entryValues="@array/screen_orientation_values" />
+    </PreferenceCategory>
+    <PreferenceCategory
+        android:title="@string/text_settings">
+        <ListPreference
+            android:key="font_size"
+            android:title="@string/font_size_title"
+            android:summary="%s"
+            android:dialogTitle="@string/font_size_title"
+            android:entries="@array/font_size_labels"
+            android:entryValues="@array/font_size_values" />
+        <ListPreference
+            android:key="text_colors"
+            android:title="@string/text_colors_title"
+            android:summary="%s"
+            android:dialogTitle="@string/text_colors_title"
+            android:entries="@array/text_colors_labels"
+            android:entryValues="@array/text_colors_values"
+            android:defaultValue="#FFFFFF/#000000" />
+    </PreferenceCategory>
+    <!-- Keyboard category -->
+    <!-- Shell category -->
+</PreferenceScreen>
diff --git a/src/com/android/terminal/Terminal.java b/src/com/android/terminal/Terminal.java
index b6e981e..702e6f0 100644
--- a/src/com/android/terminal/Terminal.java
+++ b/src/com/android/terminal/Terminal.java
@@ -147,6 +147,12 @@ public class Terminal {
         }
     }
 
+    public void setColors(int fg, int bg) {
+        if (nativeSetColors(mNativePtr, fg, bg) != 0) {
+            throw new IllegalStateException("setColors failed");
+        }
+    }
+
     public int getRows() {
         return nativeGetRows(mNativePtr);
     }
@@ -195,6 +201,7 @@ public class Terminal {
 
     private static native int nativeRun(long ptr);
     private static native int nativeResize(long ptr, int rows, int cols, int scrollRows);
+    private static native int nativeSetColors(long ptr, int fg, int bg);
     private static native int nativeGetCellRun(long ptr, int row, int col, CellRun run);
     private static native int nativeGetRows(long ptr);
     private static native int nativeGetCols(long ptr);
diff --git a/src/com/android/terminal/TerminalActivity.java b/src/com/android/terminal/TerminalActivity.java
index 5580fdd..8fa5266 100644
--- a/src/com/android/terminal/TerminalActivity.java
+++ b/src/com/android/terminal/TerminalActivity.java
@@ -23,9 +23,12 @@ import android.content.ComponentName;
 import android.content.Context;
 import android.content.Intent;
 import android.content.ServiceConnection;
+import android.content.SharedPreferences;
+import android.content.pm.ActivityInfo;
 import android.os.Bundle;
 import android.os.IBinder;
 import android.os.Parcelable;
+import android.preference.PreferenceManager;
 import androidx.viewpager.widget.PagerAdapter;
 import androidx.viewpager.widget.PagerTitleStrip;
 import androidx.viewpager.widget.ViewPager;
@@ -142,6 +145,48 @@ public class TerminalActivity extends Activity {
         }
     };
 
+    private final View.OnSystemUiVisibilityChangeListener mUiVisibilityChangeListener =
+            new View.OnSystemUiVisibilityChangeListener() {
+        @Override
+        public void onSystemUiVisibilityChange(int visibility) {
+            if ((visibility & View.SYSTEM_UI_FLAG_FULLSCREEN) != 0) {
+                getActionBar().hide();
+            } else {
+                getActionBar().show();
+            }
+        }
+    };
+
+    public void updatePreferences() {
+        SharedPreferences sp = PreferenceManager.getDefaultSharedPreferences(this);
+        if (sp.getBoolean(TerminalSettingsActivity.KEY_FULLSCREEN_MODE, false)) {
+            getWindow().getDecorView().setSystemUiVisibility(View.SYSTEM_UI_FLAG_FULLSCREEN);
+            getActionBar().hide();
+        } else {
+            getWindow().getDecorView().setSystemUiVisibility(View.SYSTEM_UI_FLAG_VISIBLE);
+            getActionBar().show();
+        }
+
+        final String orientation = sp.getString(TerminalSettingsActivity.KEY_SCREEN_ORIENTATION,
+                "automatic");
+        if (orientation.equals("automatic")) {
+            setRequestedOrientation(ActivityInfo.SCREEN_ORIENTATION_SENSOR);
+        } else if (orientation.equals("portrait")) {
+            setRequestedOrientation(ActivityInfo.SCREEN_ORIENTATION_PORTRAIT);
+        } else if (orientation.equals("landscape")) {
+            setRequestedOrientation(ActivityInfo.SCREEN_ORIENTATION_LANDSCAPE);
+        }
+
+        for (int i = 0; i < mPager.getChildCount(); ++i) {
+            View v = mPager.getChildAt(i);
+            if (v instanceof TerminalView) {
+                TerminalView view = (TerminalView) v;
+                view.updatePreferences();
+                view.invalidateViews();
+            }
+        }
+    }
+
     @Override
     protected void onCreate(Bundle savedInstanceState) {
         super.onCreate(savedInstanceState);
@@ -152,13 +197,22 @@ public class TerminalActivity extends Activity {
         mTitles = (PagerTitleStrip) findViewById(R.id.titles);
 
         mPager.setAdapter(mTermAdapter);
+
+        View decorView = getWindow().getDecorView();
+        decorView.setOnSystemUiVisibilityChangeListener(mUiVisibilityChangeListener);
     }
 
     @Override
     protected void onStart() {
         super.onStart();
-        bindService(
-                new Intent(this, TerminalService.class), mServiceConn, Context.BIND_AUTO_CREATE);
+        bindService(new Intent(this, TerminalService.class),
+                mServiceConn, Context.BIND_AUTO_CREATE);
+    }
+
+    @Override
+    protected void onResume() {
+        updatePreferences();
+        super.onResume();
     }
 
     @Override
@@ -199,6 +253,10 @@ public class TerminalActivity extends Activity {
                 invalidateOptionsMenu();
                 return true;
             }
+            case R.id.menu_item_settings: {
+                startActivity(new Intent(TerminalActivity.this, TerminalSettingsActivity.class));
+                return true;
+            }
         }
         return false;
     }
diff --git a/src/com/android/terminal/TerminalSettingsActivity.java b/src/com/android/terminal/TerminalSettingsActivity.java
new file mode 100644
index 0000000..013c0f2
--- /dev/null
+++ b/src/com/android/terminal/TerminalSettingsActivity.java
@@ -0,0 +1,61 @@
+/*
+ * Copyright (C) 2014 The Android Open Source Project
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.android.terminal;
+
+import android.os.Bundle;
+import android.preference.ListPreference;
+import android.preference.Preference;
+import android.preference.PreferenceActivity;
+import android.preference.PreferenceScreen;
+import android.preference.SwitchPreference;
+import android.util.Log;
+import android.view.Menu;
+import android.view.MenuItem;
+
+import static com.android.terminal.Terminal.TAG;
+
+/**
+ * Settings for Terminal.
+ */
+public class TerminalSettingsActivity extends PreferenceActivity {
+
+    public static final String KEY_FULLSCREEN_MODE = "fullscreen_mode";
+    public static final String KEY_SCREEN_ORIENTATION = "screen_orientation";
+    public static final String KEY_FONT_SIZE = "font_size";
+    public static final String KEY_TEXT_COLORS = "text_colors";
+
+    private SwitchPreference mFullscreenModePref;
+    private ListPreference mScreenOrientationPref;
+    private ListPreference mFontSizePref;
+    private ListPreference mTextColorsPref;
+
+    @Override
+    protected void onCreate(Bundle savedInstanceState) {
+        super.onCreate(savedInstanceState);
+        addPreferencesFromResource(R.xml.settings);
+
+        mFullscreenModePref = (SwitchPreference) findPreference(KEY_FULLSCREEN_MODE);
+        mScreenOrientationPref = (ListPreference) findPreference(KEY_SCREEN_ORIENTATION);
+        mFontSizePref = (ListPreference) findPreference(KEY_FONT_SIZE);
+        mTextColorsPref = (ListPreference) findPreference(KEY_TEXT_COLORS);
+    }
+
+    @Override
+    public boolean onOptionsItemSelected(MenuItem item) {
+        return super.onOptionsItemSelected(item);
+    }
+}
diff --git a/src/com/android/terminal/TerminalView.java b/src/com/android/terminal/TerminalView.java
index 076da80..6500d75 100644
--- a/src/com/android/terminal/TerminalView.java
+++ b/src/com/android/terminal/TerminalView.java
@@ -19,11 +19,15 @@ package com.android.terminal;
 import static com.android.terminal.Terminal.TAG;
 
 import android.content.Context;
+import android.content.SharedPreferences;
+import android.graphics.Color;
 import android.graphics.Paint;
 import android.graphics.Paint.FontMetrics;
 import android.graphics.Typeface;
 import android.os.Parcelable;
+import android.preference.PreferenceManager;
 import android.util.AttributeSet;
+import android.util.DisplayMetrics;
 import android.util.Log;
 import android.view.KeyEvent;
 import android.view.View;
@@ -86,12 +90,11 @@ public class TerminalView extends ListView {
             // Positions of each possible cell
             // TODO: make sure this works with surrogate pairs
             pos = new float[MAX_RUN_LENGTH * 2];
-            setTextSize(20);
+            textPaint.setTypeface(Typeface.MONOSPACE);
+            textPaint.setAntiAlias(true);
         }
 
         public void setTextSize(float textSize) {
-            textPaint.setTypeface(Typeface.MONOSPACE);
-            textPaint.setAntiAlias(true);
             textPaint.setTextSize(textSize);
 
             // Read metrics to get exact pixel dimensions
@@ -111,11 +114,29 @@ public class TerminalView extends ListView {
         }
     }
 
-    private final AdapterView.OnItemClickListener mClickListener = new AdapterView.OnItemClickListener() {
+    private void toggleFullscreenMode() {
+        SharedPreferences sp = PreferenceManager.getDefaultSharedPreferences(getContext());
+        boolean oldVal = sp.getBoolean(TerminalSettingsActivity.KEY_FULLSCREEN_MODE, false);
+        SharedPreferences.Editor editor = sp.edit();
+        editor.putBoolean(TerminalSettingsActivity.KEY_FULLSCREEN_MODE, !oldVal);
+        editor.commit();
+        TerminalActivity activity = (TerminalActivity) getContext();
+        activity.updatePreferences();
+    }
+
+    private final AdapterView.OnItemClickListener mClickListener =
+            new AdapterView.OnItemClickListener() {
         @Override
         public void onItemClick(AdapterView<?> parent, View v, int pos, long id) {
+            // Clicking on top half of view toggles fullscreen mode
+            if (pos - mScrollRows < mRows / 2) {
+                toggleFullscreenMode();
+                return;
+            }
+            // Clicking on bottom half of view shows soft keyboard
             if (parent.requestFocus()) {
-                InputMethodManager imm = (InputMethodManager) parent.getContext().getSystemService(Context.INPUT_METHOD_SERVICE);
+                InputMethodManager imm = (InputMethodManager)
+                        parent.getContext().getSystemService(Context.INPUT_METHOD_SERVICE);
                 imm.showSoftInput(parent, InputMethodManager.SHOW_IMPLICIT);
             }
         }
@@ -131,6 +152,11 @@ public class TerminalView extends ListView {
         }
     };
 
+    private final float PT_PER_INCH = 72.0f;
+    private float ptToDp(float pt) {
+        return (pt / PT_PER_INCH) * (float)DisplayMetrics.DENSITY_DEFAULT;
+    }
+
     public TerminalView(Context context) {
         this(context, null);
     }
@@ -203,7 +229,8 @@ public class TerminalView extends ListView {
         }
 
         @Override
-        public void onMoveCursor(int posRow, int posCol, int oldPosRow, int oldPosCol, int visible) {
+        public void onMoveCursor(int posRow, int posCol, int oldPosRow,
+                int oldPosCol, int visible) {
             post(mDamageRunnable);
         }
 
@@ -285,6 +312,8 @@ public class TerminalView extends ListView {
 
             mMetrics.cursorPaint.setColor(0xfff0f0f0);
 
+            updatePreferences();
+
             // Populate any current settings
             mRows = mTerm.getRows();
             mCols = mTerm.getCols();
@@ -336,4 +365,30 @@ public class TerminalView extends ListView {
             }
         };
     }
+
+    public void updatePreferences() {
+        SharedPreferences sp = PreferenceManager.getDefaultSharedPreferences(getContext());
+        String val;
+
+        val = sp.getString(TerminalSettingsActivity.KEY_FONT_SIZE, "12");
+        mMetrics.setTextSize(ptToDp(Float.parseFloat(val)));
+
+        val = sp.getString(TerminalSettingsActivity.KEY_TEXT_COLORS, "black/white");
+        int fg = 0x000000;
+        int bg = 0xffffff;
+        int idx = val.indexOf('/');
+        if (idx != -1) {
+            try {
+                fg = Color.parseColor(val.substring(0, idx));
+                bg = Color.parseColor(val.substring(idx + 1));
+            }
+            catch (IllegalArgumentException e) {
+                // Ignore
+            }
+        }
+        mTerm.setColors(fg, bg);
+        mMetrics.run.fg = fg;
+        mMetrics.run.bg = bg;
+        mMetrics.cursorPaint.setColor(fg);
+    }
 }
-- 
2.17.1

