From ce4269ee00c98af19c186eed9a2b77db98e7345b Mon Sep 17 00:00:00 2001
From: monojp <martin@herndl.org>
Date: Fri, 6 Apr 2018 23:49:31 +0200
Subject: [PATCH 2/3] Exchange: request permissions

Change-Id: I3fe87cc75d5152aa847b539cec7d5f60f7c5ed44
---
 Android.mk                                    |  3 +-
 AndroidManifest.xml                           |  2 +
 .../exchange/PermissionRequestActivity.java   | 65 +++++++++++++++++++
 src/com/android/exchange/eas/EasSyncBase.java |  2 +-
 .../android/exchange/eas/EasSyncCalendar.java | 16 +++++
 .../android/exchange/eas/EasSyncContacts.java | 18 ++++-
 6 files changed, 103 insertions(+), 3 deletions(-)
 create mode 100644 src/com/android/exchange/PermissionRequestActivity.java

diff --git a/Android.mk b/Android.mk
index 662c52fd..91625a9b 100644
--- a/Android.mk
+++ b/Android.mk
@@ -32,6 +32,8 @@ LOCAL_AAPT_FLAGS += --extra-packages com.android.emailcommon
 LOCAL_SRC_FILES := $(call all-java-files-under, src)
 LOCAL_SRC_FILES += $(call all-java-files-under, build/src)
 
+LOCAL_JAVA_LIBRARIES := org.apache.http.legacy
+
 LOCAL_STATIC_JAVA_LIBRARIES := android-common com.android.emailcommon
 LOCAL_STATIC_JAVA_LIBRARIES += calendar-common
 LOCAL_STATIC_JAVA_LIBRARIES += android-support-v4
@@ -40,7 +42,6 @@ LOCAL_PACKAGE_NAME := Exchange2
 LOCAL_OVERRIDES_PACKAGES := Exchange
 
 LOCAL_PROGUARD_FLAG_FILES := proguard.flags
-LOCAL_SDK_VERSION := 19
 
 LOCAL_EMMA_COVERAGE_FILTER += +com.android.exchange.*
 
diff --git a/AndroidManifest.xml b/AndroidManifest.xml
index e5868f0a..ba2947dc 100644
--- a/AndroidManifest.xml
+++ b/AndroidManifest.xml
@@ -139,6 +139,8 @@
                 <category android:name="android.intent.category.DEFAULT" />
             </intent-filter>
         </activity>
+        <activity android:name=".PermissionRequestActivity"
+                  android:theme="@android:style/Theme.NoDisplay" />
         <activity android:name=".SettingsRedirector">
             <intent-filter>
                 <action android:name="android.intent.action.MANAGE_NETWORK_USAGE" />
diff --git a/src/com/android/exchange/PermissionRequestActivity.java b/src/com/android/exchange/PermissionRequestActivity.java
new file mode 100644
index 00000000..a66dd27a
--- /dev/null
+++ b/src/com/android/exchange/PermissionRequestActivity.java
@@ -0,0 +1,65 @@
+/*
+ * Copyright (C) 2018 The LineageOS Project
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package com.android.exchange;
+
+import android.app.Activity;
+import android.content.Intent;
+import android.content.pm.PackageManager;
+import android.os.Bundle;
+import android.support.v4.app.ActivityCompat;
+import android.util.Log;
+
+public class PermissionRequestActivity extends Activity
+        implements ActivityCompat.OnRequestPermissionsResultCallback {
+    private static final String TAG = Eas.LOG_TAG;
+
+    @Override
+    protected void onCreate(Bundle savedInstanceState) {
+        super.onCreate(savedInstanceState);
+        Intent intent = getIntent();
+        String[] permissions = intent.getStringArrayExtra("permissions");
+        if (permissions == null) {
+            Log.e(TAG, "No permission StringArray found in intent for PermissionRequestActivity");
+        } else {
+            int requestCode = intent.getIntExtra("requestCode", 0);
+            if (!permissionsGranted(permissions)) {
+                requestPermissions(permissions, requestCode);
+            }
+        }
+
+        finish();
+    }
+
+    private boolean permissionsGranted(String[] permissions) {
+        for (String permission : permissions) {
+            if (checkSelfPermission(permission) != PackageManager.PERMISSION_GRANTED) {
+                return false;
+            }
+        }
+        return true;
+    }
+
+    @Override
+    public void onRequestPermissionsResult(int requestCode,
+                                           String permissions[], int[] grantResults) {
+        for (int i = 0; i < permissions.length; i++) {
+            if (grantResults[i] != PackageManager.PERMISSION_GRANTED) {
+                Log.i(TAG, "Permission " + permissions[i] + " was not granted, request code was "
+                        + requestCode);
+            }
+        }
+    }
+}
diff --git a/src/com/android/exchange/eas/EasSyncBase.java b/src/com/android/exchange/eas/EasSyncBase.java
index 8e77e26d..e3090d63 100644
--- a/src/com/android/exchange/eas/EasSyncBase.java
+++ b/src/com/android/exchange/eas/EasSyncBase.java
@@ -167,7 +167,7 @@ public class EasSyncBase extends EasOperation {
                 return new EasSyncCalendar(mContext, mAccount, mMailbox);
             }
             case Mailbox.TYPE_CONTACTS:
-                return new EasSyncContacts(mAccount.mEmailAddress);
+                return new EasSyncContacts(mContext, mAccount.mEmailAddress);
             default:
                 LogUtils.e(LOG_TAG, "unexpected collectiontype %d", type);
                 return null;
diff --git a/src/com/android/exchange/eas/EasSyncCalendar.java b/src/com/android/exchange/eas/EasSyncCalendar.java
index 418d5912..abd769e0 100644
--- a/src/com/android/exchange/eas/EasSyncCalendar.java
+++ b/src/com/android/exchange/eas/EasSyncCalendar.java
@@ -1,11 +1,13 @@
 package com.android.exchange.eas;
 
+import android.Manifest;
 import android.content.ContentResolver;
 import android.content.ContentUris;
 import android.content.ContentValues;
 import android.content.Context;
 import android.content.Entity;
 import android.content.EntityIterator;
+import android.content.Intent;
 import android.database.Cursor;
 import android.database.DatabaseUtils;
 import android.net.Uri;
@@ -29,6 +31,7 @@ import com.android.emailcommon.provider.EmailContent.Message;
 import com.android.emailcommon.provider.Mailbox;
 import com.android.emailcommon.utility.Utility;
 import com.android.exchange.Eas;
+import com.android.exchange.PermissionRequestActivity;
 import com.android.exchange.R;
 import com.android.exchange.adapter.AbstractSyncParser;
 import com.android.exchange.adapter.CalendarSyncParser;
@@ -52,6 +55,8 @@ import java.util.UUID;
 public class EasSyncCalendar extends EasSyncCollectionTypeBase {
     private static final String TAG = Eas.LOG_TAG;
 
+    private static final int PERMISSION_REQUEST_CODE = 1;
+
     // TODO: Some constants are copied from CalendarSyncAdapter and are still used by the parser.
     // These values need to stay in sync; when the parser is cleaned up, be sure to unify them.
 
@@ -128,6 +133,7 @@ public class EasSyncCalendar extends EasSyncCollectionTypeBase {
     public EasSyncCalendar(final Context context, final Account account,
             final Mailbox mailbox) {
         super();
+        requestPermissions(context);
         mAndroidAccount = new android.accounts.Account(account.mEmailAddress,
             Eas.EXCHANGE_ACCOUNT_MANAGER_TYPE);
         final ContentResolver cr = context.getContentResolver();
@@ -187,6 +193,16 @@ public class EasSyncCalendar extends EasSyncCollectionTypeBase {
         }
     }
 
+    private void requestPermissions(Context context) {
+        Intent permissionIntent = new Intent(context, PermissionRequestActivity.class);
+        permissionIntent.putExtra("permissions", new String[]{Manifest.permission.READ_CALENDAR,
+                Manifest.permission.WRITE_CALENDAR});
+        permissionIntent.putExtra("requestCode", PERMISSION_REQUEST_CODE);
+        permissionIntent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK
+                | Intent.FLAG_ACTIVITY_EXCLUDE_FROM_RECENTS);
+        context.startActivity(permissionIntent);
+    }
+
     @Override
     public void setSyncOptions(final Context context, final Serializer s,
         final double protocolVersion, final Account account, final Mailbox mailbox,
diff --git a/src/com/android/exchange/eas/EasSyncContacts.java b/src/com/android/exchange/eas/EasSyncContacts.java
index 0b9d9440..e79d05ec 100644
--- a/src/com/android/exchange/eas/EasSyncContacts.java
+++ b/src/com/android/exchange/eas/EasSyncContacts.java
@@ -1,5 +1,6 @@
 package com.android.exchange.eas;
 
+import android.Manifest;
 import android.content.ContentProviderOperation;
 import android.content.ContentResolver;
 import android.content.ContentUris;
@@ -7,6 +8,7 @@ import android.content.ContentValues;
 import android.content.Context;
 import android.content.Entity;
 import android.content.EntityIterator;
+import android.content.Intent;
 import android.database.Cursor;
 import android.net.Uri;
 import android.provider.ContactsContract;
@@ -32,6 +34,7 @@ import com.android.emailcommon.provider.Account;
 import com.android.emailcommon.provider.Mailbox;
 import com.android.emailcommon.utility.Utility;
 import com.android.exchange.Eas;
+import com.android.exchange.PermissionRequestActivity;
 import com.android.exchange.adapter.AbstractSyncParser;
 import com.android.exchange.adapter.ContactsSyncParser;
 import com.android.exchange.adapter.Serializer;
@@ -56,6 +59,8 @@ import java.util.TimeZone;
 public class EasSyncContacts extends EasSyncCollectionTypeBase {
     private static final String TAG = Eas.LOG_TAG;
 
+    private static final int PERMISSION_REQUEST_CODE = 2;
+
     public static final int PIM_WINDOW_SIZE_CONTACTS = 10;
 
     private static final String MIMETYPE_GROUP_MEMBERSHIP_AND_ID_EQUALS =
@@ -153,11 +158,22 @@ public class EasSyncContacts extends EasSyncCollectionTypeBase {
         public static final String ACCOUNT_NAME = "data8";
     }
 
-    public EasSyncContacts(final String emailAddress) {
+    public EasSyncContacts(final Context context, final String emailAddress) {
+        requestPermissions(context);
         mAccountManagerAccount = new android.accounts.Account(emailAddress,
                 Eas.EXCHANGE_ACCOUNT_MANAGER_TYPE);
     }
 
+    private void requestPermissions(Context context) {
+        Intent permissionIntent = new Intent(context, PermissionRequestActivity.class);
+        permissionIntent.putExtra("permissions", new String[]{Manifest.permission.READ_CONTACTS,
+                Manifest.permission.WRITE_CONTACTS});
+        permissionIntent.putExtra("requestCode", PERMISSION_REQUEST_CODE);
+        permissionIntent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK
+                | Intent.FLAG_ACTIVITY_EXCLUDE_FROM_RECENTS);
+        context.startActivity(permissionIntent);
+    }
+
     @Override
     public int getTrafficFlag() {
         return TrafficFlags.DATA_CONTACTS;
-- 
2.17.1

