From f61cc7e3ea0e4d5b1916b4c2669f8e796368d4e0 Mon Sep 17 00:00:00 2001
From: monojp <martin@herndl.org>
Date: Tue, 20 Mar 2018 22:01:37 +0100
Subject: [PATCH 1/3] Revert changes to make Exchange buildable.

Revert "exchange: fix eas autodiscover"

This reverts commit e5ceb024ab4cdb1009606106af4bfe0bd672c1ed.

Revert "exchange: imap push"

This reverts commit 0c334452f7e27f7c2841b9666ab26ab60a16f413.

Revert "Email: fix the mail bigger than 1M can't downloaded on Exchange account."

This reverts commit 70e1e485986247dc70b7b3bea163524e41a3d9da.

Revert "Exchange: Support configure the sync size for each mail content."

This reverts commit f45caedc77e1905a19c1effd8659943a79bed2be.

Revert "Exchange: Support configure the sync size for each mail content."

This reverts commit 091f826018aef0306a076edf9fb31d47d526cf4b.

Revert "Failure in testAllSystemAppsUsingRuntimePermissionsTargetMncAndAboveSdk"

This reverts commit a8c5da7037aa2a823f435dcdf86dc5cdf6fe8bae.

Change-Id: I6658d59e74c5117a0fe6919f35e8775348134265
---
 src/com/android/exchange/Eas.java             |   1 -
 .../exchange/adapter/EmailSyncParser.java     |  40 +-
 .../android/exchange/eas/EasAutoDiscover.java |  12 -
 .../android/exchange/eas/EasFolderSync.java   |   6 -
 src/com/android/exchange/eas/EasLoadMore.java | 346 ------------------
 src/com/android/exchange/eas/EasSyncMail.java |  12 +-
 .../android/exchange/service/EasService.java  |  35 +-
 7 files changed, 7 insertions(+), 445 deletions(-)
 delete mode 100644 src/com/android/exchange/eas/EasLoadMore.java

diff --git a/src/com/android/exchange/Eas.java b/src/com/android/exchange/Eas.java
index 642ee4d7..2b5a0525 100644
--- a/src/com/android/exchange/Eas.java
+++ b/src/com/android/exchange/Eas.java
@@ -86,7 +86,6 @@ public class Eas {
 
     public static final String BODY_PREFERENCE_TEXT = "1";
     public static final String BODY_PREFERENCE_HTML = "2";
-    public static final String BODY_PREFERENCE_MIME = "4";
 
     public static final String MIME_BODY_PREFERENCE_TEXT = "0";
     public static final String MIME_BODY_PREFERENCE_MIME = "2";
diff --git a/src/com/android/exchange/adapter/EmailSyncParser.java b/src/com/android/exchange/adapter/EmailSyncParser.java
index 1d424a6e..21b2b0cd 100644
--- a/src/com/android/exchange/adapter/EmailSyncParser.java
+++ b/src/com/android/exchange/adapter/EmailSyncParser.java
@@ -32,8 +32,6 @@ import com.android.emailcommon.provider.EmailContent.SyncColumns;
 import com.android.emailcommon.provider.Mailbox;
 import com.android.emailcommon.provider.Policy;
 import com.android.emailcommon.provider.ProviderUnavailableException;
-import com.android.emailcommon.provider.EmailContent.Attachment;
-import com.android.emailcommon.provider.EmailContent.Message;
 import com.android.emailcommon.utility.AttachmentUtilities;
 import com.android.emailcommon.utility.ConversionUtilities;
 import com.android.emailcommon.utility.TextUtilities;
@@ -172,7 +170,7 @@ public class EmailSyncParser extends AbstractSyncParser {
                     msg.mFlagRead = getValueInt() == 1;
                     break;
                 case Tags.BASE_BODY:
-                    bodyParser(atts, msg);
+                    bodyParser(msg);
                     break;
                 case Tags.EMAIL_FLAG:
                     msg.mFlagFavorite = flagParser();
@@ -399,13 +397,9 @@ public class EmailSyncParser extends AbstractSyncParser {
         return state;
     }
 
-    private void bodyParser(ArrayList<EmailContent.Attachment> atts,
-            EmailContent.Message msg) throws IOException {
+    private void bodyParser(EmailContent.Message msg) throws IOException {
         String bodyType = Eas.BODY_PREFERENCE_TEXT;
         String body = "";
-        String length = null;
-        boolean truncated = false;
-
         while (nextTag(Tags.BASE_BODY) != END) {
             switch (tag) {
                 case Tags.BASE_TYPE:
@@ -414,18 +408,6 @@ public class EmailSyncParser extends AbstractSyncParser {
                 case Tags.BASE_DATA:
                     body = getValue();
                     break;
-                case Tags.BASE_TRUNCATED:
-                    String value = getValue();
-                    if (!TextUtils.isEmpty(value)) {
-                        truncated = (value.equals("1")) || (value.toLowerCase().equals("true"));
-                    } else {
-                        LogUtils.w(TAG, "TRUNCATED value is missing, then assumed to be true.");
-                        truncated = true;
-                    }
-                    break;
-                case Tags.BASE_ESTIMATED_DATA_SIZE:
-                    length = getValue();
-                    break;
                 default:
                     skipTag();
             }
@@ -436,20 +418,6 @@ public class EmailSyncParser extends AbstractSyncParser {
         } else {
             msg.mText = body;
         }
-
-        // If the content is truncated, we will insert one dummy attachment
-        // as the placeholder which is same as POP3 and IMAP. More details
-        // please refer to the Utilities in the Email.
-        if (truncated) {
-            msg.mFlagLoaded = Message.FLAG_LOADED_PARTIAL_COMPLETE;
-            EmailContent.Attachment att = new EmailContent.Attachment();
-            att.mFileName = "";
-            att.mSize = Long.parseLong(length);
-            att.mMimeType = "text/plain";
-            att.mAccountKey = mAccount.mId;
-            att.mFlags = Attachment.FLAG_DUMMY_ATTACHMENT;
-            atts.add(att);
-        }
     }
 
     /**
@@ -544,9 +512,6 @@ public class EmailSyncParser extends AbstractSyncParser {
             // contentId rather than contentLocation, when sent from Ex03, Ex07, and Ex10
             if (isInline && !TextUtils.isEmpty(contentId)) {
                 att.mContentId = contentId;
-            } else {
-                // This isn't the viewable part, set the local message has attachment.
-                msg.mFlagAttachment = true;
             }
             // Check if this attachment can't be downloaded due to an account policy
             if (mPolicy != null) {
@@ -557,6 +522,7 @@ public class EmailSyncParser extends AbstractSyncParser {
                 }
             }
             atts.add(att);
+            msg.mFlagAttachment = true;
         }
     }
 
diff --git a/src/com/android/exchange/eas/EasAutoDiscover.java b/src/com/android/exchange/eas/EasAutoDiscover.java
index e2ebd473..b8e95719 100644
--- a/src/com/android/exchange/eas/EasAutoDiscover.java
+++ b/src/com/android/exchange/eas/EasAutoDiscover.java
@@ -5,7 +5,6 @@ import android.net.Uri;
 import android.os.Bundle;
 import android.util.Xml;
 
-import com.android.emailcommon.mail.MessagingException;
 import com.android.emailcommon.provider.Account;
 import com.android.emailcommon.provider.HostAuth;
 import com.android.emailcommon.service.EmailServiceProxy;
@@ -418,15 +417,4 @@ public class EasAutoDiscover extends EasOperation {
         }
         return null;
     }
-
-    public static int translateToMessagingException(int easDiscoveryResultCode) {
-        switch (easDiscoveryResultCode) {
-        case RESULT_SC_UNAUTHORIZED:
-            return MessagingException.AUTODISCOVER_AUTHENTICATION_FAILED;
-        case RESULT_OK:
-            return MessagingException.AUTODISCOVER_AUTHENTICATION_RESULT;
-        default:
-            return MessagingException.UNSPECIFIED_EXCEPTION;
-        }
-    }
 }
diff --git a/src/com/android/exchange/eas/EasFolderSync.java b/src/com/android/exchange/eas/EasFolderSync.java
index 35e61b8e..b5e28c14 100644
--- a/src/com/android/exchange/eas/EasFolderSync.java
+++ b/src/com/android/exchange/eas/EasFolderSync.java
@@ -142,12 +142,6 @@ public class EasFolderSync extends EasOperation {
                     protocolVersion);
         }
 
-        // Include shared email capabilities in the response
-        //  - Eas always have push capability
-        int capabilities = EmailServiceProxy.CAPABILITY_PUSH;
-        mValidationResult.putInt(EmailServiceProxy.SETTINGS_BUNDLE_CAPABILITIES,
-                EmailServiceProxy.CAPABILITY_PUSH);
-
         // This is intentionally a call to super.performOperation. This is a helper function for
         // our version of perfomOperation so calling that function would infinite loop.
         final int result = super.performOperation();
diff --git a/src/com/android/exchange/eas/EasLoadMore.java b/src/com/android/exchange/eas/EasLoadMore.java
deleted file mode 100644
index 58cf3c9b..00000000
--- a/src/com/android/exchange/eas/EasLoadMore.java
+++ /dev/null
@@ -1,346 +0,0 @@
-/**
- * Copyright (c) 2013-2014, The Linux Foundation. All rights reserved.
- *
- * Not a Contribution.
- *
- * Copyright (C) 2008-2009 Marc Blank
- * Licensed to The Android Open Source Project.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package com.android.exchange.eas;
-
-import android.content.ContentResolver;
-import android.content.ContentUris;
-import android.content.ContentValues;
-import android.content.Context;
-import android.database.Cursor;
-import android.net.Uri;
-import android.text.TextUtils;
-
-import com.android.emailcommon.Logging;
-import com.android.emailcommon.internet.MimeMessage;
-import com.android.emailcommon.internet.MimeUtility;
-import com.android.emailcommon.mail.MessagingException;
-import com.android.emailcommon.mail.Part;
-import com.android.emailcommon.provider.Account;
-import com.android.emailcommon.provider.Mailbox;
-import com.android.emailcommon.provider.ProviderUnavailableException;
-import com.android.emailcommon.provider.EmailContent.Body;
-import com.android.emailcommon.provider.EmailContent.BodyColumns;
-import com.android.emailcommon.provider.EmailContent.Message;
-import com.android.emailcommon.provider.EmailContent.MessageColumns;
-import com.android.emailcommon.provider.EmailContent.SyncColumns;
-import com.android.emailcommon.utility.ConversionUtilities;
-import com.android.emailcommon.utility.Utility;
-import com.android.exchange.CommandStatusException;
-import com.android.exchange.Eas;
-import com.android.exchange.EasAuthenticationException;
-import com.android.exchange.EasResponse;
-import com.android.exchange.adapter.Parser;
-import com.android.exchange.adapter.Serializer;
-import com.android.exchange.adapter.Tags;
-import com.android.mail.utils.LogUtils;
-
-import org.apache.http.HttpEntity;
-import org.apache.http.HttpStatus;
-import org.apache.http.entity.ByteArrayEntity;
-
-import java.io.ByteArrayInputStream;
-import java.io.IOException;
-import java.io.InputStream;
-import java.util.ArrayList;
-
-public class EasLoadMore extends EasOperation {
-    private static final String CMD = "ItemOperations";
-
-    private static final int RESULT_SUCCESS = 0;
-
-    private Message mMessage;
-
-    public EasLoadMore(final Context context, final Account account, final Message msg) {
-        super(context, account);
-        mMessage = msg;
-    }
-
-    @Override
-    protected String getCommand() {
-        if (mMessage == null) {
-            LogUtils.wtf(LOG_TAG, "Error, mMessage is null");
-            return null;
-        }
-        return CMD;
-    }
-
-    /**
-     * The FetchMessageRequest is basically our wrapper for the Fetch service call
-     *
-     * Request:
-     * <?xml version="1.0" encoding="utf-8"?>
-     * <ItemOperations>
-     *     <Fetch>
-     *         <Store>Mailbox</Store>
-     *         <airsync:CollectionId>collectionId</airsync:CollectionId>
-     *         <airsync:ServerId>serverId</airsync:ServerId>
-     *         <Options>
-     *             <airsyncbase:BodyPreference>
-     *                 <airsyncbase:Type>1</airsyncbase:Type>
-     *                 <airsyncbase:TruncationSize>size</airsyncbase:TruncationSize>
-     *                 <airsyncbase:AllOrNone>0</airsyncbase:AllOrNone>
-     *             </airsyncbase:BodyPreference>
-     *         </Options>
-     *     </Fetch>
-     * </ItemOperations>
-     */
-    @Override
-    protected HttpEntity getRequestEntity() throws IOException, MessageInvalidException {
-        if (mMessage == null) {
-            LogUtils.wtf(LOG_TAG, "Error, mMessage is null");
-            return null;
-        }
-
-        final ContentResolver cr = mContext.getContentResolver();
-
-        String serverId = "";
-        long mailbox = -1;
-        Uri qreryUri = ContentUris.withAppendedId(Message.CONTENT_URI, mMessage.mId);
-        String[] projection = new String[] { SyncColumns.SERVER_ID, MessageColumns.MAILBOX_KEY };
-        Cursor c = cr.query(qreryUri, projection, null, null, null);
-        if (c == null) {
-            throw new ProviderUnavailableException();
-        } else {
-            if (c.moveToFirst()) {
-                serverId = c.getString(0);
-                mailbox = c.getLong(1);
-            }
-            c.close();
-            c = null;
-        }
-        if (TextUtils.isEmpty(serverId) || mailbox < 0) return null;
-        Mailbox box = Mailbox.restoreMailboxWithId(mContext, mailbox);
-
-        Serializer s = new Serializer();
-
-        s.start(Tags.ITEMS_ITEMS).start(Tags.ITEMS_FETCH);
-        s.data(Tags.ITEMS_STORE, "Mailbox");
-        s.data(Tags.SYNC_COLLECTION_ID, box.mServerId);
-        s.data(Tags.SYNC_SERVER_ID, mMessage.mServerId);
-        s.start(Tags.ITEMS_OPTIONS);
-        if (getProtocolVersion() >= Eas.SUPPORTED_PROTOCOL_EX2007_DOUBLE) {
-            s.start(Tags.BASE_BODY_PREFERENCE);
-            s.data(Tags.BASE_TYPE, Eas.BODY_PREFERENCE_HTML);
-            s.end();
-        } else {
-            s.data(Tags.SYNC_MIME_SUPPORT, Eas.MIME_BODY_PREFERENCE_MIME);
-            s.start(Tags.BASE_BODY_PREFERENCE);
-            s.data(Tags.BASE_TYPE, Eas.BODY_PREFERENCE_MIME);
-            s.end();
-        }
-        s.end().end().end().done();
-
-        return new ByteArrayEntity(s.toByteArray());
-    }
-
-    @Override
-    protected int handleResponse(EasResponse response) throws IOException, CommandStatusException {
-        int status = response.getStatus();
-        if (status == HttpStatus.SC_OK) {
-            if (!response.isEmpty()) {
-                InputStream is = response.getInputStream();
-                LoadMoreParser parser = new LoadMoreParser(is, mMessage);
-                parser.parse();
-                if (parser.getStatusCode() == LoadMoreParser.STATUS_CODE_SUCCESS) {
-                    parser.commit(mContext);
-                }
-            } else {
-                return RESULT_NETWORK_PROBLEM;
-            }
-        } else {
-            LogUtils.e(Logging.LOG_TAG, "Fetch entire mail(messageId:" + mMessage.mId
-                    + ") response error: ", status);
-            if (response.isAuthError()) {
-                throw new EasAuthenticationException();
-            } else {
-                throw new IOException();
-            }
-        }
-
-        return RESULT_SUCCESS;
-    }
-
-    private class LoadMoreParser extends Parser {
-        /**
-         * Response:
-         * <?xml version="1.0" encoding="utf-8"?>
-         * <ItemOperations>
-         *     <Status>1</Status>
-         *     <Response>
-         *         <Fetch>
-         *             <Status>1</Status>
-         *             <airsync:CollectionId>collectionId</airsync:CollectionId>
-         *             <airsync:ServerId>serverId</airsync:ServerId>
-         *             <airsync:Class>Email</airsync:Class>
-         *             <Properties>
-         *                 ...
-         *             </Properties>
-         *         </Fetch>
-         *     </Response>
-         * </ItemOperations>
-         */
-
-        private int mStatusCode = 0;
-        private String mBodyType;
-
-        public static final int STATUS_CODE_SUCCESS = 1;
-
-        public LoadMoreParser(InputStream in, Message msg)
-                throws IOException {
-            super(in);
-        }
-
-        public int getStatusCode() {
-            return mStatusCode;
-        }
-
-        // commit the body data to database.
-        public void commit(Context context) {
-            LogUtils.d(Logging.LOG_TAG, "Fetched message body successfully for " + mMessage.mId);
-
-            // update the body data
-            ContentValues cv = new ContentValues();
-            cv.put(BodyColumns.MESSAGE_KEY, mMessage.mId);
-            if (mBodyType.equals(Eas.BODY_PREFERENCE_HTML)) {
-                cv.put(BodyColumns.HTML_CONTENT, Utility.compress(mMessage.mHtml));
-            } else {
-                cv.put(BodyColumns.TEXT_CONTENT, Utility.compress(mMessage.mText));
-            }
-            ContentResolver contentResolver = context.getContentResolver();
-            int res = contentResolver.update(Body.CONTENT_URI, cv,
-                    BodyColumns.MESSAGE_KEY + "=" + mMessage.mId, null);
-            LogUtils.d(Logging.LOG_TAG, "update the body content, success number : " + res);
-
-            // update the loaded flag to database.
-            cv.clear();
-            cv.put(MessageColumns.FLAG_LOADED, Message.FLAG_LOADED_COMPLETE);
-            Uri uri = ContentUris.withAppendedId(Message.CONTENT_URI, mMessage.mId);
-            res = contentResolver.update(uri, cv, null, null);
-            LogUtils.d(Logging.LOG_TAG, "update the message content, success number : " + res);
-        }
-
-        public void parseBody() throws IOException {
-            mBodyType = Eas.BODY_PREFERENCE_TEXT;
-            String body = "";
-            while (nextTag(Tags.BASE_BODY) != END) {
-                switch (tag) {
-                    case Tags.BASE_TYPE:
-                        mBodyType = getValue();
-                        break;
-                    case Tags.BASE_DATA:
-                        body = getValue();
-                        break;
-                    default:
-                        skipTag();
-                }
-            }
-            // We always ask for TEXT or HTML; there's no third option
-            if (mBodyType.equals(Eas.BODY_PREFERENCE_HTML)) {
-                mMessage.mHtml = body;
-            } else {
-                mMessage.mText = body;
-            }
-        }
-
-        public void parseMIMEBody(String mimeData) throws IOException {
-            try {
-                ByteArrayInputStream in = new ByteArrayInputStream(mimeData.getBytes());
-                // The constructor parses the message
-                MimeMessage mimeMessage = new MimeMessage(in);
-                // Now process body parts & attachments
-                ArrayList<Part> viewables = new ArrayList<Part>();
-                // We'll ignore the attachments, as we'll get them directly from EAS
-                ArrayList<Part> attachments = new ArrayList<Part>();
-                MimeUtility.collectParts(mimeMessage, viewables, attachments);
-                // parseBodyFields fills in the content fields of the Body
-                ConversionUtilities.BodyFieldData data =
-                        ConversionUtilities.parseBodyFields(viewables);
-                // But we need them in the message itself for handling during commit()
-                mMessage.setFlags(data.isQuotedReply, data.isQuotedForward);
-                mMessage.mSnippet = data.snippet;
-                mMessage.mHtml = data.htmlContent;
-                mMessage.mText = data.textContent;
-            } catch (MessagingException e) {
-                // This would most likely indicate a broken stream
-                throw new IOException(e);
-            }
-        }
-
-        public void parseProperties() throws IOException {
-            while (nextTag(Tags.ITEMS_PROPERTIES) != END) {
-                switch (tag) {
-                    case Tags.BASE_BODY:
-                        parseBody();
-                        break;
-                    case Tags.EMAIL_MIME_DATA:
-                        parseMIMEBody(getValue());
-                        break;
-                    case Tags.EMAIL_BODY:
-                        String text = getValue();
-                        mMessage.mText = text;
-                        break;
-                    default:
-                        skipTag();
-                }
-            }
-        }
-
-        public void parseFetch() throws IOException {
-            while (nextTag(Tags.ITEMS_FETCH) != END) {
-                if (tag == Tags.ITEMS_PROPERTIES) {
-                    parseProperties();
-                } else {
-                    skipTag();
-                }
-            }
-        }
-
-        public void parseResponse() throws IOException {
-            while (nextTag(Tags.ITEMS_RESPONSE) != END) {
-                if (tag == Tags.ITEMS_FETCH) {
-                    parseFetch();
-                } else {
-                    skipTag();
-                }
-            }
-        }
-
-        @Override
-        public boolean parse() throws IOException {
-            boolean res = false;
-            if (nextTag(START_DOCUMENT) != Tags.ITEMS_ITEMS) {
-                throw new IOException();
-            }
-            while (nextTag(START_DOCUMENT) != END_DOCUMENT) {
-                if (tag == Tags.ITEMS_STATUS) {
-                    // save the status code.
-                    mStatusCode = getValueInt();
-                } else if (tag == Tags.ITEMS_RESPONSE) {
-                    parseResponse();
-                } else {
-                    skipTag();
-                }
-            }
-            return res;
-        }
-    }
-}
diff --git a/src/com/android/exchange/eas/EasSyncMail.java b/src/com/android/exchange/eas/EasSyncMail.java
index 3b947397..f5e0e153 100644
--- a/src/com/android/exchange/eas/EasSyncMail.java
+++ b/src/com/android/exchange/eas/EasSyncMail.java
@@ -9,7 +9,6 @@ import com.android.emailcommon.provider.EmailContent.Message;
 import com.android.emailcommon.provider.EmailContent.MessageColumns;
 import com.android.emailcommon.provider.EmailContent.SyncColumns;
 import com.android.emailcommon.provider.Mailbox;
-import com.android.emailcommon.service.SyncSize;
 import com.android.emailcommon.service.SyncWindow;
 import com.android.exchange.Eas;
 import com.android.exchange.adapter.AbstractSyncParser;
@@ -34,8 +33,6 @@ public class EasSyncMail extends EasSyncCollectionTypeBase {
 
     private static final int EMAIL_WINDOW_SIZE = 10;
 
-    private static final String ENTIRE_EMAIL_SYNC_SIZE =
-            String.valueOf(SyncSize.SYNC_SIZE_ENTIRE_MAIL);
 
     @Override
     public int getTrafficFlag() {
@@ -87,14 +84,7 @@ public class EasSyncMail extends EasSyncCollectionTypeBase {
                 s.start(Tags.BASE_BODY_PREFERENCE);
                 // HTML for email
                 s.data(Tags.BASE_TYPE, Eas.BODY_PREFERENCE_HTML);
-                if (account.isSetSyncSizeEnabled()) {
-                    String sizeTruncation = Integer.toString(account.mSyncSize);
-                    if (!ENTIRE_EMAIL_SYNC_SIZE.equals(sizeTruncation)) {
-                        s.data(Tags.BASE_TRUNCATION_SIZE, sizeTruncation);
-                    }
-                } else {
-                    s.data(Tags.BASE_TRUNCATION_SIZE, Eas.EAS12_TRUNCATION_SIZE);
-                }
+                s.data(Tags.BASE_TRUNCATION_SIZE, Eas.EAS12_TRUNCATION_SIZE);
                 s.end();
             } else {
                 // Use MIME data for EAS 2.5
diff --git a/src/com/android/exchange/service/EasService.java b/src/com/android/exchange/service/EasService.java
index b99b3c1f..b809632b 100644
--- a/src/com/android/exchange/service/EasService.java
+++ b/src/com/android/exchange/service/EasService.java
@@ -30,13 +30,11 @@ import android.provider.CalendarContract;
 import android.provider.ContactsContract;
 import android.text.TextUtils;
 
-import com.android.emailcommon.Logging;
 import com.android.emailcommon.TempDirectory;
 import com.android.emailcommon.provider.Account;
 import com.android.emailcommon.provider.EmailContent;
 import com.android.emailcommon.provider.HostAuth;
 import com.android.emailcommon.provider.Mailbox;
-import com.android.emailcommon.provider.EmailContent.Message;
 import com.android.emailcommon.service.EmailServiceProxy;
 import com.android.emailcommon.service.EmailServiceStatus;
 import com.android.emailcommon.service.EmailServiceVersion;
@@ -50,7 +48,6 @@ import com.android.exchange.eas.EasAutoDiscover;
 import com.android.exchange.eas.EasFolderSync;
 import com.android.exchange.eas.EasFullSyncOperation;
 import com.android.exchange.eas.EasLoadAttachment;
-import com.android.exchange.eas.EasLoadMore;
 import com.android.exchange.eas.EasOperation;
 import com.android.exchange.eas.EasPing;
 import com.android.exchange.eas.EasSearch;
@@ -113,25 +110,6 @@ public class EasService extends Service {
             }
         }
 
-        @Override
-        public void loadMore(long messageId) {
-            LogUtils.d(TAG, "IEmailService.loadMore for message: %d", messageId);
-            Message msg = Message.restoreMessageWithId(EasService.this, messageId);
-            if (msg == null) {
-                LogUtils.e(Logging.LOG_TAG, "Retrive msg faild, messageId:" + messageId);
-                return;
-            }
-
-            Account account = Account.restoreAccountWithId(EasService.this, msg.mAccountKey);
-            if (account == null) {
-                LogUtils.e(Logging.LOG_TAG, "Retrive account faild, accountId:" + msg.mAccountKey);
-                return;
-            }
-
-            final EasLoadMore operation = new EasLoadMore(EasService.this, account, msg);
-            doOperation(operation, "IEmailService.loadMore");
-        }
-
         @Override
         public void updateFolderList(final long accountId) {
             LogUtils.d(TAG, "IEmailService.updateFolderList: %d", accountId);
@@ -225,12 +203,6 @@ public class EasService extends Service {
                 Bundle result = autoDiscoverInternal(uri, attempt, username, password, true);
                 int resultCode = result.getInt(EmailServiceProxy.AUTO_DISCOVER_BUNDLE_ERROR_CODE);
                 if (resultCode != EasAutoDiscover.RESULT_BAD_RESPONSE) {
-                    // To fix autodiscover setup we need to fill the bundle with the appropriate
-                    // MessagingException to code, which can be interpreted by our Email app.
-                    // We leave untouched the original extra so it can be used by Gmail and other
-                    // email clients.
-                    result.putInt(EmailServiceProxy.AUTO_DISCOVER_BUNDLE_MESSAGING_ERROR_CODE,
-                            EasAutoDiscover.translateToMessagingException(resultCode));
                     return result;
                 } else {
                     LogUtils.d(TAG, "got BAD_RESPONSE");
@@ -249,8 +221,7 @@ public class EasService extends Service {
                 // Try again recursively with the new uri. TODO we should limit the number of redirects.
                 final String redirectUri = op.getRedirectUri();
                 return autoDiscoverInternal(redirectUri, attempt, username, password, canRetry);
-            } else if (result == EasAutoDiscover.RESULT_SC_UNAUTHORIZED ||
-                    result == EasAutoDiscover.RESULT_AUTHENTICATION_ERROR) {
+            } else if (result == EasAutoDiscover.RESULT_SC_UNAUTHORIZED) {
                 if (canRetry && username.contains("@")) {
                     // Try again using the bare user name
                     final int atSignIndex = username.indexOf('@');
@@ -263,7 +234,7 @@ public class EasService extends Service {
                     // to begin with. Either way, failure.
                     final Bundle bundle = new Bundle(1);
                     bundle.putInt(EmailServiceProxy.AUTO_DISCOVER_BUNDLE_ERROR_CODE,
-                            EasAutoDiscover.RESULT_SC_UNAUTHORIZED);
+                            EasAutoDiscover.RESULT_OTHER_FAILURE);
                     return bundle;
                 }
             } else if (result != EasAutoDiscover.RESULT_OK) {
@@ -462,7 +433,7 @@ public class EasService extends Service {
         }
 
         // Check if account is configured for a push sync interval.
-        if (account.getSyncInterval() != Account.CHECK_INTERVAL_PUSH) {
+        if (account.mSyncInterval != Account.CHECK_INTERVAL_PUSH) {
             LogUtils.d(TAG, "Do not ping: Account %d not configured for push", account.mId);
             return false;
         }
-- 
2.17.1

