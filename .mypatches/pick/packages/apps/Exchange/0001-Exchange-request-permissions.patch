From 3d9ca7827bd5c4eab4a8d624089c2f66e16160cd Mon Sep 17 00:00:00 2001
From: monojp <martin@herndl.org>
Date: Fri, 6 Apr 2018 23:49:31 +0200
Subject: [PATCH 1/3] Exchange: request permissions

Change-Id: I3fe87cc75d5152aa847b539cec7d5f60f7c5ed44
---
 Android.mk                                    |  3 +-
 AndroidManifest.xml                           |  2 +
 .../exchange/PermissionRequestActivity.java   | 91 +++++++++++++++++++
 .../android/exchange/eas/EasOperation.java    |  9 ++
 src/com/android/exchange/eas/EasSyncBase.java |  8 ++
 .../android/exchange/eas/EasSyncCalendar.java | 11 +++
 .../eas/EasSyncCollectionTypeBase.java        | 14 +++
 .../android/exchange/eas/EasSyncContacts.java | 11 +++
 .../service/AbstractSyncAdapterService.java   | 30 ++++++
 .../service/CalendarSyncAdapterService.java   |  9 ++
 .../service/ContactsSyncAdapterService.java   |  9 ++
 .../android/exchange/service/EasService.java  |  3 +
 12 files changed, 199 insertions(+), 1 deletion(-)
 create mode 100644 src/com/android/exchange/PermissionRequestActivity.java

diff --git a/Android.mk b/Android.mk
index a3a7d20b..26863abe 100644
--- a/Android.mk
+++ b/Android.mk
@@ -32,6 +32,8 @@ LOCAL_AAPT_FLAGS += --extra-packages com.android.emailcommon
 LOCAL_SRC_FILES := $(call all-java-files-under, src)
 LOCAL_SRC_FILES += $(call all-java-files-under, build/src)
 
+LOCAL_JAVA_LIBRARIES := org.apache.http.legacy
+
 LOCAL_STATIC_JAVA_LIBRARIES := android-common com.android.emailcommon
 LOCAL_STATIC_JAVA_LIBRARIES += calendar-common
 LOCAL_STATIC_JAVA_LIBRARIES += android-support-v4
@@ -40,7 +42,6 @@ LOCAL_PACKAGE_NAME := Exchange2
 LOCAL_OVERRIDES_PACKAGES := Exchange
 
 LOCAL_PROGUARD_FLAG_FILES := proguard.flags
-LOCAL_SDK_VERSION := 19
 
 LOCAL_JACK_COVERAGE_INCLUDE_FILTER += com.android.exchange.*
 
diff --git a/AndroidManifest.xml b/AndroidManifest.xml
index f401d650..de341fbb 100644
--- a/AndroidManifest.xml
+++ b/AndroidManifest.xml
@@ -139,6 +139,8 @@
                 <category android:name="android.intent.category.DEFAULT" />
             </intent-filter>
         </activity>
+        <activity android:name=".PermissionRequestActivity"
+                  android:theme="@android:style/Theme.NoDisplay" />
         <activity android:name=".SettingsRedirector">
             <intent-filter>
                 <action android:name="android.intent.action.MANAGE_NETWORK_USAGE" />
diff --git a/src/com/android/exchange/PermissionRequestActivity.java b/src/com/android/exchange/PermissionRequestActivity.java
new file mode 100644
index 00000000..a6eb67a6
--- /dev/null
+++ b/src/com/android/exchange/PermissionRequestActivity.java
@@ -0,0 +1,91 @@
+/*
+ * Copyright (C) 2018 The LineageOS Project
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package com.android.exchange;
+
+import android.app.Activity;
+import android.content.Context;
+import android.content.Intent;
+import android.content.pm.PackageManager;
+import android.os.Bundle;
+import android.os.Message;
+import android.os.Messenger;
+import android.os.RemoteException;
+import android.support.v4.app.ActivityCompat;
+import android.util.Log;
+
+public class PermissionRequestActivity extends Activity
+        implements ActivityCompat.OnRequestPermissionsResultCallback {
+    private static final String TAG = Eas.LOG_TAG;
+
+    public static Intent createIntent(Context context, String[] permissions, Messenger messenger) {
+        return new Intent(context, PermissionRequestActivity.class)
+            .putExtra("permissions", permissions)
+            .putExtra("messenger", messenger);
+    }
+
+    private Messenger mMessenger;
+
+    @Override
+    protected void onCreate(Bundle savedInstanceState) {
+        super.onCreate(savedInstanceState);
+
+        Intent intent = getIntent();
+        String[] permissions = intent.getStringArrayExtra("permissions");
+        if (permissions == null) {
+            Log.e(TAG, "No permission StringArray found in intent for PermissionRequestActivity");
+            finish();
+            return;
+        }
+
+        mMessenger = intent.getParcelableExtra("messenger");
+        if (permissionsGranted(permissions)) {
+            int[] results = new int[permissions.length];
+            for (int i = 0; i < results.length; i++) {
+                results[i] = PackageManager.PERMISSION_GRANTED;
+            }
+            sendResults(results);
+            finish();
+        } else {
+            requestPermissions(permissions, 0);
+        }
+    }
+
+    private void sendResults(int[] results) {
+        Message msg = Message.obtain();
+        msg.obj = results;
+        try {
+            mMessenger.send(msg);
+        } catch (RemoteException e) {
+            // ignored
+        }
+    }
+
+    private boolean permissionsGranted(String[] permissions) {
+        for (String permission : permissions) {
+            if (checkSelfPermission(permission) != PackageManager.PERMISSION_GRANTED) {
+                return false;
+            }
+        }
+        return true;
+    }
+
+    @Override
+    public void onRequestPermissionsResult(int requestCode,
+            String permissions[], int[] grantResults) {
+        sendResults(grantResults);
+        finish();
+    }
+}
diff --git a/src/com/android/exchange/eas/EasOperation.java b/src/com/android/exchange/eas/EasOperation.java
index c6330506..c15aad48 100644
--- a/src/com/android/exchange/eas/EasOperation.java
+++ b/src/com/android/exchange/eas/EasOperation.java
@@ -143,6 +143,8 @@ public abstract class EasOperation {
     /** Error code indicating that this operation failed, but we should not abort the sync */
     /** TODO: This is currently only used in EasOutboxSync, no other place handles it correctly */
     public static final int RESULT_NON_FATAL_ERROR = -12;
+    /** Error code indicating we lack required permissions */
+    public static final int RESULT_NO_PERMISSIONS = -13;
     /** Error code indicating some other failure. */
     public static final int RESULT_OTHER_FAILURE = -99;
     /** Constant to delimit where op specific error codes begin. */
@@ -204,6 +206,10 @@ public abstract class EasOperation {
         return true;
     }
 
+    public boolean hasRequiredPermissions() {
+        return true;
+    }
+
     public final long getAccountId() {
         return mAccount.getId();
     }
@@ -260,6 +266,9 @@ public abstract class EasOperation {
                     getAccountId(), getCommand());
             return RESULT_INITIALIZATION_FAILURE;
         }
+        if (!hasRequiredPermissions()) {
+            return RESULT_NO_PERMISSIONS;
+        }
         try {
             return performOperationInternal();
         } finally {
diff --git a/src/com/android/exchange/eas/EasSyncBase.java b/src/com/android/exchange/eas/EasSyncBase.java
index 8e77e26d..65bbde76 100644
--- a/src/com/android/exchange/eas/EasSyncBase.java
+++ b/src/com/android/exchange/eas/EasSyncBase.java
@@ -76,6 +76,14 @@ public class EasSyncBase extends EasOperation {
         return true;
     }
 
+    @Override
+    public boolean hasRequiredPermissions() {
+        if (mCollectionTypeHandler != null && !mCollectionTypeHandler.hasRequiredPermissions(mContext)) {
+            return false;
+        }
+        return super.hasRequiredPermissions();
+    }
+
     @Override
     protected HttpEntity getRequestEntity() throws IOException {
         final String className = Eas.getFolderClass(mMailbox.mType);
diff --git a/src/com/android/exchange/eas/EasSyncCalendar.java b/src/com/android/exchange/eas/EasSyncCalendar.java
index 418d5912..d0f42e70 100644
--- a/src/com/android/exchange/eas/EasSyncCalendar.java
+++ b/src/com/android/exchange/eas/EasSyncCalendar.java
@@ -1,5 +1,6 @@
 package com.android.exchange.eas;
 
+import android.Manifest;
 import android.content.ContentResolver;
 import android.content.ContentUris;
 import android.content.ContentValues;
@@ -55,6 +56,11 @@ public class EasSyncCalendar extends EasSyncCollectionTypeBase {
     // TODO: Some constants are copied from CalendarSyncAdapter and are still used by the parser.
     // These values need to stay in sync; when the parser is cleaned up, be sure to unify them.
 
+    private static final String[] NEEDED_PERMISSIONS = {
+        Manifest.permission.READ_CALENDAR,
+        Manifest.permission.WRITE_CALENDAR
+    };
+
     private static final int PIM_WINDOW_SIZE_CALENDAR = 10;
 
     /** Projection for getting a calendar id. */
@@ -187,6 +193,11 @@ public class EasSyncCalendar extends EasSyncCollectionTypeBase {
         }
     }
 
+    @Override
+    public boolean hasRequiredPermissions(final Context context) {
+        return hasPermissions(context, NEEDED_PERMISSIONS);
+    }
+
     @Override
     public void setSyncOptions(final Context context, final Serializer s,
         final double protocolVersion, final Account account, final Mailbox mailbox,
diff --git a/src/com/android/exchange/eas/EasSyncCollectionTypeBase.java b/src/com/android/exchange/eas/EasSyncCollectionTypeBase.java
index 555e5353..1c98c2e7 100644
--- a/src/com/android/exchange/eas/EasSyncCollectionTypeBase.java
+++ b/src/com/android/exchange/eas/EasSyncCollectionTypeBase.java
@@ -1,6 +1,7 @@
 package com.android.exchange.eas;
 
 import android.content.Context;
+import android.content.pm.PackageManager;
 
 import com.android.emailcommon.provider.Account;
 import com.android.emailcommon.provider.Mailbox;
@@ -67,6 +68,10 @@ public abstract class EasSyncCollectionTypeBase {
      */
     public void cleanup(final Context context, final Account account) {}
 
+    public boolean hasRequiredPermissions(final Context context) {
+        return true;
+    }
+
     /**
      * Shared non-initial sync options for PIM (contacts & calendar) objects.
      *
@@ -98,4 +103,13 @@ public abstract class EasSyncCollectionTypeBase {
         }
         s.end();
     }
+
+    protected static boolean hasPermissions(Context context, String[] permissions) {
+        for (String permission : permissions) {
+            if (context.checkSelfPermission(permission) != PackageManager.PERMISSION_GRANTED) {
+                return false;
+            }
+        }
+        return true;
+    }
 }
diff --git a/src/com/android/exchange/eas/EasSyncContacts.java b/src/com/android/exchange/eas/EasSyncContacts.java
index 0b9d9440..caddd057 100644
--- a/src/com/android/exchange/eas/EasSyncContacts.java
+++ b/src/com/android/exchange/eas/EasSyncContacts.java
@@ -1,5 +1,6 @@
 package com.android.exchange.eas;
 
+import android.Manifest;
 import android.content.ContentProviderOperation;
 import android.content.ContentResolver;
 import android.content.ContentUris;
@@ -56,6 +57,11 @@ import java.util.TimeZone;
 public class EasSyncContacts extends EasSyncCollectionTypeBase {
     private static final String TAG = Eas.LOG_TAG;
 
+    private static final String[] NEEDED_PERMISSIONS = {
+        Manifest.permission.READ_CONTACTS,
+        Manifest.permission.WRITE_CONTACTS
+    };
+
     public static final int PIM_WINDOW_SIZE_CONTACTS = 10;
 
     private static final String MIMETYPE_GROUP_MEMBERSHIP_AND_ID_EQUALS =
@@ -158,6 +164,11 @@ public class EasSyncContacts extends EasSyncCollectionTypeBase {
                 Eas.EXCHANGE_ACCOUNT_MANAGER_TYPE);
     }
 
+    @Override
+    public boolean hasRequiredPermissions(final Context context) {
+        return hasPermissions(context, NEEDED_PERMISSIONS);
+    }
+
     @Override
     public int getTrafficFlag() {
         return TrafficFlags.DATA_CONTACTS;
diff --git a/src/com/android/exchange/service/AbstractSyncAdapterService.java b/src/com/android/exchange/service/AbstractSyncAdapterService.java
index 6e09de58..4ac1cdc5 100644
--- a/src/com/android/exchange/service/AbstractSyncAdapterService.java
+++ b/src/com/android/exchange/service/AbstractSyncAdapterService.java
@@ -26,8 +26,13 @@ import android.content.Context;
 import android.content.Intent;
 import android.content.ServiceConnection;
 import android.content.SyncResult;
+import android.content.pm.PackageManager;
 import android.database.Cursor;
 import android.net.Uri;
+import android.os.Handler;
+import android.os.Looper;
+import android.os.Message;
+import android.os.Messenger;
 import android.os.IBinder;
 import android.text.format.DateUtils;
 
@@ -36,6 +41,7 @@ import com.android.emailcommon.provider.EmailContent;
 import com.android.emailcommon.service.EmailServiceStatus;
 import com.android.emailcommon.service.IEmailService;
 import com.android.emailcommon.utility.IntentUtilities;
+import com.android.exchange.PermissionRequestActivity;
 import com.android.exchange.R;
 import com.android.mail.utils.LogUtils;
 
@@ -138,6 +144,30 @@ public abstract class AbstractSyncAdapterService extends Service {
         nm.notify("AuthError", 0, notification);
     }
 
+    protected boolean requestPermissions(String[] permissions) {
+        Looper.prepare();
+
+        boolean[] result = new boolean[1];
+
+        Handler handler = new Handler(Looper.myLooper()) {
+            @Override
+            public void handleMessage(Message msg) {
+                int[] grantResults = (int[]) msg.obj;
+                result[0] = true;
+                for (int i = 0; i < grantResults.length; i++) {
+                    result[0] &= grantResults[i] == PackageManager.PERMISSION_GRANTED;
+                }
+                getLooper().quitSafely();
+            }
+        };
+        Messenger messenger = new Messenger(handler);
+
+        startActivity(PermissionRequestActivity.createIntent(this, permissions, messenger));
+        Looper.loop();
+
+        return result[0];
+    }
+
     /**
      * Interpret a result code from an {@link IEmailService.sync()} and, if it's an error, write
      * it to the appropriate field in {@link android.content.SyncResult}.
diff --git a/src/com/android/exchange/service/CalendarSyncAdapterService.java b/src/com/android/exchange/service/CalendarSyncAdapterService.java
index 06160643..c26bc63b 100644
--- a/src/com/android/exchange/service/CalendarSyncAdapterService.java
+++ b/src/com/android/exchange/service/CalendarSyncAdapterService.java
@@ -42,6 +42,11 @@ public class CalendarSyncAdapterService extends AbstractSyncAdapterService {
     private static final String DIRTY_IN_ACCOUNT =
         Events.DIRTY + "=1 AND " + Events.ACCOUNT_NAME + "=?";
 
+    private static final String[] NEEDED_PERMISSIONS = {
+        android.Manifest.permission.READ_CALENDAR,
+        android.Manifest.permission.WRITE_CALENDAR
+    };
+
     private static final Object sSyncAdapterLock = new Object();
     private static AbstractThreadedSyncAdapter sSyncAdapter = null;
 
@@ -88,6 +93,10 @@ public class CalendarSyncAdapterService extends AbstractSyncAdapterService {
                 return;
             }
 
+            if (!requestPermissions(NEEDED_PERMISSIONS)) {
+                return;
+            }
+
             // TODO: is this still needed?
             if (extras.getBoolean(ContentResolver.SYNC_EXTRAS_UPLOAD)) {
                 final Cursor c = getContentResolver().query(Events.CONTENT_URI,
diff --git a/src/com/android/exchange/service/ContactsSyncAdapterService.java b/src/com/android/exchange/service/ContactsSyncAdapterService.java
index ce455bab..ab1a3c24 100644
--- a/src/com/android/exchange/service/ContactsSyncAdapterService.java
+++ b/src/com/android/exchange/service/ContactsSyncAdapterService.java
@@ -42,6 +42,11 @@ public class ContactsSyncAdapterService extends AbstractSyncAdapterService {
     private static final String ACCOUNT_AND_TYPE_CONTACTS =
         MailboxColumns.ACCOUNT_KEY + "=? AND " + MailboxColumns.TYPE + '=' + Mailbox.TYPE_CONTACTS;
 
+    private static final String[] NEEDED_PERMISSIONS = {
+        android.Manifest.permission.READ_CONTACTS,
+        android.Manifest.permission.WRITE_CONTACTS
+    };
+
     private static final Object sSyncAdapterLock = new Object();
     private static AbstractThreadedSyncAdapter sSyncAdapter = null;
 
@@ -88,6 +93,10 @@ public class ContactsSyncAdapterService extends AbstractSyncAdapterService {
                 return;
             }
 
+            if (!requestPermissions(NEEDED_PERMISSIONS)) {
+                return;
+            }
+
             // TODO: is this still needed?
             // If we've been asked to do an upload, make sure we've got work to do
             if (extras.getBoolean(ContentResolver.SYNC_EXTRAS_UPLOAD)) {
diff --git a/src/com/android/exchange/service/EasService.java b/src/com/android/exchange/service/EasService.java
index fe496ed8..9514e4e7 100644
--- a/src/com/android/exchange/service/EasService.java
+++ b/src/com/android/exchange/service/EasService.java
@@ -135,6 +135,9 @@ public class EasService extends Service {
                 if (result == EasFullSyncOperation.RESULT_SECURITY_HOLD) {
                     LogUtils.i(LogUtils.TAG, "Security Hold trying to sync");
                     return EmailServiceStatus.INTERNAL_ERROR;
+                } else if (result == EasFullSyncOperation.RESULT_NO_PERMISSIONS) {
+                    LogUtils.i(LogUtils.TAG, "No permissions trying to sync");
+                    return EmailServiceStatus.INTERNAL_ERROR;
                 }
                 return convertToEmailServiceStatus(result);
             } else {
-- 
2.17.1

