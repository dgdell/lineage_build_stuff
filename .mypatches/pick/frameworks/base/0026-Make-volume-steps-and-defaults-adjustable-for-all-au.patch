From 3e601c2034b424837cb2364464a784546e97cc31 Mon Sep 17 00:00:00 2001
From: Vladimir Oltean <olteanv@gmail.com>
Date: Mon, 28 May 2018 16:34:10 +0300
Subject: [PATCH 26/40] Make volume steps and defaults adjustable for all audio
 streams

* AOSP permits adjustment of the following properties:

     Stream       |       Number of steps       |       Default volume
------------------+-----------------------------+----------------------------
STREAM_VOICE_CALL | ro.config.vc_call_vol_steps |             -
   STREAM_MUSIC   |  ro.config.media_vol_steps  | ro.config.media_vol_default
   STREAM_ALARM   |              -              |             -
   STREAM_RING    |              -              |             -

* This patch effectively completes the table of supported adjustments by
  introducing the following new properties:
    - ro.config.alarm_vol_steps, ro.config.alarm_vol_default
    - ro.config.ring_vol_steps,  ro.config.ring_vol_default
    - ro.config.vc_call_vol_default
* This allows a device that used one of the 3 existing properties to
  have a uniform level of control over all streams in the volume widget.

Change-Id: I087809bd49f36a32d59d4a90b11586eeb00e493b
Signed-off-by: Vladimir Oltean <olteanv@gmail.com>
---
 .../android/server/audio/AudioService.java    | 56 +++++++++++--------
 1 file changed, 32 insertions(+), 24 deletions(-)

diff --git a/services/core/java/com/android/server/audio/AudioService.java b/services/core/java/com/android/server/audio/AudioService.java
index f7b139ec0a0..860dcf38d80 100644
--- a/services/core/java/com/android/server/audio/AudioService.java
+++ b/services/core/java/com/android/server/audio/AudioService.java
@@ -687,30 +687,38 @@ public class AudioService extends IAudioService.Stub
         mHasVibrator = vibrator == null ? false : vibrator.hasVibrator();
 
         // Initialize volume
-        int maxCallVolume = SystemProperties.getInt("ro.config.vc_call_vol_steps", -1);
-        if (maxCallVolume != -1) {
-            MAX_STREAM_VOLUME[AudioSystem.STREAM_VOICE_CALL] = maxCallVolume;
-            AudioSystem.DEFAULT_STREAM_VOLUME[AudioSystem.STREAM_VOICE_CALL] =
-                    (maxCallVolume * 3) / 4;
-        }
-
-        int maxMusicVolume = SystemProperties.getInt("ro.config.media_vol_steps", -1);
-        if (maxMusicVolume != -1) {
-            MAX_STREAM_VOLUME[AudioSystem.STREAM_MUSIC] = maxMusicVolume;
-        }
-
-        int defaultMusicVolume = SystemProperties.getInt("ro.config.media_vol_default", -1);
-        if (defaultMusicVolume != -1 &&
-                defaultMusicVolume <= MAX_STREAM_VOLUME[AudioSystem.STREAM_MUSIC]) {
-            AudioSystem.DEFAULT_STREAM_VOLUME[AudioSystem.STREAM_MUSIC] = defaultMusicVolume;
-        } else {
-            if (isPlatformTelevision()) {
-                AudioSystem.DEFAULT_STREAM_VOLUME[AudioSystem.STREAM_MUSIC] =
-                        MAX_STREAM_VOLUME[AudioSystem.STREAM_MUSIC] / 4;
-            } else {
-                AudioSystem.DEFAULT_STREAM_VOLUME[AudioSystem.STREAM_MUSIC] =
-                        MAX_STREAM_VOLUME[AudioSystem.STREAM_MUSIC] / 3;
-            }
+        String volumeStepsProperties[] = {
+            "ro.config.vc_call_vol_steps",
+            "ro.config.media_vol_steps",
+            "ro.config.alarm_vol_steps",
+            "ro.config.ring_vol_steps",
+        };
+        String volumeDefaultsProperties[] = {
+            "ro.config.vc_call_vol_default",
+            "ro.config.media_vol_default",
+            "ro.config.alarm_vol_default",
+            "ro.config.ring_vol_default",
+        };
+        int streams[] = {
+            AudioSystem.STREAM_VOICE_CALL,
+            AudioSystem.STREAM_MUSIC,
+            AudioSystem.STREAM_ALARM,
+            AudioSystem.STREAM_RING,
+        };
+        for (int i = 0; i < volumeStepsProperties.length; i++) {
+            int maxVolume = SystemProperties.getInt(volumeStepsProperties[i], -1);
+            if (maxVolume == -1)
+                maxVolume = MAX_STREAM_VOLUME[streams[i]];
+            MAX_STREAM_VOLUME[streams[i]] = maxVolume;
+        }
+        for (int i = 0; i < volumeDefaultsProperties.length; i++) {
+            int volume = SystemProperties.getInt(volumeDefaultsProperties[i], -1);
+            if (volume == -1 || (volume > MAX_STREAM_VOLUME[streams[i]]))
+                if (isPlatformTelevision())
+                    volume = MAX_STREAM_VOLUME[streams[i]] / 4;
+                else
+                    volume = MAX_STREAM_VOLUME[streams[i]] / 3;
+            AudioSystem.DEFAULT_STREAM_VOLUME[streams[i]] = volume;
         }
 
         sSoundEffectVolumeDb = context.getResources().getInteger(
-- 
2.17.1

