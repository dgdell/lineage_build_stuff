From af7907e1cd49859603b07361d4b8fb3797572fa2 Mon Sep 17 00:00:00 2001
From: Adnan <adnan@cyngn.com>
Date: Sun, 3 Aug 2014 17:00:20 -0700
Subject: [PATCH 34/70] Keyguard: Add option to scramble pin layout when
 unlocking (2/2).

Adapted to Lineage SDK and squashed with the following changes:

  From: Adnan Begovic <adnan@cyngn.com>
  Date: Wed, 05 Aug 2015 10:40:41 -0700

      Keyguard: Don't disable visibility when scrambling pin.

        Otherwise the first numbers text is flipped to invisible
        even though it shouldn't be.

      Change-Id: Ia2b80d594e7f11af7a60a85bdb4ea9909d0ac20b

  From: Adnan Begovic <adnan@cyngn.com>
  Date: Wed, 05 Aug 2015 16:21:27 -0700

      Keyguard: Fix scramblepin logic.

      Change-Id: I71e6d26e853fa7bfaeea4b3256902881ac7f74fc

Original Change-Id: Ibe8611eb0b8a5bd9275bc96682d2cbafaa37d8f5
Change-Id: I6716b1c76b69d51bd1457ce07de2274541fca1e8
---
 .../com/android/keyguard/KeyguardPINView.java | 35 +++++++++++++++++++
 .../src/com/android/keyguard/NumPadKey.java   | 26 +++++++++-----
 2 files changed, 53 insertions(+), 8 deletions(-)

diff --git a/packages/SystemUI/src/com/android/keyguard/KeyguardPINView.java b/packages/SystemUI/src/com/android/keyguard/KeyguardPINView.java
index adb246013d5..4058d3e0f6c 100644
--- a/packages/SystemUI/src/com/android/keyguard/KeyguardPINView.java
+++ b/packages/SystemUI/src/com/android/keyguard/KeyguardPINView.java
@@ -21,10 +21,18 @@ import android.util.AttributeSet;
 import android.view.View;
 import android.view.ViewGroup;
 import android.view.animation.AnimationUtils;
+import android.widget.LinearLayout;
 
 import com.android.settingslib.animation.AppearAnimationUtils;
 import com.android.settingslib.animation.DisappearAnimationUtils;
 
+import lineageos.providers.LineageSettings;
+
+import java.util.ArrayList;
+import java.util.Arrays;
+import java.util.Collections;
+import java.util.List;
+
 /**
  * Displays a PIN pad for unlocking.
  */
@@ -43,6 +51,8 @@ public class KeyguardPINView extends KeyguardPinBasedInputView {
     private View[][] mViews;
     private final KeyguardUpdateMonitor mKeyguardUpdateMonitor;
 
+    private static List<Integer> sNumbers = Arrays.asList(1, 2, 3, 4, 5, 6, 7, 8, 9, 0);
+
     public KeyguardPINView(Context context) {
         this(context, null);
     }
@@ -114,6 +124,31 @@ public class KeyguardPINView extends KeyguardPinBasedInputView {
                 mCallback.reset();
             });
         }
+
+        boolean scramblePin = (LineageSettings.System.getInt(getContext().getContentResolver(),
+                LineageSettings.System.LOCKSCREEN_PIN_SCRAMBLE_LAYOUT, 0) == 1);
+        if (scramblePin) {
+            Collections.shuffle(sNumbers);
+            // get all children who are NumPadKey's
+            LinearLayout container = (LinearLayout) findViewById(R.id.container);
+            List<NumPadKey> views = new ArrayList<NumPadKey>();
+            for (int i = 0; i < container.getChildCount(); i++) {
+                if (container.getChildAt(i) instanceof LinearLayout) {
+                    LinearLayout nestedLayout = ((LinearLayout) container.getChildAt(i));
+                    for (int j = 0; j < nestedLayout.getChildCount(); j++){
+                        View view = nestedLayout.getChildAt(j);
+                        if (view.getClass() == NumPadKey.class) {
+                            views.add((NumPadKey) view);
+                        }
+                    }
+                }
+            }
+            // reset the digits in the views
+            for (int i = 0; i < sNumbers.size(); i++) {
+                NumPadKey view = views.get(i);
+                view.setDigit(sNumbers.get(i));
+            }
+        }
     }
 
     @Override
diff --git a/packages/SystemUI/src/com/android/keyguard/NumPadKey.java b/packages/SystemUI/src/com/android/keyguard/NumPadKey.java
index 45f1686e0c9..b243db3b0c9 100644
--- a/packages/SystemUI/src/com/android/keyguard/NumPadKey.java
+++ b/packages/SystemUI/src/com/android/keyguard/NumPadKey.java
@@ -30,6 +30,8 @@ import android.widget.TextView;
 
 import com.android.internal.widget.LockPatternUtils;
 
+import lineageos.providers.LineageSettings;
+
 public class NumPadKey extends ViewGroup {
     // list of "ABC", etc per digit, starting with '0'
     static String sKlondike[];
@@ -101,27 +103,35 @@ public class NumPadKey extends ViewGroup {
         mDigitText.setText(Integer.toString(mDigit));
         mKlondikeText = (TextView) findViewById(R.id.klondike_text);
 
+        updateText();
+        setBackground(mContext.getDrawable(R.drawable.ripple_drawable));
+        setContentDescription(mDigitText.getText().toString());
+    }
+
+    public void setDigit(int digit) {
+        mDigit = digit;
+        updateText();
+    }
+
+    private void updateText() {
+        boolean scramblePin = (LineageSettings.System.getInt(getContext().getContentResolver(),
+                LineageSettings.System.LOCKSCREEN_PIN_SCRAMBLE_LAYOUT, 0) == 1);
+
         if (mDigit >= 0) {
+            mDigitText.setText(Integer.toString(mDigit));
             if (sKlondike == null) {
                 sKlondike = getResources().getStringArray(R.array.lockscreen_num_pad_klondike);
             }
             if (sKlondike != null && sKlondike.length > mDigit) {
                 String klondike = sKlondike[mDigit];
                 final int len = klondike.length();
-                if (len > 0) {
+                if (len > 0 || scramblePin) {
                     mKlondikeText.setText(klondike);
                 } else {
                     mKlondikeText.setVisibility(View.INVISIBLE);
                 }
             }
         }
-
-        a = context.obtainStyledAttributes(attrs, android.R.styleable.View);
-        if (!a.hasValueOrEmpty(android.R.styleable.View_background)) {
-            setBackground(mContext.getDrawable(R.drawable.ripple_drawable));
-        }
-        a.recycle();
-        setContentDescription(mDigitText.getText().toString());
     }
 
     @Override
-- 
2.17.1

