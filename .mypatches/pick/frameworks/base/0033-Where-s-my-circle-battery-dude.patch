From ffed979077ba19c6d1caa5bf9cd117121df24d33 Mon Sep 17 00:00:00 2001
From: Bruno Martins <bgcngm@gmail.com>
Date: Fri, 27 Jul 2018 01:48:42 +0100
Subject: [PATCH 33/37] Where's my circle battery, dude?

Change-Id: I5c1cfec6d08deb6f4205356dd2bbc03e04d0ee3a
---
 packages/SettingsLib/Android.mk               |   4 +-
 .../SettingsLib/res/anim/battery_circle.xml   |  23 ++
 .../res/anim/battery_landscape.xml            |  23 ++
 .../SettingsLib/res/anim/battery_portrait.xml |  23 ++
 .../res/drawable/ic_battery_bolt.xml          |  28 ++
 .../res/drawable/ic_battery_circle.xml        |  31 +++
 .../res/drawable/ic_battery_circle_avd.xml    |  24 ++
 .../res/drawable/ic_battery_circle_fill.xml   |  31 +++
 .../res/drawable/ic_battery_circle_frame.xml  |  31 +++
 .../res/drawable/ic_battery_landscape.xml     |  37 +++
 .../res/drawable/ic_battery_landscape_avd.xml |  24 ++
 .../drawable/ic_battery_landscape_fill.xml    |  33 +++
 .../drawable/ic_battery_landscape_frame.xml   |  33 +++
 .../res/drawable/ic_battery_portrait.xml      |  31 +++
 .../res/drawable/ic_battery_portrait_avd.xml  |  24 ++
 .../res/drawable/ic_battery_portrait_fill.xml |  33 +++
 .../drawable/ic_battery_portrait_frame.xml    |  33 +++
 .../SettingsLib/res/values/cm_strings.xml     |  13 +
 packages/SettingsLib/res/values/dimens.xml    |   4 +-
 .../SettingsLib/res/values/lineage_attrs.xml  |  58 ++++
 .../SettingsLib/res/values/lineage_styles.xml |  31 +++
 .../graph/BatteryMeterDrawableBase.java       | 261 +++++++++++++++++-
 packages/SystemUI/res/values/cm_strings.xml   |   3 +
 packages/SystemUI/res/values/dimens.xml       |  12 +-
 .../SystemUI/res/xml/status_bar_prefs.xml     |   7 +-
 .../android/systemui/BatteryMeterView.java    |  71 ++++-
 26 files changed, 900 insertions(+), 26 deletions(-)
 create mode 100644 packages/SettingsLib/res/anim/battery_circle.xml
 create mode 100644 packages/SettingsLib/res/anim/battery_landscape.xml
 create mode 100644 packages/SettingsLib/res/anim/battery_portrait.xml
 create mode 100644 packages/SettingsLib/res/drawable/ic_battery_bolt.xml
 create mode 100644 packages/SettingsLib/res/drawable/ic_battery_circle.xml
 create mode 100644 packages/SettingsLib/res/drawable/ic_battery_circle_avd.xml
 create mode 100644 packages/SettingsLib/res/drawable/ic_battery_circle_fill.xml
 create mode 100644 packages/SettingsLib/res/drawable/ic_battery_circle_frame.xml
 create mode 100644 packages/SettingsLib/res/drawable/ic_battery_landscape.xml
 create mode 100644 packages/SettingsLib/res/drawable/ic_battery_landscape_avd.xml
 create mode 100644 packages/SettingsLib/res/drawable/ic_battery_landscape_fill.xml
 create mode 100644 packages/SettingsLib/res/drawable/ic_battery_landscape_frame.xml
 create mode 100644 packages/SettingsLib/res/drawable/ic_battery_portrait.xml
 create mode 100644 packages/SettingsLib/res/drawable/ic_battery_portrait_avd.xml
 create mode 100644 packages/SettingsLib/res/drawable/ic_battery_portrait_fill.xml
 create mode 100644 packages/SettingsLib/res/drawable/ic_battery_portrait_frame.xml
 create mode 100644 packages/SettingsLib/res/values/lineage_attrs.xml
 create mode 100644 packages/SettingsLib/res/values/lineage_styles.xml

diff --git a/packages/SettingsLib/Android.mk b/packages/SettingsLib/Android.mk
index 1ad4fea5e0a..599a9ecab9f 100644
--- a/packages/SettingsLib/Android.mk
+++ b/packages/SettingsLib/Android.mk
@@ -13,7 +13,9 @@ LOCAL_SHARED_ANDROID_LIBRARIES := \
     android-support-v7-appcompat \
     android-support-v14-preference
 
-LOCAL_STATIC_JAVA_LIBRARY := legacy-android-test
+LOCAL_STATIC_JAVA_LIBRARIES := \
+    legacy-android-test \
+    org.lineageos.platform.internal
 
 LOCAL_RESOURCE_DIR := $(LOCAL_PATH)/res
 
diff --git a/packages/SettingsLib/res/anim/battery_circle.xml b/packages/SettingsLib/res/anim/battery_circle.xml
new file mode 100644
index 00000000000..58085324ad0
--- /dev/null
+++ b/packages/SettingsLib/res/anim/battery_circle.xml
@@ -0,0 +1,23 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!--
+    Copyright (C) 2016 The CyanogenMod Project
+
+    Licensed under the Apache License, Version 2.0 (the "License");
+    you may not use this file except in compliance with the License.
+    You may obtain a copy of the License at
+
+         http://www.apache.org/licenses/LICENSE-2.0
+
+    Unless required by applicable law or agreed to in writing, software
+    distributed under the License is distributed on an "AS IS" BASIS,
+    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+    See the License for the specific language governing permissions and
+    limitations under the License.
+-->
+<objectAnimator
+  xmlns:android="http://schemas.android.com/apk/res/android"
+  android:interpolator="@android:interpolator/linear"
+  android:propertyName="trimPathEnd"
+  android:valueFrom="0"
+  android:valueTo="1"
+  android:valueType="floatType" />
diff --git a/packages/SettingsLib/res/anim/battery_landscape.xml b/packages/SettingsLib/res/anim/battery_landscape.xml
new file mode 100644
index 00000000000..bf9931bb5b7
--- /dev/null
+++ b/packages/SettingsLib/res/anim/battery_landscape.xml
@@ -0,0 +1,23 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!--
+    Copyright (C) 2016 The CyanogenMod Project
+
+    Licensed under the Apache License, Version 2.0 (the "License");
+    you may not use this file except in compliance with the License.
+    You may obtain a copy of the License at
+
+         http://www.apache.org/licenses/LICENSE-2.0
+
+    Unless required by applicable law or agreed to in writing, software
+    distributed under the License is distributed on an "AS IS" BASIS,
+    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+    See the License for the specific language governing permissions and
+    limitations under the License.
+-->
+<objectAnimator
+  xmlns:android="http://schemas.android.com/apk/res/android"
+  android:interpolator="@android:interpolator/linear"
+  android:propertyName="pathData"
+  android:valueFrom="@string/battery_landscape_path_empty"
+  android:valueTo="@string/battery_landscape_path_full"
+  android:valueType="pathType" />
diff --git a/packages/SettingsLib/res/anim/battery_portrait.xml b/packages/SettingsLib/res/anim/battery_portrait.xml
new file mode 100644
index 00000000000..6447cdf1567
--- /dev/null
+++ b/packages/SettingsLib/res/anim/battery_portrait.xml
@@ -0,0 +1,23 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!--
+    Copyright (C) 2016 The CyanogenMod Project
+
+    Licensed under the Apache License, Version 2.0 (the "License");
+    you may not use this file except in compliance with the License.
+    You may obtain a copy of the License at
+
+         http://www.apache.org/licenses/LICENSE-2.0
+
+    Unless required by applicable law or agreed to in writing, software
+    distributed under the License is distributed on an "AS IS" BASIS,
+    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+    See the License for the specific language governing permissions and
+    limitations under the License.
+-->
+<objectAnimator
+  xmlns:android="http://schemas.android.com/apk/res/android"
+  android:interpolator="@android:interpolator/linear"
+  android:propertyName="pathData"
+  android:valueFrom="@string/battery_portrait_path_empty"
+  android:valueTo="@string/battery_portrait_path_full"
+  android:valueType="pathType" />
diff --git a/packages/SettingsLib/res/drawable/ic_battery_bolt.xml b/packages/SettingsLib/res/drawable/ic_battery_bolt.xml
new file mode 100644
index 00000000000..40827ab1e92
--- /dev/null
+++ b/packages/SettingsLib/res/drawable/ic_battery_bolt.xml
@@ -0,0 +1,28 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!--
+    Copyright (C) 2016 The CyanogenMod Project
+
+    Licensed under the Apache License, Version 2.0 (the "License");
+    you may not use this file except in compliance with the License.
+    You may obtain a copy of the License at
+
+         http://www.apache.org/licenses/LICENSE-2.0
+
+    Unless required by applicable law or agreed to in writing, software
+    distributed under the License is distributed on an "AS IS" BASIS,
+    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+    See the License for the specific language governing permissions and
+    limitations under the License.
+-->
+<vector xmlns:android="http://schemas.android.com/apk/res/android"
+    android:width="24dp"
+    android:height="24dp"
+    android:viewportWidth="24"
+    android:viewportHeight="24"
+    android:tint="@color/batterymeter_bolt_color">
+
+    <path
+        android:fillColor="#000000"
+        android:pathData="M10.5,7h5l-2,4h3l-7,6l2-5H8.5L10.5,7z" />
+
+</vector>
diff --git a/packages/SettingsLib/res/drawable/ic_battery_circle.xml b/packages/SettingsLib/res/drawable/ic_battery_circle.xml
new file mode 100644
index 00000000000..117e02c4633
--- /dev/null
+++ b/packages/SettingsLib/res/drawable/ic_battery_circle.xml
@@ -0,0 +1,31 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!--
+    Copyright (C) 2016 The CyanogenMod Project
+
+    Licensed under the Apache License, Version 2.0 (the "License");
+    you may not use this file except in compliance with the License.
+    You may obtain a copy of the License at
+
+         http://www.apache.org/licenses/LICENSE-2.0
+
+    Unless required by applicable law or agreed to in writing, software
+    distributed under the License is distributed on an "AS IS" BASIS,
+    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+    See the License for the specific language governing permissions and
+    limitations under the License.
+-->
+<layer-list xmlns:android="http://schemas.android.com/apk/res/android">
+
+    <item
+        android:id="@+id/battery_frame"
+        android:drawable="@drawable/ic_battery_circle_frame" />
+
+    <item
+        android:id="@+id/battery_fill"
+        android:drawable="@drawable/ic_battery_circle_avd" />
+
+    <item
+        android:id="@+id/battery_charge_indicator"
+        android:drawable="@drawable/ic_battery_bolt" />
+
+</layer-list>
diff --git a/packages/SettingsLib/res/drawable/ic_battery_circle_avd.xml b/packages/SettingsLib/res/drawable/ic_battery_circle_avd.xml
new file mode 100644
index 00000000000..8c1703f2863
--- /dev/null
+++ b/packages/SettingsLib/res/drawable/ic_battery_circle_avd.xml
@@ -0,0 +1,24 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!--
+    Copyright (C) 2016 The CyanogenMod Project
+
+    Licensed under the Apache License, Version 2.0 (the "License");
+    you may not use this file except in compliance with the License.
+    You may obtain a copy of the License at
+
+         http://www.apache.org/licenses/LICENSE-2.0
+
+    Unless required by applicable law or agreed to in writing, software
+    distributed under the License is distributed on an "AS IS" BASIS,
+    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+    See the License for the specific language governing permissions and
+    limitations under the License.
+-->
+<animated-vector xmlns:android="http://schemas.android.com/apk/res/android"
+    android:drawable="@drawable/ic_battery_circle_fill" >
+
+    <target
+        android:name="battery_level"
+        android:animation="@anim/battery_circle" />
+
+</animated-vector>
diff --git a/packages/SettingsLib/res/drawable/ic_battery_circle_fill.xml b/packages/SettingsLib/res/drawable/ic_battery_circle_fill.xml
new file mode 100644
index 00000000000..9b730d6f7e5
--- /dev/null
+++ b/packages/SettingsLib/res/drawable/ic_battery_circle_fill.xml
@@ -0,0 +1,31 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!--
+    Copyright (C) 2016 The CyanogenMod Project
+
+    Licensed under the Apache License, Version 2.0 (the "License");
+    you may not use this file except in compliance with the License.
+    You may obtain a copy of the License at
+
+         http://www.apache.org/licenses/LICENSE-2.0
+
+    Unless required by applicable law or agreed to in writing, software
+    distributed under the License is distributed on an "AS IS" BASIS,
+    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+    See the License for the specific language governing permissions and
+    limitations under the License.
+-->
+<vector xmlns:android="http://schemas.android.com/apk/res/android"
+    android:width="24dp"
+    android:height="24dp"
+    android:viewportWidth="24"
+    android:viewportHeight="24">
+
+    <!-- Path will be tinted based on battery level -->
+    <path
+        android:name="battery_level"
+        android:strokeColor="#000000"
+        android:strokeLineJoin="round"
+        android:strokeWidth="3"
+        android:pathData="@string/battery_circle_path" />
+
+</vector>
diff --git a/packages/SettingsLib/res/drawable/ic_battery_circle_frame.xml b/packages/SettingsLib/res/drawable/ic_battery_circle_frame.xml
new file mode 100644
index 00000000000..5dad918c391
--- /dev/null
+++ b/packages/SettingsLib/res/drawable/ic_battery_circle_frame.xml
@@ -0,0 +1,31 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!--
+    Copyright (C) 2016 The CyanogenMod Project
+
+    Licensed under the Apache License, Version 2.0 (the "License");
+    you may not use this file except in compliance with the License.
+    You may obtain a copy of the License at
+
+         http://www.apache.org/licenses/LICENSE-2.0
+
+    Unless required by applicable law or agreed to in writing, software
+    distributed under the License is distributed on an "AS IS" BASIS,
+    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+    See the License for the specific language governing permissions and
+    limitations under the License.
+-->
+<vector xmlns:android="http://schemas.android.com/apk/res/android"
+    android:width="24dp"
+    android:height="24dp"
+    android:viewportWidth="24"
+    android:viewportHeight="24">
+
+    <!-- Path will be tinted based on light/dark modes -->
+    <path
+        android:name="frame"
+        android:strokeColor="#000000"
+        android:strokeLineJoin="round"
+        android:strokeWidth="3"
+        android:pathData="@string/battery_circle_path" />
+
+</vector>
diff --git a/packages/SettingsLib/res/drawable/ic_battery_landscape.xml b/packages/SettingsLib/res/drawable/ic_battery_landscape.xml
new file mode 100644
index 00000000000..c6fb8a54e39
--- /dev/null
+++ b/packages/SettingsLib/res/drawable/ic_battery_landscape.xml
@@ -0,0 +1,37 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!--
+    Copyright (C) 2016 The CyanogenMod Project
+
+    Licensed under the Apache License, Version 2.0 (the "License");
+    you may not use this file except in compliance with the License.
+    You may obtain a copy of the License at
+
+         http://www.apache.org/licenses/LICENSE-2.0
+
+    Unless required by applicable law or agreed to in writing, software
+    distributed under the License is distributed on an "AS IS" BASIS,
+    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+    See the License for the specific language governing permissions and
+    limitations under the License.
+-->
+<layer-list xmlns:android="http://schemas.android.com/apk/res/android">
+
+    <item
+        android:id="@+id/battery_frame"
+        android:drawable="@drawable/ic_battery_landscape_frame" />
+
+    <item
+        android:id="@+id/battery_fill"
+        android:drawable="@drawable/ic_battery_landscape_avd" />
+
+    <item
+        android:id="@+id/battery_charge_indicator">
+        <rotate
+            android:pivotX="50%"
+            android:pivotY="50%"
+            android:fromDegrees="90"
+            android:toDegrees="90"
+            android:drawable="@drawable/ic_battery_bolt" />
+    </item>
+
+</layer-list>
diff --git a/packages/SettingsLib/res/drawable/ic_battery_landscape_avd.xml b/packages/SettingsLib/res/drawable/ic_battery_landscape_avd.xml
new file mode 100644
index 00000000000..9f5bd48f3bd
--- /dev/null
+++ b/packages/SettingsLib/res/drawable/ic_battery_landscape_avd.xml
@@ -0,0 +1,24 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!--
+    Copyright (C) 2016 The CyanogenMod Project
+
+    Licensed under the Apache License, Version 2.0 (the "License");
+    you may not use this file except in compliance with the License.
+    You may obtain a copy of the License at
+
+         http://www.apache.org/licenses/LICENSE-2.0
+
+    Unless required by applicable law or agreed to in writing, software
+    distributed under the License is distributed on an "AS IS" BASIS,
+    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+    See the License for the specific language governing permissions and
+    limitations under the License.
+-->
+<animated-vector xmlns:android="http://schemas.android.com/apk/res/android"
+    android:drawable="@drawable/ic_battery_landscape_fill" >
+
+    <target
+        android:name="battery_level"
+        android:animation="@anim/battery_landscape" />
+
+</animated-vector>
diff --git a/packages/SettingsLib/res/drawable/ic_battery_landscape_fill.xml b/packages/SettingsLib/res/drawable/ic_battery_landscape_fill.xml
new file mode 100644
index 00000000000..bf8246db1d2
--- /dev/null
+++ b/packages/SettingsLib/res/drawable/ic_battery_landscape_fill.xml
@@ -0,0 +1,33 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!--
+    Copyright (C) 2016 The CyanogenMod Project
+
+    Licensed under the Apache License, Version 2.0 (the "License");
+    you may not use this file except in compliance with the License.
+    You may obtain a copy of the License at
+
+         http://www.apache.org/licenses/LICENSE-2.0
+
+    Unless required by applicable law or agreed to in writing, software
+    distributed under the License is distributed on an "AS IS" BASIS,
+    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+    See the License for the specific language governing permissions and
+    limitations under the License.
+-->
+<vector xmlns:android="http://schemas.android.com/apk/res/android"
+    android:width="26dp"
+    android:height="24dp"
+    android:viewportWidth="26"
+    android:viewportHeight="24">
+
+    <clip-path
+        android:name="mask"
+        android:pathData="@string/battery_landscape_clip_path" />
+
+    <!-- Path will be tinted based on battery level -->
+    <path
+        android:name="battery_level"
+        android:fillColor="#000000"
+        android:pathData="@string/battery_landscape_path_empty" />
+
+</vector>
diff --git a/packages/SettingsLib/res/drawable/ic_battery_landscape_frame.xml b/packages/SettingsLib/res/drawable/ic_battery_landscape_frame.xml
new file mode 100644
index 00000000000..c1a967be929
--- /dev/null
+++ b/packages/SettingsLib/res/drawable/ic_battery_landscape_frame.xml
@@ -0,0 +1,33 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!--
+    Copyright (C) 2016 The CyanogenMod Project
+
+    Licensed under the Apache License, Version 2.0 (the "License");
+    you may not use this file except in compliance with the License.
+    You may obtain a copy of the License at
+
+         http://www.apache.org/licenses/LICENSE-2.0
+
+    Unless required by applicable law or agreed to in writing, software
+    distributed under the License is distributed on an "AS IS" BASIS,
+    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+    See the License for the specific language governing permissions and
+    limitations under the License.
+-->
+<vector xmlns:android="http://schemas.android.com/apk/res/android"
+    android:width="26dp"
+    android:height="24dp"
+    android:viewportWidth="26"
+    android:viewportHeight="24">
+
+    <clip-path
+        android:name="mask"
+        android:pathData="@string/battery_landscape_clip_path" />
+
+    <!-- Path will be tinted based on light/dark modes -->
+    <path
+        android:name="frame"
+        android:fillColor="#000000"
+        android:pathData="M 1 4 H 25 V 20 H 1 V 4 Z" />
+
+</vector>
diff --git a/packages/SettingsLib/res/drawable/ic_battery_portrait.xml b/packages/SettingsLib/res/drawable/ic_battery_portrait.xml
new file mode 100644
index 00000000000..5a4a2bb587d
--- /dev/null
+++ b/packages/SettingsLib/res/drawable/ic_battery_portrait.xml
@@ -0,0 +1,31 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!--
+    Copyright (C) 2016 The CyanogenMod Project
+
+    Licensed under the Apache License, Version 2.0 (the "License");
+    you may not use this file except in compliance with the License.
+    You may obtain a copy of the License at
+
+         http://www.apache.org/licenses/LICENSE-2.0
+
+    Unless required by applicable law or agreed to in writing, software
+    distributed under the License is distributed on an "AS IS" BASIS,
+    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+    See the License for the specific language governing permissions and
+    limitations under the License.
+-->
+<layer-list xmlns:android="http://schemas.android.com/apk/res/android">
+
+    <item
+        android:id="@+id/battery_frame"
+        android:drawable="@drawable/ic_battery_portrait_frame" />
+
+    <item
+        android:id="@+id/battery_fill"
+        android:drawable="@drawable/ic_battery_portrait_avd" />
+
+    <item
+        android:id="@+id/battery_charge_indicator"
+        android:drawable="@drawable/ic_battery_bolt" />
+
+</layer-list>
diff --git a/packages/SettingsLib/res/drawable/ic_battery_portrait_avd.xml b/packages/SettingsLib/res/drawable/ic_battery_portrait_avd.xml
new file mode 100644
index 00000000000..2e2c1dcc7f6
--- /dev/null
+++ b/packages/SettingsLib/res/drawable/ic_battery_portrait_avd.xml
@@ -0,0 +1,24 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!--
+    Copyright (C) 2016 The CyanogenMod Project
+
+    Licensed under the Apache License, Version 2.0 (the "License");
+    you may not use this file except in compliance with the License.
+    You may obtain a copy of the License at
+
+         http://www.apache.org/licenses/LICENSE-2.0
+
+    Unless required by applicable law or agreed to in writing, software
+    distributed under the License is distributed on an "AS IS" BASIS,
+    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+    See the License for the specific language governing permissions and
+    limitations under the License.
+-->
+<animated-vector xmlns:android="http://schemas.android.com/apk/res/android"
+    android:drawable="@drawable/ic_battery_portrait_fill">
+
+    <target
+        android:name="battery_level"
+        android:animation="@anim/battery_portrait" />
+
+</animated-vector>
diff --git a/packages/SettingsLib/res/drawable/ic_battery_portrait_fill.xml b/packages/SettingsLib/res/drawable/ic_battery_portrait_fill.xml
new file mode 100644
index 00000000000..cad4c2e9170
--- /dev/null
+++ b/packages/SettingsLib/res/drawable/ic_battery_portrait_fill.xml
@@ -0,0 +1,33 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!--
+    Copyright (C) 2016 The CyanogenMod Project
+
+    Licensed under the Apache License, Version 2.0 (the "License");
+    you may not use this file except in compliance with the License.
+    You may obtain a copy of the License at
+
+         http://www.apache.org/licenses/LICENSE-2.0
+
+    Unless required by applicable law or agreed to in writing, software
+    distributed under the License is distributed on an "AS IS" BASIS,
+    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+    See the License for the specific language governing permissions and
+    limitations under the License.
+-->
+<vector xmlns:android="http://schemas.android.com/apk/res/android"
+    android:width="24dp"
+    android:height="24dp"
+    android:viewportWidth="24"
+    android:viewportHeight="24">
+
+    <clip-path
+        android:name="mask"
+        android:pathData="@string/battery_portrait_clip_path" />
+
+    <!-- Path will be tinted based on battery level -->
+    <path
+        android:name="battery_level"
+        android:fillColor="#000000"
+        android:pathData="@string/battery_portrait_path_empty" />
+
+</vector>
diff --git a/packages/SettingsLib/res/drawable/ic_battery_portrait_frame.xml b/packages/SettingsLib/res/drawable/ic_battery_portrait_frame.xml
new file mode 100644
index 00000000000..efd00b6265a
--- /dev/null
+++ b/packages/SettingsLib/res/drawable/ic_battery_portrait_frame.xml
@@ -0,0 +1,33 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!--
+    Copyright (C) 2016 The CyanogenMod Project
+
+    Licensed under the Apache License, Version 2.0 (the "License");
+    you may not use this file except in compliance with the License.
+    You may obtain a copy of the License at
+
+         http://www.apache.org/licenses/LICENSE-2.0
+
+    Unless required by applicable law or agreed to in writing, software
+    distributed under the License is distributed on an "AS IS" BASIS,
+    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+    See the License for the specific language governing permissions and
+    limitations under the License.
+-->
+<vector xmlns:android="http://schemas.android.com/apk/res/android"
+    android:width="24dp"
+    android:height="24dp"
+    android:viewportWidth="24"
+    android:viewportHeight="24">
+
+    <clip-path
+        android:name="mask"
+        android:pathData="@string/battery_portrait_clip_path" />
+
+    <!-- Path will be tinted based on light/dark modes -->
+    <path
+        android:name="frame"
+        android:fillColor="#000000"
+        android:pathData="M19,2v19H5V2H19z" />
+
+</vector>
diff --git a/packages/SettingsLib/res/values/cm_strings.xml b/packages/SettingsLib/res/values/cm_strings.xml
index c09c2e9393f..fa161c29f09 100644
--- a/packages/SettingsLib/res/values/cm_strings.xml
+++ b/packages/SettingsLib/res/values/cm_strings.xml
@@ -22,4 +22,17 @@
     <string name="screen_zoom_summary_smaller">Smaller</string>
     <!-- Description for the screen zoom level that makes interface elements smallest. [CHAR LIMIT=24] -->
     <string name="screen_zoom_summary_smallest">Smallest</string>
+
+    <!-- Path data for portrait battery -->
+    <string name="battery_portrait_path_full" translatable="false">M 5 2 H 19 V 21 H 5 V 2 Z</string>
+    <string name="battery_portrait_path_empty" translatable="false">M 5 21 H 19 V 21 H 5 V 21 Z</string>
+    <string name="battery_portrait_clip_path" translatable="false">M6,21V4h3V2h6v2h3v17H6z</string>
+
+    <!-- Path data for landscape battery -->
+    <string name="battery_landscape_path_full" translatable="false">M 1 4 H 25 V 20 H 1 V 4 Z</string>
+    <string name="battery_landscape_path_empty" translatable="false">M 1 4 H 1 V 20 H 1 V 4 Z</string>
+    <string name="battery_landscape_clip_path" translatable="false">M25,16h-2v4H1V4h22v4h2V16z</string>
+
+    <!-- Path data for circle battery -->
+    <string name="battery_circle_path" translatable="false">M 12 3.5 C 16.6944203736 3.5 20.5 7.30557962644 20.5 12 C 20.5 16.6944203736 16.6944203736 20.5 12 20.5 C 7.30557962644 20.5 3.5 16.6944203736 3.5 12 C 3.5 7.30557962644 7.30557962644 3.5 12 3.5 Z</string>
 </resources>
diff --git a/packages/SettingsLib/res/values/dimens.xml b/packages/SettingsLib/res/values/dimens.xml
index e2615709cfb..40f8208a6d7 100644
--- a/packages/SettingsLib/res/values/dimens.xml
+++ b/packages/SettingsLib/res/values/dimens.xml
@@ -52,8 +52,8 @@
     <dimen name="usage_graph_dot_size">.75dp</dimen>
     <dimen name="usage_graph_dot_interval">7dp</dimen>
 
-    <dimen name="battery_height">14.5dp</dimen>
-    <dimen name="battery_width">9.5dp</dimen>
+    <dimen name="battery_height">18dp</dimen>
+    <dimen name="battery_width">18dp</dimen>
 
     <dimen name="bt_battery_padding">2dp</dimen>
 
diff --git a/packages/SettingsLib/res/values/lineage_attrs.xml b/packages/SettingsLib/res/values/lineage_attrs.xml
new file mode 100644
index 00000000000..0ae2e13ad9d
--- /dev/null
+++ b/packages/SettingsLib/res/values/lineage_attrs.xml
@@ -0,0 +1,58 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!--
+     Copyright (C) 2015-2016 The CyanogenMod Project
+
+     Licensed under the Apache License, Version 2.0 (the "License");
+     you may not use this file except in compliance with the License.
+     You may obtain a copy of the License at
+
+          http://www.apache.org/licenses/LICENSE-2.0
+
+     Unless required by applicable law or agreed to in writing, software
+     distributed under the License is distributed on an "AS IS" BASIS,
+     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+     See the License for the specific language governing permissions and
+     limitations under the License.
+-->
+<resources>
+    <declare-styleable name="BatteryMeterViewDrawable">
+        <attr name="android:gravity"/>
+        <!-- Blending mode used for drawing charging bolt and percentage text -->
+        <attr name="blendMode">
+            <!-- [0, 0] -->
+            <enum name="clear" value="0" />
+            <!-- [Sa, Sc] -->
+            <enum name="src" value="1" />
+            <!-- [Da, Dc] -->
+            <enum name="dst" value="2" />
+            <!-- [Sa + (1 - Sa)*Da, Rc = Sc + (1 - Sa)*Dc] -->
+            <enum name="src_over" value="3" />
+            <!-- [Sa + (1 - Sa)*Da, Rc = Dc + (1 - Da)*Sc] -->
+            <enum name="dst_over" value="4" />
+            <!-- [Sa * Da, Sc * Da] -->
+            <enum name="src_in" value="5" />
+            <!-- [Sa * Da, Sa * Dc] -->
+            <enum name="dst_in" value="6" />
+            <!-- [Sa * (1 - Da), Sc * (1 - Da)] -->
+            <enum name="src_out" value="7" />
+            <!-- [Da * (1 - Sa), Dc * (1 - Sa)] -->
+            <enum name="dst_out" value="8" />
+            <!-- [Da, Sc * Da + (1 - Sa) * Dc] -->
+            <enum name="src_atop" value="9" />
+            <!-- [Sa, Sa * Dc + Sc * (1 - Da)] -->
+            <enum name="dst_atop" value="10" />
+            <!-- [Sa + Da - 2 * Sa * Da, Sc * (1 - Da) + (1 - Sa) * Dc] -->
+            <enum name="xor" value="11" />
+            <!-- Saturate(S + D) -->
+            <enum name="add" value="12" />
+            <!-- [Sa * Da, Sc * Dc] -->
+            <enum name="multiply" value="13" />
+            <!-- [Sa + Da - Sa * Da, Sc + Dc - Sc * Dc] -->
+            <enum name="screen" value="14" />
+            <!-- Draw on top without any blending operations performed -->
+            <enum name="overlay" value="15" />
+            <!-- [Sa + Da - Sa*Da, Sc*(1 - Da) + Dc*(1 - Sa) + min(Sc, Dc)] -->
+            <enum name="darken" value="16" />
+        </attr>
+    </declare-styleable>
+</resources>
diff --git a/packages/SettingsLib/res/values/lineage_styles.xml b/packages/SettingsLib/res/values/lineage_styles.xml
new file mode 100644
index 00000000000..698ed07e164
--- /dev/null
+++ b/packages/SettingsLib/res/values/lineage_styles.xml
@@ -0,0 +1,31 @@
+<!--
+     Copyright (C) 2015-2016 The CyanogenMod Project
+
+     Licensed under the Apache License, Version 2.0 (the "License");
+     you may not use this file except in compliance with the License.
+     You may obtain a copy of the License at
+
+          http://www.apache.org/licenses/LICENSE-2.0
+
+     Unless required by applicable law or agreed to in writing, software
+     distributed under the License is distributed on an "AS IS" BASIS,
+     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+     See the License for the specific language governing permissions and
+     limitations under the License.
+-->
+
+<resources>
+    <!-- Base battery metter drawable style -->
+    <style name="BatteryMeterViewDrawable">
+        <!-- Gravity used for positioning text within the battery meter -->
+        <item name="android:gravity">center</item>
+        <item name="blendMode">clear</item>
+    </style>
+
+    <!-- Battery meter drawable styles -->
+    <style name="BatteryMeterViewDrawable.Portrait"/>
+    <style name="BatteryMeterViewDrawable.Landscape"/>
+    <style name="BatteryMeterViewDrawable.Circle">
+        <item name="blendMode">overlay</item>
+    </style>
+</resources>
diff --git a/packages/SettingsLib/src/com/android/settingslib/graph/BatteryMeterDrawableBase.java b/packages/SettingsLib/src/com/android/settingslib/graph/BatteryMeterDrawableBase.java
index ec45b7e9170..9dcda8d11b6 100755
--- a/packages/SettingsLib/src/com/android/settingslib/graph/BatteryMeterDrawableBase.java
+++ b/packages/SettingsLib/src/com/android/settingslib/graph/BatteryMeterDrawableBase.java
@@ -21,6 +21,7 @@ import android.annotation.Nullable;
 import android.content.Context;
 import android.content.res.Resources;
 import android.content.res.TypedArray;
+import android.graphics.Bitmap;
 import android.graphics.Canvas;
 import android.graphics.Color;
 import android.graphics.ColorFilter;
@@ -28,34 +29,61 @@ import android.graphics.Paint;
 import android.graphics.Path;
 import android.graphics.Path.Direction;
 import android.graphics.Path.FillType;
+import android.graphics.PorterDuff;
+import android.graphics.PorterDuffXfermode;
 import android.graphics.Rect;
 import android.graphics.RectF;
 import android.graphics.Typeface;
+import android.graphics.drawable.BitmapDrawable;
 import android.graphics.drawable.Drawable;
+import android.graphics.drawable.LayerDrawable;
 import android.util.TypedValue;
+import android.view.Gravity;
+import android.view.View;
 
 import com.android.settingslib.R;
 import com.android.settingslib.Utils;
 
+import org.lineageos.internal.graphics.drawable.StopMotionVectorDrawable;
+
 public class BatteryMeterDrawableBase extends Drawable {
 
     private static final float ASPECT_RATIO = .58f;
     public static final String TAG = BatteryMeterDrawableBase.class.getSimpleName();
     private static final float RADIUS_RATIO = 1.0f / 17f;
 
+    // Values for the different battery styles
+    public static final int BATTERY_STYLE_PORTRAIT = 0;
+    public static final int BATTERY_STYLE_LANDSCAPE = 1;
+    public static final int BATTERY_STYLE_CIRCLE = 2;
+    public static final int BATTERY_STYLE_TEXT = 3;
+
+    private static final int IGNORE_BATTERY_STYLES = -1;
+
     protected final Context mContext;
     protected final Paint mFramePaint;
     protected final Paint mBatteryPaint;
     protected final Paint mWarningTextPaint;
     protected final Paint mTextPaint;
+    protected final Paint mTextAndBoltPaint;
     protected final Paint mBoltPaint;
     protected final Paint mPlusPaint;
     protected float mButtonHeightFraction;
+    private float mTextX, mTextY;
+
+    private LayerDrawable mBatteryDrawable;
+    private Drawable mBoltDrawable;
+    private Drawable mFrameDrawable;
+    private StopMotionVectorDrawable mLevelDrawable;
 
     private int mLevel = -1;
+    private int mTextGravity = Gravity.CENTER;
+
     private boolean mCharging;
+    private boolean mInitialized;
     private boolean mPowerSaveEnabled;
     private boolean mShowPercent;
+    private boolean mUseVectorDrawables;
 
     private static final boolean SINGLE_DIGIT_PERCENT = false;
 
@@ -94,6 +122,11 @@ public class BatteryMeterDrawableBase extends Drawable {
     private final Path mTextPath = new Path();
 
     public BatteryMeterDrawableBase(Context context, int frameColor) {
+        // Ignore custom battery styles by default
+        this(context, frameColor, IGNORE_BATTERY_STYLES);
+    }
+
+    public BatteryMeterDrawableBase(Context context, int frameColor, int style) {
         mContext = context;
         final Resources res = context.getResources();
         TypedArray levels = res.obtainTypedArray(R.array.batterymeter_color_levels);
@@ -138,10 +171,38 @@ public class BatteryMeterDrawableBase extends Drawable {
         mTextPaint.setTypeface(font);
         mTextPaint.setTextAlign(Paint.Align.CENTER);
 
+        PorterDuff.Mode xferMode = PorterDuff.Mode.XOR;
+
+        if (style == IGNORE_BATTERY_STYLES) {
+            mUseVectorDrawables = false;
+        } else {
+            mUseVectorDrawables = true;
+
+            loadBatteryDrawables(res, frameColor, style);
+
+            // Load text gravity and blend mode
+            final int[] attrs = new int[] { android.R.attr.gravity, R.attr.blendMode };
+            final int resId = getBatteryDrawableStyleResourceForStyle(style);
+            if (resId != 0) {
+                TypedArray a = mContext.obtainStyledAttributes(resId, attrs);
+                mTextGravity = a.getInt(0, Gravity.CENTER);
+                xferMode = PorterDuff.intToMode(a.getInt(1,
+                        PorterDuff.modeToInt(PorterDuff.Mode.XOR)));
+                a.recycle();
+            }
+        }
+
+        mTextAndBoltPaint = new Paint(Paint.ANTI_ALIAS_FLAG);
+        mTextAndBoltPaint.setColor(Utils.getDefaultColor(mContext,
+                R.color.batterymeter_bolt_color));
+        mTextAndBoltPaint.setTypeface(font);
+        mTextAndBoltPaint.setTextAlign(getPaintAlignmentFromGravity(mTextGravity));
+        mTextAndBoltPaint.setXfermode(new PorterDuffXfermode(xferMode));
+
         mWarningTextPaint = new Paint(Paint.ANTI_ALIAS_FLAG);
         font = Typeface.create("sans-serif", Typeface.BOLD);
         mWarningTextPaint.setTypeface(font);
-        mWarningTextPaint.setTextAlign(Paint.Align.CENTER);
+        mWarningTextPaint.setTextAlign(getPaintAlignmentFromGravity(mTextGravity));
         if (mColors.length > 1) {
             mWarningTextPaint.setColor(mColors[1]);
         }
@@ -279,6 +340,12 @@ public class BatteryMeterDrawableBase extends Drawable {
 
     public void setColors(int fillColor, int backgroundColor) {
         mIconTint = fillColor;
+        if (mUseVectorDrawables) {
+            // Make bolt fully opaque for increased visibility
+            mBoltDrawable.setTint(0xff000000 | fillColor);
+            mFrameDrawable.setTint(backgroundColor);
+            updateBoltDrawableLayer(mBatteryDrawable, mBoltDrawable);
+        }
         mFramePaint.setColor(backgroundColor);
         mBoltPaint.setColor(fillColor);
         mPlusPaint.setColor(fillColor);
@@ -292,6 +359,14 @@ public class BatteryMeterDrawableBase extends Drawable {
 
     @Override
     public void draw(Canvas c) {
+        if (!mUseVectorDrawables) {
+            drawBattery(c);
+        } else {
+            drawBatteryWithVectorDrawables(c);
+        }
+    }
+
+    private void drawBattery(Canvas c) {
         final int level = mLevel;
         final Rect bounds = getBounds();
 
@@ -450,6 +525,96 @@ public class BatteryMeterDrawableBase extends Drawable {
         }
     }
 
+    private void drawBatteryWithVectorDrawables(Canvas c) {
+        final int level = mLevel;
+
+        Paint clearPaint = new Paint();
+        clearPaint.setColor(0);
+
+        if (!mInitialized) {
+            // Not much we can do with zero width or height, we'll get another pass later
+            if (mWidth <= 0 || mHeight <= 0) return;
+
+            final float widthDiv2 = mWidth / 2f;
+            // text size is width / 2 - 2dp for wiggle room
+            final float textSize =
+                    widthDiv2 - mContext.getResources().getDisplayMetrics().density * 2;
+            mTextAndBoltPaint.setTextSize(textSize);
+            mWarningTextPaint.setTextSize(textSize);
+
+            Rect iconBounds = new Rect(0, 0, mWidth, mHeight);
+            mBatteryDrawable.setBounds(iconBounds);
+
+            // Calculate text position
+            Rect bounds = new Rect();
+            mTextAndBoltPaint.getTextBounds("99", 0, "99".length(), bounds);
+            final boolean isRtl = getLayoutDirection() == View.LAYOUT_DIRECTION_RTL;
+
+            // Compute mTextX based on text gravity
+            if ((mTextGravity & Gravity.START) == Gravity.START) {
+                mTextX = isRtl ? mWidth : 0;
+            } else if ((mTextGravity & Gravity.END) == Gravity.END) {
+                mTextX = isRtl ? 0 : mWidth;
+            } else if ((mTextGravity & Gravity.LEFT) == Gravity.LEFT) {
+                mTextX = 0;
+            } else if ((mTextGravity & Gravity.RIGHT) == Gravity.RIGHT) {
+                mTextX = mWidth;
+            } else {
+                mTextX = widthDiv2;
+            }
+
+            // Compute mTextY based on text gravity
+            if ((mTextGravity & Gravity.TOP) == Gravity.TOP) {
+                mTextY = bounds.height();
+            } else if ((mTextGravity & Gravity.BOTTOM) == Gravity.BOTTOM) {
+                mTextY = mHeight;
+            } else {
+                mTextY = widthDiv2 + bounds.height() / 2.0f;
+            }
+
+            updateBoltDrawableLayer(mBatteryDrawable, mBoltDrawable);
+
+            mInitialized = true;
+        }
+
+        mTextAndBoltPaint.setColor(getColorForLevel(level));
+
+        // Make sure we don't draw the charge indicator if not plugged in
+        final Drawable d = mBatteryDrawable.findDrawableByLayerId(R.id.battery_charge_indicator);
+        if (d instanceof BitmapDrawable) {
+            // In case we are using a BitmapDrawable, which we should be unless something bad
+            // happened, we need to change the paint rather than the alpha in case the blendMode
+            // has been set to clear. Clear always clears regardless of alpha level ;)
+            final BitmapDrawable bd = (BitmapDrawable) d;
+            bd.getPaint().set(mCharging ? mTextAndBoltPaint : clearPaint);
+        } else {
+            d.setAlpha(mCharging ? 255 : 0);
+        }
+
+        // Now draw the level indicator
+        // Set the level and tint color of the fill drawable
+        mLevelDrawable.setCurrentFraction(level / 100f);
+        mLevelDrawable.setTint(getColorForLevel(level));
+        mBatteryDrawable.draw(c);
+
+        // If chosen by options, draw percentage text in the middle
+        // Always skip percentage when 100, so that the layout doesn't break
+        if (!mCharging) {
+            if ((level > mCriticalLevel || mPowerSaveEnabled)
+                    && mShowPercent && level != 100) {
+                // Draw the percentage text
+                String pctText = String.valueOf(SINGLE_DIGIT_PERCENT ? (level / 10) : level);
+                mTextAndBoltPaint.setColor(getColorForLevel(level));
+                c.drawText(pctText, mTextX, mTextY, mTextAndBoltPaint);
+            } else if (level <= mCriticalLevel) {
+                // Draw the warning text
+                mWarningTextPaint.setColor(mPowerSaveEnabled ?
+                        mColors[mColors.length - 1] : mColors[1]);
+                c.drawText(mWarningString, mTextX, mTextY, mWarningTextPaint);
+            }
+        }
+    }
+
     // Some stuff required by Drawable.
     @Override
     public void setAlpha(int alpha) {
@@ -459,6 +624,7 @@ public class BatteryMeterDrawableBase extends Drawable {
     public void setColorFilter(@Nullable ColorFilter colorFilter) {
         mFramePaint.setColorFilter(colorFilter);
         mBatteryPaint.setColorFilter(colorFilter);
+        mTextAndBoltPaint.setColorFilter(colorFilter);
         mWarningTextPaint.setColorFilter(colorFilter);
         mBoltPaint.setColorFilter(colorFilter);
         mPlusPaint.setColorFilter(colorFilter);
@@ -480,4 +646,97 @@ public class BatteryMeterDrawableBase extends Drawable {
     protected float getRadiusRatio() {
         return RADIUS_RATIO;
     }
+
+    private void loadBatteryDrawables(Resources res, int frameColor, int style) {
+        final int drawableResId = getBatteryDrawableResourceForStyle(style);
+        mBatteryDrawable = (LayerDrawable) mContext.getDrawable(drawableResId);
+        mFrameDrawable = mBatteryDrawable.findDrawableByLayerId(R.id.battery_frame);
+        mFrameDrawable.setTint(frameColor);
+        // Set the animated vector drawable we will be stop-animating
+        final Drawable levelDrawable = mBatteryDrawable.findDrawableByLayerId(R.id.battery_fill);
+        mLevelDrawable = new StopMotionVectorDrawable(levelDrawable);
+        mBoltDrawable = mBatteryDrawable.findDrawableByLayerId(R.id.battery_charge_indicator);
+    }
+
+    private int getBatteryDrawableResourceForStyle(final int style) {
+        switch (style) {
+            case BATTERY_STYLE_CIRCLE:
+                return R.drawable.ic_battery_circle;
+            case BATTERY_STYLE_LANDSCAPE:
+                return R.drawable.ic_battery_landscape;
+            case BATTERY_STYLE_PORTRAIT:
+                return R.drawable.ic_battery_portrait;
+            default:
+                return 0;
+        }
+    }
+
+    private int getBatteryDrawableStyleResourceForStyle(final int style) {
+        switch (style) {
+            case BATTERY_STYLE_CIRCLE:
+                return R.style.BatteryMeterViewDrawable_Circle;
+            case BATTERY_STYLE_LANDSCAPE:
+                return R.style.BatteryMeterViewDrawable_Landscape;
+            case BATTERY_STYLE_PORTRAIT:
+                return R.style.BatteryMeterViewDrawable_Portrait;
+            default:
+                return R.style.BatteryMeterViewDrawable;
+        }
+    }
+
+    // Creates a BitmapDrawable of the bolt so we can make use of
+    // the XOR xfer mode with vector-based drawables
+    private void updateBoltDrawableLayer(LayerDrawable batteryDrawable, Drawable boltDrawable) {
+        BitmapDrawable newBoltDrawable;
+        if (boltDrawable instanceof BitmapDrawable) {
+            newBoltDrawable = (BitmapDrawable) boltDrawable.mutate();
+        } else {
+            Bitmap boltBitmap = createBoltBitmap(boltDrawable);
+            if (boltBitmap == null) {
+                // Not much to do with a null bitmap so keep original bolt for now
+                return;
+            }
+            Rect bounds = boltDrawable.getBounds();
+            newBoltDrawable = new BitmapDrawable(mContext.getResources(), boltBitmap);
+            newBoltDrawable.setBounds(bounds);
+        }
+        newBoltDrawable.getPaint().set(mTextAndBoltPaint);
+        batteryDrawable.setDrawableByLayerId(R.id.battery_charge_indicator, newBoltDrawable);
+    }
+
+    private Bitmap createBoltBitmap(Drawable boltDrawable) {
+        // Not much we can do with zero width or height, we'll get another pass later
+        if (mWidth <= 0 || mHeight <= 0) return null;
+
+        Bitmap bolt;
+        if (!(boltDrawable instanceof BitmapDrawable)) {
+            Rect iconBounds = new Rect(0, 0, mWidth, mHeight);
+            bolt = Bitmap.createBitmap(iconBounds.width(), iconBounds.height(),
+                    Bitmap.Config.ARGB_8888);
+            if (bolt != null) {
+                Canvas c = new Canvas(bolt);
+                c.drawColor(-1, PorterDuff.Mode.CLEAR);
+                boltDrawable.draw(c);
+            }
+        } else {
+            bolt = ((BitmapDrawable) boltDrawable).getBitmap();
+        }
+
+        return bolt;
+    }
+
+    private Paint.Align getPaintAlignmentFromGravity(int gravity) {
+        final boolean isRtl = getLayoutDirection() == View.LAYOUT_DIRECTION_RTL;
+        if ((gravity & Gravity.START) == Gravity.START) {
+            return isRtl ? Paint.Align.RIGHT : Paint.Align.LEFT;
+        } else if ((gravity & Gravity.END) == Gravity.END) {
+            return isRtl ? Paint.Align.LEFT : Paint.Align.RIGHT;
+        } else if ((gravity & Gravity.LEFT) == Gravity.LEFT) {
+            return Paint.Align.LEFT;
+        } else if ((gravity & Gravity.RIGHT) == Gravity.RIGHT) {
+            return Paint.Align.RIGHT;
+        } else {
+            return Paint.Align.CENTER;
+        }
+    }
 }
diff --git a/packages/SystemUI/res/values/cm_strings.xml b/packages/SystemUI/res/values/cm_strings.xml
index c84e725086d..ac463ebaebb 100644
--- a/packages/SystemUI/res/values/cm_strings.xml
+++ b/packages/SystemUI/res/values/cm_strings.xml
@@ -69,6 +69,9 @@
     <!-- Screen pinning dialog description (for devices without navbar) -->
     <string name="screen_pinning_description_no_navbar">This keeps it in view until you unpin. Touch &amp; hold Back to unpin.</string>
 
+    <!-- Name of the battery status bar icon. -->
+    <string name="status_bar_battery">Battery</string>
+
     <!-- Name of the clock status bar icon -->
     <string name="status_bar_clock">Clock</string>
 
diff --git a/packages/SystemUI/res/values/dimens.xml b/packages/SystemUI/res/values/dimens.xml
index 9901f6ff8fd..e17dc3dbcd4 100644
--- a/packages/SystemUI/res/values/dimens.xml
+++ b/packages/SystemUI/res/values/dimens.xml
@@ -34,16 +34,16 @@
     <dimen name="status_bar_icon_size">@*android:dimen/status_bar_icon_size</dimen>
 
     <!-- Height of the battery icon in the status bar. -->
-    <dimen name="status_bar_battery_icon_height">14.5dp</dimen>
+    <dimen name="status_bar_battery_icon_height">18dp</dimen>
 
     <!-- Width of the battery icon in the status bar. -->
-    <dimen name="status_bar_battery_icon_width">9.5dp</dimen>
+    <dimen name="status_bar_battery_icon_width">18dp</dimen>
 
     <!-- The font size for the clock in the status bar. -->
     <dimen name="status_bar_clock_size">14sp</dimen>
 
     <!-- The starting padding for the clock in the status bar. -->
-    <dimen name="status_bar_clock_starting_padding">7dp</dimen>
+    <dimen name="status_bar_clock_starting_padding">3dp</dimen>
 
     <!-- The end padding for the clock in the status bar. -->
     <dimen name="status_bar_clock_end_padding">0dp</dimen>
@@ -294,7 +294,7 @@
     <dimen name="qs_detail_header_text_padding">16dp</dimen>
     <dimen name="qs_data_usage_text_size">14sp</dimen>
     <dimen name="qs_data_usage_usage_text_size">36sp</dimen>
-    <dimen name="qs_battery_padding">2dp</dimen>
+    <dimen name="qs_battery_padding">0dp</dimen>
     <dimen name="qs_detail_padding_start">16dp</dimen>
     <dimen name="qs_detail_items_padding_top">4dp</dimen>
     <dimen name="qs_detail_item_icon_size">24dp</dimen>
@@ -518,10 +518,10 @@
     <dimen name="keyguard_carrier_text_margin">16dp</dimen>
 
     <!-- Margin on the left side of the battery % in the header. -->
-    <dimen name="header_battery_margin_expanded">6dp</dimen>
+    <dimen name="header_battery_margin_expanded">4dp</dimen>
 
     <!-- Margin on the left side of the battery % when on Keyguard. -->
-    <dimen name="header_battery_margin_keyguard">6dp</dimen>
+    <dimen name="header_battery_margin_keyguard">4dp</dimen>
 
     <!-- Margin on the right side of the system icon group on Keyguard. -->
     <dimen name="system_icons_keyguard_padding_end">4dp</dimen>
diff --git a/packages/SystemUI/res/xml/status_bar_prefs.xml b/packages/SystemUI/res/xml/status_bar_prefs.xml
index 754eb4cb1b0..e7b5eff9862 100644
--- a/packages/SystemUI/res/xml/status_bar_prefs.xml
+++ b/packages/SystemUI/res/xml/status_bar_prefs.xml
@@ -78,10 +78,9 @@
 
     <!-- other weird signal stuff -->
 
-    <com.android.systemui.tuner.BatteryPreference
-        android:title="@string/battery"
-        android:summary="%s"
-        android:entries="@array/battery_options" />
+    <com.android.systemui.tuner.StatusBarSwitch
+        android:key="battery"
+        android:title="@string/status_bar_battery" />
 
     <com.android.systemui.tuner.StatusBarSwitch
         android:key="alarm_clock"
diff --git a/packages/SystemUI/src/com/android/systemui/BatteryMeterView.java b/packages/SystemUI/src/com/android/systemui/BatteryMeterView.java
index 1327f4615eb..b8032e6c90e 100644
--- a/packages/SystemUI/src/com/android/systemui/BatteryMeterView.java
+++ b/packages/SystemUI/src/com/android/systemui/BatteryMeterView.java
@@ -15,8 +15,6 @@
  */
 package com.android.systemui;
 
-import static android.provider.Settings.System.SHOW_BATTERY_PERCENT;
-
 import android.animation.ArgbEvaluator;
 import android.app.ActivityManager;
 import android.content.Context;
@@ -53,17 +51,28 @@ import com.android.systemui.statusbar.policy.IconLogger;
 import com.android.systemui.tuner.TunerService;
 import com.android.systemui.tuner.TunerService.Tunable;
 
+import static lineageos.providers.LineageSettings.System.STATUS_BAR_SHOW_BATTERY_PERCENT;
+
+import lineageos.providers.LineageSettings;
+
 import java.text.NumberFormat;
 
 public class BatteryMeterView extends LinearLayout implements
         BatteryStateChangeCallback, Tunable, DarkReceiver, ConfigurationListener {
 
-    private final BatteryMeterDrawableBase mDrawable;
+    private static final String STATUS_BAR_BATTERY_STYLE =
+            "lineagesystem:" + LineageSettings.System.STATUS_BAR_BATTERY_STYLE;
+
+    private BatteryMeterDrawableBase mDrawable;
+    private final int mFrameColor;
     private final String mSlotBattery;
     private final ImageView mBatteryIconView;
     private final CurrentUserTracker mUserTracker;
     private TextView mBatteryPercentView;
 
+    private boolean mIsBlacklisted = false;
+    private int mBatteryStyle = BatteryMeterDrawableBase.BATTERY_STYLE_PORTRAIT;
+
     private BatteryController mBatteryController;
     private SettingObserver mSettingObserver;
     private int mTextColor;
@@ -123,6 +132,12 @@ public class BatteryMeterView extends LinearLayout implements
         mLightModeBackgroundColor = Utils.getColorAttr(dualToneLightTheme, R.attr.backgroundColor);
         mLightModeFillColor = Utils.getColorAttr(dualToneLightTheme, R.attr.fillColor);
 
+        // BatteryMeterDrawableBase wants to use the clear xfermode,
+        // so use a separate layer to not make it clear the background with it.
+        setLayerType(View.LAYER_TYPE_HARDWARE, null);
+
+        mFrameColor = frameColor;
+
         // Init to not dark at all.
         onDarkChanged(new Rect(), 0, DarkIconDispatcher.DEFAULT_ICON_TINT);
         mUserTracker = new CurrentUserTracker(mContext) {
@@ -131,8 +146,8 @@ public class BatteryMeterView extends LinearLayout implements
                 mUser = newUserId;
                 getContext().getContentResolver().unregisterContentObserver(mSettingObserver);
                 getContext().getContentResolver().registerContentObserver(
-                        Settings.System.getUriFor(SHOW_BATTERY_PERCENT), false, mSettingObserver,
-                        newUserId);
+                        LineageSettings.System.getUriFor(STATUS_BAR_SHOW_BATTERY_PERCENT),
+                        false, mSettingObserver, newUserId);
             }
         };
     }
@@ -151,10 +166,14 @@ public class BatteryMeterView extends LinearLayout implements
     public void onTuningChanged(String key, String newValue) {
         if (StatusBarIconController.ICON_BLACKLIST.equals(key)) {
             ArraySet<String> icons = StatusBarIconController.getIconBlacklist(newValue);
-            boolean hidden = icons.contains(mSlotBattery);
-            Dependency.get(IconLogger.class).onIconVisibility(mSlotBattery, !hidden);
-            setVisibility(hidden ? View.GONE : View.VISIBLE);
+            mIsBlacklisted = icons.contains(mSlotBattery);
+            Dependency.get(IconLogger.class).onIconVisibility(mSlotBattery, !mIsBlacklisted);
+        } else if (STATUS_BAR_BATTERY_STYLE.equals(key) && newValue != null) {
+            mBatteryStyle = Integer.parseInt(newValue);
         }
+
+        updateBatteryStyle();
+        updateShowPercent();
     }
 
     @Override
@@ -164,9 +183,11 @@ public class BatteryMeterView extends LinearLayout implements
         mBatteryController.addCallback(this);
         mUser = ActivityManager.getCurrentUser();
         getContext().getContentResolver().registerContentObserver(
-                Settings.System.getUriFor(SHOW_BATTERY_PERCENT), false, mSettingObserver, mUser);
+                LineageSettings.System.getUriFor(STATUS_BAR_SHOW_BATTERY_PERCENT),
+                false, mSettingObserver, mUser);
         updateShowPercent();
-        Dependency.get(TunerService.class).addTunable(this, StatusBarIconController.ICON_BLACKLIST);
+        Dependency.get(TunerService.class).addTunable(this,
+                StatusBarIconController.ICON_BLACKLIST, STATUS_BAR_BATTERY_STYLE);
         Dependency.get(ConfigurationController.class).addCallback(this);
         mUserTracker.startTracking();
     }
@@ -197,6 +218,27 @@ public class BatteryMeterView extends LinearLayout implements
         mDrawable.setPowerSave(isPowerSave);
     }
 
+    private void updateBatteryStyle() {
+        if (mIsBlacklisted) {
+            setVisibility(View.GONE);
+            mBatteryIconView.setImageDrawable(null);
+        } else if (mBatteryStyle == BatteryMeterDrawableBase.BATTERY_STYLE_TEXT) {
+            setForceShowPercent(true);
+            mBatteryIconView.setVisibility(View.GONE);
+            mBatteryIconView.setImageDrawable(null);
+        } else {
+            setForceShowPercent(false);
+            int batteryLevel = mDrawable.getBatteryLevel();
+            boolean charging = mDrawable.getCharging();
+            mDrawable = new BatteryMeterDrawableBase(getContext(), mFrameColor, mBatteryStyle);
+            mDrawable.setBatteryLevel(batteryLevel);
+            mDrawable.setCharging(charging);
+            mBatteryIconView.setVisibility(View.VISIBLE);
+            mBatteryIconView.setImageDrawable(mDrawable);
+            setVisibility(View.VISIBLE);
+        }
+    }
+
     private TextView loadPercentView() {
         return (TextView) LayoutInflater.from(getContext())
                 .inflate(R.layout.battery_percentage_view, null);
@@ -211,8 +253,9 @@ public class BatteryMeterView extends LinearLayout implements
 
     private void updateShowPercent() {
         final boolean showing = mBatteryPercentView != null;
-        if (0 != Settings.System.getIntForUser(getContext().getContentResolver(),
-                SHOW_BATTERY_PERCENT, 0, mUser) || mForceShowPercent) {
+        if (LineageSettings.System.getIntForUser(getContext().getContentResolver(),
+                STATUS_BAR_SHOW_BATTERY_PERCENT, 0, mUser) == 2 || mForceShowPercent) {
+            mDrawable.setShowPercent(false);
             if (!showing) {
                 mBatteryPercentView = loadPercentView();
                 if (mTextColor != 0) mBatteryPercentView.setTextColor(mTextColor);
@@ -224,6 +267,10 @@ public class BatteryMeterView extends LinearLayout implements
                                 LayoutParams.MATCH_PARENT));
             }
         } else {
+            final boolean drawPercent =
+                    LineageSettings.System.getIntForUser(getContext().getContentResolver(),
+                            STATUS_BAR_SHOW_BATTERY_PERCENT, 0, mUser) == 1;
+            mDrawable.setShowPercent(drawPercent);
             if (showing) {
                 removeView(mBatteryPercentView);
                 mBatteryPercentView = null;
-- 
2.17.1

