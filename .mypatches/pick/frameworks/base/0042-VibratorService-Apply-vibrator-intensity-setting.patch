From a4ce920c05512caca8505d36550972b050fd47c5 Mon Sep 17 00:00:00 2001
From: Danny Baumann <dannybaumann@web.de>
Date: Wed, 15 Aug 2018 11:58:40 +0200
Subject: [PATCH 42/42] VibratorService: Apply vibrator intensity setting.

Change-Id: I5329b802b9a45c0fb47251a333339d0791564b32
---
 .../com/android/server/VibratorService.java    | 18 +++++++++++++++++-
 1 file changed, 17 insertions(+), 1 deletion(-)

diff --git a/services/core/java/com/android/server/VibratorService.java b/services/core/java/com/android/server/VibratorService.java
index 8b79b9ddfef..227d6c2b8f6 100644
--- a/services/core/java/com/android/server/VibratorService.java
+++ b/services/core/java/com/android/server/VibratorService.java
@@ -57,6 +57,7 @@ import com.android.internal.app.IAppOpsService;
 import com.android.internal.app.IBatteryStats;
 import com.android.internal.util.DumpUtils;
 import com.android.server.power.BatterySaverPolicy.ServiceType;
+import lineageos.providers.LineageSettings;
 
 import java.io.FileDescriptor;
 import java.io.PrintWriter;
@@ -74,6 +75,7 @@ public class VibratorService extends IVibratorService.Stub
     private final boolean mAllowPriorityVibrationsInLowPowerMode;
     private final boolean mSupportsAmplitudeControl;
     private final int mDefaultVibrationAmplitude;
+    private float mVibrationIntensity;
     private final VibrationEffect[] mFallbackEffects;
     private final WorkSource mTmpWorkSource = new WorkSource();
     private final Handler mH = new Handler();
@@ -264,6 +266,9 @@ public class VibratorService extends IVibratorService.Stub
         mContext.getContentResolver().registerContentObserver(
                 Settings.System.getUriFor(Settings.System.VIBRATE_INPUT_DEVICES),
                 true, mSettingObserver, UserHandle.USER_ALL);
+        mContext.getContentResolver().registerContentObserver(
+                LineageSettings.Secure.getUriFor(LineageSettings.Secure.VIBRATOR_INTENSITY),
+                true, mSettingObserver, UserHandle.USER_ALL);
 
         mContext.registerReceiver(new BroadcastReceiver() {
             @Override
@@ -604,6 +609,11 @@ public class VibratorService extends IVibratorService.Stub
             boolean devicesUpdated = updateInputDeviceVibratorsLocked();
             boolean lowPowerModeUpdated = updateLowPowerModeLocked();
 
+            mVibrationIntensity = LineageSettings.Secure.getFloatForUser(
+                    mContext.getContentResolver(),
+                    LineageSettings.Secure.VIBRATOR_INTENSITY, 255.0f,
+                    UserHandle.USER_CURRENT) / 255.0f;
+
             if (devicesUpdated || lowPowerModeUpdated) {
                 // If the state changes out from under us then just reset.
                 doCancelVibrateLocked();
@@ -717,7 +727,12 @@ public class VibratorService extends IVibratorService.Stub
 
     private void doVibratorSetAmplitude(int amplitude) {
         if (mSupportsAmplitudeControl) {
-            vibratorSetAmplitude(amplitude);
+            int finalAmplitude = (int) ((float) amplitude * mVibrationIntensity);
+            if (DEBUG) {
+                Slog.d(TAG, "Set vibrator intensity: amplitude " + amplitude +
+                        ", after applying intensity " + finalAmplitude);
+            }
+            vibratorSetAmplitude(finalAmplitude);
         }
     }
 
@@ -746,6 +761,7 @@ public class VibratorService extends IVibratorService.Stub
             if (vibratorCount == 0) {
                 long timeout = vibratorPerformEffect(prebaked.getId(), EffectStrength.MEDIUM);
                 if (timeout > 0) {
+                    // XXX: apply amplitude for effect?
                     noteVibratorOnLocked(vib.mUid, timeout);
                     return timeout;
                 }
-- 
2.17.1

