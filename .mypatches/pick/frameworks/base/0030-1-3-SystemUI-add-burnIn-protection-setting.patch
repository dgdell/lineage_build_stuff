From 0bae62bf2f40eb8b17b2e4906e57936f62db36fe Mon Sep 17 00:00:00 2001
From: Park Ju Hyung <qkrwngud825@gmail.com>
Date: Sun, 15 Jan 2017 03:33:04 +0900
Subject: [PATCH 30/41] [1/3] SystemUI: add burnIn protection setting

Devices with OLED display suffer from
status-bar's notification items and nagivation bar's software keys
causing permanent burn-ins when used long-term.

Moving all items in the area
both horizontally and vertically workarounds this problem.

jrizzoli: integrate with runtime cmsdk preference

Change-Id: I35b04d1edff86a556adb3ad349569e5d82653f16
Signed-off-by: Park Ju Hyung <qkrwngud825@gmail.com>
Signed-off-by: Alex Naidis <alex.naidis@linux.com>
Signed-off-by: Thecrazyskull <anaskarbila@gmail.com>
Signed-off-by: Joey Rizzoli <joey@lineageos.org>
---
 packages/SystemUI/res/values/cm_dimens.xml    |  20 ++++
 .../statusbar/phone/NavigationBarView.java    |  26 +++++
 .../statusbar/phone/PhoneStatusBarView.java   |  28 +++++
 .../systemui/statusbar/phone/StatusBar.java   |  34 +++++-
 .../policy/BurnInProtectionController.java    | 104 ++++++++++++++++++
 5 files changed, 211 insertions(+), 1 deletion(-)
 create mode 100644 packages/SystemUI/res/values/cm_dimens.xml
 create mode 100644 packages/SystemUI/src/com/android/systemui/statusbar/policy/BurnInProtectionController.java

diff --git a/packages/SystemUI/res/values/cm_dimens.xml b/packages/SystemUI/res/values/cm_dimens.xml
new file mode 100644
index 00000000000..9a1e7cb8875
--- /dev/null
+++ b/packages/SystemUI/res/values/cm_dimens.xml
@@ -0,0 +1,20 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!--
+     Copyright (C) 2014 The CyanogenMod Project
+
+     Licensed under the Apache License, Version 2.0 (the "License");
+     you may not use this file except in compliance with the License.
+     You may obtain a copy of the License at
+
+          http://www.apache.org/licenses/LICENSE-2.0
+
+     Unless required by applicable law or agreed to in writing, software
+     distributed under the License is distributed on an "AS IS" BASIS,
+     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+     See the License for the specific language governing permissions and
+     limitations under the License.
+-->
+<resources>
+    <dimen name="burnin_protection_horizontal_shift">3dp</dimen>
+    <dimen name="burnin_protection_vertical_shift">1dp</dimen>
+</resources>
diff --git a/packages/SystemUI/src/com/android/systemui/statusbar/phone/NavigationBarView.java b/packages/SystemUI/src/com/android/systemui/statusbar/phone/NavigationBarView.java
index fd3407efd26..60f45cabcff 100644
--- a/packages/SystemUI/src/com/android/systemui/statusbar/phone/NavigationBarView.java
+++ b/packages/SystemUI/src/com/android/systemui/statusbar/phone/NavigationBarView.java
@@ -124,6 +124,13 @@ public class NavigationBarView extends FrameLayout implements PluginListener<Nav
 
     private boolean mShowDpadArrowKeys;
 
+    private int mBasePaddingBottom;
+    private int mBasePaddingLeft;
+    private int mBasePaddingRight;
+    private int mBasePaddingTop;
+
+    private ViewGroup mNavigationBarContents;
+
     private class NavTransitionListener implements TransitionListener {
         private boolean mBackTransitioning;
         private boolean mHomeAppearing;
@@ -568,6 +575,18 @@ public class NavigationBarView extends FrameLayout implements PluginListener<Nav
         getAccessibilityButton().setLongClickable(longClickable);
     }
 
+    public void shiftNavigationBarItems(int horizontalShift, int verticalShift) {
+        if (mNavigationBarContents == null) {
+            return;
+        }
+
+        mNavigationBarContents.setPaddingRelative(mBasePaddingLeft + horizontalShift,
+                mBasePaddingTop + verticalShift,
+                mBasePaddingRight + horizontalShift,
+                mBasePaddingBottom - verticalShift);
+        invalidate();
+    }
+
     @Override
     public void onFinishInflate() {
         mNavigationInflaterView = (NavigationBarInflaterView) findViewById(
@@ -576,6 +595,13 @@ public class NavigationBarView extends FrameLayout implements PluginListener<Nav
 
         getImeSwitchButton().setOnClickListener(mImeSwitcherClickListener);
 
+        mNavigationBarContents = (ViewGroup) getCurrentView().findViewById(R.id.nav_buttons);
+
+        mBasePaddingLeft = mNavigationBarContents.getPaddingStart();
+        mBasePaddingTop = mNavigationBarContents.getPaddingTop();
+        mBasePaddingRight = mNavigationBarContents.getPaddingEnd();
+        mBasePaddingBottom = mNavigationBarContents.getPaddingBottom();
+
         DockedStackExistsListener.register(mDockedListener);
         updateRotatedViews();
     }
diff --git a/packages/SystemUI/src/com/android/systemui/statusbar/phone/PhoneStatusBarView.java b/packages/SystemUI/src/com/android/systemui/statusbar/phone/PhoneStatusBarView.java
index 106ea2d8bd1..1731f21cff9 100644
--- a/packages/SystemUI/src/com/android/systemui/statusbar/phone/PhoneStatusBarView.java
+++ b/packages/SystemUI/src/com/android/systemui/statusbar/phone/PhoneStatusBarView.java
@@ -17,6 +17,7 @@
 package com.android.systemui.statusbar.phone;
 
 import android.content.Context;
+import android.content.res.Resources;
 import android.util.AttributeSet;
 import android.util.EventLog;
 import android.view.MotionEvent;
@@ -39,6 +40,13 @@ public class PhoneStatusBarView extends PanelBar {
 
     StatusBar mBar;
 
+    private int mBasePaddingBottom;
+    private int mBasePaddingLeft;
+    private int mBasePaddingRight;
+    private int mBasePaddingTop;
+
+    private ViewGroup mStatusBarContents;
+
     boolean mIsFullyOpenedPanel = false;
     private final PhoneStatusBarTransitions mBarTransitions;
     private ScrimController mScrimController;
@@ -72,9 +80,29 @@ public class PhoneStatusBarView extends PanelBar {
         mScrimController = scrimController;
     }
 
+    public void shiftStatusBarItems(int horizontalShift, int verticalShift) {
+        if (mStatusBarContents == null) {
+            return;
+        }
+
+        mStatusBarContents.setPaddingRelative(mBasePaddingLeft + horizontalShift,
+                mBasePaddingTop + verticalShift,
+                mBasePaddingRight + horizontalShift,
+                mBasePaddingBottom - verticalShift);
+        invalidate();
+    }
+
     @Override
     public void onFinishInflate() {
         mBarTransitions.init();
+
+        mStatusBarContents = (ViewGroup) findViewById(R.id.status_bar_contents);
+
+        mBasePaddingLeft = mStatusBarContents.getPaddingStart();
+        mBasePaddingTop = mStatusBarContents.getPaddingTop();
+        mBasePaddingRight = mStatusBarContents.getPaddingEnd();
+        mBasePaddingBottom = mStatusBarContents.getPaddingBottom();
+
         mBattery = findViewById(R.id.battery);
     }
 
diff --git a/packages/SystemUI/src/com/android/systemui/statusbar/phone/StatusBar.java b/packages/SystemUI/src/com/android/systemui/statusbar/phone/StatusBar.java
index 5c022f2b113..641a47ede2f 100644
--- a/packages/SystemUI/src/com/android/systemui/statusbar/phone/StatusBar.java
+++ b/packages/SystemUI/src/com/android/systemui/statusbar/phone/StatusBar.java
@@ -231,6 +231,7 @@ import com.android.systemui.statusbar.phone.UnlockMethodCache.OnUnlockMethodChan
 import com.android.systemui.statusbar.policy.BatteryController;
 import com.android.systemui.statusbar.policy.BatteryController.BatteryStateChangeCallback;
 import com.android.systemui.statusbar.policy.BrightnessMirrorController;
+import com.android.systemui.statusbar.policy.BurnInProtectionController;
 import com.android.systemui.statusbar.policy.ConfigurationController;
 import com.android.systemui.statusbar.policy.ConfigurationController.ConfigurationListener;
 import com.android.systemui.statusbar.policy.DarkIconDispatcher;
@@ -407,6 +408,8 @@ public class StatusBar extends SystemUI implements DemoMode,
             "lineagesystem:" + LineageSettings.System.STATUS_BAR_BRIGHTNESS_CONTROL;
     private static final String LOCKSCREEN_MEDIA_METADATA =
             "lineagesecure:" + LineageSettings.Secure.LOCKSCREEN_MEDIA_METADATA;
+    private static final String SYSTEMUI_BURNIN_PROTECTION =
+            "lineagesystem:" + LineageSettings.System.SYSTEMUI_BURNIN_PROTECTION;
 
     static {
         boolean onlyCoreApps;
@@ -440,6 +443,7 @@ public class StatusBar extends SystemUI implements DemoMode,
     protected FingerprintUnlockController mFingerprintUnlockController;
     LightBarController mLightBarController;
     protected LockscreenWallpaper mLockscreenWallpaper;
+    private BurnInProtectionController mBurnInProtectionController;
 
     int mNaturalBarHeight = -1;
 
@@ -589,6 +593,10 @@ public class StatusBar extends SystemUI implements DemoMode,
                 mWindowManager.removeViewImmediate(mNavigationBarView);
                 mNavigationBarView = null;
             }
+            if (mBurnInProtectionController != null) {
+                mBurnInProtectionController.setNavigationBarView(
+                        visible ? (NavigationBarView) mNavigationBarView : null);
+            }
         }
     }
 
@@ -670,6 +678,7 @@ public class StatusBar extends SystemUI implements DemoMode,
     private boolean mScreenOn;
     private boolean mKeyguardShowingMedia;
     private boolean mShowMediaMetadata;
+    private boolean mBurnInProtectionEnabled;
 
     private MediaSessionManager mMediaSessionManager;
     private MediaController mMediaController;
@@ -1076,7 +1085,8 @@ public class StatusBar extends SystemUI implements DemoMode,
         Dependency.get(TunerService.class).addTunable(this,
                 SCREEN_BRIGHTNESS_MODE,
                 STATUS_BAR_BRIGHTNESS_CONTROL,
-                LOCKSCREEN_MEDIA_METADATA);
+                LOCKSCREEN_MEDIA_METADATA,
+                SYSTEMUI_BURNIN_PROTECTION);
 
         // Lastly, call to the icon policy to install/update all the icons.
         mIconPolicy = new PhoneStatusBarPolicy(mContext, mIconController);
@@ -1185,6 +1195,11 @@ public class StatusBar extends SystemUI implements DemoMode,
             mNotificationPanelDebugText.setVisibility(View.VISIBLE);
         }
 
+        if (mContext.getResources().getBoolean(
+                org.lineageos.platform.internal.R.bool.config_enableBurnInProtection)) {
+            mBurnInProtectionController = new BurnInProtectionController(mContext, mStatusBarView);
+        }
+
         try {
             boolean showNav = mWindowManagerService.hasNavigationBar();
             if (DEBUG) Log.v(TAG, "hasNavigationBar=" + showNav);
@@ -5559,6 +5574,9 @@ public class StatusBar extends SystemUI implements DemoMode,
             mStackScroller.setAnimationsEnabled(false);
             mVisualStabilityManager.setScreenOn(false);
             updateVisibleToUser();
+            if (mBurnInProtectionController != null) {
+                mBurnInProtectionController.stopShiftTimer(mBurnInProtectionEnabled);
+            }
 
             // We need to disable touch events because these might
             // collapse the panel after we expanded it, and thus we would end up with a blank
@@ -5597,6 +5615,9 @@ public class StatusBar extends SystemUI implements DemoMode,
 
             mDozeServiceHost.stopDozing();
             updateVisibleToUser();
+            if (mBurnInProtectionController != null) {
+                mBurnInProtectionController.startShiftTimer(mBurnInProtectionEnabled);
+            }
             updateIsKeyguard();
         }
     };
@@ -7912,6 +7933,17 @@ public class StatusBar extends SystemUI implements DemoMode,
             case LOCKSCREEN_MEDIA_METADATA:
                 mShowMediaMetadata = newValue == null || Integer.parseInt(newValue) == 1;
                 break;
+            case SYSTEMUI_BURNIN_PROTECTION:
+                mBurnInProtectionEnabled = newValue != null && Integer.parseInt(newValue) == 1;
+                if (mBurnInProtectionController != null) {
+                    if (mBurnInProtectionEnabled) {
+                        mBurnInProtectionController.startShiftTimer(true);
+                    } else {
+                        // Forcefully disable it
+                        mBurnInProtectionController.stopShiftTimer(true);
+                    }
+                }
+                break;
             default:
                 break;
         }
diff --git a/packages/SystemUI/src/com/android/systemui/statusbar/policy/BurnInProtectionController.java b/packages/SystemUI/src/com/android/systemui/statusbar/policy/BurnInProtectionController.java
new file mode 100644
index 00000000000..30e49c02123
--- /dev/null
+++ b/packages/SystemUI/src/com/android/systemui/statusbar/policy/BurnInProtectionController.java
@@ -0,0 +1,104 @@
+/*
+ * Copyright 2017 Paranoid Android
+ * Copyright 2017 The LineageOS Project
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.android.systemui.statusbar.policy;
+
+import android.content.Context;
+import android.content.res.Resources;
+import android.os.Handler;
+import android.os.Looper;
+import android.util.Log;
+
+import com.android.systemui.R;
+import com.android.systemui.statusbar.phone.NavigationBarView;
+import com.android.systemui.statusbar.phone.PhoneStatusBarView;
+
+public class BurnInProtectionController {
+    private static final String TAG = "BurnInProtectionController";
+    private static final boolean DEBUG = false;
+    private static final long INTERVAL = 60000; // Milliseconds
+
+    private int mHorizontalShift = 0;
+    private int mVerticalShift = 0;
+    private int mHorizontalDirection = 1;
+    private int mVerticalDirection = 1;
+    private int mNavigationBarHorizontalMaxShift;
+    private int mNavigationBarVerticalMaxShift;
+    private int mHorizontalMaxShift;
+    private int mVerticalMaxShift;
+    private long mShiftInterval;
+
+    private final Handler mHandler = new Handler();
+    private final Runnable mRunnable = () -> {
+            shiftItems();
+            mHandler.postDelayed(this.mRunnable, INTERVAL);
+    };
+
+    private NavigationBarView mNavigationBarView;
+    private PhoneStatusBarView mPhoneStatusBarView;
+
+    private Context mContext;
+
+    public BurnInProtectionController(Context context, PhoneStatusBarView phoneStatusBarView) {
+        mContext = context;
+
+        mPhoneStatusBarView = phoneStatusBarView;
+
+        mHorizontalMaxShift = mContext.getResources()
+                .getDimensionPixelSize(R.dimen.burnin_protection_horizontal_shift);
+        // total of ((vertical_max_shift - 1) * 2) pixels can be moved
+        mVerticalMaxShift = mContext.getResources()
+                .getDimensionPixelSize(R.dimen.burnin_protection_vertical_shift) - 1;
+    }
+
+    public void setNavigationBarView(NavigationBarView navigationBarView) {
+        mNavigationBarView = navigationBarView;
+    }
+
+    public void startShiftTimer(boolean enabled) {
+        if (!enabled) return;
+        mHandler.removeCallbacks(mRunnable);
+        mHandler.postDelayed(mRunnable, INTERVAL);
+        if (DEBUG) Log.d(TAG, "Started shift timer");
+    }
+
+    public void stopShiftTimer(boolean enabled) {
+        if (!enabled) return;
+        mHandler.removeCallbacks(mRunnable);
+        if (DEBUG) Log.d(TAG, "Canceled shift timer");
+    }
+
+    private void shiftItems() {
+        mHorizontalShift += mHorizontalDirection;
+        if ((mHorizontalShift >=  mHorizontalMaxShift) ||
+                (mHorizontalShift <= -mHorizontalMaxShift)) {
+            mHorizontalDirection *= -1;
+        }
+
+        mVerticalShift += mVerticalDirection;
+        if ((mVerticalShift >=  mVerticalMaxShift) ||
+                (mVerticalShift <= -mVerticalMaxShift)) {
+            mVerticalDirection *= -1;
+        }
+
+        mPhoneStatusBarView.shiftStatusBarItems(mHorizontalShift, mVerticalShift);
+        if (mNavigationBarView != null) {
+            mNavigationBarView.shiftNavigationBarItems(mHorizontalShift, mVerticalShift);
+        }
+        if (DEBUG) Log.d(TAG, "Shifting items\u2026");
+    }
+}
-- 
2.17.1

