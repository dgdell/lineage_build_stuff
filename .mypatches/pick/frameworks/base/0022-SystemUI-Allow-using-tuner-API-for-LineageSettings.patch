From c4e32f7e4915d34ce1cc8dcb100b5e5ba3249c18 Mon Sep 17 00:00:00 2001
From: Rashed Abdel-Tawab <rashed@linux.com>
Date: Tue, 3 Oct 2017 21:47:41 -0400
Subject: [PATCH 22/81] SystemUI: Allow using tuner API for LineageSettings

Rebrand to Lineage and add support for custom string settings.
Based on a squash of the following changes:

Author: Steve Kondik <steve@cyngn.com>
Date:   Tue Sep 13 23:46:34 2016 -0700

    systemui: Allow using tuner API for CMSettings

     * Use the prefix "cm:" on the key supplied and it will redirect
       to CMSettings.

    Change-Id: Id4266a568deb8fb32857136990711b5d9d487721

Author: Zhao Wei Liew <zhaoweiliew@gmail.com>
Date:   Thu Oct 13 19:19:03 2016 +0800

    SystemUI: tuner: Allow Tuner API for System settings

    We'd like to modify some AOSP System settings as well.

    Change-Id: I4e2e7bf680f20bce9619ff2adf243d0f8f4a9906

Change-Id: Ide9622ea4c7be371b83ff7ae9a73ce5565423af1
---
 .../systemui/tuner/TunerServiceImpl.java      | 103 ++++++++++++++++--
 1 file changed, 92 insertions(+), 11 deletions(-)

diff --git a/packages/SystemUI/src/com/android/systemui/tuner/TunerServiceImpl.java b/packages/SystemUI/src/com/android/systemui/tuner/TunerServiceImpl.java
index 1bdb7ad3c3f..eeac39a1724 100644
--- a/packages/SystemUI/src/com/android/systemui/tuner/TunerServiceImpl.java
+++ b/packages/SystemUI/src/com/android/systemui/tuner/TunerServiceImpl.java
@@ -39,6 +39,8 @@ import com.android.systemui.settings.CurrentUserTracker;
 import com.android.systemui.statusbar.phone.StatusBarIconController;
 import com.android.systemui.util.leak.LeakDetector;
 
+import lineageos.providers.LineageSettings;
+
 import java.util.HashMap;
 import java.util.HashSet;
 import java.util.Set;
@@ -124,31 +126,102 @@ public class TunerServiceImpl extends TunerService {
         setValue(TUNER_VERSION, newVersion);
     }
 
+    private boolean isLineageSystem(String key) {
+        return key.startsWith("lineagesystem:");
+    }
+
+    private boolean isLineageSecure(String key) {
+        return key.startsWith("lineagesecure:");
+    }
+
+    private boolean isSystem(String key) {
+        return key.startsWith("system:");
+    }
+
+    private String chomp(String key) {
+        return key.replaceFirst("^(lineagesecure|lineagesystem|system):", "");
+    }
+
     @Override
     public String getValue(String setting) {
-        return Settings.Secure.getStringForUser(mContentResolver, setting, mCurrentUser);
+        if (isLineageSecure(setting)) {
+            return LineageSettings.Secure.getStringForUser(
+                    mContentResolver, chomp(setting), mCurrentUser);
+        } else if (isLineageSystem(setting)) {
+            return LineageSettings.System.getStringForUser(
+                    mContentResolver, chomp(setting), mCurrentUser);
+        } else if (isSystem(setting)) {
+            return Settings.System.getStringForUser(
+                    mContentResolver, chomp(setting), mCurrentUser);
+        } else {
+            return Settings.Secure.getStringForUser(mContentResolver, setting, mCurrentUser);
+        }
     }
 
     @Override
     public void setValue(String setting, String value) {
-         Settings.Secure.putStringForUser(mContentResolver, setting, value, mCurrentUser);
+        if (isLineageSecure(setting)) {
+            LineageSettings.Secure.putStringForUser(
+                    mContentResolver, chomp(setting), value, mCurrentUser);
+        } else if (isLineageSystem(setting)) {
+            LineageSettings.System.putStringForUser(
+                    mContentResolver, chomp(setting), value, mCurrentUser);
+        } else if (isSystem(setting)) {
+            Settings.System.putStringForUser(
+                    mContentResolver, chomp(setting), value, mCurrentUser);
+        } else {
+            Settings.Secure.putStringForUser(mContentResolver, setting, value, mCurrentUser);
+        }
     }
 
     @Override
     public int getValue(String setting, int def) {
-        return Settings.Secure.getIntForUser(mContentResolver, setting, def, mCurrentUser);
+        if (isLineageSecure(setting)) {
+            return LineageSettings.Secure.getIntForUser(
+                    mContentResolver, chomp(setting), def, mCurrentUser);
+        } else if (isLineageSystem(setting)) {
+            return LineageSettings.System.getIntForUser(
+                    mContentResolver, chomp(setting), def, mCurrentUser);
+        } else if (isSystem(setting)) {
+            return Settings.System.getIntForUser(
+                    mContentResolver, chomp(setting), def, mCurrentUser);
+        } else {
+            return Settings.Secure.getIntForUser(mContentResolver, setting, def, mCurrentUser);
+        }
     }
 
     @Override
     public String getValue(String setting, String def) {
-        String ret = Secure.getStringForUser(mContentResolver, setting, mCurrentUser);
+        String ret;
+        if (isLineageSecure(setting)) {
+            ret = LineageSettings.Secure.getStringForUser(
+                    mContentResolver, chomp(setting), mCurrentUser);
+        } else if (isLineageSystem(setting)) {
+            ret = LineageSettings.System.getStringForUser(
+                    mContentResolver, chomp(setting), mCurrentUser);
+        } else if (isSystem(setting)) {
+            ret = Settings.System.getStringForUser(
+                    mContentResolver, chomp(setting), mCurrentUser);
+        } else {
+            ret = Secure.getStringForUser(mContentResolver, setting, mCurrentUser);
+        }
         if (ret == null) return def;
         return ret;
     }
 
     @Override
     public void setValue(String setting, int value) {
-         Settings.Secure.putIntForUser(mContentResolver, setting, value, mCurrentUser);
+        if (isLineageSecure(setting)) {
+            LineageSettings.Secure.putIntForUser(
+                    mContentResolver, chomp(setting), value, mCurrentUser);
+        } else if (isLineageSystem(setting)) {
+            LineageSettings.System.putIntForUser(
+                    mContentResolver, chomp(setting), value, mCurrentUser);
+        } else if (isSystem(setting)) {
+            Settings.System.putIntForUser(mContentResolver, chomp(setting), value, mCurrentUser);
+        } else {
+            Settings.Secure.putIntForUser(mContentResolver, setting, value, mCurrentUser);
+        }
     }
 
     @Override
@@ -167,13 +240,22 @@ public class TunerServiceImpl extends TunerService {
             mTunables.add(tunable);
             Dependency.get(LeakDetector.class).trackCollection(mTunables, "TunerService.mTunables");
         }
-        Uri uri = Settings.Secure.getUriFor(key);
+        final Uri uri;
+        if (isLineageSecure(key)) {
+            uri = LineageSettings.Secure.getUriFor(chomp(key));
+        } else if (isLineageSystem(key)) {
+            uri = LineageSettings.System.getUriFor(chomp(key));
+        } else if (isSystem(key)) {
+            uri = Settings.System.getUriFor(chomp(key));
+        } else {
+            uri = Settings.Secure.getUriFor(key);
+        }
         if (!mListeningUris.containsKey(uri)) {
             mListeningUris.put(uri, key);
             mContentResolver.registerContentObserver(uri, false, mObserver, mCurrentUser);
         }
         // Send the first state.
-        String value = Settings.Secure.getStringForUser(mContentResolver, key, mCurrentUser);
+        String value = getValue(key);
         tunable.onTuningChanged(key, value);
     }
 
@@ -203,7 +285,7 @@ public class TunerServiceImpl extends TunerService {
         if (tunables == null) {
             return;
         }
-        String value = Settings.Secure.getStringForUser(mContentResolver, key, mCurrentUser);
+        String value = getValue(key);
         for (Tunable tunable : tunables) {
             tunable.onTuningChanged(key, value);
         }
@@ -211,8 +293,7 @@ public class TunerServiceImpl extends TunerService {
 
     private void reloadAll() {
         for (String key : mTunableLookup.keySet()) {
-            String value = Settings.Secure.getStringForUser(mContentResolver, key,
-                    mCurrentUser);
+            String value = getValue(key);
             for (Tunable tunable : mTunableLookup.get(key)) {
                 tunable.onTuningChanged(key, value);
             }
@@ -231,7 +312,7 @@ public class TunerServiceImpl extends TunerService {
             if (ArrayUtils.contains(RESET_BLACKLIST, key)) {
                 continue;
             }
-            Settings.Secure.putString(mContentResolver, key, null);
+            setValue(key, null);
         }
     }
 
-- 
2.17.1

