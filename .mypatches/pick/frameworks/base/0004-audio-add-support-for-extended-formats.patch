From 1da3c56a401ff0ab21fbd9a7c5551e0cd0ca696a Mon Sep 17 00:00:00 2001
From: Mingming Yin <mingming@codeaurora.org>
Date: Tue, 11 Aug 2015 10:32:57 -0700
Subject: [PATCH 04/22] audio: add support for extended formats

Add support to playback and record extended formats.

audio: add support for extended audio encoding
- EVRC, QCELP ,LPCM, and multichannel encoding.
Change-Id: I9542ec9dec1872237940846952d28bef3ce24285

audio: add support for extended audio encoding
- update the constants for extended audio file types.
Change-Id: I3e87347d58d8c1d9b281185ed13fdaaa4d95f988

audio: add DSD as a valid file format
Change-Id: I7d8ba4ce2e8b5185e0e2db8f92957112614e8d44

Change-Id: Ie7df424da1bd526ca15a9a0c69d192133579c152
---
 core/jni/android_media_AudioFormat.h        | 31 ++++++++++++++
 media/java/android/media/AudioFormat.java   | 64 ++++++++++++++++++++++++++++-
 media/java/android/media/AudioRecord.java   |  9 ++++
 media/java/android/media/MediaFile.java     | 26 +++++++++++-
 media/java/android/media/MediaRecorder.java | 13 ++++++
 5 files changed, 141 insertions(+), 2 deletions(-)

diff --git a/core/jni/android_media_AudioFormat.h b/core/jni/android_media_AudioFormat.h
index 092aaf6..4ba209a 100644
--- a/core/jni/android_media_AudioFormat.h
+++ b/core/jni/android_media_AudioFormat.h
@@ -34,6 +34,13 @@
 #define ENCODING_IEC61937       13
 #define ENCODING_DOLBY_TRUEHD   14
 
+#define ENCODING_AMR_NB     100
+#define ENCODING_AMR_WB     101
+#define ENCODING_EVRC       102
+#define ENCODING_EVRC_B     103
+#define ENCODING_EVRC_WB    104
+#define ENCODING_EVRC_NW    105
+
 #define ENCODING_INVALID    0
 #define ENCODING_DEFAULT    1
 
@@ -71,6 +78,18 @@ static inline audio_format_t audioFormatToNative(int audioFormat)
         return AUDIO_FORMAT_DOLBY_TRUEHD;
     case ENCODING_IEC61937:
         return AUDIO_FORMAT_IEC61937;
+    case ENCODING_AMR_NB:
+        return AUDIO_FORMAT_AMR_NB;
+    case ENCODING_AMR_WB:
+        return AUDIO_FORMAT_AMR_WB;
+    case ENCODING_EVRC:
+        return AUDIO_FORMAT_EVRC;
+    case ENCODING_EVRC_B:
+        return AUDIO_FORMAT_EVRCB;
+    case ENCODING_EVRC_WB:
+        return AUDIO_FORMAT_EVRCWB;
+    case ENCODING_EVRC_NW:
+        return AUDIO_FORMAT_EVRCNW;
     case ENCODING_DEFAULT:
         return AUDIO_FORMAT_DEFAULT;
     default:
@@ -114,6 +133,18 @@ static inline int audioFormatFromNative(audio_format_t nativeFormat)
         return ENCODING_IEC61937;
     case AUDIO_FORMAT_DOLBY_TRUEHD:
         return ENCODING_DOLBY_TRUEHD;
+    case AUDIO_FORMAT_AMR_NB:
+        return ENCODING_AMR_NB;
+    case AUDIO_FORMAT_AMR_WB:
+        return ENCODING_AMR_WB;
+    case AUDIO_FORMAT_EVRC:
+        return ENCODING_EVRC;
+    case AUDIO_FORMAT_EVRCB:
+        return ENCODING_EVRC_B;
+    case AUDIO_FORMAT_EVRCWB:
+        return ENCODING_EVRC_WB;
+    case AUDIO_FORMAT_EVRCNW:
+        return ENCODING_EVRC_NW;
     case AUDIO_FORMAT_DEFAULT:
         return ENCODING_DEFAULT;
     default:
diff --git a/media/java/android/media/AudioFormat.java b/media/java/android/media/AudioFormat.java
index 93fc3da..058c348 100644
--- a/media/java/android/media/AudioFormat.java
+++ b/media/java/android/media/AudioFormat.java
@@ -303,6 +303,30 @@ public final class AudioFormat implements Parcelable {
         }
     }
 
+    /** Audio data format: AMRNB
+     * @hide
+     * */
+    public static final int ENCODING_AMRNB = 100;
+    /** Audio data format: AMRWB
+     * @hide
+     * */
+    public static final int ENCODING_AMRWB = 101;
+    /** Audio data format: EVRC
+     * @hide
+     * */
+    public static final int ENCODING_EVRC = 102;
+    /** Audio data format: EVRCB
+     * @hide
+     * */
+    public static final int ENCODING_EVRCB = 103;
+    /** Audio data format: EVRCWB
+     * @hide
+     * */
+    public static final int ENCODING_EVRCWB = 104;
+    /** Audio data format: EVRCNW
+     * @hide
+     * */
+    public static final int ENCODING_EVRCNW = 105;
     /** Invalid audio channel configuration */
     /** @deprecated Use {@link #CHANNEL_INVALID} instead.  */
     @Deprecated    public static final int CHANNEL_CONFIGURATION_INVALID   = 0;
@@ -478,6 +502,11 @@ public final class AudioFormat implements Parcelable {
     public static final int CHANNEL_IN_STEREO = (CHANNEL_IN_LEFT | CHANNEL_IN_RIGHT);
     /** @hide */
     public static final int CHANNEL_IN_FRONT_BACK = CHANNEL_IN_FRONT | CHANNEL_IN_BACK;
+    /** @hide */
+    public static final int CHANNEL_IN_5POINT1 = (CHANNEL_IN_LEFT |
+            CHANNEL_IN_RIGHT | CHANNEL_IN_FRONT | CHANNEL_IN_BACK |
+            CHANNEL_IN_LEFT_PROCESSED | CHANNEL_IN_RIGHT_PROCESSED);
+
     // CHANNEL_IN_ALL is not yet defined; if added then it should match AUDIO_CHANNEL_IN_ALL
 
     /** @hide */
@@ -492,6 +521,15 @@ public final class AudioFormat implements Parcelable {
             return 2;
         case ENCODING_PCM_FLOAT:
             return 4;
+        case ENCODING_AMRNB:
+            return 32;
+        case ENCODING_AMRWB:
+            return 61;
+        case ENCODING_EVRC:
+        case ENCODING_EVRCB:
+        case ENCODING_EVRCWB:
+        case ENCODING_EVRCNW:
+            return 23;
         case ENCODING_INVALID:
         default:
             throw new IllegalArgumentException("Bad audio format " + audioFormat);
@@ -514,6 +552,12 @@ public final class AudioFormat implements Parcelable {
         case ENCODING_AAC_HE_V1:
         case ENCODING_AAC_HE_V2:
         case ENCODING_IEC61937:
+        case ENCODING_AMRNB:
+        case ENCODING_AMRWB:
+        case ENCODING_EVRC:
+        case ENCODING_EVRCB:
+        case ENCODING_EVRCWB:
+        case ENCODING_EVRCNW:
             return true;
         default:
             return false;
@@ -556,6 +600,12 @@ public final class AudioFormat implements Parcelable {
         case ENCODING_AAC_HE_V1:
         case ENCODING_AAC_HE_V2:
         case ENCODING_IEC61937: // wrapped in PCM but compressed
+        case ENCODING_AMRNB:
+        case ENCODING_AMRWB:
+        case ENCODING_EVRC:
+        case ENCODING_EVRCB:
+        case ENCODING_EVRCWB:
+        case ENCODING_EVRCNW:
             return false;
         case ENCODING_INVALID:
         default:
@@ -818,6 +868,12 @@ public final class AudioFormat implements Parcelable {
                 case ENCODING_DTS:
                 case ENCODING_DTS_HD:
                 case ENCODING_IEC61937:
+                case ENCODING_AMRNB:
+                case ENCODING_AMRWB:
+                case ENCODING_EVRC:
+                case ENCODING_EVRCB:
+                case ENCODING_EVRCWB:
+                case ENCODING_EVRCNW:
                     mEncoding = encoding;
                     break;
                 case ENCODING_INVALID:
@@ -1025,7 +1081,13 @@ public final class AudioFormat implements Parcelable {
         ENCODING_E_AC3,
         ENCODING_DTS,
         ENCODING_DTS_HD,
-        ENCODING_IEC61937
+        ENCODING_IEC61937,
+        ENCODING_AMRNB,
+        ENCODING_AMRWB,
+        ENCODING_EVRC,
+        ENCODING_EVRCB,
+        ENCODING_EVRCWB,
+        ENCODING_EVRCNW
     })
     @Retention(RetentionPolicy.SOURCE)
     public @interface Encoding {}
diff --git a/media/java/android/media/AudioRecord.java b/media/java/android/media/AudioRecord.java
index 0906ba5..3682593 100644
--- a/media/java/android/media/AudioRecord.java
+++ b/media/java/android/media/AudioRecord.java
@@ -700,6 +700,12 @@ public class AudioRecord implements AudioRouting
         case AudioFormat.ENCODING_PCM_FLOAT:
         case AudioFormat.ENCODING_PCM_16BIT:
         case AudioFormat.ENCODING_PCM_8BIT:
+        case AudioFormat.ENCODING_AMRNB:
+        case AudioFormat.ENCODING_AMRWB:
+        case AudioFormat.ENCODING_EVRC:
+        case AudioFormat.ENCODING_EVRCB:
+        case AudioFormat.ENCODING_EVRCWB:
+        case AudioFormat.ENCODING_EVRCNW:
             mAudioFormat = audioFormat;
             break;
         default:
@@ -937,6 +943,9 @@ public class AudioRecord implements AudioRouting
         case (AudioFormat.CHANNEL_IN_FRONT | AudioFormat.CHANNEL_IN_BACK):
             channelCount = 2;
             break;
+        case AudioFormat.CHANNEL_IN_5POINT1:
+            channelCount = 6;
+            break;
         case AudioFormat.CHANNEL_INVALID:
         default:
             loge("getMinBufferSize(): Invalid channel configuration.");
diff --git a/media/java/android/media/MediaFile.java b/media/java/android/media/MediaFile.java
index fc4d15f..d629303 100644
--- a/media/java/android/media/MediaFile.java
+++ b/media/java/android/media/MediaFile.java
@@ -46,6 +46,19 @@ public class MediaFile {
     private static final int FIRST_AUDIO_FILE_TYPE = FILE_TYPE_MP3;
     private static final int LAST_AUDIO_FILE_TYPE = FILE_TYPE_FLAC;
 
+    // More audio file types
+    public static final int FILE_TYPE_DTS   = 210;
+    public static final int FILE_TYPE_3GPA  = 211;
+    public static final int FILE_TYPE_AC3   = 212;
+    public static final int FILE_TYPE_QCP   = 213;
+    public static final int FILE_TYPE_PCM   = 214;
+    public static final int FILE_TYPE_EC3   = 215;
+    public static final int FILE_TYPE_AIFF  = 216;
+    public static final int FILE_TYPE_APE   = 217;
+    public static final int FILE_TYPE_DSD   = 218;
+    private static final int FIRST_AUDIO_FILE_TYPE_EXT = FILE_TYPE_DTS;
+    private static final int LAST_AUDIO_FILE_TYPE_EXT = FILE_TYPE_DSD;
+
     // MIDI file types
     public static final int FILE_TYPE_MID     = 11;
     public static final int FILE_TYPE_SMF     = 12;
@@ -275,13 +288,24 @@ public class MediaFile {
         addFileType("ZIP", FILE_TYPE_ZIP, "application/zip");
         addFileType("MPG", FILE_TYPE_MP2PS, "video/mp2p");
         addFileType("MPEG", FILE_TYPE_MP2PS, "video/mp2p");
+        addFileType("QCP", FILE_TYPE_QCP, "audio/qcelp");
+        addFileType("AC3", FILE_TYPE_AC3, "audio/ac3");
+        addFileType("EC3", FILE_TYPE_EC3, "audio/eac3");
+        addFileType("AIF", FILE_TYPE_AIFF, "audio/x-aiff");
+        addFileType("AIFF", FILE_TYPE_AIFF, "audio/x-aiff");
+        addFileType("APE", FILE_TYPE_APE, "audio/x-ape");
+        addFileType("DSF", FILE_TYPE_DSD, "audio/x-dsf");
+        addFileType("DFF", FILE_TYPE_DSD, "audio/x-dff");
+        addFileType("DSD", FILE_TYPE_DSD, "audio/dsd");
     }
 
     public static boolean isAudioFileType(int fileType) {
         return ((fileType >= FIRST_AUDIO_FILE_TYPE &&
                 fileType <= LAST_AUDIO_FILE_TYPE) ||
                 (fileType >= FIRST_MIDI_FILE_TYPE &&
-                fileType <= LAST_MIDI_FILE_TYPE));
+                fileType <= LAST_MIDI_FILE_TYPE) ||
+                (fileType >= FIRST_AUDIO_FILE_TYPE_EXT &&
+                fileType <= LAST_AUDIO_FILE_TYPE_EXT));
     }
 
     public static boolean isVideoFileType(int fileType) {
diff --git a/media/java/android/media/MediaRecorder.java b/media/java/android/media/MediaRecorder.java
index 59a124f..298034b 100644
--- a/media/java/android/media/MediaRecorder.java
+++ b/media/java/android/media/MediaRecorder.java
@@ -430,6 +430,13 @@ public class MediaRecorder
 
         /** VP8/VORBIS data in a WEBM container */
         public static final int WEBM = 9;
+
+        /** @hide QCP file format */
+        public static final int QCP = 20;
+
+        /** @hide WAVE media file format*/
+        public static final int WAVE = 21;
+
     };
 
     /**
@@ -454,6 +461,12 @@ public class MediaRecorder
         public static final int AAC_ELD = 5;
         /** Ogg Vorbis audio codec */
         public static final int VORBIS = 6;
+        /** @hide EVRC audio codec */
+        public static final int EVRC = 10;
+        /** @hide QCELP audio codec */
+        public static final int QCELP = 11;
+        /** @hide Linear PCM audio codec */
+        public static final int LPCM = 12;
     }
 
     /**
-- 
2.7.4

