From fc0d28336e2ebd365979ee1b7091e7f5dda205b5 Mon Sep 17 00:00:00 2001
From: qqzhou <qqzhou@codeaurora.org>
Date: Tue, 17 Dec 2013 14:10:08 +0800
Subject: [PATCH 70/77] Download: Add support to manually pause/resume download

Add the pause and resume APIs here so that applications can
pause and resume downloads manually through DownloadManager.

This patch consists of 2 changes:
1. Add pause and resume download APIs
2. Add another paused reason for this download status

Change-Id: I606b48ca20f43bcc6c119683818c2ab6ff03bfe5
---
 core/java/android/app/DownloadManager.java | 40 ++++++++++++++++++++++
 core/java/android/provider/Downloads.java  |  5 +++
 2 files changed, 45 insertions(+)

diff --git a/core/java/android/app/DownloadManager.java b/core/java/android/app/DownloadManager.java
index b444f17c0b6..5799ec85ed3 100644
--- a/core/java/android/app/DownloadManager.java
+++ b/core/java/android/app/DownloadManager.java
@@ -279,6 +279,13 @@ public class DownloadManager {
      */
     public final static int PAUSED_UNKNOWN = 4;
 
+    /**
+     * Value of {@link #COLUMN_REASON} when the download is paused manually.
+     *
+     * @hide
+     */
+    public final static int PAUSED_MANUAL = 5;
+
     /**
      * Broadcast intent action sent by the download manager when a download completes.
      */
@@ -930,6 +937,7 @@ public class DownloadManager {
                     parts.add(statusClause("=", Downloads.Impl.STATUS_WAITING_TO_RETRY));
                     parts.add(statusClause("=", Downloads.Impl.STATUS_WAITING_FOR_NETWORK));
                     parts.add(statusClause("=", Downloads.Impl.STATUS_QUEUED_FOR_WIFI));
+                    parts.add(statusClause("=", Downloads.Impl.STATUS_PAUSED_MANUAL));
                 }
                 if ((mStatusFlags & STATUS_SUCCESSFUL) != 0) {
                     parts.add(statusClause("=", Downloads.Impl.STATUS_SUCCESS));
@@ -1180,6 +1188,34 @@ public class DownloadManager {
         mResolver.update(mBaseUri, values, getWhereClauseForIds(ids), getWhereArgsForIds(ids));
     }
 
+    /**
+     * Pause the given running download manually.
+     *
+     * @param id the ID of the download to be paused
+     * @return the number of downloads actually updated
+     * @hide
+     */
+    public int pauseDownload(long id) {
+        ContentValues values = new ContentValues();
+        values.put(Downloads.Impl.COLUMN_STATUS, Downloads.Impl.STATUS_PAUSED_MANUAL);
+
+        return mResolver.update(ContentUris.withAppendedId(mBaseUri, id), values, null, null);
+    }
+
+    /**
+     * Resume the given paused download manually.
+     *
+     * @param id the ID of the download to be resumed
+     * @return the number of downloads actually updated
+     * @hide
+     */
+    public int resumeDownload(long id) {
+        ContentValues values = new ContentValues();
+        values.put(Downloads.Impl.COLUMN_STATUS, Downloads.Impl.STATUS_RUNNING);
+
+        return mResolver.update(ContentUris.withAppendedId(mBaseUri, id), values, null, null);
+    }
+
     /**
      * Returns maximum size, in bytes, of downloads that may go over a mobile connection; or null if
      * there's no limit
@@ -1564,6 +1600,9 @@ public class DownloadManager {
                 case Downloads.Impl.STATUS_QUEUED_FOR_WIFI:
                     return PAUSED_QUEUED_FOR_WIFI;
 
+                case Downloads.Impl.STATUS_PAUSED_MANUAL:
+                    return PAUSED_MANUAL;
+
                 default:
                     return PAUSED_UNKNOWN;
             }
@@ -1619,6 +1658,7 @@ public class DownloadManager {
                 case Downloads.Impl.STATUS_WAITING_TO_RETRY:
                 case Downloads.Impl.STATUS_WAITING_FOR_NETWORK:
                 case Downloads.Impl.STATUS_QUEUED_FOR_WIFI:
+                case Downloads.Impl.STATUS_PAUSED_MANUAL:
                     return STATUS_PAUSED;
 
                 case Downloads.Impl.STATUS_SUCCESS:
diff --git a/core/java/android/provider/Downloads.java b/core/java/android/provider/Downloads.java
index a2c5a92e52a..062983a0cbf 100644
--- a/core/java/android/provider/Downloads.java
+++ b/core/java/android/provider/Downloads.java
@@ -600,6 +600,11 @@ public final class Downloads {
          */
         public static final int STATUS_QUEUED_FOR_WIFI = 196;
 
+        /**
+         * This download is paused manually.
+         */
+        public static final int STATUS_PAUSED_MANUAL = 197;
+
         /**
          * This download couldn't be completed due to insufficient storage
          * space.  Typically, this is because the SD card is full.
-- 
2.17.1

