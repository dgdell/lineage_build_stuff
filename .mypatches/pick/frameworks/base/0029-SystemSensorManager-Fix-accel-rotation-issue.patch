From 05d7c721144c9c579db73eb90ffc6e525535b405 Mon Sep 17 00:00:00 2001
From: T H <socialentry@gmail.com>
Date: Tue, 24 Jul 2018 12:40:59 -0400
Subject: [PATCH 29/37] SystemSensorManager: Fix accel/rotation issue

Stop all apps/services from breaking accel.

* On certain devices (Samsung) registering a listener for the
  accelereometer with batching causes it to stop reporting for all apps
  until the listener is unregistered or unselected.
* In change I8769147e1b1553a8fbad03340745a7e7377b8510 other apps can
  still break accel with registerListener.
* Gapps has a background service that causes this problem,
  breaking rotation and accel intermittently.

Change-Id: I0d8e5f906e39f11f98695de79d71ded2177de561
---
 core/java/android/hardware/SystemSensorManager.java  | 12 ++++++++++++
 .../server/policy/WindowOrientationListener.java     |  6 +-----
 2 files changed, 13 insertions(+), 5 deletions(-)

diff --git a/core/java/android/hardware/SystemSensorManager.java b/core/java/android/hardware/SystemSensorManager.java
index 607788d3eff..6b0bc13dc9a 100644
--- a/core/java/android/hardware/SystemSensorManager.java
+++ b/core/java/android/hardware/SystemSensorManager.java
@@ -99,6 +99,9 @@ public class SystemSensorManager extends SensorManager {
     private final Context mContext;
     private final long mNativeInstance;
 
+    // Config
+    private final boolean mUseDefaultBatchingForAccel;
+
     /** {@hide} */
     public SystemSensorManager(Context context, Looper mainLooper) {
         synchronized(sLock) {
@@ -113,6 +116,9 @@ public class SystemSensorManager extends SensorManager {
         mContext = context;
         mNativeInstance = nativeCreate(context.getOpPackageName());
 
+        mUseDefaultBatchingForAccel = context.getResources().getBoolean(
+            com.android.internal.R.bool.config_useDefaultBatchingForAccel);
+
         // initialize the sensor list
         for (int index = 0;;++index) {
             Sensor sensor = new Sensor();
@@ -162,6 +168,12 @@ public class SystemSensorManager extends SensorManager {
                 MAX_LISTENER_COUNT);
         }
 
+        if (!mUseDefaultBatchingForAccel && (sensor.getType() == Sensor.TYPE_ACCELEROMETER) &&
+            (maxBatchReportLatencyUs > 0)) {
+            Log.i(TAG, "disabling batch for accelerometer");
+            maxBatchReportLatencyUs = 0;
+        }
+
         // Invariants to preserve:
         // - one Looper per SensorEventListener
         // - one Looper per SensorEventQueue
diff --git a/services/core/java/com/android/server/policy/WindowOrientationListener.java b/services/core/java/com/android/server/policy/WindowOrientationListener.java
index 9d556ff6803..f421e1d853e 100644
--- a/services/core/java/com/android/server/policy/WindowOrientationListener.java
+++ b/services/core/java/com/android/server/policy/WindowOrientationListener.java
@@ -56,7 +56,6 @@ public abstract class WindowOrientationListener {
     private boolean mEnabled;
     private int mRate;
     private String mSensorType;
-    private boolean mUseDefaultBatchingForAccel;
     private boolean mUseSystemClockforRotationSensor;
     private Sensor mSensor;
     private OrientationJudge mOrientationJudge;
@@ -92,9 +91,6 @@ public abstract class WindowOrientationListener {
         mRate = rate;
         mSensor = mSensorManager.getDefaultSensor(Sensor.TYPE_DEVICE_ORIENTATION);
 
-        mUseDefaultBatchingForAccel = context.getResources().getBoolean(
-            com.android.internal.R.bool.config_useDefaultBatchingForAccel);
-
         mUseSystemClockforRotationSensor = context.getResources().getBoolean(
                 com.android.internal.R.bool.config_useSystemClockforRotationSensor);
 
@@ -141,7 +137,7 @@ public abstract class WindowOrientationListener {
                         + clearCurrentRotation);
             }
             mOrientationJudge.resetLocked(clearCurrentRotation);
-            if (mSensor.getType() == Sensor.TYPE_ACCELEROMETER && mUseDefaultBatchingForAccel) {
+            if (mSensor.getType() == Sensor.TYPE_ACCELEROMETER) {
                 mSensorManager.registerListener(
                         mOrientationJudge, mSensor, mRate, DEFAULT_BATCH_LATENCY, mHandler);
             } else {
-- 
2.17.1

