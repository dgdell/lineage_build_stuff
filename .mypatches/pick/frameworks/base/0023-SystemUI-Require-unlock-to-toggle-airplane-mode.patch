From 8e3dc5d3a8ff49bfd2a2d3c751afc80d3080c1de Mon Sep 17 00:00:00 2001
From: Michael W <baddaemon87@gmail.com>
Date: Sat, 23 Jun 2018 15:43:38 +0200
Subject: [PATCH 23/32] SystemUI: Require unlock to toggle airplane mode

Change-Id: I626fdb6619e250385a58ebedcee8317d1732054c
---
 .../systemui/qs/tiles/AirplaneModeTile.java   | 22 +++++++++++++++++++
 1 file changed, 22 insertions(+)

diff --git a/packages/SystemUI/src/com/android/systemui/qs/tiles/AirplaneModeTile.java b/packages/SystemUI/src/com/android/systemui/qs/tiles/AirplaneModeTile.java
index bef1aff571f..45f5eaaafae 100644
--- a/packages/SystemUI/src/com/android/systemui/qs/tiles/AirplaneModeTile.java
+++ b/packages/SystemUI/src/com/android/systemui/qs/tiles/AirplaneModeTile.java
@@ -28,17 +28,22 @@ import android.widget.Switch;
 
 import com.android.internal.logging.MetricsLogger;
 import com.android.internal.logging.nano.MetricsProto.MetricsEvent;
+import com.android.systemui.Dependency;
 import com.android.systemui.R;
+import com.android.systemui.plugins.ActivityStarter;
 import com.android.systemui.plugins.qs.QSTile.BooleanState;
 import com.android.systemui.qs.GlobalSetting;
 import com.android.systemui.qs.QSHost;
 import com.android.systemui.qs.tileimpl.QSTileImpl;
+import com.android.systemui.statusbar.policy.KeyguardMonitor;
 
 /** Quick settings tile: Airplane mode **/
 public class AirplaneModeTile extends QSTileImpl<BooleanState> {
     private final Icon mIcon =
             ResourceIcon.get(R.drawable.ic_signal_airplane);
     private final GlobalSetting mSetting;
+    private final KeyguardMonitor mKeyguardMonitor;
+    private final KeyguardMonitorCallback mCallback = new KeyguardMonitorCallback();
 
     private boolean mListening;
 
@@ -51,6 +56,7 @@ public class AirplaneModeTile extends QSTileImpl<BooleanState> {
                 handleRefreshState(value);
             }
         };
+        mKeyguardMonitor = Dependency.get(KeyguardMonitor.class);
     }
 
     @Override
@@ -60,6 +66,13 @@ public class AirplaneModeTile extends QSTileImpl<BooleanState> {
 
     @Override
     public void handleClick() {
+        if (mKeyguardMonitor.isSecure() && !mKeyguardMonitor.canSkipBouncer()) {
+            Dependency.get(ActivityStarter.class).postQSRunnableDismissingKeyguard(() -> {
+                MetricsLogger.action(mContext, getMetricsCategory(), !mState.value);
+                setEnabled(!mState.value);
+            });
+            return;
+        }
         MetricsLogger.action(mContext, getMetricsCategory(), !mState.value);
         setEnabled(!mState.value);
     }
@@ -117,8 +130,10 @@ public class AirplaneModeTile extends QSTileImpl<BooleanState> {
             final IntentFilter filter = new IntentFilter();
             filter.addAction(Intent.ACTION_AIRPLANE_MODE_CHANGED);
             mContext.registerReceiver(mReceiver, filter);
+            mKeyguardMonitor.addCallback(mCallback);
         } else {
             mContext.unregisterReceiver(mReceiver);
+            mKeyguardMonitor.removeCallback(mCallback);
         }
         mSetting.setListening(listening);
     }
@@ -131,4 +146,11 @@ public class AirplaneModeTile extends QSTileImpl<BooleanState> {
             }
         }
     };
+
+    private final class KeyguardMonitorCallback implements KeyguardMonitor.Callback {
+        @Override
+        public void onKeyguardShowingChanged() {
+            refreshState();
+        }
+    };
 }
-- 
2.17.1

