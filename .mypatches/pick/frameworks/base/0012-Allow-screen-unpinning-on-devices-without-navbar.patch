From cb0f8cb59665e53ce60afe773267774a8dbad8f4 Mon Sep 17 00:00:00 2001
From: Utkarsh Gupta <utkarsh.eminem@gmail.com>
Date: Thu, 28 Dec 2017 21:55:45 +0100
Subject: [PATCH 12/16] Allow screen unpinning on devices without navbar

Change-Id: Iedfc08f4d95bbee3c8578c0d2450b90739e63603

Screen Pinning: Show correct text for on screen nav.

  Similar to I09c2ef661bff272cb4f7ca43bac0e45f4b20a4d4,
  we're not getting an instance of PhoneWindowManager which
  we can rely on to update dynamically.

  TICKET: OPO-393

Change-Id: Iacf8221066461fb6940dd88432e665812545c3ff
---
 core/res/res/values/cm_strings.xml                 |  3 +++
 core/res/res/values/lineage_symbols.xml            |  3 +++
 packages/SystemUI/res/values/cm_strings.xml        |  3 +++
 .../systemui/recents/ScreenPinningRequest.java     | 17 +++++++++++++++-
 .../java/com/android/server/am/LockTaskNotify.java | 17 +++++++++++++++-
 .../android/server/policy/PhoneWindowManager.java  | 23 +++++++++++++++++++++-
 6 files changed, 63 insertions(+), 3 deletions(-)

diff --git a/core/res/res/values/cm_strings.xml b/core/res/res/values/cm_strings.xml
index 0d1d9a6..5eaaad9 100644
--- a/core/res/res/values/cm_strings.xml
+++ b/core/res/res/values/cm_strings.xml
@@ -30,4 +30,7 @@
     <!-- ADB notification message-->
     <string name="adb_active_generic_notification_message">Touch to disable debugging.</string>
 
+    <!-- Notify user that they are in Lock-to-app (for devices without navbar) -->
+    <string name="lock_to_app_toast_no_navbar">To unpin this screen, touch and hold the Back button.</string>
+
 </resources>
diff --git a/core/res/res/values/lineage_symbols.xml b/core/res/res/values/lineage_symbols.xml
index 6ddd1a1..40f38ee 100644
--- a/core/res/res/values/lineage_symbols.xml
+++ b/core/res/res/values/lineage_symbols.xml
@@ -29,4 +29,7 @@
     <java-symbol type="string" name="adb_net_active_notification_title" />
     <java-symbol type="string" name="adb_both_active_notification_title" />
     <java-symbol type="string" name="adb_active_generic_notification_message" />
+
+    <!-- Screen unpinning -->
+    <java-symbol type="string" name="lock_to_app_toast_no_navbar" />
 </resources>
diff --git a/packages/SystemUI/res/values/cm_strings.xml b/packages/SystemUI/res/values/cm_strings.xml
index a16a4ea..2caf905 100644
--- a/packages/SystemUI/res/values/cm_strings.xml
+++ b/packages/SystemUI/res/values/cm_strings.xml
@@ -65,4 +65,7 @@
     <!-- Navigation bar dpad -->
     <string name="accessibility_dpad_left">Cursor left</string>
     <string name="accessibility_dpad_right">Cursor right</string>
+
+    <!-- Screen pinning dialog description (for devices without navbar) -->
+    <string name="screen_pinning_description_no_navbar">This keeps it in view until you unpin. Touch &amp; hold Back to unpin.</string>
 </resources>
diff --git a/packages/SystemUI/src/com/android/systemui/recents/ScreenPinningRequest.java b/packages/SystemUI/src/com/android/systemui/recents/ScreenPinningRequest.java
index 316ad16..675995a 100644
--- a/packages/SystemUI/src/com/android/systemui/recents/ScreenPinningRequest.java
+++ b/packages/SystemUI/src/com/android/systemui/recents/ScreenPinningRequest.java
@@ -31,10 +31,12 @@ import android.os.Binder;
 import android.os.RemoteException;
 import android.util.DisplayMetrics;
 import android.view.Gravity;
+import android.view.IWindowManager;
 import android.view.Surface;
 import android.view.View;
 import android.view.ViewGroup;
 import android.view.WindowManager;
+import android.view.WindowManagerGlobal;
 import android.view.accessibility.AccessibilityManager;
 import android.view.animation.DecelerateInterpolator;
 import android.widget.Button;
@@ -56,6 +58,7 @@ public class ScreenPinningRequest implements View.OnClickListener {
 
     private final AccessibilityManager mAccessibilityService;
     private final WindowManager mWindowManager;
+    private final IWindowManager mWindowManagerService;
 
     private RequestWindowView mRequestWindow;
 
@@ -68,6 +71,7 @@ public class ScreenPinningRequest implements View.OnClickListener {
                 mContext.getSystemService(Context.ACCESSIBILITY_SERVICE);
         mWindowManager = (WindowManager)
                 mContext.getSystemService(Context.WINDOW_SERVICE);
+        mWindowManagerService = WindowManagerGlobal.getWindowManagerService();
     }
 
     public void clearPrompt() {
@@ -235,7 +239,9 @@ public class ScreenPinningRequest implements View.OnClickListener {
 
             boolean touchExplorationEnabled = mAccessibilityService.isTouchExplorationEnabled();
             ((TextView) mLayout.findViewById(R.id.screen_pinning_description))
-                    .setText(touchExplorationEnabled
+                    .setText(!hasNavigationBar()
+                            ? R.string.screen_pinning_description_no_navbar
+                            : touchExplorationEnabled
                             ? R.string.screen_pinning_description_accessible
                             : R.string.screen_pinning_description);
             final int backBgVisibility = touchExplorationEnabled ? View.INVISIBLE : View.VISIBLE;
@@ -264,6 +270,15 @@ public class ScreenPinningRequest implements View.OnClickListener {
             }
         }
 
+        private boolean hasNavigationBar() {
+            try {
+                return mWindowManagerService.hasNavigationBar();
+            } catch (RemoteException e) {
+                // ignore
+            }
+            return false;
+        }
+
         @Override
         public void onDetachedFromWindow() {
             mContext.unregisterReceiver(mReceiver);
diff --git a/services/core/java/com/android/server/am/LockTaskNotify.java b/services/core/java/com/android/server/am/LockTaskNotify.java
index 0412db5..f239f18 100644
--- a/services/core/java/com/android/server/am/LockTaskNotify.java
+++ b/services/core/java/com/android/server/am/LockTaskNotify.java
@@ -20,9 +20,12 @@ import android.app.ActivityManager;
 import android.content.Context;
 import android.os.Handler;
 import android.os.Message;
+import android.os.RemoteException;
 import android.os.SystemClock;
 import android.util.Slog;
+import android.view.IWindowManager;
 import android.view.WindowManager;
+import android.view.WindowManagerGlobal;
 import android.widget.Toast;
 
 import com.android.internal.R;
@@ -37,12 +40,14 @@ public class LockTaskNotify {
 
     private final Context mContext;
     private final H mHandler;
+    private final IWindowManager mWindowManagerService;
     private Toast mLastToast;
     private long mLastShowToastTime;
 
     public LockTaskNotify(Context context) {
         mContext = context;
         mHandler = new H();
+        mWindowManagerService = WindowManagerGlobal.getWindowManagerService();
     }
 
     public void showToast(int lockTaskModeState) {
@@ -54,7 +59,8 @@ public class LockTaskNotify {
         if (lockTaskModeState == ActivityManager.LOCK_TASK_MODE_LOCKED) {
             text = mContext.getString(R.string.lock_to_app_toast_locked);
         } else if (lockTaskModeState == ActivityManager.LOCK_TASK_MODE_PINNED) {
-            text = mContext.getString(R.string.lock_to_app_toast);
+            text = mContext.getString(hasNavigationBar()
+                      ? R.string.lock_to_app_toast : R.string.lock_to_app_toast_no_navbar);
         }
         if (text == null) {
             return;
@@ -87,6 +93,15 @@ public class LockTaskNotify {
         return toast;
     }
 
+    private boolean hasNavigationBar() {
+        try {
+            return mWindowManagerService.hasNavigationBar();
+        } catch (RemoteException e) {
+            // ignore
+        }
+        return false;
+    }
+
     private final class H extends Handler {
         private static final int SHOW_TOAST = 3;
 
diff --git a/services/core/java/com/android/server/policy/PhoneWindowManager.java b/services/core/java/com/android/server/policy/PhoneWindowManager.java
index 3997fdb..7f22a52 100644
--- a/services/core/java/com/android/server/policy/PhoneWindowManager.java
+++ b/services/core/java/com/android/server/policy/PhoneWindowManager.java
@@ -123,6 +123,7 @@ import android.app.ActivityManager;
 import android.app.ActivityManager.StackId;
 import android.app.ActivityManagerInternal;
 import android.app.ActivityManagerInternal.SleepToken;
+import android.app.ActivityManagerNative;
 import android.app.ActivityThread;
 import android.app.AlarmManager;
 import android.app.AppOpsManager;
@@ -1846,6 +1847,10 @@ public class PhoneWindowManager implements WindowManagerPolicy {
 
     Runnable mBackLongPress = new Runnable() {
         public void run() {
+            if (unpinActivity(false)) {
+                return;
+            }
+
             if (ActionUtils.killForegroundApp(mContext, mCurrentUserId)) {
                 performHapticFeedbackLw(null, HapticFeedbackConstants.LONG_PRESS, false);
                 Toast.makeText(mContext,
@@ -4126,7 +4131,7 @@ public class PhoneWindowManager implements WindowManagerPolicy {
             }
             return -1;
         } else if (keyCode == KeyEvent.KEYCODE_BACK) {
-            if (mKillAppLongpressBack) {
+            if (mKillAppLongpressBack || unpinActivity(true)) {
                 if (down && repeatCount == 0) {
                     mHandler.postDelayed(mBackLongPress, mBackKillTimeout);
                 }
@@ -4370,6 +4375,22 @@ public class PhoneWindowManager implements WindowManagerPolicy {
         return false;
     }
 
+    private boolean unpinActivity(boolean checkOnly) {
+        if (!hasNavigationBar()) {
+            try {
+                if (ActivityManagerNative.getDefault().isInLockTaskMode()) {
+                    if (!checkOnly) {
+                        ActivityManagerNative.getDefault().stopSystemLockTaskMode();
+                    }
+                    return true;
+                }
+            } catch (RemoteException e) {
+                // ignore
+            }
+        }
+        return false;
+    }
+
     /** {@inheritDoc} */
     @Override
     public KeyEvent dispatchUnhandledKey(WindowState win, KeyEvent event, int policyFlags) {
-- 
2.7.4

