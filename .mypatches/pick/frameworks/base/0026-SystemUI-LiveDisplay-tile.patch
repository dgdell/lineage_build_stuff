From 6130f0353268b2c1f893c0a2f354dbd55ad4860e Mon Sep 17 00:00:00 2001
From: Steve Kondik <steve@cyngn.com>
Date: Sun, 5 Nov 2017 16:37:52 +0100
Subject: [PATCH 26/67] SystemUI: LiveDisplay tile

Author: Steve Kondik <steve@cyngn.com>
Date:   Sun Nov 5 16:37:52 2017 +0100

    SystemUI: LiveDisplay tile

    Change-Id: I53d492e5cb9998268104d5750705aa5ed55d9658
    Signed-off-by: Joey Rizzoli <joey@lineageos.org>

Author: Unpublished <unpublished@gmx.net>
Date:   Fri Dec 29 23:00:01 2017 +0100

    livedisplay: Allow tile creation before boot completed phase [2/2]

    Change-Id: Ibef44d4e07da9baf296796515288c9d42aba8608

Author: Michael Bestas <mkbestas@lineageos.org>
Date:   Thu Feb 1 16:39:16 2018 +0000
Edit:   Refactor for Oreo

Change-Id: Ibef44d4e07da9baf296796515288c9d42aba8608
---
 packages/SystemUI/LineageManifest.xml         |   1 +
 .../android/systemui/plugins/qs/QSTile.java   |  27 +++
 packages/SystemUI/res/values/config.xml       |   2 +-
 .../systemui/qs/tileimpl/QSFactoryImpl.java   |   3 +
 .../systemui/qs/tiles/LiveDisplayTile.java    | 209 ++++++++++++++++++
 5 files changed, 241 insertions(+), 1 deletion(-)
 create mode 100644 packages/SystemUI/src/com/android/systemui/qs/tiles/LiveDisplayTile.java

diff --git a/packages/SystemUI/LineageManifest.xml b/packages/SystemUI/LineageManifest.xml
index defd76eb78f..6016327828e 100644
--- a/packages/SystemUI/LineageManifest.xml
+++ b/packages/SystemUI/LineageManifest.xml
@@ -22,6 +22,7 @@
     <!-- QS Tiles -->
     <uses-permission android:name="android.permission.READ_SYNC_SETTINGS" />
     <uses-permission android:name="android.permission.WRITE_SYNC_SETTINGS" />
+    <uses-permission android:name="lineageos.permission.MANAGE_LIVEDISPLAY" />
     <uses-permission android:name="lineageos.permission.WRITE_SETTINGS" />
     <uses-permission android:name="lineageos.permission.WRITE_SECURE_SETTINGS" />
 
diff --git a/packages/SystemUI/plugin/src/com/android/systemui/plugins/qs/QSTile.java b/packages/SystemUI/plugin/src/com/android/systemui/plugins/qs/QSTile.java
index 61f7fe8dc01..6382de3ce5b 100644
--- a/packages/SystemUI/plugin/src/com/android/systemui/plugins/qs/QSTile.java
+++ b/packages/SystemUI/plugin/src/com/android/systemui/plugins/qs/QSTile.java
@@ -295,4 +295,31 @@ public interface QSTile {
             return state;
         }
     }
+
+    @ProvidesInterface(version = LiveDisplayState.VERSION)
+    public static class LiveDisplayState extends State {
+        public static final int VERSION = 1;
+        public int mode;
+
+        @Override
+        public boolean copyTo(State other) {
+            final LiveDisplayState o = (LiveDisplayState) other;
+            final boolean changed = mode != o.mode;
+            return super.copyTo(other) || changed;
+        }
+
+        @Override
+        protected StringBuilder toStringBuilder() {
+            final StringBuilder rt = super.toStringBuilder();
+            rt.insert(rt.length() - 1, ",mode=" + mode);
+            return rt;
+        }
+
+        @Override
+        public State copy() {
+            LiveDisplayState state = new LiveDisplayState();
+            copyTo(state);
+            return state;
+        }
+    }
 }
diff --git a/packages/SystemUI/res/values/config.xml b/packages/SystemUI/res/values/config.xml
index aea085c45c5..b99ee2e0a0c 100644
--- a/packages/SystemUI/res/values/config.xml
+++ b/packages/SystemUI/res/values/config.xml
@@ -123,7 +123,7 @@
 
     <!-- Tiles native to System UI. Order should match "quick_settings_tiles_default" -->
     <string name="quick_settings_tiles_stock" translatable="false">
-        wifi,cell,battery,dnd,flashlight,rotation,bt,airplane,nfc,location,hotspot,inversion,saver,work,cast,night,adb_network,ambient_display,caffeine,heads_up,sync,usb_tether,volume_panel
+        wifi,cell,battery,dnd,flashlight,rotation,bt,airplane,nfc,location,hotspot,inversion,saver,work,cast,night,adb_network,ambient_display,caffeine,heads_up,livedisplay,sync,usb_tether,volume_panel
     </string>
 
     <!-- The tiles to display in QuickSettings -->
diff --git a/packages/SystemUI/src/com/android/systemui/qs/tileimpl/QSFactoryImpl.java b/packages/SystemUI/src/com/android/systemui/qs/tileimpl/QSFactoryImpl.java
index 6bcd993046f..d8d54591bfa 100644
--- a/packages/SystemUI/src/com/android/systemui/qs/tileimpl/QSFactoryImpl.java
+++ b/packages/SystemUI/src/com/android/systemui/qs/tileimpl/QSFactoryImpl.java
@@ -39,6 +39,7 @@ import com.android.systemui.qs.tiles.FlashlightTile;
 import com.android.systemui.qs.tiles.HeadsUpTile;
 import com.android.systemui.qs.tiles.HotspotTile;
 import com.android.systemui.qs.tiles.IntentTile;
+import com.android.systemui.qs.tiles.LiveDisplayTile;
 import com.android.systemui.qs.tiles.LocationTile;
 import com.android.systemui.qs.tiles.NfcTile;
 import com.android.systemui.qs.tiles.NightDisplayTile;
@@ -115,6 +116,8 @@ public class QSFactoryImpl implements QSFactory {
                 return new CaffeineTile(mHost);
             case "heads_up":
                 return new HeadsUpTile(mHost);
+            case "livedisplay":
+                return new LiveDisplayTile(mHost);
             case "sync":
                 return new SyncTile(mHost);
             case "usb_tether":
diff --git a/packages/SystemUI/src/com/android/systemui/qs/tiles/LiveDisplayTile.java b/packages/SystemUI/src/com/android/systemui/qs/tiles/LiveDisplayTile.java
new file mode 100644
index 00000000000..780487f28b2
--- /dev/null
+++ b/packages/SystemUI/src/com/android/systemui/qs/tiles/LiveDisplayTile.java
@@ -0,0 +1,209 @@
+/*
+ * Copyright (C) 2015 The CyanogenMod Project
+ * Copyright (C) 2018 The LineageOS Project
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.android.systemui.qs.tiles;
+
+import static lineageos.hardware.LiveDisplayManager.FEATURE_MANAGED_OUTDOOR_MODE;
+import static lineageos.hardware.LiveDisplayManager.MODE_DAY;
+import static lineageos.hardware.LiveDisplayManager.MODE_OUTDOOR;
+
+import android.content.Intent;
+import android.content.res.Resources;
+import android.content.res.TypedArray;
+import android.database.ContentObserver;
+import android.os.Handler;
+import android.os.UserHandle;
+import android.provider.Settings;
+import android.service.quicksettings.Tile;
+
+import com.android.internal.util.ArrayUtils;
+import com.android.systemui.plugins.qs.QSTile.LiveDisplayState;
+import com.android.systemui.qs.QSHost;
+import com.android.systemui.qs.tileimpl.QSTileImpl;
+
+import org.lineageos.internal.logging.LineageMetricsLogger;
+import org.lineageos.platform.internal.R;
+
+import lineageos.hardware.LiveDisplayManager;
+import lineageos.providers.LineageSettings;
+
+/** Quick settings tile: LiveDisplay mode switcher **/
+public class LiveDisplayTile extends QSTileImpl<LiveDisplayState> {
+
+    private static final Intent LIVEDISPLAY_SETTINGS =
+            new Intent("org.lineageos.lineageparts.LIVEDISPLAY_SETTINGS");
+
+    private final LiveDisplayObserver mObserver;
+    private String[] mEntries;
+    private String[] mDescriptionEntries;
+    private String[] mAnnouncementEntries;
+    private String[] mValues;
+    private final int[] mEntryIconRes;
+
+    private boolean mListening;
+
+    private int mDayTemperature;
+
+    private final boolean mOutdoorModeAvailable;
+
+    private final LiveDisplayManager mLiveDisplay;
+
+    private static final int OFF_TEMPERATURE = 6500;
+
+    public LiveDisplayTile(QSHost host) {
+        super(host);
+
+        Resources res = mContext.getResources();
+        TypedArray typedArray = res.obtainTypedArray(R.array.live_display_drawables);
+        mEntryIconRes = new int[typedArray.length()];
+        for (int i = 0; i < mEntryIconRes.length; i++) {
+            mEntryIconRes[i] = typedArray.getResourceId(i, 0);
+        }
+        typedArray.recycle();
+
+        updateEntries();
+
+        mLiveDisplay = LiveDisplayManager.getInstance(mContext);
+        if (mLiveDisplay.getConfig() != null) {
+            mOutdoorModeAvailable = mLiveDisplay.getConfig().hasFeature(MODE_OUTDOOR) &&
+                    !mLiveDisplay.getConfig().hasFeature(FEATURE_MANAGED_OUTDOOR_MODE);
+            mDayTemperature = mLiveDisplay.getDayColorTemperature();
+        } else {
+            mOutdoorModeAvailable = false;
+            mDayTemperature = -1;
+        }
+
+        mObserver = new LiveDisplayObserver(mHandler);
+        mObserver.startObserving();
+    }
+
+    private void updateEntries() {
+        Resources res = mContext.getResources();
+        mEntries = res.getStringArray(R.array.live_display_entries);
+        mDescriptionEntries = res.getStringArray(R.array.live_display_description);
+        mAnnouncementEntries = res.getStringArray(R.array.live_display_announcement);
+        mValues = res.getStringArray(R.array.live_display_values);
+    }
+
+    @Override
+    public LiveDisplayState newTileState() {
+        return new LiveDisplayState();
+    }
+
+    @Override
+    public void handleSetListening(boolean listening) {
+        if (mListening == listening)
+            return;
+        mListening = listening;
+        if (listening) {
+            mObserver.startObserving();
+        } else {
+            mObserver.endObserving();
+        }
+    }
+
+    @Override
+    protected void handleClick() {
+        changeToNextMode();
+    }
+
+    @Override
+    protected void handleUpdateState(LiveDisplayState state, Object arg) {
+        updateEntries();
+        state.mode = arg == null ? getCurrentModeIndex() : (Integer) arg;
+        state.label = mEntries[state.mode];
+        state.icon = ResourceIcon.get(mEntryIconRes[state.mode]);
+        state.contentDescription = mDescriptionEntries[state.mode];
+        state.state = Tile.STATE_ACTIVE;
+    }
+
+    @Override
+    public int getMetricsCategory() {
+        return LineageMetricsLogger.TILE_LIVE_DISPLAY;
+    }
+
+    @Override
+    public CharSequence getTileLabel() {
+        return mContext.getString(R.string.live_display_title);
+    }
+
+    @Override
+    public Intent getLongClickIntent() {
+        return LIVEDISPLAY_SETTINGS;
+    }
+
+    @Override
+    protected String composeChangeAnnouncement() {
+        return mAnnouncementEntries[getCurrentModeIndex()];
+    }
+
+    private int getCurrentModeIndex() {
+        return ArrayUtils.indexOf(mValues, String.valueOf(mLiveDisplay.getMode()));
+    }
+
+    private void changeToNextMode() {
+        int next = getCurrentModeIndex() + 1;
+
+        if (next >= mValues.length) {
+            next = 0;
+        }
+
+        int nextMode = 0;
+
+        while (true) {
+            nextMode = Integer.valueOf(mValues[next]);
+            // Skip outdoor mode if it's unsupported, and skip the day setting
+            // if it's the same as the off setting
+            if ((!mOutdoorModeAvailable && nextMode == MODE_OUTDOOR) ||
+                    (mDayTemperature == OFF_TEMPERATURE && nextMode == MODE_DAY)) {
+                next++;
+                if (next >= mValues.length) {
+                    next = 0;
+                }
+            } else {
+                break;
+            }
+        }
+
+        mLiveDisplay.setMode(nextMode);
+    }
+
+    private class LiveDisplayObserver extends ContentObserver {
+        public LiveDisplayObserver(Handler handler) {
+            super(handler);
+        }
+
+        @Override
+        public void onChange(boolean selfChange) {
+            mDayTemperature = mLiveDisplay.getDayColorTemperature();
+            refreshState(getCurrentModeIndex());
+        }
+
+        public void startObserving() {
+            mContext.getContentResolver().registerContentObserver(
+                    LineageSettings.System.getUriFor(LineageSettings.System.DISPLAY_TEMPERATURE_MODE),
+                    false, this, UserHandle.USER_ALL);
+            mContext.getContentResolver().registerContentObserver(
+                    LineageSettings.System.getUriFor(LineageSettings.System.DISPLAY_TEMPERATURE_DAY),
+                    false, this, UserHandle.USER_ALL);
+        }
+
+        public void endObserving() {
+            mContext.getContentResolver().unregisterContentObserver(this);
+        }
+    }
+}
-- 
2.17.1

