From dc637120e5e237fb2c74a224a82cfcf9c2f8cc4b Mon Sep 17 00:00:00 2001
From: Demon Singur <demonsingur@gmail.com>
Date: Thu, 7 Jun 2018 16:45:34 +0000
Subject: [PATCH 18/32] Make style selection more generic

Prepare for adding support for more modes.

Change-Id: I90acced232352ac83fdd39e976d53f22eaee8e21
---
 .../systemui/statusbar/phone/StatusBar.java   | 103 +++++++++++++-----
 1 file changed, 78 insertions(+), 25 deletions(-)

diff --git a/packages/SystemUI/src/com/android/systemui/statusbar/phone/StatusBar.java b/packages/SystemUI/src/com/android/systemui/statusbar/phone/StatusBar.java
index ef645a53f0f..8d201ce9257 100644
--- a/packages/SystemUI/src/com/android/systemui/statusbar/phone/StatusBar.java
+++ b/packages/SystemUI/src/com/android/systemui/statusbar/phone/StatusBar.java
@@ -407,6 +407,14 @@ public class StatusBar extends SystemUI implements DemoMode,
     private static final String LOCKSCREEN_MEDIA_METADATA =
             "lineagesecure:" + LineageSettings.Secure.LOCKSCREEN_MEDIA_METADATA;
 
+    private static final int DYNAMIC_STYLE = 1;
+    private static final int LIGHT_STYLE = 2;
+    private static final int DARK_STYLE = 3;
+
+    private static final String[] DARK_OVERLAYS = {
+            "org.lineageos.overlay.dark",
+    };
+
     static {
         boolean onlyCoreApps;
         boolean freeformWindowManagement;
@@ -3024,10 +3032,10 @@ public class StatusBar extends SystemUI implements DemoMode,
         updateTheme();
     }
 
-    public boolean isUsingDarkTheme() {
+    private boolean isUsingTheme(String overlay) {
         OverlayInfo systemuiThemeInfo = null;
         try {
-            systemuiThemeInfo = mOverlayManager.getOverlayInfo("org.lineageos.overlay.dark",
+            systemuiThemeInfo = mOverlayManager.getOverlayInfo(overlay,
                     mCurrentUserId);
         } catch (RemoteException e) {
             e.printStackTrace();
@@ -3035,6 +3043,10 @@ public class StatusBar extends SystemUI implements DemoMode,
         return systemuiThemeInfo != null && systemuiThemeInfo.isEnabled();
     }
 
+    public boolean isUsingDarkTheme() {
+        return isUsingTheme(DARK_OVERLAYS[0]);
+    }
+
     private boolean isLiveDisplayNightModeOn() {
         // SystemUI is initialized before LiveDisplay, so the service may not
         // be ready when this is called the first time
@@ -4943,6 +4955,57 @@ public class StatusBar extends SystemUI implements DemoMode,
         Trace.endSection();
     }
 
+    private int getActiveStyle() {
+        int activeStyle = LIGHT_STYLE;
+        if (isUsingDarkTheme()) {
+            activeStyle = DARK_STYLE;
+        }
+        return activeStyle;
+    }
+
+    private String[] getOverlays(int style) {
+        switch (style) {
+            case DARK_STYLE:
+                return DARK_OVERLAYS;
+            default:
+                return null;
+        }
+    }
+
+    private void setOverlaysForStyle(int style, boolean state) {
+        String[] overlays = getOverlays(style);
+        if (overlays == null) {
+            return;
+        }
+
+        for (String overlay: overlays) {
+            try {
+                mOverlayManager.setEnabled(overlay, state, mCurrentUserId);
+            } catch (RemoteException e) {
+                Log.w(TAG, "Can't change theme for " + overlay, e);
+            }
+        }
+    }
+
+    private boolean isNightStyle(int style) {
+        return style == DARK_STYLE;
+    }
+
+    private void updateStyle(int style) {
+        int oldStyle = getActiveStyle();
+        if (oldStyle == style) {
+            return;
+        }
+
+        setOverlaysForStyle(style, true);
+        setOverlaysForStyle(oldStyle, false);
+
+        if (mUiModeManager != null) {
+            mUiModeManager.setNightMode(isNightStyle(style) ?
+                    UiModeManager.MODE_NIGHT_YES : UiModeManager.MODE_NIGHT_NO);
+        }
+    }
+
     /**
      * Switches theme from light to dark and vice-versa.
      */
@@ -4954,37 +5017,27 @@ public class StatusBar extends SystemUI implements DemoMode,
                 LineageSettings.System.BERRY_GLOBAL_STYLE, 0);
         WallpaperColors systemColors = mColorExtractor
                 .getWallpaperColors(WallpaperManager.FLAG_SYSTEM);
-        final boolean useDarkTheme;
+        int actualStyle = LIGHT_STYLE;
 
         switch (globalStyleSetting) {
-            case 1:
-                useDarkTheme = isLiveDisplayNightModeOn();
-                break;
-            case 2:
-                useDarkTheme = false;
+            case DYNAMIC_STYLE:
+                if (isLiveDisplayNightModeOn()) {
+                    actualStyle = DARK_STYLE;
+                }
                 break;
-            case 3:
-                useDarkTheme = true;
+            case LIGHT_STYLE:
+            case DARK_STYLE:
+                actualStyle = globalStyleSetting;
                 break;
             default:
-                useDarkTheme = systemColors != null && (systemColors.getColorHints() &
-                        WallpaperColors.HINT_SUPPORTS_DARK_THEME) != 0;
+                if (systemColors != null && (systemColors.getColorHints() &
+                        WallpaperColors.HINT_SUPPORTS_DARK_THEME) != 0) {
+                    actualStyle = DARK_STYLE;
+                }
                 break;
         }
 
-        if (isUsingDarkTheme() != useDarkTheme) {
-            try {
-                mOverlayManager.setEnabled("org.lineageos.overlay.dark",
-                        useDarkTheme, mCurrentUserId);
-            } catch (RemoteException e) {
-                Log.w(TAG, "Can't change theme", e);
-            }
-
-            if (mUiModeManager != null) {
-                mUiModeManager.setNightMode(useDarkTheme ?
-                        UiModeManager.MODE_NIGHT_YES : UiModeManager.MODE_NIGHT_NO);
-            }
-        }
+        updateStyle(actualStyle);
 
         // Lock wallpaper defines the color of the majority of the views, hence we'll use it
         // to set our default theme.
-- 
2.17.1

