From 1e421db3391ca88a00c4abe6cc2a48e94f9f0fb0 Mon Sep 17 00:00:00 2001
From: Arvind Kumar <arvindkk@codeaurora.org>
Date: Mon, 29 May 2017 15:46:14 +0530
Subject: [PATCH 08/20] Camera2Client: Add support for enabling QTI
 Video/Sensor HDR feature

Add support for enabling/disabling QTI specific Video/Sensor HDR feature.

Change-Id: Ifa08552cb155a6f17894fa0e9a82fa20bab5fc4a
---
 .../api1/QTICamera2Client.cpp                 | 32 ++++++++++
 .../libcameraservice/api1/QTICamera2Client.h  |  1 +
 .../api1/qticlient2/QTIParameters.cpp         | 64 +++++++++++++++++++
 .../api1/qticlient2/QTIParameters.h           |  2 +
 4 files changed, 99 insertions(+)

diff --git a/services/camera/libcameraservice/api1/QTICamera2Client.cpp b/services/camera/libcameraservice/api1/QTICamera2Client.cpp
index 79bbbf66e..769f921f2 100644
--- a/services/camera/libcameraservice/api1/QTICamera2Client.cpp
+++ b/services/camera/libcameraservice/api1/QTICamera2Client.cpp
@@ -64,6 +64,15 @@ QTICamera2Client::~QTICamera2Client() {
 status_t QTICamera2Client::setParametersExtn(Parameters &params) {
     status_t res = OK;
     sp<Camera2Client> client = mParentClient.promote();
+    int32_t prevVidHdr,currVidHdr;
+
+    prevVidHdr = params.qtiParams->prevVideoHdr;
+    currVidHdr = params.qtiParams->videoHdr;
+
+    if(prevVidHdr != currVidHdr) {
+        ALOGE(" video hdr mode changed %d %d",prevVidHdr,currVidHdr);
+        restartVideoHdr(params);
+    }
 
     // Check whether preview restart needed.
     // Stop the preview, if there is a need for restart.
@@ -84,6 +93,29 @@ status_t QTICamera2Client::setParametersExtn(Parameters &params) {
     return res;
 }
 
+status_t QTICamera2Client::restartVideoHdr(Parameters &params)
+{
+    sp<Camera2Client> client = mParentClient.promote();
+
+    stopPreviewExtn();
+
+    client->mStreamingProcessor->deletePreviewStream();
+    client->mStreamingProcessor->deleteRecordingStream();
+    client->mJpegProcessor->deleteStream();
+    client->mCallbackProcessor->deleteStream();
+    client->mZslProcessor->deleteStream();
+    client->mZslProcessor->clearZslQueue();
+
+    params.slowJpegMode = false;
+    client->updateRequests(params);
+
+    if (params.state == Parameters::STOPPED) {
+        client->startPreviewL(params,false);
+    }
+    return OK;
+}
+
+
 status_t QTICamera2Client::stopPreviewExtn() {
     status_t res = OK;
     sp<Camera2Client> client = mParentClient.promote();
diff --git a/services/camera/libcameraservice/api1/QTICamera2Client.h b/services/camera/libcameraservice/api1/QTICamera2Client.h
index c0da03830..22bd98711 100644
--- a/services/camera/libcameraservice/api1/QTICamera2Client.h
+++ b/services/camera/libcameraservice/api1/QTICamera2Client.h
@@ -49,6 +49,7 @@ public:
 
 private:
     void stopPreviewForRestart(Parameters &params);
+    status_t restartVideoHdr(Parameters &params);
 
 };
 
diff --git a/services/camera/libcameraservice/api1/qticlient2/QTIParameters.cpp b/services/camera/libcameraservice/api1/qticlient2/QTIParameters.cpp
index b6aae2340..75aafa471 100644
--- a/services/camera/libcameraservice/api1/qticlient2/QTIParameters.cpp
+++ b/services/camera/libcameraservice/api1/qticlient2/QTIParameters.cpp
@@ -140,6 +140,20 @@ const char KEY_QTI_REDEYE_REDUCTION[] = "redeye-reduction";
 //face-detection
 const char  KEY_QTI_FACE_DETECTION_MODES[] = "face-detection-values";
 
+//Video-HDR
+const char KEY_QTI_VENDOR_VIDEO_HDR_MODES[] =
+        "org.codeaurora.qcamera3.video_hdr_mode.vhdr_supported_modes";
+const char KEY_QTI_VENDOR_VIDEO_HDR_MODE[] =
+        "org.codeaurora.qcamera3.video_hdr_mode.vhdr_mode";
+const char KEY_QTI_VIDEO_HDR[] = "video-hdr";
+const char KEY_QTI_SUPPORTED_VIDEO_HDR_MODES[] = "video-hdr-values";
+
+//Sensor-HDR
+const char KEY_SNAPCAM_SUPPORTED_HDR_MODES[] = "hdr-mode-values";
+const char HDR_MODE_SENSOR[] = "hdr-mode-sensor";
+const char HDR_MODE_MULTIFRAME[] = "hdr-mode-multiframe";
+const char KEY_SNAPCAM_HDR_MODE[] = "hdr-mode";
+
 camera_metadata_ro_entry_t g_availableSensitivityRange;
 double minExposureTime;
 double maxExposureTime;
@@ -212,6 +226,25 @@ status_t QTIParameters::initialize(void *parametersParent,
     Hdr1xEnable = false;
     HdrSceneEnable = false;
 
+    //Video-Hdr, Sensor-Hdr
+    res = CameraMetadata::getTagFromName(KEY_QTI_VENDOR_VIDEO_HDR_MODES, vTags.get(), &tag);
+    camera_metadata_ro_entry_t availableVideoHdrModes = ParentParams->staticInfo(tag);
+    if (availableVideoHdrModes.count == 2) {
+        String8 supportedVideoHdrModes(VALUE_OFF);
+        supportedVideoHdrModes += ",";
+        supportedVideoHdrModes += VALUE_ON;
+
+        ParentParams->params.set(KEY_QTI_SUPPORTED_VIDEO_HDR_MODES,
+                supportedVideoHdrModes);
+        ParentParams->params.set(KEY_QTI_VIDEO_HDR,VALUE_OFF);
+
+        String8 supportedSnapHdrModes(HDR_MODE_SENSOR);
+        supportedSnapHdrModes += ",";
+        supportedSnapHdrModes += HDR_MODE_MULTIFRAME;
+        ParentParams->params.set(KEY_SNAPCAM_SUPPORTED_HDR_MODES,
+                supportedSnapHdrModes);
+    }
+
     // ISO
     // Get the supported sensitivity range from device3 static info
     camera_metadata_ro_entry_t availableSensitivityRange =
@@ -492,6 +525,30 @@ status_t QTIParameters::set(CameraParameters2& newParams, void *parametersParent
     char prop[PROPERTY_VALUE_MAX];
     Parameters* ParentParams = (Parameters*)parametersParent;
 
+    //Video-Hdr
+    const char *videoHdrMode = newParams.get(KEY_QTI_VIDEO_HDR);
+    int32_t vidHDR = 0;
+    if(videoHdrMode) {
+        if (!strcmp(videoHdrMode, VALUE_OFF)) {
+            vidHDR = 0;
+        } else {
+            vidHDR = 1;
+        }
+    }
+    //Sensor-HDR
+    const char *HdrMode = newParams.get(KEY_SNAPCAM_HDR_MODE);
+    int32_t sensHDR = 0;
+    if(HdrMode) {
+        if(!strcmp(HdrMode,"hdr-mode-sensor")) {
+            sensHDR = 1;
+        }
+        if(!strcmp(HdrMode,"hdr-mode-multiframe")) {
+            sensHDR = 0;
+        }
+    }
+    prevVideoHdr = videoHdr;
+    videoHdr = vidHDR|sensHDR;
+
     // ISO
     const char *isoMode = newParams.get(KEY_QTI_ISO_MODE);
     if (isoMode) {
@@ -760,6 +817,13 @@ status_t QTIParameters::updateRequest(CameraMetadata *request) const {
        return BAD_VALUE;
     }
 
+    //Video-Hdr
+    res = CameraMetadata::getTagFromName(KEY_QTI_VENDOR_VIDEO_HDR_MODE, vTags.get(), &tag);
+    res = request->update(tag,&videoHdr, 1);
+    if (res != OK) {
+        return res;
+    }
+
     if (isoValue != -1) {
         int32_t selectPriority = 0; // 0 for iso, 1 for exp.
         isoVal = isoValue;
diff --git a/services/camera/libcameraservice/api1/qticlient2/QTIParameters.h b/services/camera/libcameraservice/api1/qticlient2/QTIParameters.h
index 9b0883afd..6466ea8c9 100644
--- a/services/camera/libcameraservice/api1/qticlient2/QTIParameters.h
+++ b/services/camera/libcameraservice/api1/qticlient2/QTIParameters.h
@@ -99,6 +99,8 @@ private:
     metadata_vendor_id_t mVendorTagId;
 
 public:
+    int32_t videoHdr;
+    int32_t prevVideoHdr;
     bool mNeedRestart;
     uint8_t burstCount;
     bool aeBracketEnable;
-- 
2.17.1

