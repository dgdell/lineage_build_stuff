From 8522e58a5cebe6ed364c2710877b5024ed0e281c Mon Sep 17 00:00:00 2001
From: Sampath Vangaveti <sampathv@codeaurora.org>
Date: Fri, 14 Apr 2017 17:07:28 +0530
Subject: [PATCH 06/11] Camera2Client: Add support for non-HDR frame along with
 HDR

Add support for getting extra non-HDR frame along with HDR.

Change-Id: I2b169596f82be7e1d45c799d774aba19c860b2d0
---
 .../api1/qticlient2/QTIParameters.cpp         | 57 ++++++++++++++++++-
 .../api1/qticlient2/QTIParameters.h           |  2 +
 2 files changed, 58 insertions(+), 1 deletion(-)

diff --git a/services/camera/libcameraservice/api1/qticlient2/QTIParameters.cpp b/services/camera/libcameraservice/api1/qticlient2/QTIParameters.cpp
index d24524642..79a5c126f 100644
--- a/services/camera/libcameraservice/api1/qticlient2/QTIParameters.cpp
+++ b/services/camera/libcameraservice/api1/qticlient2/QTIParameters.cpp
@@ -163,8 +163,12 @@ const char KEY_QTI_VIDEO_HIGH_SPEED_RECORDING[] = "video-hsr";
 const char KEY_QTI_SUPPORTED_VIDEO_HIGH_FRAME_RATE_MODES[] = "video-hfr-values";
 const char KEY_QTI_SUPPORTED_HFR_SIZES[] = "hfr-size-values";
 
+// HDR need 1x frame(one non-HDR extra frame).
+const char KEY_QTI_SUPPORTED_HDR_NEED_1X[] = "hdr-need-1x-values";
+const char KEY_QTI_HDR_NEED_1X[] = "hdr-need-1x";
+
 status_t QTIParameters::initialize(void *parametersParent,
-        sp<CameraDeviceBase> device, sp<CameraProviderManager> manager) {
+            sp<CameraDeviceBase> device, sp<CameraProviderManager> manager) {
     status_t res = OK;
 
     Parameters* ParentParams = (Parameters*)parametersParent;
@@ -199,6 +203,11 @@ status_t QTIParameters::initialize(void *parametersParent,
     ParentParams->params.set("ae-bracket-hdr-values","Off,AE-Bracket");
     ParentParams->params.set("ae-bracket-hdr","Off");
 
+    ParentParams->params.set(KEY_QTI_SUPPORTED_HDR_NEED_1X,"true,false");
+    ParentParams->params.set(KEY_QTI_HDR_NEED_1X,"false");
+    Hdr1xEnable = false;
+    HdrSceneEnable = false;
+
     // ISO
     // Get the supported sensitivity range from device3 static info
     camera_metadata_ro_entry_t availableSensitivityRange =
@@ -647,6 +656,24 @@ status_t QTIParameters::set(CameraParameters2& newParams, void *parametersParent
         ParentParams->qtiParams->hfrMode = false;
     }
 
+    //hdr_need_1x
+    const char *Hdr1x = newParams.get(KEY_QTI_HDR_NEED_1X);
+    const char *HdrSceneMode = newParams.get(CameraParameters::KEY_SCENE_MODE);
+    if(HdrSceneMode != NULL && !strcmp(HdrSceneMode, CameraParameters::SCENE_MODE_HDR)) {
+        HdrSceneEnable = true;
+    } else {
+        HdrSceneEnable = false;
+    }
+    if(Hdr1x != NULL && !strcmp(Hdr1x,"true")) {
+        Hdr1xEnable = true;
+    } else {
+        Hdr1xEnable = false;
+    }
+    if(HdrSceneEnable && Hdr1xEnable ) {
+        burstCount = 2;
+        newParams.set("num-snaps-per-shutter", String8::format("%d", burstCount));
+    }
+
     return res;
 }
 
@@ -804,6 +831,34 @@ status_t QTIParameters::updateRequestForQTICapture(Vector<CameraMetadata> *reque
 
     // Check if any Capture request settings need to be changed for QTI features
 
+    // For HDR need one extra frame.
+    if(Hdr1xEnable && HdrSceneEnable){
+        for (size_t i = 0; i < burstCount; i++) {
+            CameraMetadata &request = requests->editItemAt(i);
+            uint8_t reqSceneMode;
+            uint8_t reqControlMode;
+            if(i==0) {
+                reqSceneMode = ANDROID_CONTROL_SCENE_MODE_DISABLED;
+                reqControlMode = ANDROID_CONTROL_MODE_AUTO;
+            }
+            else {
+                reqSceneMode = ANDROID_CONTROL_SCENE_MODE_HDR;
+                reqControlMode = ANDROID_CONTROL_MODE_USE_SCENE_MODE;
+            }
+            res = request.update(ANDROID_CONTROL_MODE,
+                    &reqControlMode, 1);
+            if (res != OK) {
+                return res;
+            }
+
+            res = request.update(ANDROID_CONTROL_SCENE_MODE,
+                    &reqSceneMode, 1);
+            if (res != OK) {
+                return res;
+            }
+        }
+    }
+
     // For AE bracketing
     if (aeBracketEnable) {
         // If AE bracketing is enabled, then burstCount is the number of bracket values.
diff --git a/services/camera/libcameraservice/api1/qticlient2/QTIParameters.h b/services/camera/libcameraservice/api1/qticlient2/QTIParameters.h
index 5bfce5704..9b0883afd 100644
--- a/services/camera/libcameraservice/api1/qticlient2/QTIParameters.h
+++ b/services/camera/libcameraservice/api1/qticlient2/QTIParameters.h
@@ -105,6 +105,8 @@ public:
     bool hfrMode;
     int32_t hfrPreviewFpsRange[2];
     int32_t nonHfrPreviewFpsRange[2];
+    bool Hdr1xEnable;
+    bool HdrSceneEnable;
     // Sets up default QTI parameters
     status_t initialize(void *parametersParent, sp<CameraDeviceBase> device, sp<CameraProviderManager> manager);
     // Validate and update camera parameters based on new settings
-- 
2.17.1

