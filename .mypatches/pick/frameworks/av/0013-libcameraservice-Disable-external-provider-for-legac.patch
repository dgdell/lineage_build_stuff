From 1cb2a56c2a23cd288adb3fbfc7d69328a6b021df Mon Sep 17 00:00:00 2001
From: Adrian DC <radian.dc@gmail.com>
Date: Thu, 23 Aug 2018 01:19:44 +0200
Subject: [PATCH 13/13] libcameraservice: Disable external provider for legacy
 HAL1

 * The external camera provider was introduced by commit:
    Camera: listen to external camera provider
    Change-Id: I051c77d7b0fe1e0e3b3b2461e7f8da9bd91a440c

 * Enabling this on legacy HAL1 devices crashes the
    kernel video driver, while serving no purpose

 * Makes the original commit depend on the variable
    TARGET_HAS_LEGACY_CAMERA_HAL1 not being true

Change-Id: I954b550e3de848c2c315713f4340697c03878c3e
---
 .../camera/libcameraservice/common/CameraProviderManager.cpp  | 4 ++++
 1 file changed, 4 insertions(+)

diff --git a/services/camera/libcameraservice/common/CameraProviderManager.cpp b/services/camera/libcameraservice/common/CameraProviderManager.cpp
index 0ce4318e7..196c2a6d1 100644
--- a/services/camera/libcameraservice/common/CameraProviderManager.cpp
+++ b/services/camera/libcameraservice/common/CameraProviderManager.cpp
@@ -37,7 +37,9 @@ namespace {
 // Hardcoded name for the passthrough HAL implementation, since it can't be discovered via the
 // service manager
 const std::string kLegacyProviderName("legacy/0");
+#ifndef NO_CAMERA_SERVER
 const std::string kExternalProviderName("external/0");
+#endif
 
 } // anonymous namespace
 
@@ -69,7 +71,9 @@ status_t CameraProviderManager::initialize(wp<CameraProviderManager::StatusListe
 
     // See if there's a passthrough HAL, but let's not complain if there's not
     addProviderLocked(kLegacyProviderName, /*expected*/ false);
+#ifndef NO_CAMERA_SERVER
     addProviderLocked(kExternalProviderName, /*expected*/ false);
+#endif
 
     return OK;
 }
-- 
2.17.1

