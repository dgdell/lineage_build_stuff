From 68b2cc77b0666a029ef85ee84538ea048fcac8cb Mon Sep 17 00:00:00 2001
From: Artem Borisov <dedsa2002@gmail.com>
Date: Tue, 25 Sep 2018 12:39:22 +0300
Subject: [PATCH] CameraService: Support calling addStates in
 enumerateProviders

Some pre-P camera HALs trigger onDeviceStatusChange callback during HAL init.
This is horribly wrong and causes a race condition between enumerateProviders
and onDeviceStatusChange. While it wasn't really harmful in O, in P call sequence
was changed and now this race condition leads to two problems: null pointer dereference
in addStates because mFlashlight is not initialized at a proper timing; mServiceLock
deadlock because updateCameraNumAndIds and enumerateProviders are called at the same time.
Moving addStates back to enumerateProviders makes the sequence more similar to O, and doesn't
let these two issues to happen.
Enable TARGET_CAMERA_NEEDS_ADD_STATES_IN_ENUMERATE when it is necessary.

Change-Id: Ife25b9753fdb679ab0c77f385e1b8527551a4711
---
 services/camera/libcameraservice/Android.mk     |  4 ++++
 .../camera/libcameraservice/CameraService.cpp   | 17 +++++++++++++++++
 2 files changed, 21 insertions(+)

diff --git a/services/camera/libcameraservice/Android.mk b/services/camera/libcameraservice/Android.mk
index b279c660f..b5599a057 100644
--- a/services/camera/libcameraservice/Android.mk
+++ b/services/camera/libcameraservice/Android.mk
@@ -104,6 +104,10 @@ ifeq ($(TARGET_HAS_LEGACY_CAMERA_HAL1),true)
     LOCAL_CFLAGS += -DNO_CAMERA_SERVER
 endif
 
+ifneq ($(TARGET_CAMERA_NEEDS_ADD_STATES_IN_ENUMERATE),)
+    LOCAL_CFLAGS += -DCAMERA_NEEDS_ADD_STATES_IN_ENUMERATE
+endif
+
 LOCAL_MODULE:= libcameraservice
 
 include $(BUILD_SHARED_LIBRARY)
diff --git a/services/camera/libcameraservice/CameraService.cpp b/services/camera/libcameraservice/CameraService.cpp
index de0fac5db..9cabb6c94 100644
--- a/services/camera/libcameraservice/CameraService.cpp
+++ b/services/camera/libcameraservice/CameraService.cpp
@@ -181,6 +181,21 @@ status_t CameraService::enumerateProviders() {
 
     for (auto& cameraId : deviceIds) {
         String8 id8 = String8(cameraId.c_str());
+
+#ifdef CAMERA_NEEDS_ADD_STATES_IN_ENUMERATE
+        bool cameraFound = false;
+        {
+            Mutex::Autolock lock(mCameraStatesLock);
+            auto iter = mCameraStates.find(id8);
+            if (iter != mCameraStates.end()) {
+                cameraFound = true;
+            }
+        }
+        if (!cameraFound) {
+            addStates(id8);
+        }
+#endif
+
         onDeviceStatusChanged(id8, CameraDeviceStatus::PRESENT);
     }
 
@@ -279,8 +294,10 @@ void CameraService::onDeviceStatusChanged(const String8& id,
             ALOGI("%s: Unknown camera ID %s, a new camera is added",
                     __FUNCTION__, id.string());
 
+#ifndef CAMERA_NEEDS_ADD_STATES_IN_ENUMERATE
             // First add as absent to make sure clients are notified below
             addStates(id);
+#endif
 
             updateStatus(newStatus, id);
         } else {
-- 
2.17.1

