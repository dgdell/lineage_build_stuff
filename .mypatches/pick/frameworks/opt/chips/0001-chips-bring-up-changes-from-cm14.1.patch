From b7be7c7955f7525c5a1efa74df7b6afee47a0eb4 Mon Sep 17 00:00:00 2001
From: monojp <martin@herndl.org>
Date: Sat, 7 Apr 2018 20:06:31 +0200
Subject: [PATCH] chips: bring up changes from cm14.1

Includes the following commits:
809c590 d21f100 0bb674d de43fdb 2881980 d5ab0f3 6371987 f7dcdec
37883c5 9afa113 1e6a1b6 15d0cb0 ceccc06 3f29699 4794012 d906140
e7ada8c

Change-Id: I1b6930775cefda9db6c250b15d3cd631d9b63070
---
 .../ic_suggested_contact_add.png              | Bin 0 -> 1889 bytes
 .../ic_suggested_contact_delete.png           | Bin 0 -> 2018 bytes
 .../ic_suggested_contact_add.png              | Bin 0 -> 1276 bytes
 .../ic_suggested_contact_delete.png           | Bin 0 -> 1336 bytes
 .../ic_suggested_contact_add.png              | Bin 0 -> 2698 bytes
 .../ic_suggested_contact_delete.png           | Bin 0 -> 2949 bytes
 .../ic_suggested_contact_add.png              | Bin 0 -> 3559 bytes
 .../ic_suggested_contact_delete.png           | Bin 0 -> 3945 bytes
 .../ic_suggested_contact_add.png              | Bin 0 -> 5250 bytes
 .../ic_suggested_contact_delete.png           | Bin 0 -> 5810 bytes
 res/drawable/suggestion_button_bg.xml         |  19 ++
 ...s_autocomplete_recipient_dropdown_item.xml |  25 +-
 res/values/attrs.xml                          |   3 +-
 res/values/colors.xml                         |   1 +
 res/values/dimen.xml                          |   1 +
 res/values/styles.xml                         |  27 ++
 .../ex/chips/BaseRecipientAdapter.java        | 160 ++++++++++-
 .../ex/chips/DropdownChipLayouter.java        | 205 ++++++++++++-
 src/com/android/ex/chips/Queries.java         |   2 +-
 .../ex/chips/RecipientAlternatesAdapter.java  |  26 +-
 .../ex/chips/RecipientEditTextView.java       | 221 +++++++++++---
 src/com/android/ex/chips/RecipientEntry.java  |  32 ++-
 .../ex/chips/ResultAnimationDrawable.java     | 270 ++++++++++++++++++
 23 files changed, 934 insertions(+), 58 deletions(-)
 create mode 100644 res/drawable-hdpi/ic_suggested_contact_add.png
 create mode 100644 res/drawable-hdpi/ic_suggested_contact_delete.png
 create mode 100644 res/drawable-mdpi/ic_suggested_contact_add.png
 create mode 100644 res/drawable-mdpi/ic_suggested_contact_delete.png
 create mode 100644 res/drawable-xhdpi/ic_suggested_contact_add.png
 create mode 100644 res/drawable-xhdpi/ic_suggested_contact_delete.png
 create mode 100644 res/drawable-xxhdpi/ic_suggested_contact_add.png
 create mode 100644 res/drawable-xxhdpi/ic_suggested_contact_delete.png
 create mode 100644 res/drawable-xxxhdpi/ic_suggested_contact_add.png
 create mode 100644 res/drawable-xxxhdpi/ic_suggested_contact_delete.png
 create mode 100644 res/drawable/suggestion_button_bg.xml
 create mode 100644 src/com/android/ex/chips/ResultAnimationDrawable.java

diff --git a/res/drawable-hdpi/ic_suggested_contact_add.png b/res/drawable-hdpi/ic_suggested_contact_add.png
new file mode 100644
index 0000000000000000000000000000000000000000..e6fb9e065de81d6997bafb4d660da7b9170abf71
GIT binary patch
literal 1889
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
b|4;lIhI**wZ?Se%00000NkvXXu0mjf>8XlH

literal 0
HcmV?d00001

diff --git a/res/drawable-hdpi/ic_suggested_contact_delete.png b/res/drawable-hdpi/ic_suggested_contact_delete.png
new file mode 100644
index 0000000000000000000000000000000000000000..c23652b3a7dc422a8f8187dfe978eb093135db62
GIT binary patch
literal 2018
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
Ang9R*

literal 0
HcmV?d00001

diff --git a/res/drawable-mdpi/ic_suggested_contact_add.png b/res/drawable-mdpi/ic_suggested_contact_add.png
new file mode 100644
index 0000000000000000000000000000000000000000..a594633d214cf18dbc8c2fe0eff11e616b13fff9
GIT binary patch
literal 1276
zcmV<Y1OxktP)<h;3K|Lk000e1NJLTq001BW001Be1^@s6b9#F800004b3#c}2nYxW
zd<bNS00009a7bBm0002q0002q0p03@Y5)KL8FWQhbW?9;ba!ELWdL_~cP?peYja~^
zaAhuUa%Y?FJQ@H11bInBK~z|U<yX&d8)XoEv%B$+#aTIavq~r-X<B|)k&2>16gyE4
zpdt=%p$F7Mg+QE8BJ~Cmq5?G%e*y<U5#$~rAyps>S+_E&BSoSqs1+0_X_JuJ$lCSV
z?6*4{nwa%^?KmwtF{jncym@bD?C+Ze{_jS61>|zMhXIT+a~~1u00c8{646b^aTceh
zrvCcR1r!Pe)wb=o0GtHybemKMz#=n$n$2eCiO9Qe0gH=^r-*14z(bvg-7#jq%*->B
zlarV3Nx=E@=O0j2^%DTE?1ea}1HgxwOy=!Y-3S$s&*wGAalQg@yiM^NvMk>sBH3}A
zBSdtdP435;Oy+eW;$T2(lFTd#A?DkVJF2RFr|bGqI-MR*rBcu8x~_F~bzN*D;I&*X
z_fA-#Nq}J(?=ka>tt!Ri@r#K>ViLaY5mBV4r)ON2<;!hEoXzEOF9e+pBe-zk!jPgU
zKLLogC{omQJpmvR78F9P6^q4#ZA4s)$KyvwM@O9<M?(i>S^l66If&?wR^$MnD9S+q
zqK$w@ZQFjs@2Cqf45NpLPPPGqnd7^}s{oXCIRM@a6|g<`u3f-Kgb>$S1uK=x54+$2
zV8k$t;U)n9PILgKQmOPeGh4xc5MrZJsSJmKLafeJZx;~_b%JE(qgz{Bzp1La5{*U&
zh{&}p>vpwTeG)*j!y1R01ORxj6YzF{LCdlREvw#$L+$c|Mnv_0ihl%&y%f1mt8@7~
zumPaA6EqS1EJ@NGNs_7nB+v6y*LC{=^miy=y-5Hw-y));tq_tVt;FMTCl-r6Cd=|+
z0EdG)uIv73S=KMLT21%QImFhQ1OQkD@O&_nnb(ua<n3rQdd%;490!}5n~)?4{rz`e
zT$bftP1AY-uxXm#S1Oee0AXjxa{a}29*AfmB+*Q#)3qQu0Bme*;M}=$n4O&sdqYYj
z63-+OiR)oCg%Dpi3CLtJO8|cNXUejCRZ*0|FosS{Rn-vyTLJf%Q&UsbCIQ=b^;v(W
z>$=Bkwc3q)6=0g?RRI1yK@icq{+x!}uuv#;*|xn3;1QpDE0s!>6-5~~3<C=bcPHg}
z9%{8303aU!cg)k%(-;^SK($)EQZAPtN8=Cu^NERxQ-02d+i-Mr)bTv;G=QqleV|w@
z_FI;9$#q?}Z5y_2*U153$7kC%gb<=sDlL`E<)_ei(*7EWM9u`e6uOe-a=BNT`LkfW
zTrU4;nx;@yb*NM-b<fSsL6&9A%*;RtamO^xHC@-!kw_%C6O<)M8Xq4YzY^pMy*e|Q
z%)DV33V@H`+YdBNdqUGR06?WuSqIR^%-r4Gy~WJE$z(DeQf{4@UkW1!LRPXJ%Vx84
zMD!edr&a?{lKKFEh=`e6ouJE}=N+Gzm{@AXv+H-k>gsBwSS+3f@IC;2$8T8{R#sLZ
zNfO4!#)7cx0M2By*)Mjh-|?qeKA+cw5GR=VWg;45<~{(i?XU^pCV+2<XdxDhee2)*
m_RaG7yjCa_)O{z~Px}W8b-!jE-6L860000<MNUMnLSTZwSwZ9g

literal 0
HcmV?d00001

diff --git a/res/drawable-mdpi/ic_suggested_contact_delete.png b/res/drawable-mdpi/ic_suggested_contact_delete.png
new file mode 100644
index 0000000000000000000000000000000000000000..7a1753726114cfba7788ee13ea1d6192ec04b6b6
GIT binary patch
literal 1336
zcmV-81;_e{P)<h;3K|Lk000e1NJLTq001BW001Be1^@s6b9#F800004b3#c}2nYxW
zd<bNS00009a7bBm0002q0002q0p03@Y5)KL8FWQhbW?9;ba!ELWdL_~cP?peYja~^
zaAhuUa%Y?FJQ@H11hq*-K~z|U<yTK=9CZ}_-ppoqXIv-QrroAC+9WL%Yz)*aYMWV>
z9F$5f^<bfrLy(AvA_RI<5Q~D~q4ZdK&_F^!4}~HKMQb#>Eo+lv>A#qiwwk7GqPvqx
z*xBsv%<l8hW|_>+PPW#be5c{P?|a`j@3%Yi2Kc`RJuV@cOuhhMA2YWQQ3Qa+%zqKl
zUDGrtdV72I|J=aT)Rersy80o2LjYd!fSLd%n0YuBi;WRc`H2loOic6>(H8((>oL0)
z%sk1=L-Bb0!oM<b_UzebWLf?iz&np4?DPTPOI1}rsx=K)1F2L>F-`La0Izy9zaxs`
zeIgP~)7(Wwn?0~!sj50iMC>dGRhF3r%d*Bi#7$Y2e~CmQZOzTiJ)1UddOZ?}C=Cq_
z=RFL(mrN!<b}LjFNF)-UGIL+8PLd>@4~0T;*rrEB{%|<lBZ}grhlyj!Wb!R%a@`S(
zkB_(ce7@fS1Zp(VB9TZ4fZwfXS=K#G)3$q<n3W`{Ga8MWYl(Fe5JmBG4{;FDd@XSR
z@cDe(0azXecCW6kzHd)d3?veXFcBT{AcL8u4eEISJ}(S_4_pmAI`@VR$h$1dnyppL
z<#Jay-~&KcB9Z8*G63K}9b{TsS}HQL;Vf8|wV2E0I^0MuQPHZ5i-_9lVKQ@PI-UMg
zmgUQVK;U^IDjA0HAfL~_1fZ$T9_>{I06bR@`B8%%hGFb5jLIO|z3|Q;qRKzTegvV%
zY4U_o(Xvlq5x|yu*hF+o5QK~%2zdZPxm=b@rP4M4+v+s1P-TFb?-NmHEruWnmnBIu
zgTdg7qA2bJu+xbtl}djbhH<-4C`9b%>=O5?3;?(U;7uoznHQRxnjQoKfxR9L0RW;X
zZc!9v3joe$v%ltYxh?>1&yGu#8(X^|qBAbQY;$vS!7g4b7BM_Lj7%m|0nN<J;PmO!
zV6MFEC=?3477B%Ky7jay>&Gess;XWDFz2|V8$O?JhdnnsI*Q53Nt`%w0_k)b)6>&9
zdGaLAojZr|@$q#^vMhH2NIMLC-`m@pcbfnMIA%wdN~OJpLg9`**VosF#>Pfynug=Y
zkK@#-Qz#aT=;-Lc{{8#c-)c5{1Au)`u!!grJ7(R>NRp%x0QRvpEH5uVYgyLqwZzt~
zTQM{=1VvG>yu6HJv55Beb{si!1i@giLd@s$*K)bsZhL=b{zg^RnVJTo(WqH2mj?jk
zZRyRLrfo9};{qP8SXf+KgzX`OOeO<e*VjbMrKP2dD=RB|u>MK=hu`l%3P-rEWXWXm
zU1lD2)`{rq+}s?EjEw9tO_SQ%+Mw$?bX`X{94-wG4*n*~ato>#*cCw#dU|?#t~s@;
zHX;B}Rdo!&0Dyu$&&)4hxpJk`G)-!4Z7m!=e0Zk6zyFq^C}myO#o5`}sEhalGr!>`
zUULGrNyM1>TL3LK6G){}=<e=@-~Vto(KHS7^YiHH>T<TYR4$j_j>qG7YiVrwU2y&S
zb-$)*0{}h)5ZMU-C~g8c8jHog+Xz_qr&%hMQY_0lz|04UXdg4T09gCkX93&=@DmZ8
u2?m2d+xNbw7O7N9nVOoCpSsY~jDG;;C*1ed3)Wu%0000<MNUMnLSTYll4A$}

literal 0
HcmV?d00001

diff --git a/res/drawable-xhdpi/ic_suggested_contact_add.png b/res/drawable-xhdpi/ic_suggested_contact_add.png
new file mode 100644
index 0000000000000000000000000000000000000000..890d8765d2a3d7131be4027c48d588a71f7e9e63
GIT binary patch
literal 2698
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
Eg7q!>{{R30

literal 0
HcmV?d00001

diff --git a/res/drawable-xhdpi/ic_suggested_contact_delete.png b/res/drawable-xhdpi/ic_suggested_contact_delete.png
new file mode 100644
index 0000000000000000000000000000000000000000..1ad11052488c430dbb7508b08f68b86fdc7203ac
GIT binary patch
literal 2949
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

literal 0
HcmV?d00001

diff --git a/res/drawable-xxhdpi/ic_suggested_contact_add.png b/res/drawable-xxhdpi/ic_suggested_contact_add.png
new file mode 100644
index 0000000000000000000000000000000000000000..8b7bb852de113e4178c9443972193fc08464e20f
GIT binary patch
literal 3559
zcmV<D4H)u?P)<h;3K|Lk000e1NJLTq003YB003YJ1^@s6;+S_h00004b3#c}2nYxW
zd<bNS00009a7bBm0007*0007*0XEY|-v9sr8FWQhbW?9;ba!ELWdL_~cP?peYja~^
zaAhuUa%Y?FJQ@H14P;3~K~#90?VWva9OqrfzrSa9Z%>kSdWFP}3rXxI@oQRR$BA$6
zl$+Kal0q0@YKDdu%A`OC1`0!=lPRU;J!J|*nNDBQX_%pao4^2>j3G_KS*MdKQYR@f
zicMT6wo!s3=_H-*w0Eo9eSZ8Qwd2^jyM4X8Oz!ii?)kmw`QF|>`@H-X=+dQ2mo8np
zbm`Ki<xsm5XvV2ir?g6?aua}Ch-jyjvX_Vw0Qv!_06;`VW;U7G1aOIn&Q+_`?;bsR
zwAjwv-OzCYWV6{D6-Bw5h%(H4gotj$Mo0T#4#2a_d=kJ($8ny^WHNS0sfI#F2rw}*
zaWjAq0k|K)O%aAFG4tch{MB?ieUgY|gt1)FHUYBPtg5Q&`v80xz};=g<rN}&L`wO^
zbUHoX;@ID(<pMnU<dc29y}iE%;5PwW*XsD2um<4kMD)joVf;_4gSSioW)}H;{s92L
z4`5rX;(B0>nZK&*`X>$_K3r&3(3S|0&*u$h{yc#Ft%w(pRRDiz+xBN$al?*OfNVA!
z*EH=j%>1hWM3k{2;6DL;FqKNZ6lIXe1Q;J5-zS846u@m!#b^Ol03T1KQhyayfJg+$
z=kv#y`C$NwDEzm9FO^EA-?;bQd#$h?hc3Xx#KfNg_}#Gmb^y;X^N)o+WDQM#Y&NTE
zn)Wa=|3X+kJCHL(^rMDhTnfu!C^yDOAAM9&6y<MP*!eaQy-q}D0bIiRZ*?o!1z<dz
z&E6Q6!%(h(TrT$oBKnmueAR=9Ue`43Y;SMxkfv$7iRcaULsH5)(==bHR;vjq<*q1m
z0dP(TVI-5uxuA{$3y{y}Kh4aa4C<#IL{!vu{kcRUaR-1tH#U}Ky|l8jqA>H0sPY2v
zED>c4!zcxD5=ektF85&~`f?B-jUb})LqkKXs_IT3=5lFi={vPr?Lg>>ZNSXmxP1BY
zy~mCnbNu@7eGizNoO}lnea^3aGl=N)$jHcm&&~$`F*G!EARdoD7iwZxKt%7^x^?R(
z0{QS`G&MCf>^RQz0DdS)@Olu@#gUPbxDX<g$+}{(_?%@~QC$fVz<X1v)W7>N_H_l=
zw*5Io)cF8-U|?W2tj-63L?UrJ5xp9gzpD@c9?9i$Kj7Ec6Zw4pJ|eo`PcSzKA@Z?U
zEE%RxB2xPM`=cDHUJu|e{TO-@Ae+s`nfWjL1aiyZ;GnCKj#uLG_zog^B?{jFKt%7)
z=kqDAcAf-K6y=iuq8!?tS5@_$Q90LjeK{)M0En5ta^l1Z-HVZH0j8&?uOp(5de6%}
znx>scgfq19cs%Nbpj)<V+42D|2CfBITU+~W06m^l@<1#Wi*(IE)3nH!K#AzVY&Pq9
z7l*5VIGfFm646Ker{xYsQ9NC~ULhg?C`TCsz)h;E{;b=^t^`mN<(J@c8XyQlh*m6-
zMm}*zL?3h8wy6NjEQsirgQet-TCEo8J{@KTfT1X3Y{c1@%jH}RrJD+n%jFD2_t5nQ
z9LF)E^v}#S07{fGz6TM#-%Y!w0w{{|q2TGb!?LVMzn#@;^+J^XuY`#1pPHI#I%sJq
zz|71{jG2EbytEp_%=@L3f#=xkQK?i`qw;+<%se2aJld>XLjjhSmhM1n7uI`B(|kS(
z$5KkuahzMD@ZBJ0FaenP-QlI<j@8xGgUq}Xw%=m0cn%Ri$6O5&y{lQ9X7_-xkaBSi
z5sfS_FP{q2r)60eYPH&)Fnzk@w(05Vh7W&r1vqu;lm_6=&{J|jtyVi)E|<R<hA+o)
z3d_sOgYbXGAP7{e)zXa`)D@swt=<eE9(qbHF-<d5E|({Q_^@reP$(2?L^K#yUOw2}
z=)*=oK`p&uZGvK&W@>S9aU6i>S<Kbd)fbkQmU^&0SKm$=_G8`4Qc8L2#@tC;v2A;7
zZf<TR9*>Xr_4Vyl6lJ7dTV`g<vi`eND)lpSr|iV`Cjb$>J^WmJlc-j!W7TR^3L$1x
zRb5aNrAJj&DWy~$$En%2t=hJ|8^FGHCwmnQ`>~M#!y9uaorI85?pa$~Yj+-A=%1OH
ziS605XVawX-UFnR{n6$0)}mZ4*X_$jH{q@TAz_-PcL9VDTcSzlt%nf8*A>uF2b$l^
zXqr~5_gNzW0&P0&@&@YmWuu#L)N7}28H5mZ1!y!s(s5S+5v?%uWg$d`h}MJ<Rc6+h
zIWDD)0T^QDt?kb9D){i>!*##Rjh+Kuk0u}2%&Mw-LDzL#Rn>&5s@E%uvJFkvCpPB&
zXKmYFv@FZ6)oP>6yc6x2j01rAMl~rKB^BxU*iEohRefI9^;$e0->E3db^zPGIuSzj
z3L$RMGz~pH>(l?tytcNscDhojlq}1-m5Az2XGB25@&}CsXi41!B6^{(udfu3$KN4@
zh-CVkh+?{~@6+}5ZAX@6onKvDU9@d`A0nRdB_e+UD2j5%aeN>AXogf(b-cg7e^Ar3
z$o7KPL)Y~kx~}hF=3=Q-de*Y6z05oiMJ#4M+vxMUqoBL)y6ZJ&4!vlF5aOAEfq@r?
zhlexm==>`oqJcyrksKKr(PFXKG}bGpgo+U2bi>aZB*#LClOg7^(%0Ab)adBwL0#AP
zhUhmiLWthM!NEI+hK61zqVI<2+R}AB->5;ukpVOR2Y{arA(4y2!^118sy5vv(2Uck
zPviXg^Vj@c*LB=;&pm;BYnt}9(b3V`;^N{d$8in@a<<O&!Gi}IZZ>NufRyqnAp&n$
zJ~ui#+9QMrWuE@**|Ru#^5ivt-?C*(U;zMth_sQBk%Prz@fpjq?g;4asb&ot_U_o&
z*g0kna!Fdl!^34Egy-R8yGbMxhlCJ;MuN=zZ_U~?{dyD8*Zd}+Y1-3Ko_L88BBFtT
zfgmHJ7t`r<(<8D?1rS1f4S=7eF-{~BZ@O>(m1vrFeY0_VJ(&6L+_Y;dKr)#;58zu~
z6Ck436h-N@^;yrvVlhAaNm)^pa0CDVBKo|KB*4roe(X94DW#t?3r{4I$%}3px)LCn
zOdba?<0S)TzM)Vkobh7QX;iD#i?v$qM?9Lb5W;ow61P`?1n?P;i9kwuXQ@=mdbR5W
zY};Ngl}bbKcxsb~P9&4b@3?L6dXV4K)AJ7iJRfwfR4R8`mi1p=?b?Zy(pg?!E-<s#
zt@-RY&YyTO@TBhK<m7v#luvrg2>?(T92}gD#bR|gDZTvi%Q$}gcvDBkViD!?wd)%~
z2yETjd@W}0-o3c*zWeHa&dj{9urSNaZ)@u8S{_NIQorcMz|$f{GMW5FKA-<rX8s9p
zd7-CREdJo&;NTfe(>ASURjE|)>Z|_iX-Fwu*>Bs{@T|5h6bk2<+0VY%W!ttN^lIdJ
zo<U0a5hC(jm!FvjmX?-oGEH;Rt8FWgQWodu=PyYqeQio6qK{`Xnaf`7JPVLcr~eQB
z%TmV6<?>xCD=Xi`dYzq)pjNA0EEEcB%zUFy7f&aX$%p+I`kHAo4C6}xn*U(eiCL{y
z-(4sarlpio)$nl(m&@gEFD)%y$IQO!{Q$UZ+xE}-eHVf6sZP^09{}*8Uwg-Kjw~!J
z46m%Ld<#I`jZ0BsS=Ocb`T5sO(>w(K%aS$`9rN?k^F0C`02m)1-=`?bM9}3tB6?|V
zZqA&Vn!25u97>p-oyGk8wZ&@{MZy04&5s0Z-@d(g=+L2aj^i9az`Ci-{5$D%`p<*-
z2%~IeW@Fklj6xf)_V)Ik?d|QoT?jF{S%b$Od#vtyz(Wr`w5d~G-xhJYR4S2_GL-o#
zBKm8?Fn&F#pTK)%48zFg^ZB1==D$bqO1w9irg?*Dno<aHM%VR)cs#yMRn;9{PwPl2
z%a&!mRH;;`R;%4YL}8wo`Nw238A|P>P&O+WhVk`WF4s>)Uqm>y7=)B^SEW)xrBVSA
znL>yQilQu(N~IkDZn)aOaU8o?EKb?B-7lrwzHw7M0DQkpO(-z)<BsEeAgmVvg|=HP
zolbuxm&?6EME{JC&lWIquj4qo9mj#HZk{p`sg`9mJQ5lLpG~DwA0wjBjt+%dp(>qD
zKTSmM1rYj4_YUBX48sVu^MMFnD`FVNgl*gV0d(XOuU9tqM*VmymHNG~J0FPXy)Kzd
zX4baty8(O}9rVQOgGpw7XDXF?BB}t970JtFGIlDJ`V<lUB-U&EznNHL=07c!O79vQ
z8~fiV14aI3Bf~HrA08flJAjX3{S{H2&JzH3rPJvLqj+b`)wJ{|{M6LcZMJQHiiq9^
zpW@HX&SGxv+L}(9reWW{K+jk&F!LXz)9HT-;>0U$sYNh3Ir+m<%HIO;0D#_h<ZuN~
z5Ya=1VKm&s85M0U29eL_w@E4QC!!AmXyu08MF7W%=x+_fm~LU*YiNHpjtz3T+yNr`
z8D`E9(E)^C-S8rSaRC2PDwR&O;`iMR9V5V%OixcIHVPdjiD(xy?*?!)+>0^?V1|g!
zGV`~klqbi=#v-en9)yk*U^7mfIH4yJiJel)zN=qpE`%sDvni!CRaL!k<j9f5_Ga6q
hOP4NPx^(Gy{vVd({`Q_=-o^j`002ovPDHLkV1hph<s1M2

literal 0
HcmV?d00001

diff --git a/res/drawable-xxhdpi/ic_suggested_contact_delete.png b/res/drawable-xxhdpi/ic_suggested_contact_delete.png
new file mode 100644
index 0000000000000000000000000000000000000000..aba0596dcc34174a954303f7ff1aca7d2a4153c5
GIT binary patch
literal 3945
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
DOOJg?

literal 0
HcmV?d00001

diff --git a/res/drawable-xxxhdpi/ic_suggested_contact_add.png b/res/drawable-xxxhdpi/ic_suggested_contact_add.png
new file mode 100644
index 0000000000000000000000000000000000000000..231a585661387f710fb46381d1d418fac1428e17
GIT binary patch
literal 5250
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
R@&)e;0gR>|x>N%n`agGZ^?(2X

literal 0
HcmV?d00001

diff --git a/res/drawable-xxxhdpi/ic_suggested_contact_delete.png b/res/drawable-xxxhdpi/ic_suggested_contact_delete.png
new file mode 100644
index 0000000000000000000000000000000000000000..2287f0c6c3cf26b2e5be4c0845899323d9ceaabc
GIT binary patch
literal 5810
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

literal 0
HcmV?d00001

diff --git a/res/drawable/suggestion_button_bg.xml b/res/drawable/suggestion_button_bg.xml
new file mode 100644
index 0000000..708400c
--- /dev/null
+++ b/res/drawable/suggestion_button_bg.xml
@@ -0,0 +1,19 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!-- Copyright (C) 2014 The Android Open Source Project
+
+     Licensed under the Apache License, Version 2.0 (the "License");
+     you may not use this file except in compliance with the License.
+     You may obtain a copy of the License at
+
+          http://www.apache.org/licenses/LICENSE-2.0
+
+     Unless required by applicable law or agreed to in writing, software
+     distributed under the License is distributed on an "AS IS" BASIS,
+     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+     See the License for the specific language governing permissions and
+     limitations under the License.
+-->
+
+<ripple xmlns:android="http://schemas.android.com/apk/res/android"
+    android:color="#40000000">
+</ripple>
diff --git a/res/layout/chips_autocomplete_recipient_dropdown_item.xml b/res/layout/chips_autocomplete_recipient_dropdown_item.xml
index 127be4a..367f32a 100644
--- a/res/layout/chips_autocomplete_recipient_dropdown_item.xml
+++ b/res/layout/chips_autocomplete_recipient_dropdown_item.xml
@@ -39,7 +39,30 @@
 
         </LinearLayout>
 
-        <com.android.ex.chips.CircularImageView style="@style/ChipEndIconStyle" />
+        <FrameLayout
+            android:layout_width="wrap_content"
+            android:layout_height="wrap_content">
+            <LinearLayout
+                android:id="@+id/chips_recipients_icons_layout"
+                android:layout_width="wrap_content"
+                android:layout_height="wrap_content">
+
+                <com.android.ex.chips.CircularImageView style="@style/ChipEndIconStyle" />
+
+                <com.android.ex.chips.CircularImageView
+                    android:id="@+id/chip_suggested_contact_add"
+                    style="@style/ChipAddSuggestedIconStyle" />
+
+                <com.android.ex.chips.CircularImageView
+                    android:id="@+id/chip_suggested_contact_delete"
+                    style="@style/ChipDeleteSuggestedIconStyle" />
+            </LinearLayout>
+
+            <ImageView
+                android:id="@+id/chip_recipients_action_layout"
+                android:visibility="gone"
+                style="@style/ChipActionResultDrawableStyle"/>
+        </FrameLayout>
 
     </LinearLayout>
 
diff --git a/res/values/attrs.xml b/res/values/attrs.xml
index ddc69c7..e9eac11 100644
--- a/res/values/attrs.xml
+++ b/res/values/attrs.xml
@@ -32,5 +32,6 @@
         </attr>
         <attr name="unselectedChipBackgroundColor" format="color" />
         <attr name="unselectedChipTextColor" format="color" />
+        <attr name="maxChips" format="integer" />
     </declare-styleable>
-</resources>
\ No newline at end of file
+</resources>
diff --git a/res/values/colors.xml b/res/values/colors.xml
index 1f32b60..7ad73c4 100644
--- a/res/values/colors.xml
+++ b/res/values/colors.xml
@@ -31,4 +31,5 @@
     <color name="chips_dropdown_text_highlighted">#757575</color>
     <color name="chips_dropdown_permission_text">#4285f4</color>
 
+    <color name="chip_suggestion_action">#c3c3c3</color>
 </resources>
diff --git a/res/values/dimen.xml b/res/values/dimen.xml
index 6c56b30..ae19147 100644
--- a/res/values/dimen.xml
+++ b/res/values/dimen.xml
@@ -27,6 +27,7 @@
     <integer name="chips_max_lines">-1</integer>
 
     <!-- dropdown -->
+    <dimen name="chip_icon_margin_separator">5dp</dimen>
     <dimen name="chip_icon_margin_end">12dp</dimen>
     <dimen name="chip_dropdown_height">72dp</dimen>
     <dimen name="chip_custom_divider_height">0.5dp</dimen>
diff --git a/res/values/styles.xml b/res/values/styles.xml
index 60536ac..f2a6dd5 100644
--- a/res/values/styles.xml
+++ b/res/values/styles.xml
@@ -113,6 +113,33 @@
         <item name="android:layout_marginLeft">@dimen/chip_icon_margin_end</item>
     </style>
 
+    <style name="ChipSuggestedIconStyle">
+        <item name="android:layout_width">40dp</item>
+        <item name="android:layout_height">40dp</item>
+        <item name="android:layout_gravity">center_vertical</item>
+        <item name="android:scaleType">centerInside</item>
+        <item name="android:contentDescription">@null</item>
+        <item name="android:background">@drawable/suggestion_button_bg</item>
+    </style>
+
+    <style name="ChipAddSuggestedIconStyle" parent="@style/ChipSuggestedIconStyle">
+        <item name="android:src">@drawable/ic_suggested_contact_add</item>
+        <item name="android:layout_marginLeft">@dimen/chip_icon_margin_end</item>
+    </style>
+
+    <style name="ChipDeleteSuggestedIconStyle" parent="@style/ChipSuggestedIconStyle">
+        <item name="android:src">@drawable/ic_suggested_contact_delete</item>
+        <item name="android:layout_marginLeft">@dimen/chip_icon_margin_separator</item>
+    </style>
+
+    <style name="ChipActionResultDrawableStyle">
+        <item name="android:layout_width">32dp</item>
+        <item name="android:layout_height">32dp</item>
+        <item name="android:layout_gravity">center</item>
+        <item name="android:contentDescription">@null</item>
+        <item name="android:layout_marginLeft">@dimen/chip_icon_margin_end</item>
+    </style>
+
     <style name="ChipDeleteIconBaseStyle">
         <item name="android:id">@android:id/icon1</item>
         <item name="android:layout_width">36dp</item>
diff --git a/src/com/android/ex/chips/BaseRecipientAdapter.java b/src/com/android/ex/chips/BaseRecipientAdapter.java
index f39b016..d513641 100644
--- a/src/com/android/ex/chips/BaseRecipientAdapter.java
+++ b/src/com/android/ex/chips/BaseRecipientAdapter.java
@@ -43,6 +43,9 @@ import android.widget.Filterable;
 
 import com.android.ex.chips.ChipsUtil.PermissionsCheckListener;
 import com.android.ex.chips.DropdownChipLayouter.AdapterType;
+import com.android.ex.chips.DropdownChipLayouter.ChipAnimationCallback;
+import com.android.ex.chips.DropdownChipLayouter.ChipSuggestionsListener;
+import com.android.ex.chips.ResultAnimationDrawable.STATE;
 
 import java.util.ArrayList;
 import java.util.Collections;
@@ -98,6 +101,8 @@ public class BaseRecipientAdapter extends BaseAdapter implements Filterable, Acc
     public static final int QUERY_TYPE_EMAIL = 0;
     public static final int QUERY_TYPE_PHONE = 1;
 
+    static final int SUGGESTED_ENTRY_DESTINATION_TYPE = -99;
+
     private final Queries.Query mQueryMode;
     private final int mQueryType;
 
@@ -185,6 +190,18 @@ public class BaseRecipientAdapter extends BaseAdapter implements Filterable, Acc
         }
     }
 
+    /**
+     * A temporary entry linked with an extra suggestion contact
+     * @hide
+     */
+    protected static class SuggestionEntry extends TemporaryEntry {
+        public SuggestionEntry(long id, String displayName, String address,
+                String name, long contactId) {
+            super(name, address, SUGGESTED_ENTRY_DESTINATION_TYPE, displayName, contactId, null,
+                    id, null, ContactsContract.DisplayNameSources.STRUCTURED_NAME, null);
+        }
+    }
+
     /**
      * Used to pass results from {@link DefaultFilter#performFiltering(CharSequence)} to
      * {@link DefaultFilter#publishResults(CharSequence, android.widget.Filter.FilterResults)}
@@ -264,7 +281,12 @@ public class BaseRecipientAdapter extends BaseAdapter implements Filterable, Acc
                 defaultDirectoryCursor = doQuery(constraint, mPreferredMaxResultCount,
                         null /* directoryId */);
 
-                if (defaultDirectoryCursor == null) {
+                // Allow to load additional suggested entries
+                Set<SuggestionEntry> suggestedEntries = loadSuggestedEntries(constraint,
+                        mPreferredMaxResultCount);
+
+                if (defaultDirectoryCursor == null &&
+                        (suggestedEntries == null || suggestedEntries.size() == 0)) {
                     if (DEBUG) {
                         Log.w(TAG, "null cursor returned for default Email filter query.");
                     }
@@ -278,12 +300,21 @@ public class BaseRecipientAdapter extends BaseAdapter implements Filterable, Acc
                             new ArrayList<RecipientEntry>();
                     final Set<String> existingDestinations = new HashSet<String>();
 
-                    while (defaultDirectoryCursor.moveToNext()) {
-                        // Note: At this point each entry doesn't contain any photo
-                        // (thus getPhotoBytes() returns null).
-                        putOneEntry(new TemporaryEntry(defaultDirectoryCursor,
-                                null /* directoryId */),
-                                true, entryMap, nonAggregatedEntries, existingDestinations);
+                    if (suggestedEntries != null) {
+                        for (TemporaryEntry suggestedEntry : suggestedEntries) {
+                            putOneEntry(suggestedEntry, true, entryMap,
+                                    nonAggregatedEntries, existingDestinations);
+                        }
+                    }
+
+                    if (defaultDirectoryCursor != null) {
+                        while (defaultDirectoryCursor.moveToNext()) {
+                            // Note: At this point each entry doesn't contain any photo
+                            // (thus getPhotoBytes() returns null).
+                            putOneEntry(new TemporaryEntry(defaultDirectoryCursor,
+                                    null /* directoryId */),
+                                    true, entryMap, nonAggregatedEntries, existingDestinations);
+                        }
                     }
 
                     // We'll copy this result to mEntry in publicResults() (run in the UX thread).
@@ -502,6 +533,58 @@ public class BaseRecipientAdapter extends BaseAdapter implements Filterable, Acc
     protected final int mPreferredMaxResultCount;
     private DropdownChipLayouter mDropdownChipLayouter;
 
+    /** @hide **/
+    public class SuggestionAddCallback {
+        private final @SuppressWarnings("unused") RecipientEntry mEntry;
+        private final View mView;
+
+        public SuggestionAddCallback(RecipientEntry entry, View v) {
+            mEntry = entry;
+            mView = v;
+        }
+
+        public void onSucess() {
+            mDropdownChipLayouter.animateSuggestion(mView, new ChipAnimationCallback() {
+                @Override
+                public void onAnimationEnded() {
+                    getFilter().filter(mCurrentConstraint);
+                }
+            }, STATE.SUCCESS, false);
+        }
+
+        public void onFailed() {
+            mDropdownChipLayouter.animateSuggestion(mView, null, STATE.ERROR, true);
+        }
+    }
+
+    /** @hide **/
+    protected class SuggestionRemoveCallback {
+        private final RecipientEntry mEntry;
+        private final View mView;
+
+        public SuggestionRemoveCallback(RecipientEntry entry, View v) {
+            mEntry = entry;
+            mView = v;
+        }
+
+        public void onSucess() {
+            mDropdownChipLayouter.animateSuggestion(mView, new ChipAnimationCallback() {
+                @Override
+                public void onAnimationEnded() {
+                    mEntries.remove(mEntry);
+                    mEntriesUpdatedObserver.onChanged(mEntries);
+                    notifyDataSetChanged();
+
+                    getFilter().filter(mCurrentConstraint);
+                }
+            }, STATE.SUCCESS, false);
+        }
+
+        public void onFailed() {
+            mDropdownChipLayouter.animateSuggestion(mView, null, STATE.ERROR, true);
+        }
+    }
+
     /**
      * {@link #mEntries} is responsible for showing every result for this Adapter. To
      * construct it, we use {@link #mEntryMap}, {@link #mNonAggregatedEntries}, and
@@ -620,6 +703,17 @@ public class BaseRecipientAdapter extends BaseAdapter implements Filterable, Acc
     public void setDropdownChipLayouter(DropdownChipLayouter dropdownChipLayouter) {
         mDropdownChipLayouter = dropdownChipLayouter;
         mDropdownChipLayouter.setQuery(mQueryMode);
+        mDropdownChipLayouter.setSuggestionsListener(new ChipSuggestionsListener() {
+            @Override
+            public void onDeleteSuggestionRequest(RecipientEntry entry, View v) {
+                onDeleteSuggestion(entry, new SuggestionRemoveCallback(entry, v));
+            }
+
+            @Override
+            public void onAddSuggestionRequest(RecipientEntry entry, View v) {
+                onAddSuggestion(entry, new SuggestionAddCallback(entry, v));
+            }
+        });
     }
 
     public DropdownChipLayouter getDropdownChipLayouter() {
@@ -666,7 +760,13 @@ public class BaseRecipientAdapter extends BaseAdapter implements Filterable, Acc
     public void getMatchingRecipients(ArrayList<String> inAddresses,
             RecipientAlternatesAdapter.RecipientMatchCallback callback) {
         RecipientAlternatesAdapter.getMatchingRecipients(
-                getContext(), this, inAddresses, getAccount(), callback, mPermissionsCheckListener);
+                getContext(), this, inAddresses,
+                isPhoneQuery() ? QUERY_TYPE_PHONE : QUERY_TYPE_EMAIL,
+                getAccount(), callback, mPermissionsCheckListener);
+    }
+
+    protected boolean isPhoneQuery() {
+        return getQueryType() == BaseRecipientAdapter.QUERY_TYPE_PHONE;
     }
 
     /**
@@ -808,7 +908,9 @@ public class BaseRecipientAdapter extends BaseAdapter implements Filterable, Acc
             return;
         }
 
-        existingDestinations.add(entry.destination);
+        if (entry.destinationType != SUGGESTED_ENTRY_DESTINATION_TYPE) {
+            existingDestinations.add(entry.destination);
+        }
 
         if (!isAggregatedEntry) {
             nonAggregatedEntries.add(RecipientEntry.constructTopLevelEntry(
@@ -864,7 +966,10 @@ public class BaseRecipientAdapter extends BaseAdapter implements Filterable, Acc
                 RecipientEntry entry = entryList.get(i);
                 entries.add(entry);
                 mPhotoManager.populatePhotoBytesAsync(entry, this);
-                validEntryCount++;
+                if (entry.getDestinationType() != SUGGESTED_ENTRY_DESTINATION_TYPE) {
+                    // Will trim array later
+                    validEntryCount++;
+                }
             }
             if (validEntryCount > mPreferredMaxResultCount) {
                 break;
@@ -881,6 +986,26 @@ public class BaseRecipientAdapter extends BaseAdapter implements Filterable, Acc
             }
         }
 
+        // Now remove suggestion entries (present in local or external directories)
+        for (int i = entries.size() - 1; i >= 0; i--) {
+            RecipientEntry e1 = entries.get(i);
+            if (e1.getDestination() == null) {
+                continue;
+            }
+            for (int j = i - 1; j >= 0; j--) {
+                RecipientEntry e2 = entries.get(j);
+                if (e2.getDestination() == null) {
+                    continue;
+                }
+                if (e1.getDestination().equals(e2.getDestination())) {
+                    entries.remove(j);
+                }
+            }
+        }
+
+        if (entries.size() > mPreferredMaxResultCount) {
+            return entries.subList(0, mPreferredMaxResultCount);
+        }
         return entries;
     }
 
@@ -962,6 +1087,21 @@ public class BaseRecipientAdapter extends BaseAdapter implements Filterable, Acc
         return cursor;
     }
 
+    /** @hide **/
+    protected Set<SuggestionEntry> loadSuggestedEntries(CharSequence constraint, int maxResults) {
+        return new HashSet<>();
+    }
+
+    /** @hide **/
+    protected void onAddSuggestion(RecipientEntry entry, SuggestionAddCallback cb) {
+        cb.onSucess();
+    }
+
+    /** @hide **/
+    protected void onDeleteSuggestion(RecipientEntry entry, SuggestionRemoveCallback cb) {
+        cb.onSucess();
+    }
+
     // TODO: This won't be used at all. We should find better way to quit the thread..
     /*public void close() {
         mEntries = null;
diff --git a/src/com/android/ex/chips/DropdownChipLayouter.java b/src/com/android/ex/chips/DropdownChipLayouter.java
index 6ca3d0e..69d2d32 100644
--- a/src/com/android/ex/chips/DropdownChipLayouter.java
+++ b/src/com/android/ex/chips/DropdownChipLayouter.java
@@ -1,5 +1,9 @@
 package com.android.ex.chips;
 
+import android.animation.Animator;
+import android.animation.AnimatorSet;
+import android.animation.ObjectAnimator;
+import android.animation.Animator.AnimatorListener;
 import android.content.Context;
 import android.content.res.Resources;
 import android.graphics.Bitmap;
@@ -18,16 +22,22 @@ import android.text.SpannableStringBuilder;
 import android.text.Spanned;
 import android.text.TextUtils;
 import android.text.style.ForegroundColorSpan;
+import android.text.util.Rfc822Token;
 import android.text.util.Rfc822Tokenizer;
 import android.view.LayoutInflater;
 import android.view.View;
 import android.view.View.OnClickListener;
+import android.view.animation.LinearInterpolator;
 import android.view.ViewGroup;
 import android.view.ViewGroup.MarginLayoutParams;
 import android.widget.ImageView;
 import android.widget.TextView;
 
 import com.android.ex.chips.Queries.Query;
+import com.android.ex.chips.ResultAnimationDrawable.STATE;
+
+import java.util.ArrayList;
+import java.util.List;
 
 /**
  * A class that inflates and binds the views in the dropdown list from
@@ -64,6 +74,32 @@ public class DropdownChipLayouter {
     private final Context mContext;
     private ChipDeleteListener mDeleteListener;
     private PermissionRequestDismissedListener mPermissionRequestDismissedListener;
+
+    public interface ChipSuggestionsListener {
+        void onAddSuggestionRequest(RecipientEntry entry, View v);
+        void onDeleteSuggestionRequest(RecipientEntry entry, View v);
+    }
+
+    public interface ChipAnimationCallback {
+        void onAnimationEnded();
+    }
+
+    private final OnClickListener mSuggestionClickListener = new OnClickListener() {
+        @Override
+        public void onClick(View v) {
+            View parent = (View) v.getParent().getParent();
+            RecipientEntry entry = (RecipientEntry) v.getTag();
+
+            if (v.getId() == R.id.chip_suggested_contact_add) {
+                mSuggestionsListener.onAddSuggestionRequest(entry, parent);
+            } else if (v.getId() == R.id.chip_suggested_contact_delete) {
+                mSuggestionsListener.onDeleteSuggestionRequest(entry, parent);
+            }
+        }
+    };
+
+    private ChipSuggestionsListener mSuggestionsListener;
+
     private Query mQuery;
     private int mAutocompleteDividerMarginStart;
 
@@ -90,6 +126,120 @@ public class DropdownChipLayouter {
         mAutocompleteDividerMarginStart = autocompleteDividerMarginStart;
     }
 
+    public void setSuggestionsListener(ChipSuggestionsListener listener) {
+        mSuggestionsListener = listener;
+    }
+
+    void animateSuggestion(View v, final ChipAnimationCallback cb,
+            STATE state, final boolean backToView) {
+
+        View icons = v.findViewById(R.id.chips_recipients_icons_layout);
+        final ImageView action = (ImageView) v.findViewById(R.id.chip_recipients_action_layout);
+
+        int color = mContext.getResources().getColor(R.color.chip_suggestion_action);
+
+        final ResultAnimationDrawable dw = new ResultAnimationDrawable();
+        dw.setColors(color, color);
+        dw.setState(state);
+        dw.setInterpolation(0f);
+        dw.setDuration(250);
+        action.setImageDrawable(dw);
+
+        List<Animator> animators = new ArrayList<>();
+
+        // Fade the icons layout
+        Animator fadeOut1 = ObjectAnimator.ofFloat(icons, "alpha", 1.0f, 0.0f);
+        fadeOut1.setDuration(150);
+        fadeOut1.addListener(new AnimatorListener() {
+            @Override
+            public void onAnimationStart(Animator animation) {
+                action.setVisibility(View.GONE);
+                action.setAlpha(1f);
+            }
+
+            @Override
+            public void onAnimationRepeat(Animator animation) {
+            }
+
+            @Override
+            public void onAnimationEnd(Animator animation) {
+                action.setVisibility(View.VISIBLE);
+                dw.start(); // 250 milliseconds
+            }
+
+            @Override
+            public void onAnimationCancel(Animator animation) {
+            }
+        });
+        animators.add(fadeOut1);
+
+        if (backToView) {
+            // Fade out action
+            Animator fadeOut2 = ObjectAnimator.ofFloat(action, "alpha", 1.0f, 0.0f);
+            fadeOut2.setDuration(150);
+            fadeOut2.setStartDelay(650);
+            animators.add(fadeOut2);
+
+            // Fade in to icons
+            Animator fadeIn = ObjectAnimator.ofFloat(icons, "alpha", 0.0f, 1.0f);
+            fadeIn.setDuration(150);
+            fadeIn.addListener(new AnimatorListener() {
+                @Override
+                public void onAnimationStart(Animator animation) {
+                    action.setVisibility(View.GONE);
+                }
+
+                @Override
+                public void onAnimationRepeat(Animator animation) {
+                }
+
+                @Override
+                public void onAnimationEnd(Animator animation) {
+                    if (cb != null) {
+                        cb.onAnimationEnded();
+                    }
+                }
+
+                @Override
+                public void onAnimationCancel(Animator animation) {
+                }
+            });
+            animators.add(fadeIn);
+
+        } else {
+            // End animation (don't return to icons layout)
+            Animator end = ObjectAnimator.ofFloat(action, "alpha", 1.0f, 1.0f);
+            end.setDuration(150);
+            end.setStartDelay(650);
+            end.addListener(new AnimatorListener() {
+                @Override
+                public void onAnimationStart(Animator animation) {
+                }
+
+                @Override
+                public void onAnimationRepeat(Animator animation) {
+                }
+
+                @Override
+                public void onAnimationEnd(Animator animation) {
+                    if (cb != null) {
+                        cb.onAnimationEnded();
+                    }
+                }
+
+                @Override
+                public void onAnimationCancel(Animator animation) {
+                }
+            });
+            animators.add(end);
+        }
+
+        AnimatorSet set = new AnimatorSet();
+        set.setInterpolator(new LinearInterpolator());
+        set.playSequentially(animators);
+        set.start();
+    }
+
     /**
      * Layouts and binds recipient information to the view. If convertView is null, inflates a new
      * view with getItemLaytout().
@@ -166,7 +316,11 @@ public class DropdownChipLayouter {
                 break;
             case SINGLE_RECIPIENT:
                 if (!PhoneUtil.isPhoneNumber(entry.getDestination())) {
-                    destination = Rfc822Tokenizer.tokenize(entry.getDestination())[0].getAddress();
+                    Rfc822Token[] tokens = Rfc822Tokenizer.tokenize(entry.getDestination());
+
+                    if (tokens.length > 0) {
+                        destination = tokens[0].getAddress();
+                    }
                 }
                 destinationType = null;
         }
@@ -176,6 +330,27 @@ public class DropdownChipLayouter {
         bindTextToView(destination, viewHolder.destinationView);
         bindTextToView(destinationType, viewHolder.destinationTypeView);
         bindIconToView(showImage, entry, viewHolder.imageView, type);
+        if (entry.getDestinationType() == BaseRecipientAdapter.SUGGESTED_ENTRY_DESTINATION_TYPE) {
+            if (viewHolder.addSuggestionView != null) {
+                viewHolder.addSuggestionView.setTag(entry);
+                viewHolder.addSuggestionView.setVisibility(View.VISIBLE);
+            }
+            if (viewHolder.deleteSuggestionView != null) {
+                viewHolder.deleteSuggestionView.setTag(entry);
+                viewHolder.deleteSuggestionView.setVisibility(View.VISIBLE);
+            }
+            viewHolder.imageView.setVisibility(View.GONE);
+        } else {
+            bindIconToView(showImage, entry, viewHolder.imageView, type);
+
+            if (viewHolder.addSuggestionView != null) {
+                viewHolder.addSuggestionView.setVisibility(View.GONE);
+            }
+            if (viewHolder.deleteSuggestionView != null) {
+                viewHolder.deleteSuggestionView.setVisibility(View.GONE);
+            }
+            viewHolder.imageView.setVisibility(View.VISIBLE);
+        }
         bindDrawableToDeleteView(deleteDrawable, entry.getDisplayName(), viewHolder.deleteView);
         bindIndicatorToView(
                 entry.getIndicatorIconId(), entry.getIndicatorText(), viewHolder.indicatorView);
@@ -193,6 +368,16 @@ public class DropdownChipLayouter {
             setViewVisibility(viewHolder.permissionBottomDivider, View.VISIBLE);
         }
 
+        // Revert animations
+        if (viewHolder.iconsView != null) {
+            viewHolder.iconsView.setAlpha(1.0f);
+            viewHolder.iconsView.setVisibility(View.VISIBLE);
+        }
+        if (viewHolder.actionView != null) {
+            viewHolder.actionView.setAlpha(1.0f);
+            viewHolder.actionView.setVisibility(View.GONE);
+        }
+
         return itemView;
     }
 
@@ -269,6 +454,7 @@ public class DropdownChipLayouter {
                     break;
                 case SINGLE_RECIPIENT:
                 default:
+                    view.setImageResource(getDefaultPhotoResId());
                     break;
             }
             view.setVisibility(View.VISIBLE);
@@ -540,6 +726,10 @@ public class DropdownChipLayouter {
         public final TextView indicatorView;
         public final ImageView imageView;
         public final ImageView deleteView;
+        public final ImageView addSuggestionView;
+        public final ImageView deleteSuggestionView;
+        public final View iconsView;
+        public final View actionView;
         public final View topDivider;
         public final View bottomDivider;
         public final View permissionBottomDivider;
@@ -554,9 +744,9 @@ public class DropdownChipLayouter {
             destinationTypeView = (TextView) view.findViewById(getDestinationTypeResId());
             imageView = (ImageView) view.findViewById(getPhotoResId());
             deleteView = (ImageView) view.findViewById(getDeleteResId());
-            topDivider = view.findViewById(R.id.chip_autocomplete_top_divider);
 
             bottomDivider = view.findViewById(R.id.chip_autocomplete_bottom_divider);
+            topDivider = view.findViewById(R.id.chips_recipients_icons_layout);
             permissionBottomDivider = view.findViewById(R.id.chip_permission_bottom_divider);
 
             indicatorView = (TextView) view.findViewById(R.id.chip_indicator_text);
@@ -564,6 +754,17 @@ public class DropdownChipLayouter {
             permissionViewGroup = (ViewGroup) view.findViewById(getPermissionGroupResId());
             permissionRequestDismissView =
                     (ImageView) view.findViewById(getPermissionRequestDismissResId());
+
+            addSuggestionView = (ImageView) view.findViewById(R.id.chip_suggested_contact_add);
+            if (addSuggestionView != null) {
+                addSuggestionView.setOnClickListener(mSuggestionClickListener);
+            }
+            deleteSuggestionView = (ImageView) view.findViewById(R.id.chip_suggested_contact_delete);
+            if (deleteSuggestionView != null) {
+                deleteSuggestionView.setOnClickListener(mSuggestionClickListener);
+            }
+            iconsView = view.findViewById(R.id.chips_recipients_icons_layout);
+            actionView = view.findViewById(R.id.chip_recipients_action_layout);
         }
     }
 }
diff --git a/src/com/android/ex/chips/Queries.java b/src/com/android/ex/chips/Queries.java
index 1e66b96..3d22815 100644
--- a/src/com/android/ex/chips/Queries.java
+++ b/src/com/android/ex/chips/Queries.java
@@ -30,7 +30,7 @@ import android.provider.ContactsContract.Contacts;
 
     public static final Query PHONE = new Query(new String[] {
             Contacts.DISPLAY_NAME,                          // 0
-            Phone.NUMBER,                                   // 1
+            Phone.NORMALIZED_NUMBER,                        // 1
             Phone.TYPE,                                     // 2
             Phone.LABEL,                                    // 3
             Phone.CONTACT_ID,                               // 4
diff --git a/src/com/android/ex/chips/RecipientAlternatesAdapter.java b/src/com/android/ex/chips/RecipientAlternatesAdapter.java
index cc19700..fde3968 100644
--- a/src/com/android/ex/chips/RecipientAlternatesAdapter.java
+++ b/src/com/android/ex/chips/RecipientAlternatesAdapter.java
@@ -24,6 +24,7 @@ import android.graphics.drawable.StateListDrawable;
 import android.net.Uri;
 import android.provider.ContactsContract;
 import android.provider.ContactsContract.Contacts;
+import android.telephony.PhoneNumberUtils;
 import android.text.TextUtils;
 import android.text.util.Rfc822Token;
 import android.text.util.Rfc822Tokenizer;
@@ -41,6 +42,7 @@ import java.util.ArrayList;
 import java.util.HashMap;
 import java.util.HashSet;
 import java.util.List;
+import java.util.Locale;
 import java.util.Map;
 import java.util.Set;
 
@@ -106,8 +108,16 @@ public class RecipientAlternatesAdapter extends CursorAdapter {
         StringBuilder bindString = new StringBuilder();
         // Create the "?" string and set up arguments.
         for (int i = 0; i < addressesSize; i++) {
-            Rfc822Token[] tokens = Rfc822Tokenizer.tokenize(inAddresses.get(i).toLowerCase());
-            addresses.add(tokens.length > 0 ? tokens[0].getAddress() : inAddresses.get(i));
+            if (addressType == QUERY_TYPE_EMAIL) {
+                Rfc822Token[] tokens = Rfc822Tokenizer.tokenize(inAddresses.get(i).toLowerCase());
+                addresses.add(tokens.length > 0 ? tokens[0].getAddress() : inAddresses.get(i));
+            } else {
+                String number = PhoneNumberUtils.formatNumberToE164(inAddresses.get(i),
+                        Locale.getDefault().getCountry());
+                if (number != null) {
+                    addresses.add(number);
+                }
+            }
             bindString.append("?");
             if (i < addressesSize - 1) {
                 bindString.append(",");
@@ -415,7 +425,7 @@ public class RecipientAlternatesAdapter extends CursorAdapter {
         } else {
             projection = Queries.PHONE.getProjection();
 
-            if (lookupKey == null) {
+            if (directoryId == null || lookupKey == null) {
                 uri = Queries.PHONE.getContentUri();
                 desiredMimeType = null;
             } else {
@@ -441,10 +451,14 @@ public class RecipientAlternatesAdapter extends CursorAdapter {
             cursor = new MatrixCursor(projection);
         }
 
-        final Cursor resultCursor = removeUndesiredDestinations(cursor, desiredMimeType, lookupKey);
-        cursor.close();
+        if (cursor != null) {
+            final Cursor resultCursor = removeUndesiredDestinations(cursor,
+                    desiredMimeType, lookupKey);
+            cursor.close();
+            return resultCursor;
+        }
 
-        return resultCursor;
+        return cursor;
     }
 
     /**
diff --git a/src/com/android/ex/chips/RecipientEditTextView.java b/src/com/android/ex/chips/RecipientEditTextView.java
index d9655a5..0a46b3c 100644
--- a/src/com/android/ex/chips/RecipientEditTextView.java
+++ b/src/com/android/ex/chips/RecipientEditTextView.java
@@ -51,6 +51,7 @@ import android.os.Looper;
 import android.os.Message;
 import android.os.Parcelable;
 import android.support.annotation.NonNull;
+import android.telephony.PhoneNumberUtils;
 import android.text.Editable;
 import android.text.InputType;
 import android.text.Layout;
@@ -105,6 +106,7 @@ import java.util.Collections;
 import java.util.Comparator;
 import java.util.HashSet;
 import java.util.List;
+import java.util.Locale;
 import java.util.Map;
 import java.util.Set;
 
@@ -157,6 +159,7 @@ public class RecipientEditTextView extends MultiAutoCompleteTextView implements
     private boolean mDisableDelete;
     private int mMaxLines;
     private int mWarningIconHeight;
+    private int mMaxChipsParsed;
 
     /**
      * Enumerator for avatar position. See attr.xml for more details.
@@ -213,6 +216,23 @@ public class RecipientEditTextView extends MultiAutoCompleteTextView implements
 
     private boolean mAttachedToWindow;
 
+    public enum ScreenOrientation {
+        PORTRAIT,
+        LANDSCAPE,
+    }
+
+    private ScreenOrientation mOrientation = ScreenOrientation.PORTRAIT;
+
+    public ScreenOrientation getOrientation() {
+        return mOrientation;
+    }
+
+    public void setOrientation(ScreenOrientation orientation) {
+        mOrientation = orientation;
+    }
+
+    private boolean mAllSelected = false;
+
     private final Runnable mAddTextWatcher = new Runnable() {
         @Override
         public void run() {
@@ -537,6 +557,11 @@ public class RecipientEditTextView extends MultiAutoCompleteTextView implements
         // When selection changes, see if it is inside the chips area.
         // If so, move the cursor back after the chips again.
         // Only exception is when we change the selection due to a selected chip.
+        if (getOrientation() == ScreenOrientation.LANDSCAPE) {
+            if ((getText().length() != 0) && (getText().length() == (end - start))) {
+                mAllSelected = true;
+            }
+        }
         DrawableRecipientChip last = getLastChip();
         if (mSelectedChip == null && last != null && start < getSpannable().getSpanEnd(last)) {
             // Grab the last chip and set the cursor to after it.
@@ -727,8 +752,7 @@ public class RecipientEditTextView extends MultiAutoCompleteTextView implements
             return;
         }
         long contactId = mSelectedChip != null ? mSelectedChip.getEntry().getContactId() : -1;
-        if (mSelectedChip != null && contactId != RecipientEntry.INVALID_CONTACT
-                && (!isPhoneQuery() && contactId != RecipientEntry.GENERATED_CONTACT)) {
+        if (mSelectedChip != null && contactId != RecipientEntry.INVALID_CONTACT) {
             clearSelectedChip();
         } else {
             if (getWidth() <= 0) {
@@ -754,6 +778,17 @@ public class RecipientEditTextView extends MultiAutoCompleteTextView implements
                 postHandlePendingChips();
             } else {
                 Editable editable = getText();
+
+                // With the google Pinyin change, there is a space trailing in the text
+                // box for recipient. Because of this there are different values in "whatEnd"
+                // and "selEnd" variables (which should not be the case). This change just
+                // clears any white spaces. This change did not cause any side effects for
+                // other use cases.
+                if(editable.toString().trim().length() == 0) {
+                    editable = new SpannableStringBuilder(editable.toString().trim());
+                    setText(editable.toString());
+                }
+
                 int end = getSelectionEnd();
                 int start = mTokenizer.findTokenStart(editable, end);
                 DrawableRecipientChip[] chips =
@@ -896,6 +931,7 @@ public class RecipientEditTextView extends MultiAutoCompleteTextView implements
             // Draw the default chip background
             mWorkPaint.reset();
             mWorkPaint.setColor(backgroundColor);
+            mWorkPaint.setAntiAlias(true);
             final float radius = height / 2;
             canvas.drawRoundRect(new RectF(0, 0, width, height), radius, radius,
                     mWorkPaint);
@@ -1247,6 +1283,7 @@ public class RecipientEditTextView extends MultiAutoCompleteTextView implements
 
         mMaxLines = r.getInteger(R.integer.chips_max_lines);
         mLineSpacingExtra = r.getDimensionPixelOffset(R.dimen.line_spacing_extra);
+        mMaxChipsParsed = a.getInt(R.styleable.RecipientEditTextView_maxChips, MAX_CHIPS_PARSED);
 
         mUnselectedChipTextColor = a.getColor(
                 R.styleable.RecipientEditTextView_unselectedChipTextColor,
@@ -1354,7 +1391,7 @@ public class RecipientEditTextView extends MultiAutoCompleteTextView implements
         synchronized (mPendingChips) {
             Editable editable = getText();
             // Tokenize!
-            if (mPendingChipsCount <= MAX_CHIPS_PARSED) {
+            if (mPendingChipsCount <= mMaxChipsParsed) {
                 for (int i = 0; i < mPendingChips.size(); i++) {
                     String current = mPendingChips.get(i);
                     int tokenStart = editable.toString().indexOf(current);
@@ -1545,12 +1582,17 @@ public class RecipientEditTextView extends MultiAutoCompleteTextView implements
         return mValidator == null ? true : mValidator.isValid(text);
     }
 
-    private static String tokenizeAddress(String destination) {
-        Rfc822Token[] tokens = Rfc822Tokenizer.tokenize(destination);
-        if (tokens != null && tokens.length > 0) {
-            return tokens[0].getAddress();
+    private String tokenizeAddress(String destination) {
+        if (getAdapter().isPhoneQuery() && PhoneUtil.isPhoneNumber(destination)) {
+            return PhoneNumberUtils.formatNumberToE164(destination,
+                Locale.getDefault().getCountry());
+        } else {
+            Rfc822Token[] tokens = Rfc822Tokenizer.tokenize(destination);
+            if (tokens != null && tokens.length > 0) {
+                return tokens[0].getAddress();
+            }
+            return destination;
         }
-        return destination;
     }
 
     @Override
@@ -2281,6 +2323,41 @@ public class RecipientEditTextView extends MultiAutoCompleteTextView implements
         return end - start;
     }
 
+    /**
+     * @hide
+     */
+    public void onGroupItemClick(int position, RecipientEntry entry) {
+        if (position < 0) {
+            return;
+        }
+
+        final int charactersTyped = submitGroupMemberAtPosition(entry);
+        if (charactersTyped > -1 && mRecipientEntryItemClickedListener != null) {
+            mRecipientEntryItemClickedListener
+                    .onRecipientEntryItemClicked(charactersTyped, position);
+        }
+    }
+
+    private int submitGroupMemberAtPosition(RecipientEntry entry) {
+        if (entry == null) {
+            return -1;
+        }
+        clearComposingText();
+
+        int end = getSelectionEnd();
+        int start = mTokenizer.findTokenStart(getText(), end);
+
+        Editable editable = getText();
+        QwertyKeyListener.markAsReplaced(editable, start, end, "");
+        CharSequence chip = createChip(entry);
+        if (chip != null && start >= 0 && end >= 0) {
+            editable.replace(start, end, chip);
+        }
+        sanitizeBetween();
+
+        return end - start;
+    }
+
     private RecipientEntry createValidatedEntry(RecipientEntry item) {
         if (item == null) {
             return null;
@@ -2653,6 +2730,9 @@ public class RecipientEditTextView extends MultiAutoCompleteTextView implements
         }
         setCursorVisible(true);
         setSelection(editable.length());
+        if (mAddressPopup != null && mAddressPopup.isShowing()) {
+            mAddressPopup.dismiss();
+        }
         if (mAlternatesPopup != null && mAlternatesPopup.isShowing()) {
             mAlternatesPopup.dismiss();
         }
@@ -2856,23 +2936,70 @@ public class RecipientEditTextView extends MultiAutoCompleteTextView implements
                 // If the item deleted is a space, and the thing before the
                 // space is a chip, delete the entire span.
                 int selStart = getSelectionStart();
-                DrawableRecipientChip[] repl = getSpannable().getSpans(selStart, selStart,
-                        DrawableRecipientChip.class);
-                if (repl.length > 0) {
-                    // There is a chip there! Just remove it.
-                    DrawableRecipientChip toDelete = repl[0];
-                    Editable editable = getText();
-                    // Add the separator token.
-                    int deleteStart = editable.getSpanStart(toDelete);
-                    int deleteEnd = editable.getSpanEnd(toDelete) + 1;
-                    if (deleteEnd > editable.length()) {
-                        deleteEnd = editable.length();
+                if (getOrientation() == ScreenOrientation.PORTRAIT) {
+                    DrawableRecipientChip[] repl = getSpannable().getSpans(selStart, selStart,
+                            DrawableRecipientChip.class);
+                    if (repl.length > 0) {
+                        // There is a chip there! Just remove it.
+                        DrawableRecipientChip toDelete = repl[0];
+                        Editable editable = getText();
+                        // Add the separator token.
+                        int deleteStart = editable.getSpanStart(toDelete);
+                        int deleteEnd = editable.getSpanEnd(toDelete) + 1;
+                        if (deleteEnd > editable.length()) {
+                            deleteEnd = editable.length();
+                        }
+                        if (!mNoChipMode && mRecipientChipDeletedListener != null) {
+                            mRecipientChipDeletedListener
+                                    .onRecipientChipDeleted(toDelete.getEntry());
+                        }
+                        editable.removeSpan(toDelete);
+                        editable.delete(deleteStart, deleteEnd);
                     }
-                    if (!mNoChipMode && mRecipientChipDeletedListener != null) {
-                        mRecipientChipDeletedListener.onRecipientChipDeleted(toDelete.getEntry());
+                } else {
+                    if (mAllSelected) {
+                        DrawableRecipientChip[] repl = getSpannable().getSpans(0,
+                                getText().length(),
+                                DrawableRecipientChip.class);
+                        for (int i = 0; i < repl.length; i++) {
+                            DrawableRecipientChip toDelete = repl[i];
+                            Editable editable = getText();
+                            // Add the separator token.
+                            int deleteStart = editable.getSpanStart(toDelete);
+                            int deleteEnd = editable.getSpanEnd(toDelete) + 1;
+                            deleteStart = (deleteStart < 0) ? 0 : deleteStart;
+                            if (deleteEnd > editable.length()) {
+                                deleteEnd = editable.length();
+                            }
+                            if (!mNoChipMode && mRecipientChipDeletedListener != null) {
+                                mRecipientChipDeletedListener
+                                        .onRecipientChipDeleted(toDelete.getEntry());
+                            }
+                            editable.removeSpan(toDelete);
+                            editable.delete(deleteStart, deleteEnd);
+                        }
+                        mAllSelected = false;
+                    } else {
+                        DrawableRecipientChip[] repl = getSpannable().getSpans(selStart, selStart,
+                                DrawableRecipientChip.class);
+                        if (repl.length > 0) {
+                            // There is a chip there! Just remove it.
+                            DrawableRecipientChip toDelete = repl[0];
+                            Editable editable = getText();
+                            // Add the separator token.
+                            int deleteStart = editable.getSpanStart(toDelete);
+                            int deleteEnd = editable.getSpanEnd(toDelete) + 1;
+                            if (deleteEnd > editable.length()) {
+                                deleteEnd = editable.length();
+                            }
+                            if (!mNoChipMode && mRecipientChipDeletedListener != null) {
+                                mRecipientChipDeletedListener
+                                        .onRecipientChipDeleted(toDelete.getEntry());
+                            }
+                            editable.removeSpan(toDelete);
+                            editable.delete(deleteStart, deleteEnd);
+                        }
                     }
-                    editable.removeSpan(toDelete);
-                    editable.delete(deleteStart, deleteEnd);
                 }
             } else if (count > before) {
                 if (mSelectedChip != null
@@ -3242,16 +3369,19 @@ public class RecipientEditTextView extends MultiAutoCompleteTextView implements
                                         .getContactId())
                                         && getSpannable().getSpanStart(temp) != -1) {
                                     // Replace this.
-                                    final RecipientEntry entry = createValidatedEntry(entries
-                                            .get(tokenizeAddress(temp.getEntry().getDestination())
-                                                    .toLowerCase()));
-                                    if (entry != null) {
-                                        mHandler.post(new Runnable() {
-                                            @Override
-                                            public void run() {
-                                                replaceChip(temp, entry);
-                                            }
-                                        });
+                                    final String address = tokenizeAddress(
+                                            temp.getEntry().getDestination());
+                                    if (!TextUtils.isEmpty(address)) {
+                                        final RecipientEntry entry = createValidatedEntry(entries
+                                                .get(address.toLowerCase()));
+                                        if (entry != null) {
+                                            mHandler.post(new Runnable() {
+                                                @Override
+                                                public void run() {
+                                                    replaceChip(temp, entry);
+                                                }
+                                            });
+                                        }
                                     }
                                 }
                             }
@@ -3513,4 +3643,29 @@ public class RecipientEditTextView extends MultiAutoCompleteTextView implements
         float warningIconRight;
         float warningIconBottom;
     }
+
+    /**
+     * Get the current max chips limits.
+     * @return The value used to cap the number of contacts that this field will tokenize.
+     */
+    protected int getMaxChipsParsed() {
+        return mMaxChipsParsed;
+    }
+
+    /**
+     * Set the current max chips limit.
+     * @param maxChipsParsed - This value will cap the number of contacts that this field will
+     *                       tokenize.
+     */
+    protected void setMaxChipsParsed(int maxChipsParsed) {
+        mMaxChipsParsed = maxChipsParsed;
+    }
+
+    /**
+     * Get whether we are still tokenizing input
+     * @return true if still tokenizing contacts, false otherwise
+     */
+    protected boolean isChipping() {
+        return !mNoChipMode;
+    }
 }
diff --git a/src/com/android/ex/chips/RecipientEntry.java b/src/com/android/ex/chips/RecipientEntry.java
index 2669242..bd016b7 100644
--- a/src/com/android/ex/chips/RecipientEntry.java
+++ b/src/com/android/ex/chips/RecipientEntry.java
@@ -48,7 +48,12 @@ public class RecipientEntry {
      */
     public static final int ENTRY_TYPE_PERMISSION_REQUEST = 1;
 
-    public static final int ENTRY_TYPE_SIZE = 2;
+    /**
+     * @hide
+     */
+    public static final int ENTRY_TYPE_GROUP = 2;
+
+    public static final int ENTRY_TYPE_SIZE = 3;
 
     private final int mEntryType;
 
@@ -247,6 +252,19 @@ public class RecipientEntry {
         return (displayNameSource > DisplayNameSources.PHONE) ? displayName : destination;
     }
 
+    /**
+     * @hide
+     */
+    public static RecipientEntry constructTopLevelEntryForGroup(int entryType, String displayName,
+            int displayNameSource, String destination, int destinationType, String destinationLabel,
+            long contactId, Long directoryId, long dataId, String thumbnailUriAsString,
+            boolean isValid, String lookupKey) {
+        return new RecipientEntry(entryType, pickDisplayName(displayNameSource,
+                displayName, destination), destination, destinationType, destinationLabel,
+                contactId, directoryId, dataId, (thumbnailUriAsString != null
+                ? Uri.parse(thumbnailUriAsString) : null), true, isValid, lookupKey);
+    }
+
     public int getEntryType() {
         return mEntryType;
     }
@@ -256,7 +274,7 @@ public class RecipientEntry {
     }
 
     public String getDestination() {
-        return mDestination;
+        return mDestination != null ? mDestination.trim() : null;
     }
 
     public int getDestinationType() {
@@ -315,12 +333,18 @@ public class RecipientEntry {
     }
 
     public boolean isSelectable() {
-        return mEntryType == ENTRY_TYPE_PERSON || mEntryType == ENTRY_TYPE_PERMISSION_REQUEST;
+        return mEntryType == ENTRY_TYPE_PERSON || mEntryType == ENTRY_TYPE_PERMISSION_REQUEST
+                || mEntryType == ENTRY_TYPE_GROUP;
+    }
+
+    /** @hide **/
+    protected String getAddress() {
+        return mDisplayName + " <" + mDestination + ">";
     }
 
     @Override
     public String toString() {
-        return mDisplayName + " <" + mDestination + ">, isValid=" + mIsValid;
+        return getAddress() + ", isValid=" + mIsValid;
     }
 
     /**
diff --git a/src/com/android/ex/chips/ResultAnimationDrawable.java b/src/com/android/ex/chips/ResultAnimationDrawable.java
new file mode 100644
index 0000000..44f2cd0
--- /dev/null
+++ b/src/com/android/ex/chips/ResultAnimationDrawable.java
@@ -0,0 +1,270 @@
+/*
+ * Copyright (C) 2015 The CyanogenMod Project
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.android.ex.chips;
+
+import android.animation.ObjectAnimator;
+import android.graphics.Canvas;
+import android.graphics.Color;
+import android.graphics.ColorFilter;
+import android.graphics.Paint;
+import android.graphics.Path;
+import android.graphics.PixelFormat;
+import android.graphics.Rect;
+import android.graphics.RectF;
+import android.graphics.drawable.Animatable;
+import android.graphics.drawable.Drawable;
+import android.view.animation.AccelerateInterpolator;
+
+public class ResultAnimationDrawable extends Drawable implements Animatable {
+
+    private static final int DEFAULT_ANIMATION_DURATION = 350;
+
+    private static final float SCALE = 24.0f;
+    private static final float STROKE_WIDTH = 2.5f;
+
+    private static final RectF[] SUCCESS_PATH = new RectF[]{
+            new RectF(4.27f, 12.81f, 9.86f, 18.1f),
+            new RectF(9.86f, 18.1f, 20.14f, 6.15f)
+    };
+    private static final RectF[] ERROR_PATH = new RectF[]{
+            new RectF(5.90f, 5.85f, 18.20f, 18.05f),
+            new RectF(18.20f, 5.85f, 5.90f, 18.05f)
+    };
+
+    private static class InterpolationPath {
+        public final Paint mPaint;
+        public final RectF[] mOriginalPath;
+        public final RectF[] mPath;
+
+        private float[] mDistances;
+        private float mDistance;
+
+        private Path mDrawingPath = new Path();
+
+        private InterpolationPath(Paint paint, RectF[] path) {
+            mPaint = paint;
+            mOriginalPath = path;
+            mPath = new RectF[path.length];
+            int count = path.length;
+            for (int i = 0; i < count; i++) {
+                mPath[i] = new RectF();
+            }
+            compute(1.0f);
+            setInterpolation(0.0f);
+        }
+
+        void compute(float scale) {
+            int count = mPath.length;
+            mDistances = new float[count];
+            float distance = 0f;
+            for (int i = 0; i < count; i++) {
+                RectF r = mPath[i];
+                RectF r1 = mOriginalPath[i];
+                r.left = r1.left * scale;
+                r.top = r1.top * scale;
+                r.right = r1.right * scale;
+                r.bottom = r1.bottom * scale;
+
+                double x1 = mPath[i].left;
+                double x2 = mPath[i].width();
+                double y1 = mPath[i].top;
+                double y2 = mPath[i].height();
+                mDistances[i] = (float) Math.sqrt(Math.pow(x2 - x1, 2d) + Math.pow(y2 - y1, 2d));
+                distance += mDistances[i];
+            }
+            mDistance = distance;
+
+            mPaint.setStrokeWidth((int) (scale * STROKE_WIDTH));
+        }
+
+        public void setInterpolation(float delta) {
+            RectF lastRect = new RectF();
+            mDrawingPath.reset();
+
+            float currentDelta = delta;
+            if (currentDelta > 1f) {
+                currentDelta = 1f;
+            } else if (currentDelta < 0f) {
+                currentDelta = 0f;
+            }
+
+            float deltaDistance = mDistance * currentDelta;
+
+            int count = mPath.length;
+            float currentDistance = 0f;
+            for (int i = 0; i < count; i++) {
+                RectF r = mPath[i];
+                if (deltaDistance < currentDistance) {
+                    // not need to redraw the rest
+                    break;
+                }
+
+                // calculate delta position
+                float pathDistance = mDistances[i];
+                float nextPathDistance = currentDistance + pathDistance;
+                float d = deltaDistance <= nextPathDistance
+                        ? nextPathDistance - deltaDistance : 0;
+                float w = (d * r.width()) / pathDistance;
+                float h = (d * r.height()) / pathDistance;
+
+                // insert path
+                if (lastRect.right != r.left || lastRect.bottom != r.top) {
+                    mDrawingPath.moveTo(r.left, r.top);
+                }
+                mDrawingPath.lineTo(r.right - w, r.bottom - h);
+                lastRect = r;
+
+                currentDistance += pathDistance;
+            }
+        }
+
+        void draw(Canvas canvas) {
+           canvas.drawPath(mDrawingPath, mPaint);
+        }
+    }
+
+    public enum STATE {
+        SUCCESS,
+        ERROR
+    }
+
+    private final Paint mSuccessPaint;
+    private final Paint mErrorPaint;
+    private final InterpolationPath mSuccessInterpolation;
+    private final InterpolationPath mErrorInterpolation;
+    private InterpolationPath mCurrentInterpolation;
+
+    private STATE mCurrentState;
+
+    private float mInterpolation;
+
+    private final ObjectAnimator mAnimator;
+
+    public ResultAnimationDrawable() {
+        mInterpolation = 0.0f;
+
+        mAnimator = ObjectAnimator.ofFloat(this, "interpolation", 0.0f, 1.0f);
+        mAnimator.setDuration(DEFAULT_ANIMATION_DURATION);
+        mAnimator.setInterpolator(new AccelerateInterpolator());
+
+        mSuccessPaint = new Paint(Paint.ANTI_ALIAS_FLAG);
+        mSuccessPaint.setStrokeCap(Paint.Cap.BUTT);
+        mSuccessPaint.setColor(Color.WHITE);
+        mSuccessPaint.setStyle(Paint.Style.STROKE);
+        mErrorPaint = new Paint(mSuccessPaint);
+
+        mSuccessInterpolation = new InterpolationPath(mSuccessPaint, SUCCESS_PATH);
+        mErrorInterpolation = new InterpolationPath(mErrorPaint, ERROR_PATH);
+        setState(STATE.SUCCESS);
+    }
+
+    @Override
+    protected void onBoundsChange(Rect bounds) {
+        super.onBoundsChange(bounds);
+
+        float scale = bounds.width() / SCALE;
+        mCurrentInterpolation.compute(scale);
+        mCurrentInterpolation.setInterpolation(mInterpolation);
+    }
+
+    public void setColors(int success, int error) {
+        mSuccessPaint.setColor(success);
+        mErrorPaint.setColor(error);
+        invalidateSelf();
+    }
+
+    public void setState(STATE state) {
+        if (mCurrentState == state) {
+            return;
+        }
+
+        // reset the current state
+        reset();
+
+        mCurrentInterpolation = state == STATE.SUCCESS
+                ? mSuccessInterpolation : mErrorInterpolation;
+        mCurrentState = state;
+
+        float scale = getBounds().width() / SCALE;
+        mCurrentInterpolation.compute(scale);
+        mCurrentInterpolation.setInterpolation(mInterpolation);
+        invalidateSelf();
+    }
+
+    public float getInterpotation() {
+        return mInterpolation;
+    }
+
+    public void setInterpolation(float delta) {
+        mInterpolation = delta;
+        mCurrentInterpolation.setInterpolation(mInterpolation);
+        invalidateSelf();
+    }
+
+    public void setDuration(int duration) {
+        reset();
+        mAnimator.setDuration(duration);
+    }
+
+    @Override
+    public void draw(Canvas canvas) {
+        mCurrentInterpolation.draw(canvas);
+    }
+
+    @Override
+    public void setAlpha(int alpha) {
+        mSuccessPaint.setAlpha(alpha);
+        mErrorPaint.setAlpha(alpha);
+        invalidateSelf();
+    }
+
+    @Override
+    public void setColorFilter(ColorFilter cf) {
+        mSuccessPaint.setColorFilter(cf);
+        mErrorPaint.setColorFilter(cf);
+        invalidateSelf();
+    }
+
+    @Override
+    public int getOpacity() {
+        return PixelFormat.TRANSLUCENT;
+    }
+
+    @Override
+    public void start() {
+        if (!mAnimator.isRunning()) {
+            mAnimator.start();
+        }
+    }
+
+    @Override
+    public void stop() {
+        if (mAnimator.isRunning()) {
+            mAnimator.cancel();
+        }
+    }
+
+    @Override
+    public boolean isRunning() {
+        return mAnimator.isRunning();
+    }
+
+    public void reset() {
+        stop();
+        mInterpolation = 0.0f;
+    }
+}
-- 
2.17.0

