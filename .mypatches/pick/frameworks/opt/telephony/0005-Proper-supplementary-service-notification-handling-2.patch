From ab31621622023bd966116ae2fd28d6df809b8858 Mon Sep 17 00:00:00 2001
From: Danny Baumann <dannybaumann@web.de>
Date: Thu, 13 Nov 2014 14:30:37 +0100
Subject: [PATCH 5/5] Proper supplementary service notification handling (2/5).

Allow registering SSN listeners, and add missing constants.

Change-Id: I339a395fda5cca7617e7619cfc93312a1282f60e
---
 .../internal/telephony/CallManager.java       | 40 +++++++++++++++++++
 .../internal/telephony/CallTracker.java       |  1 +
 .../telephony/GsmCdmaCallTracker.java         | 22 ++++++++++
 .../internal/telephony/GsmCdmaConnection.java |  5 +++
 .../gsm/SuppServiceNotification.java          |  5 ++-
 5 files changed, 72 insertions(+), 1 deletion(-)

diff --git a/src/java/com/android/internal/telephony/CallManager.java b/src/java/com/android/internal/telephony/CallManager.java
index 2775fe67e..bc62a1708 100644
--- a/src/java/com/android/internal/telephony/CallManager.java
+++ b/src/java/com/android/internal/telephony/CallManager.java
@@ -85,6 +85,7 @@ public class CallManager {
     // FIXME Taken from klp-sprout-dev but setAudioMode was removed in L.
     //private static final int EVENT_RADIO_OFF_OR_NOT_AVAILABLE = 121;
     private static final int EVENT_TTY_MODE_RECEIVED = 122;
+    private static final int EVENT_SUPP_SERVICE_NOTIFY = 123;
 
     // Singleton instance
     private static final CallManager INSTANCE = new CallManager();
@@ -174,6 +175,9 @@ public class CallManager {
     protected final RegistrantList mSubscriptionInfoReadyRegistrants
     = new RegistrantList();
 
+    protected final RegistrantList mSuppServiceNotifyRegistrants
+    = new RegistrantList();
+
     protected final RegistrantList mSuppServiceFailedRegistrants
     = new RegistrantList();
 
@@ -607,6 +611,11 @@ public class CallManager {
         // FIXME Taken from klp-sprout-dev but setAudioMode was removed in L.
         //phone.registerForRadioOffOrNotAvailable(handler, EVENT_RADIO_OFF_OR_NOT_AVAILABLE, null);
 
+        // for events supported only by GSM phone
+        if (phone.getPhoneType() == PhoneConstants.PHONE_TYPE_GSM) {
+            phone.registerForSuppServiceNotification(handler, EVENT_SUPP_SERVICE_NOTIFY, null);
+        }
+
         // for events supported only by GSM, CDMA and IMS phone
         phone.setOnPostDialCharacter(handler, EVENT_POST_DIAL_CHARACTER, null);
 
@@ -651,6 +660,11 @@ public class CallManager {
         // FIXME Taken from klp-sprout-dev but setAudioMode was removed in L.
         //phone.unregisterForRadioOffOrNotAvailable(handler);
 
+        // for events supported only by GSM phone
+        if (phone.getPhoneType() == PhoneConstants.PHONE_TYPE_GSM) {
+            phone.unregisterForSuppServiceNotification(handler);
+        }
+
         // for events supported only by GSM, CDMA and IMS phone
         phone.setOnPostDialCharacter(null, EVENT_POST_DIAL_CHARACTER, null);
 
@@ -1540,6 +1554,28 @@ public class CallManager {
         mServiceStateChangedRegistrants.remove(h);
     }
 
+    /**
+     * Register for supplementary service notifications.
+     * Message.obj will contain an AsyncResult.
+     *
+     * @param h Handler that receives the notification message.
+     * @param what User-defined message code.
+     * @param obj User object.
+     */
+    public void registerForSuppServiceNotification(Handler h, int what, Object obj) {
+        mSuppServiceNotifyRegistrants.addUnique(h, what, obj);
+    }
+
+    /**
+     * Unregister for supplementary service notifications.
+     * Extraneous calls are tolerated silently
+     *
+     * @param h Handler to be removed from the registrant list.
+     */
+    public void unregisterForSuppServiceNotification(Handler h) {
+        mSuppServiceNotifyRegistrants.remove(h);
+    }
+
     /**
      * Register for notifications when a supplementary service attempt fails.
      * Message.obj will contain an AsyncResult.
@@ -2329,6 +2365,10 @@ public class CallManager {
                     if (VDBG) Rlog.d(LOG_TAG, " handleMessage (EVENT_SUBSCRIPTION_INFO_READY)");
                     mSubscriptionInfoReadyRegistrants.notifyRegistrants((AsyncResult) msg.obj);
                     break;
+                case EVENT_SUPP_SERVICE_NOTIFY:
+                    if (VDBG) Rlog.d(LOG_TAG, " handleMessage (EVENT_SUPP_SERVICE_NOTIFY)");
+                    mSuppServiceNotifyRegistrants.notifyRegistrants((AsyncResult) msg.obj);
+                    break;
                 case EVENT_SUPP_SERVICE_FAILED:
                     if (VDBG) Rlog.d(LOG_TAG, " handleMessage (EVENT_SUPP_SERVICE_FAILED)");
                     mSuppServiceFailedRegistrants.notifyRegistrants((AsyncResult) msg.obj);
diff --git a/src/java/com/android/internal/telephony/CallTracker.java b/src/java/com/android/internal/telephony/CallTracker.java
index 23874e265..73b119212 100644
--- a/src/java/com/android/internal/telephony/CallTracker.java
+++ b/src/java/com/android/internal/telephony/CallTracker.java
@@ -69,6 +69,7 @@ public abstract class CallTracker extends Handler {
     protected static final int EVENT_CALL_WAITING_INFO_CDMA        = 15;
     protected static final int EVENT_THREE_WAY_DIAL_L2_RESULT_CDMA = 16;
     protected static final int EVENT_THREE_WAY_DIAL_BLANK_FLASH    = 20;
+    protected static final int EVENT_SUPP_SERVICE_NOTIFY           = 21;
 
     protected void pollCallsWhenSafe() {
         mNeedsPoll = true;
diff --git a/src/java/com/android/internal/telephony/GsmCdmaCallTracker.java b/src/java/com/android/internal/telephony/GsmCdmaCallTracker.java
index e4e7f35b6..c000917de 100755
--- a/src/java/com/android/internal/telephony/GsmCdmaCallTracker.java
+++ b/src/java/com/android/internal/telephony/GsmCdmaCallTracker.java
@@ -42,6 +42,7 @@ import android.util.EventLog;
 
 import com.android.internal.annotations.VisibleForTesting;
 import com.android.internal.telephony.cdma.CdmaCallWaitingNotification;
+import com.android.internal.telephony.gsm.SuppServiceNotification;
 import com.android.internal.telephony.metrics.TelephonyMetrics;
 
 import java.io.FileDescriptor;
@@ -89,6 +90,7 @@ public class GsmCdmaCallTracker extends CallTracker {
     private GsmCdmaPhone mPhone;
 
     private boolean mDesiredMute = false;    // false = mute off
+    private boolean mNextGsmCallIsForwarded = false;
 
     public PhoneConstants.State mState = PhoneConstants.State.IDLE;
 
@@ -170,6 +172,7 @@ public class GsmCdmaCallTracker extends CallTracker {
         if (mPhone.isPhoneTypeGsm()) {
             mConnections = new GsmCdmaConnection[MAX_CONNECTIONS_GSM];
             mCi.unregisterForCallWaitingInfo(this);
+            mPhone.registerForSuppServiceNotification(this, EVENT_SUPP_SERVICE_NOTIFY, null);
             // Prior to phone switch to GSM, if CDMA has any emergency call
             // data will be in disabled state, after switching to GSM enable data.
             if (mIsInEmergencyCall) {
@@ -183,6 +186,7 @@ public class GsmCdmaCallTracker extends CallTracker {
             mIsEcmTimerCanceled = false;
             m3WayCallFlashDelay = 0;
             mCi.registerForCallWaitingInfo(this, EVENT_CALL_WAITING_INFO_CDMA, null);
+            mPhone.unregisterForSuppServiceNotification(this);
         }
     }
 
@@ -873,6 +877,9 @@ public class GsmCdmaCallTracker extends CallTracker {
                             } else {
                                 newUnknownConnectionCdma = mConnections[i];
                             }
+                        } else {
+                            mConnections[i].mIsForwarded = mNextGsmCallIsForwarded;
+                            mNextGsmCallIsForwarded = false;
                         }
                     }
                 }
@@ -1120,6 +1127,17 @@ public class GsmCdmaCallTracker extends CallTracker {
         pollCallsWhenSafe();
     }
 
+    private void handleSuppServiceNotification(AsyncResult asyncResult) {
+        SuppServiceNotification ssn = (SuppServiceNotification) asyncResult.result;
+
+        if (ssn.notificationType == SuppServiceNotification.NOTIFICATION_TYPE_MT) {
+            if (ssn.code == SuppServiceNotification.MT_CODE_FORWARDED_CALL
+                    || ssn.code == SuppServiceNotification.MT_CODE_DEFLECTED_CALL) {
+                mNextGsmCallIsForwarded = true;
+            }
+        }
+    }
+
     private void dumpState() {
         List l;
 
@@ -1486,6 +1504,10 @@ public class GsmCdmaCallTracker extends CallTracker {
                 handleRadioNotAvailable();
             break;
 
+            case EVENT_SUPP_SERVICE_NOTIFY:
+                handleSuppServiceNotification((AsyncResult) msg.obj);
+            break;
+
             case EVENT_EXIT_ECM_RESPONSE_CDMA:
                 if (!isPhoneTypeGsm()) {
                     // no matter the result, we still do the same here
diff --git a/src/java/com/android/internal/telephony/GsmCdmaConnection.java b/src/java/com/android/internal/telephony/GsmCdmaConnection.java
index 330e50ba8..644751a51 100644
--- a/src/java/com/android/internal/telephony/GsmCdmaConnection.java
+++ b/src/java/com/android/internal/telephony/GsmCdmaConnection.java
@@ -50,6 +50,7 @@ public class GsmCdmaConnection extends Connection {
     GsmCdmaCall mParent;
 
     boolean mDisconnected;
+    boolean mIsForwarded;
 
     int mIndex;          // index in GsmCdmaCallTracker.connections[], -1 if unassigned
                         // The GsmCdma index is 1 + this
@@ -1111,4 +1112,8 @@ public class GsmCdmaConnection extends Connection {
 
         return false;
     }
+
+    public boolean isForwarded() {
+        return mIsForwarded;
+    }
 }
diff --git a/src/java/com/android/internal/telephony/gsm/SuppServiceNotification.java b/src/java/com/android/internal/telephony/gsm/SuppServiceNotification.java
index 8b64ade9b..7eba636e0 100644
--- a/src/java/com/android/internal/telephony/gsm/SuppServiceNotification.java
+++ b/src/java/com/android/internal/telephony/gsm/SuppServiceNotification.java
@@ -38,6 +38,9 @@ public class SuppServiceNotification {
     /** List of forwarded numbers, if any */
     public String[] history;
 
+    static public final int NOTIFICATION_TYPE_MO = 0;
+    static public final int NOTIFICATION_TYPE_MT = 1;
+
     static public final int MO_CODE_UNCONDITIONAL_CF_ACTIVE     = 0;
     static public final int MO_CODE_SOME_CF_ACTIVE              = 1;
     static public final int MO_CODE_CALL_FORWARDED              = 2;
@@ -64,7 +67,7 @@ public class SuppServiceNotification {
     public String toString()
     {
         return super.toString() + " mobile"
-            + (notificationType == 0 ? " originated " : " terminated ")
+            + (notificationType == NOTIFICATION_TYPE_MO ? " originated " : " terminated ")
             + " code: " + code
             + " index: " + index
             + " history: " + history
-- 
2.17.1

