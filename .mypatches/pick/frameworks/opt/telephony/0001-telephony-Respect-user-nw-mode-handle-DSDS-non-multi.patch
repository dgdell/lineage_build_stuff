From 95f6e61e2d8c0949b6b8e339d663184398cebaed Mon Sep 17 00:00:00 2001
From: Adnan Begovic <adnan@cyngn.com>
Date: Thu, 17 Dec 2015 14:00:17 -0800
Subject: [PATCH 1/6] telephony: Respect user nw mode, handle DSDS
 non-multi-rat.

Change-Id: I2244729de6297e423a4c467fc66910895589508b
---
 .../telephony/SubscriptionController.java     |  21 +++
 .../telephony/SubscriptionInfoUpdater.java    | 129 ++++++++++++------
 2 files changed, 106 insertions(+), 44 deletions(-)

diff --git a/src/java/com/android/internal/telephony/SubscriptionController.java b/src/java/com/android/internal/telephony/SubscriptionController.java
index 69ca8335f..2d9dd4a91 100644
--- a/src/java/com/android/internal/telephony/SubscriptionController.java
+++ b/src/java/com/android/internal/telephony/SubscriptionController.java
@@ -31,6 +31,7 @@ import android.os.Binder;
 import android.os.RemoteException;
 import android.os.ServiceManager;
 import android.os.UserHandle;
+import android.provider.BaseColumns;
 import android.provider.Settings;
 import android.telephony.RadioAccessFamily;
 import android.telephony.Rlog;
@@ -2011,6 +2012,26 @@ public class SubscriptionController extends ISub.Stub {
         Binder.restoreCallingIdentity(token);
     }
 
+    /* {@hide} */
+    public void setUserNwMode(int subId, int nwMode) {
+        logd("setUserNwMode, nwMode: " + nwMode + " subId: " + subId);
+        ContentValues value = new ContentValues(1);
+        value.put(SubscriptionManager.USER_NETWORK_MODE, nwMode);
+        mContext.getContentResolver().update(SubscriptionManager.CONTENT_URI,
+                value, BaseColumns._ID + "=" + Integer.toString(subId), null);
+    }
+
+    /* {@hide} */
+    public int getUserNwMode(int subId) {
+        SubscriptionInfo subInfo = getActiveSubscriptionInfo(subId, mContext.getOpPackageName());
+        if (subInfo != null)  {
+            return subInfo.mUserNwMode;
+        } else {
+            loge("getUserNwMode: invalid subId = " + subId);
+            return SubscriptionManager.DEFAULT_NW_MODE;
+        }
+    }
+
     /**
      * Store properties associated with SubscriptionInfo in database
      * @param subId Subscription Id of Subscription
diff --git a/src/java/com/android/internal/telephony/SubscriptionInfoUpdater.java b/src/java/com/android/internal/telephony/SubscriptionInfoUpdater.java
index 6fe157de8..90bbc3201 100644
--- a/src/java/com/android/internal/telephony/SubscriptionInfoUpdater.java
+++ b/src/java/com/android/internal/telephony/SubscriptionInfoUpdater.java
@@ -34,6 +34,7 @@ import android.os.Looper;
 import android.os.Message;
 import android.os.RemoteException;
 import android.os.ServiceManager;
+import android.os.SystemProperties;
 import android.preference.PreferenceManager;
 import android.provider.Settings;
 import android.provider.Settings.SettingNotFoundException;
@@ -70,6 +71,8 @@ public class SubscriptionInfoUpdater extends Handler {
     private static final String LOG_TAG = "SubscriptionInfoUpdater";
     private static final int PROJECT_SIM_NUM = TelephonyManager.getDefault().getPhoneCount();
 
+    private static final boolean DBG = false;
+
     protected static final int EVENT_SIM_LOCKED_QUERY_ICCID_DONE = 1;
     private static final int EVENT_GET_NETWORK_SELECTION_MODE_DONE = 2;
     private static final int EVENT_SIM_LOADED = 3;
@@ -470,57 +473,95 @@ public class SubscriptionInfoUpdater extends Handler {
                 int storedSubId = sp.getInt(CURR_SUBID + slotId, -1);
 
                 if (storedSubId != subId) {
-                    int networkType = RILConstants.PREFERRED_NETWORK_MODE;
-
-                    // when known SIM inserted in another slot for which subId already
-                    // assigned, use the N/W mode which assigned to it.
-                    try {
-                        networkType  = android.provider.Settings.Global.getInt(
-                                mContext.getContentResolver(),
-                                Settings.Global.PREFERRED_NETWORK_MODE + subId);
-                    } catch (SettingNotFoundException snfe) {
-                        logd("Settings Exception reading value at subid for "+
-                                " Settings.Global.PREFERRED_NETWORK_MODE");
-                        // Get previous network mode for this slot,
-                        // to be more relevant instead of default mode
-                        try {
-                            networkType  = TelephonyManager.getIntAtIndex(
-                                   mContext.getContentResolver(),
-                                   Settings.Global.PREFERRED_NETWORK_MODE, slotId);
-                        } catch (SettingNotFoundException retrySnfe) {
-                            Rlog.e(LOG_TAG, "Settings Exception Reading Value At Index for"+
-                                   " Settings.Global.PREFERRED_NETWORK_MODE");
-                        }
-                    }
-
-                    // Set the modem network mode
-                    mPhone[slotId].setPreferredNetworkType(networkType, null);
-                    Settings.Global.putInt(mPhone[slotId].getContext().getContentResolver(),
-                            Settings.Global.PREFERRED_NETWORK_MODE + subId,
-                            networkType);
-
-                    // Only support automatic selection mode on SIM change.
-                    mPhone[slotId].getNetworkSelectionMode(
-                            obtainMessage(EVENT_GET_NETWORK_SELECTION_MODE_DONE,
-                            new Integer(slotId)));
-
-                    // Update stored subId
-                    SharedPreferences.Editor editor = sp.edit();
-                    editor.putInt(CURR_SUBID + slotId, subId);
-                    editor.apply();
+                    setDefaultDataSubNetworkType(slotId, subId);
+                    broadcastSimStateChanged(slotId, IccCardConstants.INTENT_VALUE_ICC_LOADED, null);
+                    updateCarrierServices(slotId, IccCardConstants.INTENT_VALUE_ICC_LOADED);
                 }
+            }
+        }
+    }
 
-                // Update set of enabled carrier apps now that the privilege rules may have changed.
-                CarrierAppUtils.disableCarrierAppsUntilPrivileged(mContext.getOpPackageName(),
-                        mPackageManager, TelephonyManager.getDefault(),
-                        mContext.getContentResolver(), mCurrentlyActiveUserId);
+    private void setDefaultDataSubNetworkType(int slotId, int subId) {
+        if (subId == SubscriptionManager.DEFAULT_SUBSCRIPTION_ID) {
+            Rlog.e(LOG_TAG, "setDefaultDataSubNetworkType called with DEFAULT_SUB_ID");
+            return;
+        }
 
-                broadcastSimStateChanged(slotId, IccCardConstants.INTENT_VALUE_ICC_LOADED, null);
-                updateCarrierServices(slotId, IccCardConstants.INTENT_VALUE_ICC_LOADED);
+        int networkType = RILConstants.PREFERRED_NETWORK_MODE;
+        //Get previous network mode for this slot,
+        //to be more relevant instead of default mode
+        try {
+            networkType  = android.provider.Settings.Global.getInt(
+                    mContext.getContentResolver(),
+                    Settings.Global.PREFERRED_NETWORK_MODE + subId);
+        } catch (SettingNotFoundException snfe) {
+
+            logd("Settings Exception reading value at subid for"+
+                    " Settings.Global.PREFERRED_NETWORK_MODE");
+            try {
+                networkType  = TelephonyManager.getIntAtIndex(
+                        mContext.getContentResolver(),
+                        Settings.Global.PREFERRED_NETWORK_MODE, slotId);
+            } catch (SettingNotFoundException retrySnfe) {
+                Rlog.d(LOG_TAG, "Settings Exception Reading Value At Index for"+
+                        " Settings.Global.PREFERRED_NETWORK_MODE");
             }
         }
+
+        // Get users NW type, let it override if its not the default NW mode (-1)
+        int userNwType = SubscriptionController.getInstance().getUserNwMode(subId);
+        if (userNwType != SubscriptionManager.DEFAULT_NW_MODE && userNwType != networkType) {
+            networkType = userNwType;
+        }
+        boolean isDsds = TelephonyManager.getDefault().getMultiSimConfiguration()
+                == TelephonyManager.MultiSimVariants.DSDS;
+        if (DBG) Rlog.d(LOG_TAG, "[setDefaultDataSubNetworkType] subId=" + subId);
+        if (DBG) Rlog.d(LOG_TAG, "[setDefaultDataSubNetworkType] isDSDS=" + isDsds);
+        boolean isMultiRat = SystemProperties.getBoolean("ro.ril.multi_rat_capable", false);
+
+        if (isDsds && !isMultiRat) {
+            int networkType2 = Phone.NT_MODE_GSM_ONLY; // Hardcoded due to modem limitation
+            int slotId1 = SubscriptionManager.DEFAULT_SIM_SLOT_INDEX;
+            int slotId2 = SubscriptionManager.DEFAULT_SIM_SLOT_INDEX;
+            int subId1 = SubscriptionManager.DEFAULT_SUBSCRIPTION_ID;
+            int subId2 = SubscriptionManager.DEFAULT_SUBSCRIPTION_ID;
+            // Since this is DSDS, there are 2 phones
+            for (int targetSlotId = 0; targetSlotId < PROJECT_SIM_NUM; targetSlotId++) {
+                Phone phone = mPhone[targetSlotId];
+                int id = phone.getSubId();
+
+                if (id == subId) {
+                    slotId1 = targetSlotId;
+                    subId1 = id;
+                    if (DBG) Rlog.d(LOG_TAG, "[setDefaultDataSubNetworkType] networkType1: "
+                            + networkType + ", slotId1: " + slotId1);
+                } else {
+                    subId2 = id;
+                    slotId2 = targetSlotId;
+                    if (DBG) Rlog.d(LOG_TAG, "[setDefaultDataSubNetworkType] networkType2: "
+                            + networkType2 + ", slotId2: " + slotId2);
+                }
+            }
+            setPreferredNwModeForSlot(slotId1, subId1, networkType);
+            setPreferredNwModeForSlot(slotId2, subId2, networkType2);
+        } else {
+            // Set the modem network mode
+            setPreferredNwModeForSlot(slotId, subId, networkType);
+        }
+
+        // Only support automatic selection mode on SIM change.
+        mPhone[slotId].getNetworkSelectionMode(
+                obtainMessage(EVENT_GET_NETWORK_SELECTION_MODE_DONE, new Integer(slotId)));
     }
 
+    private void setPreferredNwModeForSlot(int slotId, int subId, int networkType) {
+        mPhone[slotId].setPreferredNetworkType(networkType, null);
+        Settings.Global.putInt(mPhone[slotId].getContext().getContentResolver(),
+                Settings.Global.PREFERRED_NETWORK_MODE + subId,
+                networkType);
+    }
+
+
     private void updateCarrierServices(int slotId, String simState) {
         CarrierConfigManager configManager = (CarrierConfigManager)
                 mContext.getSystemService(Context.CARRIER_CONFIG_SERVICE);
-- 
2.17.0

