From 3ef533cc473276f668e3483f699e20efa90f40a4 Mon Sep 17 00:00:00 2001
From: Adrian DC <radian.dc@gmail.com>
Date: Fri, 9 Mar 2018 07:17:21 +0100
Subject: [PATCH 14/51] jni/libfm_jni: Ignore unused parameters from APIs

 * libfm_jni/LibfmJni.cpp: Samples:
    95:50: error: unused parameter 'env'
    95:50: error: unused parameter 'type'
    163:41: error: unused parameter 'thiz'

Change-Id: Ieebc105f3eb7ed5bd668e758aa0b001c78fafca7
---
 jni/android_hardware_fm.cpp | 92 ++++++++++++++++++++-----------------
 libfm_jni/LibfmJni.cpp      | 37 +++++++--------
 2 files changed, 70 insertions(+), 59 deletions(-)

diff --git a/jni/android_hardware_fm.cpp b/jni/android_hardware_fm.cpp
index 86624b28..5f2dba14 100644
--- a/jni/android_hardware_fm.cpp
+++ b/jni/android_hardware_fm.cpp
@@ -388,12 +388,12 @@ void fm_ext_country_code_cb(char *ecc)
 }
 
 
-void rds_grp_cntrs_rsp_cb(char * evt_buffer)
+void rds_grp_cntrs_rsp_cb(char * evt_buffer __unused)
 {
    ALOGD("rds_grp_cntrs_rsp_cb");
 }
 
-void rds_grp_cntrs_ext_rsp_cb(char * evt_buffer)
+void rds_grp_cntrs_ext_rsp_cb(char * evt_buffer __unused)
 {
    ALOGE("rds_grp_cntrs_ext_rsp_cb");
 }
@@ -408,19 +408,19 @@ void fm_disabled_cb()
     mCallbacksObjCreated = false;
 }
 
-void fm_peek_rsp_cb(char *peek_rsp) {
+void fm_peek_rsp_cb(char *peek_rsp __unused) {
     ALOGD("fm_peek_rsp_cb");
 }
 
-void fm_ssbi_peek_rsp_cb(char *ssbi_peek_rsp){
+void fm_ssbi_peek_rsp_cb(char *ssbi_peek_rsp __unused){
     ALOGD("fm_ssbi_peek_rsp_cb");
 }
 
-void fm_agc_gain_rsp_cb(char *agc_gain_rsp){
+void fm_agc_gain_rsp_cb(char *agc_gain_rsp __unused){
     ALOGE("fm_agc_gain_rsp_cb");
 }
 
-void fm_ch_det_th_rsp_cb(char *ch_det_rsp){
+void fm_ch_det_th_rsp_cb(char *ch_det_rsp __unused){
     ALOGD("fm_ch_det_th_rsp_cb");
 }
 
@@ -646,7 +646,7 @@ static   fm_vendor_callbacks_t fm_callbacks = {
 };
 /* native interface */
 static jint android_hardware_fmradio_FmReceiverJNI_acquireFdNative
-        (JNIEnv* env, jobject thiz, jstring path)
+        (JNIEnv* env, jobject thiz __unused, jstring path)
 {
     int fd;
     int i = 0, err;
@@ -721,7 +721,7 @@ static jint android_hardware_fmradio_FmReceiverJNI_acquireFdNative
 
 /* native interface */
 static jint android_hardware_fmradio_FmReceiverJNI_closeFdNative
-    (JNIEnv * env, jobject thiz, jint fd)
+    (JNIEnv * env __unused, jobject thiz __unused, jint fd)
 {
     char value[PROPERTY_VALUE_MAX] = {'\0'};
 
@@ -754,7 +754,7 @@ static bool is_soc_cherokee() {
 
 /* native interface */
 static jint android_hardware_fmradio_FmReceiverJNI_getFreqNative
-    (JNIEnv * env, jobject thiz, jint fd)
+    (JNIEnv * env __unused, jobject thiz __unused, jint fd __unused)
 {
     int err;
     long freq;
@@ -789,7 +789,7 @@ static jint android_hardware_fmradio_FmReceiverJNI_getFreqNative
 
 /*native interface */
 static jint android_hardware_fmradio_FmReceiverJNI_setFreqNative
-    (JNIEnv * env, jobject thiz, jint fd, jint freq)
+    (JNIEnv * env __unused, jobject thiz __unused, jint fd __unused, jint freq)
 {
     int err;
     if (is_soc_cherokee())
@@ -817,7 +817,8 @@ static jint android_hardware_fmradio_FmReceiverJNI_setFreqNative
 
 /* native interface */
 static jint android_hardware_fmradio_FmReceiverJNI_setControlNative
-    (JNIEnv * env, jobject thiz, jint fd, jint id, jint value)
+    (JNIEnv * env __unused, jobject thiz __unused, jint fd __unused, jint id,
+    jint value)
 {
     int err;
     ALOGE("id(%x) value: %x\n", id, value);
@@ -845,7 +846,8 @@ static jint android_hardware_fmradio_FmReceiverJNI_setControlNative
 }
 
 static jint android_hardware_fmradio_FmReceiverJNI_SetCalibrationNative
-     (JNIEnv * env, jobject thiz, jint fd, jbyteArray buff)
+     (JNIEnv * env __unused, jobject thiz __unused, jint fd,
+     jbyteArray buff __unused)
 {
 
    int err;
@@ -867,7 +869,7 @@ static jint android_hardware_fmradio_FmReceiverJNI_SetCalibrationNative
 }
 /* native interface */
 static jint android_hardware_fmradio_FmReceiverJNI_getControlNative
-    (JNIEnv * env, jobject thiz, jint fd, jint id)
+    (JNIEnv * env __unused, jobject thiz __unused, jint fd __unused, jint id)
 {
     int err;
     long val;
@@ -905,7 +907,7 @@ static jint android_hardware_fmradio_FmReceiverJNI_getControlNative
 
 /* native interface */
 static jint android_hardware_fmradio_FmReceiverJNI_startSearchNative
-    (JNIEnv * env, jobject thiz, jint fd, jint dir)
+    (JNIEnv * env __unused, jobject thiz __unused, jint fd __unused, jint dir)
 {
     int err;
     if (is_soc_cherokee())
@@ -940,7 +942,7 @@ static jint android_hardware_fmradio_FmReceiverJNI_startSearchNative
 
 /* native interface */
 static jint android_hardware_fmradio_FmReceiverJNI_cancelSearchNative
-    (JNIEnv * env, jobject thiz, jint fd)
+    (JNIEnv * env __unused, jobject thiz __unused, jint fd __unused)
 {
     int err;
 
@@ -975,7 +977,7 @@ static jint android_hardware_fmradio_FmReceiverJNI_cancelSearchNative
 
 /* native interface */
 static jint android_hardware_fmradio_FmReceiverJNI_getRSSINative
-    (JNIEnv * env, jobject thiz, jint fd)
+    (JNIEnv * env __unused, jobject thiz __unused, jint fd __unused)
 {
     int err;
     long rmssi;
@@ -1011,7 +1013,8 @@ static jint android_hardware_fmradio_FmReceiverJNI_getRSSINative
 
 /* native interface */
 static jint android_hardware_fmradio_FmReceiverJNI_setBandNative
-    (JNIEnv * env, jobject thiz, jint fd, jint low, jint high)
+    (JNIEnv * env __unused, jobject thiz __unused, jint fd __unused, jint low,
+    jint high)
 {
     int err;
     if (is_soc_cherokee())
@@ -1052,7 +1055,7 @@ static jint android_hardware_fmradio_FmReceiverJNI_setBandNative
 
 /* native interface */
 static jint android_hardware_fmradio_FmReceiverJNI_getLowerBandNative
-    (JNIEnv * env, jobject thiz, jint fd)
+    (JNIEnv * env __unused, jobject thiz __unused, jint fd)
 {
     int err;
     ULINT freq;
@@ -1088,7 +1091,7 @@ else
 
 /* native interface */
 static jint android_hardware_fmradio_FmReceiverJNI_getUpperBandNative
-    (JNIEnv * env, jobject thiz, jint fd)
+    (JNIEnv * env __unused, jobject thiz __unused, jint fd)
 {
     int err;
     ULINT freq;
@@ -1123,7 +1126,7 @@ else
 }
 
 static jint android_hardware_fmradio_FmReceiverJNI_setMonoStereoNative
-    (JNIEnv * env, jobject thiz, jint fd, jint val)
+    (JNIEnv * env __unused, jobject thiz __unused, jint fd, jint val)
 {
 
     int err;
@@ -1157,7 +1160,7 @@ else
 
 /* native interface */
 static jint android_hardware_fmradio_FmReceiverJNI_getBufferNative
- (JNIEnv * env, jobject thiz, jint fd, jbyteArray buff, jint index)
+    (JNIEnv * env, jobject thiz __unused, jint fd, jbyteArray buff, jint index)
 {
     int err;
     jboolean isCopy;
@@ -1187,7 +1190,8 @@ static jint android_hardware_fmradio_FmReceiverJNI_getBufferNative
 
 /* native interface */
 static jint android_hardware_fmradio_FmReceiverJNI_getRawRdsNative
- (JNIEnv * env, jobject thiz, jint fd, jbooleanArray buff, jint count)
+    (JNIEnv * env __unused, jobject thiz __unused, jint fd, jbooleanArray buff,
+    jint count)
 {
 
     return (read (fd, buff, count));
@@ -1195,7 +1199,9 @@ static jint android_hardware_fmradio_FmReceiverJNI_getRawRdsNative
 }
 
 /* native interface */
-static jint android_hardware_fmradio_FmReceiverJNI_setNotchFilterNative(JNIEnv * env, jobject thiz,jint fd, jint id, jboolean aValue)
+static jint android_hardware_fmradio_FmReceiverJNI_setNotchFilterNative
+    (JNIEnv * env __unused, jobject thiz __unused, jint fd, jint id,
+    jboolean aValue)
 {
     char value[PROPERTY_VALUE_MAX] = {'\0'};
 #ifndef QCOM_NO_FM_FIRMWARE
@@ -1263,7 +1269,8 @@ static jint android_hardware_fmradio_FmReceiverJNI_setNotchFilterNative(JNIEnv *
 
 
 /* native interface */
-static jint android_hardware_fmradio_FmReceiverJNI_setAnalogModeNative(JNIEnv * env, jobject thiz, jboolean aValue)
+static jint android_hardware_fmradio_FmReceiverJNI_setAnalogModeNative
+    (JNIEnv * env __unused, jobject thiz __unused, jboolean aValue __unused)
 {
     int i=0;
     char value[PROPERTY_VALUE_MAX] = {'\0'};
@@ -1301,7 +1308,7 @@ static jint android_hardware_fmradio_FmReceiverJNI_setAnalogModeNative(JNIEnv *
 
 /*native interface */
 static jint android_hardware_fmradio_FmReceiverJNI_setPTYNative
-    (JNIEnv * env, jobject thiz, jint fd, jint pty)
+    (JNIEnv * env __unused, jobject thiz __unused, jint fd, jint pty)
 {
     int masked_pty;
     int err;
@@ -1326,7 +1333,7 @@ static jint android_hardware_fmradio_FmReceiverJNI_setPTYNative
 }
 
 static jint android_hardware_fmradio_FmReceiverJNI_setPINative
-    (JNIEnv * env, jobject thiz, jint fd, jint pi)
+    (JNIEnv * env __unused, jobject thiz __unused, jint fd, jint pi)
 {
     int err;
     int masked_pi;
@@ -1351,7 +1358,8 @@ static jint android_hardware_fmradio_FmReceiverJNI_setPINative
 }
 
 static jint android_hardware_fmradio_FmReceiverJNI_startRTNative
-    (JNIEnv * env, jobject thiz, jint fd, jstring radio_text, jint count )
+    (JNIEnv * env, jobject thiz __unused, jint fd, jstring radio_text,
+    jint count __unused)
 {
     ALOGE("->android_hardware_fmradio_FmReceiverJNI_startRTNative\n");
 
@@ -1409,7 +1417,7 @@ static jint android_hardware_fmradio_FmReceiverJNI_startRTNative
 }
 
 static jint android_hardware_fmradio_FmReceiverJNI_stopRTNative
-    (JNIEnv * env, jobject thiz, jint fd )
+    (JNIEnv * env __unused, jobject thiz __unused, jint fd)
 {
     int err;
 
@@ -1431,7 +1439,8 @@ static jint android_hardware_fmradio_FmReceiverJNI_stopRTNative
 }
 
 static jint android_hardware_fmradio_FmReceiverJNI_startPSNative
-    (JNIEnv * env, jobject thiz, jint fd, jstring buff, jint count )
+    (JNIEnv * env __unused, jobject thiz __unused, jint fd,
+    jstring buff, jint count __unused)
 {
     ALOGD("->android_hardware_fmradio_FmReceiverJNI_startPSNative\n");
 
@@ -1488,7 +1497,7 @@ static jint android_hardware_fmradio_FmReceiverJNI_startPSNative
 }
 
 static jint android_hardware_fmradio_FmReceiverJNI_stopPSNative
-    (JNIEnv * env, jobject thiz, jint fd)
+    (JNIEnv * env __unused, jobject thiz __unused, jint fd)
 {
 
     int err;
@@ -1512,7 +1521,7 @@ static jint android_hardware_fmradio_FmReceiverJNI_stopPSNative
 }
 
 static jint android_hardware_fmradio_FmReceiverJNI_configureSpurTable
-    (JNIEnv * env, jobject thiz, jint fd)
+    (JNIEnv * env __unused, jobject thiz __unused, jint fd)
 {
     int err;
 
@@ -1535,7 +1544,7 @@ static jint android_hardware_fmradio_FmReceiverJNI_configureSpurTable
 }
 
 static jint android_hardware_fmradio_FmReceiverJNI_setPSRepeatCountNative
-    (JNIEnv * env, jobject thiz, jint fd, jint repCount)
+    (JNIEnv * env __unused, jobject thiz __unused, jint fd, jint repCount)
 {
     int masked_ps_repeat_cnt;
     int err;
@@ -1560,7 +1569,7 @@ static jint android_hardware_fmradio_FmReceiverJNI_setPSRepeatCountNative
 }
 
 static jint android_hardware_fmradio_FmReceiverJNI_setTxPowerLevelNative
-    (JNIEnv * env, jobject thiz, jint fd, jint powLevel)
+    (JNIEnv * env __unused, jobject thiz __unused, jint fd, jint powLevel)
 {
     int err;
 
@@ -1583,7 +1592,7 @@ static jint android_hardware_fmradio_FmReceiverJNI_setTxPowerLevelNative
 }
 
 static void android_hardware_fmradio_FmReceiverJNI_configurePerformanceParams
-    (JNIEnv * env, jobject thiz, jint fd)
+    (JNIEnv * env __unused, jobject thiz __unused, jint fd)
 {
 
      ConfigFmThs thsObj;
@@ -1593,7 +1602,8 @@ static void android_hardware_fmradio_FmReceiverJNI_configurePerformanceParams
 
 /* native interface */
 static jint android_hardware_fmradio_FmReceiverJNI_setSpurDataNative
- (JNIEnv * env, jobject thiz, jint fd, jshortArray buff, jint count)
+    (JNIEnv * env, jobject thiz __unused, jint fd, jshortArray buff,
+    jint count)
 {
     ALOGE("entered JNI's setSpurDataNative\n");
     int err, i = 0;
@@ -1631,7 +1641,7 @@ static jint android_hardware_fmradio_FmReceiverJNI_setSpurDataNative
 }
 
 static jint android_hardware_fmradio_FmReceiverJNI_enableSlimbusNative
- (JNIEnv * env, jobject thiz, jint fd, jint val)
+ (JNIEnv * env __unused, jobject thiz __unused, jint fd __unused, jint val)
 {
     ALOGD("%s: val = %d\n", __func__, val);
     int err = JNI_ERR;
@@ -1642,7 +1652,7 @@ if (is_soc_cherokee()) {
 }
 
 static jint android_hardware_fmradio_FmReceiverJNI_enableSoftMuteNative
- (JNIEnv * env, jobject thiz, jint fd, jint val)
+ (JNIEnv * env __unused, jobject thiz __unused, jint fd __unused, jint val)
 {
     ALOGD("%s: val = %d\n", __func__, val);
     int err = JNI_ERR;
@@ -1652,7 +1662,7 @@ if (is_soc_cherokee()) {
     return err;
 }
 
-static void classInitNative(JNIEnv* env, jclass clazz) {
+static void classInitNative(JNIEnv* env __unused, jclass clazz __unused) {
 
     ALOGI("ClassInit native called \n");
     jclass dataClass = env->FindClass("qcom/fmradio/FmReceiverJNI");
@@ -1705,7 +1715,7 @@ error:
     lib_handle = NULL;
 }
 
-static void initNative(JNIEnv *env, jobject object) {
+static void initNative(JNIEnv *env __unused, jobject object __unused) {
 
 if (is_soc_cherokee()) {
     int status;
@@ -1724,7 +1734,7 @@ if (is_soc_cherokee()) {
 }
 }
 
-static void cleanupNative(JNIEnv *env, jobject object) {
+static void cleanupNative(JNIEnv *env __unused, jobject object __unused) {
 
     if (is_soc_cherokee()) {
         if (mCallbacksObj != NULL) {
@@ -1811,7 +1821,7 @@ int register_android_hardware_fm_fmradio(JNIEnv* env)
 }
 } // end namespace
 
-jint JNI_OnLoad(JavaVM *jvm, void *reserved)
+jint JNI_OnLoad(JavaVM *jvm, void *reserved __unused)
 {
     JNIEnv *e;
     int status;
diff --git a/libfm_jni/LibfmJni.cpp b/libfm_jni/LibfmJni.cpp
index 94a696f9..51657da8 100644
--- a/libfm_jni/LibfmJni.cpp
+++ b/libfm_jni/LibfmJni.cpp
@@ -38,7 +38,7 @@ IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 
 static FmRadioController * pFMRadio;
 
-jboolean OpenFd(JNIEnv *env, jobject thiz)
+jboolean OpenFd(JNIEnv *env __unused, jobject thiz __unused)
 {
     int ret = 0;
     pFMRadio = new FmRadioController();
@@ -50,7 +50,7 @@ jboolean OpenFd(JNIEnv *env, jobject thiz)
     return ret? JNI_FALSE: JNI_TRUE;
 }
 
-jboolean CloseFd(JNIEnv *env, jobject thiz)
+jboolean CloseFd(JNIEnv *env __unused, jobject thiz __unused)
 {
     int ret = 0;
 
@@ -63,7 +63,7 @@ jboolean CloseFd(JNIEnv *env, jobject thiz)
     return ret? JNI_FALSE: JNI_TRUE;
 }
 
-jboolean TurnOn(JNIEnv *env, jobject thiz, jfloat freq)
+jboolean TurnOn(JNIEnv *env __unused, jobject thiz __unused, jfloat freq)
 {
     int ret = 0;
     int tmp_freq;
@@ -82,7 +82,8 @@ jboolean TurnOn(JNIEnv *env, jobject thiz, jfloat freq)
     return ret?JNI_FALSE:JNI_TRUE;
 }
 
-jboolean TurnOff(JNIEnv *env, jobject thiz, jint type)
+jboolean TurnOff(JNIEnv *env __unused, jobject thiz __unused,
+        jint type __unused)
 {
     int ret = 0;
 
@@ -99,7 +100,7 @@ jboolean TurnOff(JNIEnv *env, jobject thiz, jint type)
     return ret?JNI_FALSE:JNI_TRUE;
 }
 
-jboolean SetFreq(JNIEnv *env, jobject thiz, jfloat freq)
+jboolean SetFreq(JNIEnv *env __unused, jobject thiz __unused, jfloat freq)
 {
     int ret = 0;
     int tmp_freq;
@@ -114,7 +115,7 @@ jboolean SetFreq(JNIEnv *env, jobject thiz, jfloat freq)
     return ret?JNI_FALSE:JNI_TRUE;
 }
 
-jfloat Seek(JNIEnv *env, jobject thiz, jfloat freq, jboolean isUp)
+jfloat Seek(JNIEnv *env __unused, jobject thiz __unused, jfloat freq, jboolean isUp)
 {
     int ret = JNI_FALSE;
     float val = freq;
@@ -131,7 +132,7 @@ jfloat Seek(JNIEnv *env, jobject thiz, jfloat freq, jboolean isUp)
     return val;
 }
 
-jshortArray ScanList(JNIEnv *env, jobject thiz)
+jshortArray ScanList(JNIEnv *env, jobject thiz __unused)
 {
     int ret = 0;
     jshortArray scanList;
@@ -160,7 +161,7 @@ out:
     return scanList;
 }
 
-jshort GetRdsEvent(JNIEnv *env, jobject thiz)
+jshort GetRdsEvent(JNIEnv *env __unused, jobject thiz __unused)
 {
     int ret = JNI_FALSE;
 
@@ -170,7 +171,7 @@ jshort GetRdsEvent(JNIEnv *env, jobject thiz)
     return ret;
 }
 
-jbyteArray GetPsText(JNIEnv *env, jobject thiz)
+jbyteArray GetPsText(JNIEnv *env, jobject thiz __unused)
 {
     int ret = 0;
     jbyteArray PS;
@@ -191,7 +192,7 @@ jbyteArray GetPsText(JNIEnv *env, jobject thiz)
     return PS;
 }
 
-jbyteArray GetRtText(JNIEnv *env, jobject thiz)
+jbyteArray GetRtText(JNIEnv *env, jobject thiz __unused)
 {
     int ret = 0;
     jbyteArray RadioText;
@@ -212,7 +213,7 @@ jbyteArray GetRtText(JNIEnv *env, jobject thiz)
     return RadioText;
 }
 
-jshort GetAfFreq(JNIEnv *env, jobject thiz)
+jshort GetAfFreq(JNIEnv *env __unused, jobject thiz __unused)
 {
     int ret = 0;
     jshort ret_freq = 0;
@@ -229,7 +230,7 @@ jshort GetAfFreq(JNIEnv *env, jobject thiz)
     return ret_freq;
 }
 
-jint SetRds(JNIEnv *env, jobject thiz, jboolean rdson)
+jint SetRds(JNIEnv *env __unused, jobject thiz __unused, jboolean rdson)
 {
     int ret = 0;
 
@@ -244,7 +245,7 @@ jint SetRds(JNIEnv *env, jobject thiz, jboolean rdson)
     return ret?JNI_FALSE:JNI_TRUE;
 }
 
-jboolean StopSrch(JNIEnv *env, jobject thiz)
+jboolean StopSrch(JNIEnv *env __unused, jobject thiz __unused)
 {
     int ret = 0;
 
@@ -259,7 +260,7 @@ jboolean StopSrch(JNIEnv *env, jobject thiz)
     return ret?JNI_FALSE:JNI_TRUE;
 }
 
-jint SetMute(JNIEnv *env, jobject thiz, jboolean mute)
+jint SetMute(JNIEnv *env __unused, jobject thiz __unused, jboolean mute)
 {
     int ret = 0;
 
@@ -283,7 +284,7 @@ jint SetMute(JNIEnv *env, jobject thiz, jboolean mute)
  *      0: NOT support
  *      -1: error
  ******************************************/
-jint IsRdsSupport(JNIEnv *env, jobject thiz)
+jint IsRdsSupport(JNIEnv *env __unused, jobject thiz __unused)
 {
     int ret = 0;
 
@@ -310,7 +311,7 @@ jint IsRdsSupport(JNIEnv *env, jobject thiz)
  *          1: Failed
  *          2: Not support
  ******************************************/
-jint SetAntenna(JNIEnv *env, jobject thiz, jint antenna)
+jint SetAntenna(JNIEnv *env __unused, jobject thiz __unused, jint antenna)
 {
     int ret = 0;
     jint jret = 0;
@@ -361,12 +362,12 @@ static JNINativeMethod gMethods[] = {
     {"switchAntenna", "(I)I",  (void*)SetAntenna},
 };
 
-int register_android_hardware_fm(JNIEnv* env)
+int register_android_hardware_fm(JNIEnv* env __unused)
 {
         return jniRegisterNativeMethods(env, classPathNameFM, gMethods, NELEM(gMethods));
 }
 
-jint JNI_OnLoad(JavaVM *jvm, void *reserved)
+jint JNI_OnLoad(JavaVM *jvm, void *reserved __unused)
 {
    JNIEnv *e;
    int status;
-- 
2.17.1

