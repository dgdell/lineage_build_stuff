From fe441aea879f3334b961001188086723ee7d1830 Mon Sep 17 00:00:00 2001
From: Adrian DC <radian.dc@gmail.com>
Date: Fri, 9 Mar 2018 07:17:21 +0100
Subject: [PATCH 63/74] libfm_jni: Ignore unused parameters from APIs

 * libfm_jni/LibfmJni.cpp: Samples:
    95:50: error: unused parameter 'env'
    95:50: error: unused parameter 'type'
    163:41: error: unused parameter 'thiz'

Change-Id: Ieebc105f3eb7ed5bd668e758aa0b001c78fafca7
---
 libfm_jni/LibfmJni.cpp | 37 +++++++++++++++++++------------------
 1 file changed, 19 insertions(+), 18 deletions(-)

diff --git a/libfm_jni/LibfmJni.cpp b/libfm_jni/LibfmJni.cpp
index 94a696f..51657da 100644
--- a/libfm_jni/LibfmJni.cpp
+++ b/libfm_jni/LibfmJni.cpp
@@ -38,7 +38,7 @@ IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 
 static FmRadioController * pFMRadio;
 
-jboolean OpenFd(JNIEnv *env, jobject thiz)
+jboolean OpenFd(JNIEnv *env __unused, jobject thiz __unused)
 {
     int ret = 0;
     pFMRadio = new FmRadioController();
@@ -50,7 +50,7 @@ jboolean OpenFd(JNIEnv *env, jobject thiz)
     return ret? JNI_FALSE: JNI_TRUE;
 }
 
-jboolean CloseFd(JNIEnv *env, jobject thiz)
+jboolean CloseFd(JNIEnv *env __unused, jobject thiz __unused)
 {
     int ret = 0;
 
@@ -63,7 +63,7 @@ jboolean CloseFd(JNIEnv *env, jobject thiz)
     return ret? JNI_FALSE: JNI_TRUE;
 }
 
-jboolean TurnOn(JNIEnv *env, jobject thiz, jfloat freq)
+jboolean TurnOn(JNIEnv *env __unused, jobject thiz __unused, jfloat freq)
 {
     int ret = 0;
     int tmp_freq;
@@ -82,7 +82,8 @@ jboolean TurnOn(JNIEnv *env, jobject thiz, jfloat freq)
     return ret?JNI_FALSE:JNI_TRUE;
 }
 
-jboolean TurnOff(JNIEnv *env, jobject thiz, jint type)
+jboolean TurnOff(JNIEnv *env __unused, jobject thiz __unused,
+        jint type __unused)
 {
     int ret = 0;
 
@@ -99,7 +100,7 @@ jboolean TurnOff(JNIEnv *env, jobject thiz, jint type)
     return ret?JNI_FALSE:JNI_TRUE;
 }
 
-jboolean SetFreq(JNIEnv *env, jobject thiz, jfloat freq)
+jboolean SetFreq(JNIEnv *env __unused, jobject thiz __unused, jfloat freq)
 {
     int ret = 0;
     int tmp_freq;
@@ -114,7 +115,7 @@ jboolean SetFreq(JNIEnv *env, jobject thiz, jfloat freq)
     return ret?JNI_FALSE:JNI_TRUE;
 }
 
-jfloat Seek(JNIEnv *env, jobject thiz, jfloat freq, jboolean isUp)
+jfloat Seek(JNIEnv *env __unused, jobject thiz __unused, jfloat freq, jboolean isUp)
 {
     int ret = JNI_FALSE;
     float val = freq;
@@ -131,7 +132,7 @@ jfloat Seek(JNIEnv *env, jobject thiz, jfloat freq, jboolean isUp)
     return val;
 }
 
-jshortArray ScanList(JNIEnv *env, jobject thiz)
+jshortArray ScanList(JNIEnv *env, jobject thiz __unused)
 {
     int ret = 0;
     jshortArray scanList;
@@ -160,7 +161,7 @@ out:
     return scanList;
 }
 
-jshort GetRdsEvent(JNIEnv *env, jobject thiz)
+jshort GetRdsEvent(JNIEnv *env __unused, jobject thiz __unused)
 {
     int ret = JNI_FALSE;
 
@@ -170,7 +171,7 @@ jshort GetRdsEvent(JNIEnv *env, jobject thiz)
     return ret;
 }
 
-jbyteArray GetPsText(JNIEnv *env, jobject thiz)
+jbyteArray GetPsText(JNIEnv *env, jobject thiz __unused)
 {
     int ret = 0;
     jbyteArray PS;
@@ -191,7 +192,7 @@ jbyteArray GetPsText(JNIEnv *env, jobject thiz)
     return PS;
 }
 
-jbyteArray GetRtText(JNIEnv *env, jobject thiz)
+jbyteArray GetRtText(JNIEnv *env, jobject thiz __unused)
 {
     int ret = 0;
     jbyteArray RadioText;
@@ -212,7 +213,7 @@ jbyteArray GetRtText(JNIEnv *env, jobject thiz)
     return RadioText;
 }
 
-jshort GetAfFreq(JNIEnv *env, jobject thiz)
+jshort GetAfFreq(JNIEnv *env __unused, jobject thiz __unused)
 {
     int ret = 0;
     jshort ret_freq = 0;
@@ -229,7 +230,7 @@ jshort GetAfFreq(JNIEnv *env, jobject thiz)
     return ret_freq;
 }
 
-jint SetRds(JNIEnv *env, jobject thiz, jboolean rdson)
+jint SetRds(JNIEnv *env __unused, jobject thiz __unused, jboolean rdson)
 {
     int ret = 0;
 
@@ -244,7 +245,7 @@ jint SetRds(JNIEnv *env, jobject thiz, jboolean rdson)
     return ret?JNI_FALSE:JNI_TRUE;
 }
 
-jboolean StopSrch(JNIEnv *env, jobject thiz)
+jboolean StopSrch(JNIEnv *env __unused, jobject thiz __unused)
 {
     int ret = 0;
 
@@ -259,7 +260,7 @@ jboolean StopSrch(JNIEnv *env, jobject thiz)
     return ret?JNI_FALSE:JNI_TRUE;
 }
 
-jint SetMute(JNIEnv *env, jobject thiz, jboolean mute)
+jint SetMute(JNIEnv *env __unused, jobject thiz __unused, jboolean mute)
 {
     int ret = 0;
 
@@ -283,7 +284,7 @@ jint SetMute(JNIEnv *env, jobject thiz, jboolean mute)
  *      0: NOT support
  *      -1: error
  ******************************************/
-jint IsRdsSupport(JNIEnv *env, jobject thiz)
+jint IsRdsSupport(JNIEnv *env __unused, jobject thiz __unused)
 {
     int ret = 0;
 
@@ -310,7 +311,7 @@ jint IsRdsSupport(JNIEnv *env, jobject thiz)
  *          1: Failed
  *          2: Not support
  ******************************************/
-jint SetAntenna(JNIEnv *env, jobject thiz, jint antenna)
+jint SetAntenna(JNIEnv *env __unused, jobject thiz __unused, jint antenna)
 {
     int ret = 0;
     jint jret = 0;
@@ -361,12 +362,12 @@ static JNINativeMethod gMethods[] = {
     {"switchAntenna", "(I)I",  (void*)SetAntenna},
 };
 
-int register_android_hardware_fm(JNIEnv* env)
+int register_android_hardware_fm(JNIEnv* env __unused)
 {
         return jniRegisterNativeMethods(env, classPathNameFM, gMethods, NELEM(gMethods));
 }
 
-jint JNI_OnLoad(JavaVM *jvm, void *reserved)
+jint JNI_OnLoad(JavaVM *jvm, void *reserved __unused)
 {
    JNIEnv *e;
    int status;
-- 
2.17.1

