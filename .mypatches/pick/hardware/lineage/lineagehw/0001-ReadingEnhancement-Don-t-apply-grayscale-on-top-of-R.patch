From 08c3e5f865aa75110dd2aff43ada98b1aea4cbe5 Mon Sep 17 00:00:00 2001
From: Paul Keith <javelinanddart@gmail.com>
Date: Tue, 22 May 2018 05:10:30 +0200
Subject: [PATCH] ReadingEnhancement: Don't apply grayscale on top of RGB
 calibration

* Instead, set RGB calibration to normal, and restore the RGB calibration
  after reading mode is turned off by the user

Change-Id: Ic3d793f0899225455c673b3fac5b14163e35462a
---
 .../hardware/DisplayColorCalibration.java     | 10 ++++
 .../hardware/ReadingEnhancement.java          | 60 ++++++++++++++++---
 2 files changed, 63 insertions(+), 7 deletions(-)

diff --git a/src/org/lineageos/hardware/DisplayColorCalibration.java b/src/org/lineageos/hardware/DisplayColorCalibration.java
index 796c0d4..40da91f 100644
--- a/src/org/lineageos/hardware/DisplayColorCalibration.java
+++ b/src/org/lineageos/hardware/DisplayColorCalibration.java
@@ -28,6 +28,7 @@ import com.android.server.LocalServices;
 import com.android.server.display.DisplayTransformManager;
 import static com.android.server.display.DisplayTransformManager.LEVEL_COLOR_MATRIX_NIGHT_DISPLAY;
 
+import org.lineageos.hardware.ReadingEnhancement;
 import org.lineageos.internal.util.FileUtils;
 
 public class DisplayColorCalibration {
@@ -83,6 +84,10 @@ public class DisplayColorCalibration {
     }
 
     public static String getCurColors()  {
+        if (ReadingEnhancement.isEnabled()) {
+            return ReadingEnhancement.getRestoreColors();
+        }
+
         if (sMode == MODE_SYSFS_RGB) {
             return FileUtils.readOneLine(COLOR_FILE);
         }
@@ -92,6 +97,11 @@ public class DisplayColorCalibration {
     }
 
     public static boolean setColors(String colors) {
+        if (ReadingEnhancement.isEnabled()) {
+            ReadingEnhancement.setRestoreColors(colors);
+            return true;
+        }
+
         if (sMode == MODE_SYSFS_RGB) {
             return FileUtils.writeLine(COLOR_FILE, colors);
         } else if (sMode == MODE_HWC2_COLOR_TRANSFORM) {
diff --git a/src/org/lineageos/hardware/ReadingEnhancement.java b/src/org/lineageos/hardware/ReadingEnhancement.java
index 90839e9..c803f94 100644
--- a/src/org/lineageos/hardware/ReadingEnhancement.java
+++ b/src/org/lineageos/hardware/ReadingEnhancement.java
@@ -27,6 +27,7 @@ import com.android.server.LocalServices;
 import com.android.server.display.DisplayTransformManager;
 import static com.android.server.display.DisplayTransformManager.LEVEL_COLOR_MATRIX_GRAYSCALE;
 
+import org.lineageos.hardware.DisplayColorCalibration;
 import org.lineageos.internal.util.FileUtils;
 
 /**
@@ -64,6 +65,9 @@ public class ReadingEnhancement {
 
     private static DisplayTransformManager sDTMService;
 
+    private static boolean sEnabled;
+    private static String sRestoreColors;
+
     static {
         // Determine mode of operation.
         if (ActivityThread.currentApplication().getApplicationContext().getResources().getBoolean(
@@ -72,22 +76,64 @@ public class ReadingEnhancement {
         } else {
             sMode = MODE_UNSUPPORTED;
         }
+
+        sRestoreColors = DisplayColorCalibration.getCurColors();
     }
 
     public static boolean isSupported() {
         return sMode != MODE_UNSUPPORTED;
     }
 
+    public static boolean isEnabled() {
+        return sEnabled;
+    }
+
     public static boolean setGrayscale(boolean state) {
-        if (sDTMService == null) {
-            sDTMService = LocalServices.getService(DisplayTransformManager.class);
-            if (sDTMService == null) {
-                return false;
+        sRestoreColors = DisplayColorCalibration.getCurColors();
+        boolean ret = false;
+
+        if (state) {
+/*
+            if (sMode == MODE_SYSFS_RGB) {
+                String grayscale = "54 182 18";
+                return FileUtils.writeLine(COLOR_FILE, grayscale);
+            } else
+*/
+                if (sMode == MODE_HWC2_COLOR_TRANSFORM) {
+                    if (sDTMService == null) {
+                        sDTMService = LocalServices.getService(DisplayTransformManager.class);
+                        if (sDTMService == null) {
+                            return false;
+                        }
+                    }
+                    sDTMService.setColorMatrix(LEVEL_COLOR_MATRIX_READING, MATRIX_GRAYSCALE);
+                    int max = DisplayColorCalibration.getMaxValue();
+                    ret = DisplayColorCalibration.setColors(String.format("%d %d %d", max, max, max));
+                    sEnabled = true;
+                }
+        } else {
+            if (sMode == MODE_HWC2_COLOR_TRANSFORM) {
+                if (sDTMService == null) {
+                    sDTMService = LocalServices.getService(DisplayTransformManager.class);
+                    if (sDTMService == null) {
+                        return false;
+                    }
+                }
+                sDTMService.setColorMatrix(LEVEL_COLOR_MATRIX_READING, MATRIX_NORMAL);
             }
+            sEnabled = false;
+            ret = DisplayColorCalibration.setColors(sRestoreColors);
         }
-        sDTMService.setColorMatrix(LEVEL_COLOR_MATRIX_READING,
-                state ? MATRIX_GRAYSCALE : MATRIX_NORMAL);
-        return true;
+
+        return ret;
+    }
+
+    public static String getRestoreColors() {
+        return sRestoreColors;
+    }
+
+    public static void setRestoreColors(String colors) {
+        sRestoreColors = colors;
     }
 
 }
-- 
2.17.0

