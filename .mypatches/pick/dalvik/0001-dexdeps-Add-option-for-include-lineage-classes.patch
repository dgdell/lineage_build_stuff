From b627fb91263ec1c3e424e27d5d71f04167d1bf6a Mon Sep 17 00:00:00 2001
From: Adnan Begovic <adnan@cyngn.com>
Date: Wed, 2 Mar 2016 16:35:51 -0800
Subject: [PATCH 1/2] dexdeps: Add option for --include-lineage-classes.

  dexdeps will filter out classes that are marked
  as internal when dumping class references from
  the classes.dex. Include a hack to allow public
  cm classes to be accessible via the dump.

  This is then utilized to generate an html page
  for api coverage.

Change-Id: I1f2a8c28b33711235f46adf2f4a98102e72b3d74
---
 tools/dexdeps/src/com/android/dexdeps/DexData.java | 10 +++++++---
 tools/dexdeps/src/com/android/dexdeps/Main.java    |  9 ++++++++-
 2 files changed, 15 insertions(+), 4 deletions(-)

diff --git a/tools/dexdeps/src/com/android/dexdeps/DexData.java b/tools/dexdeps/src/com/android/dexdeps/DexData.java
index cc1978c86..c68283935 100644
--- a/tools/dexdeps/src/com/android/dexdeps/DexData.java
+++ b/tools/dexdeps/src/com/android/dexdeps/DexData.java
@@ -50,7 +50,7 @@ public class DexData {
      * @throws IOException if we encounter a problem while reading
      * @throws DexDataException if the DEX contents look bad
      */
-    public void load() throws IOException {
+    public void load(boolean includeLineageClasses) throws IOException {
         parseHeaderItem();
 
         loadStrings();
@@ -60,7 +60,7 @@ public class DexData {
         loadMethodIds();
         loadClassDefs();
 
-        markInternalClasses();
+        markInternalClasses(includeLineageClasses);
     }
 
     /**
@@ -291,7 +291,7 @@ public class DexData {
      * Sets the "internal" flag on type IDs which are defined in the
      * DEX file or within the VM (e.g. primitive classes and arrays).
      */
-    void markInternalClasses() {
+    void markInternalClasses(boolean includeLineageClasses) {
         for (int i = mClassDefs.length -1; i >= 0; i--) {
             mTypeIds[mClassDefs[i].classIdx].internal = true;
         }
@@ -299,6 +299,10 @@ public class DexData {
         for (int i = 0; i < mTypeIds.length; i++) {
             String className = mStrings[mTypeIds[i].descriptorIdx];
 
+            if (includeLineageClasses && className.startsWith("Llineageos")) {
+                mTypeIds[i].internal = false;
+                continue;
+            }
             if (className.length() == 1) {
                 // primitive class
                 mTypeIds[i].internal = true;
diff --git a/tools/dexdeps/src/com/android/dexdeps/Main.java b/tools/dexdeps/src/com/android/dexdeps/Main.java
index 5e57ac12d..aa4aa3d60 100644
--- a/tools/dexdeps/src/com/android/dexdeps/Main.java
+++ b/tools/dexdeps/src/com/android/dexdeps/Main.java
@@ -39,6 +39,11 @@ public class Main {
      */
     private boolean mJustClasses = false;
 
+    /**
+     * Whether to include "lineageos" namespace classes in the dump.
+     */
+    private boolean mIncludeLineageClasses = false;
+
     /**
      * Entry point.
      */
@@ -65,7 +70,7 @@ public class Main {
                 List<RandomAccessFile> rafs = openInputFiles(fileName);
                 for (RandomAccessFile raf : rafs) {
                     DexData dexData = new DexData(raf);
-                    dexData.load();
+                    dexData.load(mIncludeLineageClasses);
                     Output.generate(dexData, mOutputFormat, mJustClasses);
                     raf.close();
                 }
@@ -220,6 +225,8 @@ public class Main {
                 //System.out.println("+++ using format " + mOutputFormat);
             } else if (arg.equals("--just-classes")) {
                 mJustClasses = true;
+            } else if (arg.equals("--include-lineage-classes")) {
+                mIncludeLineageClasses = true;
             } else {
                 System.err.println("Unknown option '" + arg + "'");
                 throw new UsageException();
-- 
2.17.1

