From e738e4ca8dca0e3294230b657bfc90a1a699fbe4 Mon Sep 17 00:00:00 2001
From: Luis Vidal <lvidal@cyngn.com>
Date: Wed, 22 Jun 2016 17:17:52 -0700
Subject: [PATCH] AIDL: Add option to generate No-Op methods

Add the option to generate a default (no-op) implementation
of an interface

(cyanogen: Refactor for CM14)

Change-Id: I2631e93c8b85e056cf928e9592342dc4466f293e
---
 generate_java_binder.cpp | 85 ++++++++++++++++++++++++++++++++++++++++
 options.cpp              |  3 ++
 options.h                |  1 +
 type_java.cpp            | 14 +++++--
 type_java.h              |  4 +-
 5 files changed, 103 insertions(+), 4 deletions(-)

diff --git a/generate_java_binder.cpp b/generate_java_binder.cpp
index 522715c..6b9cf4d 100644
--- a/generate_java_binder.cpp
+++ b/generate_java_binder.cpp
@@ -283,6 +283,36 @@ ProxyClass::ProxyClass(const JavaTypeNamespace* types, const Type* type,
 
 ProxyClass::~ProxyClass() {}
 
+// =================================================
+class DefaultNoOpClass : public Class {
+ public:
+  DefaultNoOpClass(const JavaTypeNamespace* types, const Type* type,
+             const InterfaceType* interfaceType);
+  virtual ~DefaultNoOpClass();
+};
+
+DefaultNoOpClass::DefaultNoOpClass(const JavaTypeNamespace* types, const Type* type,
+                                   const InterfaceType* interfaceType)
+    : Class() {
+  this->comment = "/** No-Op implementation  */";
+  this->comment += "\n/** @hide */";
+  this->modifiers = PUBLIC | STATIC;
+  this->what = Class::CLASS;
+  this->type = type;
+  this->interfaces.push_back(interfaceType);
+
+  // IBinder asBinder()
+  Method* asBinder = new Method;
+  asBinder->modifiers = PUBLIC | OVERRIDE;
+  asBinder->returnType = types->IBinderType();
+  asBinder->name = "asBinder";
+  asBinder->statements = new StatementBlock;
+  asBinder->statements->Add(new ReturnStatement(NULL_VALUE));
+  this->elements.push_back(asBinder);
+}
+
+DefaultNoOpClass::~DefaultNoOpClass() {}
+
 // =================================================
 static void generate_new_array(const Type* t, StatementBlock* addTo,
                                Variable* v, Variable* parcel,
@@ -673,11 +703,25 @@ static std::unique_ptr<Method> generate_proxy_method(
   return proxy;
 }
 
+static bool is_numeric_java_type(const std::string name) {
+  static const char* KEYWORDS[] = { "int", "byte", "char", "float", "double",
+    "short", "long", NULL };
+  const char** k = KEYWORDS;
+  while (*k) {
+    if (name == *k) {
+      return true;
+    }
+    k++;
+  }
+  return false;
+}
+
 static void generate_methods(const AidlInterface& iface,
                              const AidlMethod& method,
                              Class* interface,
                              StubClass* stubClass,
                              ProxyClass* proxyClass,
+                             DefaultNoOpClass *noOpClass,
                              int index,
                              JavaTypeNamespace* types) {
   const bool oneway = proxyClass->mOneWay || method.IsOneway();
@@ -696,6 +740,38 @@ static void generate_methods(const AidlInterface& iface,
   Method* decl = generate_interface_method(method, types).release();
   interface->elements.push_back(decl);
 
+  // == the no-op method ===================================================
+  if (noOpClass != NULL) {
+    Method* noOpMethod = new Method;
+    noOpMethod->comment = method.GetComments();
+    noOpMethod->modifiers = OVERRIDE | PUBLIC;
+    noOpMethod->returnType = method.GetType().GetLanguageType<Type>();
+    noOpMethod->returnTypeDimension = method.GetType().IsArray() ? 1 : 0;
+    noOpMethod->name = method.GetName();
+    noOpMethod->statements = new StatementBlock;
+    for (const std::unique_ptr<AidlArgument>& arg : method.GetArguments()) {
+      noOpMethod->parameters.push_back(
+          new Variable(arg->GetType().GetLanguageType<Type>(), arg->GetName(),
+                       arg->GetType().IsArray() ? 1 : 0));
+    }
+
+    std::string typeName = method.GetType().GetLanguageType<Type>()->JavaType();
+    if (typeName != "void") {
+      bool isNumeric = is_numeric_java_type(typeName);
+      bool isBoolean = typeName == "boolean";
+
+      if (isNumeric && !method.GetType().IsArray()) {
+        noOpMethod->statements->Add(new ReturnStatement(new LiteralExpression("0")));
+      } else if (isBoolean && !method.GetType().IsArray()) {
+        noOpMethod->statements->Add(new ReturnStatement(FALSE_VALUE));
+      } else {
+        noOpMethod->statements->Add(new ReturnStatement(NULL_VALUE));
+      }
+    }
+    noOpMethod->exceptions.push_back(types->RemoteExceptionType());
+    noOpClass->elements.push_back(noOpMethod);
+  }
+
   // == the stub method ====================================================
   bool outline_stub = stubClass->transact_outline &&
       stubClass->outline_methods.count(&method) != 0;
@@ -793,6 +869,14 @@ Class* generate_binder_interface_class(const AidlInterface* iface,
   interface->type = interfaceType;
   interface->interfaces.push_back(types->IInterfaceType());
 
+  // the No-Op inner class
+  DefaultNoOpClass* noOpClass = NULL;
+  if (options.generate_no_op_methods_) {
+    noOpClass =
+      new DefaultNoOpClass(types, interfaceType->GetNoOp(), interfaceType);
+    interface->elements.push_back(noOpClass);
+  }
+
   // the stub inner class
   StubClass* stub =
       new StubClass(interfaceType->GetStub(), interfaceType, types);
@@ -827,6 +911,7 @@ Class* generate_binder_interface_class(const AidlInterface* iface,
                      interface,
                      stub,
                      proxy,
+                     noOpClass,
                      item->GetId(),
                      types);
   }
diff --git a/options.cpp b/options.cpp
index 3ed110b..052621d 100644
--- a/options.cpp
+++ b/options.cpp
@@ -51,6 +51,7 @@ unique_ptr<JavaOptions> java_usage() {
           "   -t         include tracing code for systrace. Note that if either "
           "the client or server code is not auto-generated by this tool, that "
           "part will not be traced.\n"
+          "   -n         generate no-op classes.\n"
           "\n"
           "INPUT:\n"
           "   An aidl interface file.\n"
@@ -131,6 +132,8 @@ unique_ptr<JavaOptions> JavaOptions::Parse(int argc, const char* const* argv) {
       options->dep_file_ninja_ = true;
     } else if (strcmp(s, "-t") == 0) {
       options->gen_traces_ = true;
+    } else if (s[1] == 'n') {
+      options->generate_no_op_methods_ = true;
     } else {
       // s[1] is not known
       fprintf(stderr, "unknown option (%d): %s\n", i, s);
diff --git a/options.h b/options.h
index 11f3525..4ab71ba 100644
--- a/options.h
+++ b/options.h
@@ -56,6 +56,7 @@ class JavaOptions final {
   bool dep_file_ninja_{false};
   bool gen_traces_{false};
   std::vector<std::string> files_to_preprocess_;
+  bool generate_no_op_methods_{false};
 
   // The following are for testability, but cannot be influenced on the command line.
 
diff --git a/type_java.cpp b/type_java.cpp
index 18d27a2..0e9be88 100644
--- a/type_java.cpp
+++ b/type_java.cpp
@@ -682,13 +682,15 @@ void UserDataArrayType::ReadFromParcel(StatementBlock* addTo, Variable* v,
 InterfaceType::InterfaceType(const JavaTypeNamespace* types,
                              const string& package, const string& name,
                              bool builtIn, bool oneway, const string& declFile,
-                             int declLine, const Type* stub, const Type* proxy)
+                             int declLine, const Type* stub, const Type* proxy,
+                             const Type* no_op)
     : Type(types, package, name, builtIn ? ValidatableType::KIND_BUILT_IN
                                          : ValidatableType::KIND_INTERFACE,
            true, false, declFile, declLine),
       m_oneway(oneway),
       stub_(stub),
-      proxy_(proxy) {}
+      proxy_(proxy),
+      no_op_(no_op) {}
 
 bool InterfaceType::OneWay() const { return m_oneway; }
 
@@ -877,14 +879,20 @@ bool JavaTypeNamespace::AddBinderType(const AidlInterface& b,
                          b.GetName() + ".Stub.Proxy",
                          ValidatableType::KIND_GENERATED,
                          false, false, filename, b.GetLine());
+  Type* no_op = new Type(this, b.GetPackage(),
+                         b.GetName() + ".NoOp",
+                         ValidatableType::KIND_GENERATED,
+                         false, false, filename, b.GetLine());
+
   Type* type =
       new InterfaceType(this, b.GetPackage(), b.GetName(), false,
-                        b.IsOneway(), filename, b.GetLine(), stub, proxy);
+                        b.IsOneway(), filename, b.GetLine(), stub, proxy, no_op);
 
   bool success = true;
   success &= Add(type);
   success &= Add(stub);
   success &= Add(proxy);
+  success &= Add(no_op);
   return success;
 }
 
diff --git a/type_java.h b/type_java.h
index 6d35f2a..22d4bfe 100644
--- a/type_java.h
+++ b/type_java.h
@@ -389,7 +389,7 @@ class InterfaceType : public Type {
   InterfaceType(const JavaTypeNamespace* types, const std::string& package,
                 const std::string& name, bool builtIn, bool oneway,
                 const std::string& declFile, int declLine, const Type* stub,
-                const Type* proxy);
+                const Type* proxy, const Type* no_op);
 
   bool OneWay() const;
 
@@ -400,11 +400,13 @@ class InterfaceType : public Type {
   const ValidatableType* NullableType() const override { return this; }
   const Type* GetStub() const { return stub_; }
   const Type* GetProxy() const { return proxy_; }
+  const Type* GetNoOp() const { return no_op_; }
 
  private:
   bool m_oneway;
   const Type* stub_;
   const Type* proxy_;
+  const Type* no_op_;
 };
 
 class ClassLoaderType : public Type {
-- 
2.17.1

