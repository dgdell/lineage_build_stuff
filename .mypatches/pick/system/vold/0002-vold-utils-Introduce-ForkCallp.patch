From 150e41ef8764594ffebfded087e7331e8eb41925 Mon Sep 17 00:00:00 2001
From: Tom Marshall <tdm.code@gmail.com>
Date: Fri, 22 Jun 2018 23:14:38 +0200
Subject: [PATCH 2/2] vold: utils: Introduce ForkCallp

ForkCallp forks and calls a main() style function.  This is useful
for implementing wrappers to various statically linked utilities.

Change-Id: I41f5826f571d445f7ac07f6df65c0ee7f7fbf382
---
 Utils.cpp | 30 ++++++++++++++++++++++++++++++
 Utils.h   |  3 +++
 2 files changed, 33 insertions(+)

diff --git a/Utils.cpp b/Utils.cpp
index 1319bd2..0fc9f08 100644
--- a/Utils.cpp
+++ b/Utils.cpp
@@ -299,6 +299,36 @@ status_t ForkExecvp(const std::vector<std::string>& args, security_context_t con
     return res;
 }
 
+status_t ForkCallp(fork_call_func func, const std::vector<std::string>& args) {
+    size_t argc = args.size();
+    char** argv = (char**) calloc(argc, sizeof(char*));
+    for (size_t i = 0; i < argc; i++) {
+        argv[i] = (char*) args[i].c_str();
+        if (i == 0) {
+            LOG(VERBOSE) << args[i];
+        } else {
+            LOG(VERBOSE) << "    " << args[i];
+        }
+    }
+
+    // For now, don't bother to redirect child stdout/stderr or setup signal handling
+    pid_t pid = fork();
+    if (pid < 0) {
+        LOG(ERROR) << "Failed to fork";
+        abort();
+    }
+    if (pid == 0) {
+        optind = 1;
+        exit(func(argc, argv));
+    }
+    int status;
+    if (TEMP_FAILURE_RETRY(waitpid(pid, &status, 0)) < 0) {
+        status = errno;
+        LOG(ERROR) << "waitpid failed with " << strerror(errno);
+    }
+    return status;
+}
+
 status_t ForkExecvp(const std::vector<std::string>& args,
         std::vector<std::string>& output) {
     return ForkExecvp(args, output, nullptr);
diff --git a/Utils.h b/Utils.h
index c6841ac..99244b2 100644
--- a/Utils.h
+++ b/Utils.h
@@ -87,6 +87,9 @@ status_t ForkExecvp(const std::vector<std::string>& args,
 
 pid_t ForkExecvpAsync(const std::vector<std::string>& args);
 
+typedef int (*fork_call_func)(int argc, char** argv);
+status_t ForkCallp(fork_call_func func, const std::vector<std::string>& args);
+
 status_t ReadRandomBytes(size_t bytes, std::string& out);
 status_t ReadRandomBytes(size_t bytes, char* buffer);
 status_t GenerateRandomUuid(std::string& out);
-- 
2.17.1

