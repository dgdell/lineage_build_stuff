From 574c58bc39a2c412ed536b41c6443221d9e7a95e Mon Sep 17 00:00:00 2001
From: Paul Keith <javelinanddart@gmail.com>
Date: Tue, 20 Feb 2018 16:40:17 +0100
Subject: [PATCH 18/24] vold: Make exfat driver support generic

Author: Paul Keith <javelinanddart@gmail.com>
Date: Wed 21 Feb 2018 01:56:45 +0100

    vold: Make exfat driver support generic

    * Samsung moved to a new driver in their recent devices,
      and inevitably there will be more in the future
    * Make our support generic with the flag TARGET_EXFAT_DRIVER=foo,
      where foo is the -t arg the fs needs to be mounted with

    Change-Id: I984481972bf79bf195321e69906cc5994fb19f2d

Author: Luca Stefani <luca.stefani.ge1@gmail.com>
Date: Sun 25 Feb 2018 18:36:36 +0100

    Add exfat to supported FSs if exfat is enabled

    * Remove fuse exfat while we're at it

    Change-Id: Id6b9ff5d480f7eb1cd7fe6f93db8678aabf83f44

Change-Id: I2d84c14e901b78758f1b04d1aafe930b51c033b6
---
 Android.bp   |  5 +++++
 Utils.cpp    |  6 ++++++
 fs/Exfat.cpp | 10 ++++++++--
 3 files changed, 19 insertions(+), 2 deletions(-)

diff --git a/Android.bp b/Android.bp
index 48dfaaf..7425741 100644
--- a/Android.bp
+++ b/Android.bp
@@ -140,6 +140,11 @@ cc_library_static {
                 "libarcobbvolume",
             ],
         },
+        lineage: {
+            target_exfat_driver: {
+                cflags: ["-DCONFIG_EXFAT_DRIVER=\"%s\""],
+            },
+        },
     },
 }
 
diff --git a/Utils.cpp b/Utils.cpp
index 4a14250..f1a162d 100644
--- a/Utils.cpp
+++ b/Utils.cpp
@@ -564,6 +564,12 @@ bool IsFilesystemSupported(const std::string& fsType) {
     /* fuse filesystems */
     supported.append("fuse\tntfs\n");
 
+#ifdef CONFIG_EXFAT_DRIVER
+    /* Add exfat if an exfat driver is present */
+    if (supported.find(CONFIG_EXFAT_DRIVER + "\n") != std::string::npos)
+        supported.append("nodev\texfat\n");
+#endif
+
     return supported.find(fsType + "\n") != std::string::npos;
 }
 
diff --git a/fs/Exfat.cpp b/fs/Exfat.cpp
index 5c15075..9e614aa 100644
--- a/fs/Exfat.cpp
+++ b/fs/Exfat.cpp
@@ -33,6 +33,12 @@ namespace exfat {
 static const char* kMkfsPath = "/system/bin/mkfs.exfat";
 static const char* kFsckPath = "/system/bin/fsck.exfat";
 
+#ifdef CONFIG_EXFAT_DRIVER
+static constexpr char kExfatDriver[] = CONFIG_EXFAT_DRIVER;
+#else
+static constexpr char kExfatDriver[] = "exfat";
+#endif
+
 bool IsSupported() {
     return access(kMkfsPath, X_OK) == 0 && access(kFsckPath, X_OK) == 0 &&
            IsFilesystemSupported("exfat");
@@ -60,13 +66,13 @@ status_t Mount(const std::string& source, const std::string& target, int ownerUi
     auto mountData = android::base::StringPrintf("uid=%d,gid=%d,fmask=%o,dmask=%o", ownerUid,
                                                  ownerGid, permMask, permMask);
 
-    if (mount(source.c_str(), target.c_str(), "exfat", mountFlags, mountData.c_str()) == 0) {
+    if (mount(source.c_str(), target.c_str(), kExfatDriver, mountFlags, mountData.c_str()) == 0) {
         return 0;
     }
 
     PLOG(ERROR) << "Mount failed; attempting read-only";
     mountFlags |= MS_RDONLY;
-    if (mount(source.c_str(), target.c_str(), "exfat", mountFlags, mountData.c_str()) == 0) {
+    if (mount(source.c_str(), target.c_str(), kExfatDriver, mountFlags, mountData.c_str()) == 0) {
         return 0;
     }
 
-- 
2.17.1

