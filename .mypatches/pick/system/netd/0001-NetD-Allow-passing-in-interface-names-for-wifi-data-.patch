From 939326e9a2230376df25e16cbad1dd7e8aadc66d Mon Sep 17 00:00:00 2001
From: Uldiniad <olivercscott@gmail.com>
Date: Thu, 1 Mar 2018 08:54:00 -0500
Subject: [PATCH] NetD : Allow passing in interface names for wifi/data app
 restriction

CYAN-3976
CRACKLING-834

This is a simplification and adpatation for oreo of:
https://review.lineageos.org/#/c/LineageOS/android_system_netd/+/144246/
by wangjing <wangjing@codeaurora.org>

Change-Id: I085434d70dfe00e9c27b821661fff5076d57e930
---
 server/BandwidthController.cpp | 70 ++++++++++++++++++++++++++++++++++
 server/BandwidthController.h   | 15 ++++++++
 server/CommandListener.cpp     | 36 +++++++++++++++++
 3 files changed, 121 insertions(+)

diff --git a/server/BandwidthController.cpp b/server/BandwidthController.cpp
index 4962b7c..afc770b 100644
--- a/server/BandwidthController.cpp
+++ b/server/BandwidthController.cpp
@@ -28,6 +28,7 @@
 #include <stdio.h>
 #include <stdlib.h>
 #include <string.h>
+#include <algorithm>
 #include <string>
 #include <vector>
 
@@ -238,6 +239,9 @@ int BandwidthController::enableBandwidthControl(bool force) {
     mGlobalAlertTetherCount = 0;
     mSharedQuotaBytes = mSharedAlertBytes = 0;
 
+    restrictAppUidsOnData.clear();
+    restrictAppUidsOnWlan.clear();
+
     flushCleanTables(false);
     std::string commands = Join(IPT_BASIC_ACCOUNTING_COMMANDS, '\n');
     return iptablesRestoreFunction(V4V6, commands, nullptr);
@@ -290,6 +294,72 @@ int BandwidthController::removeNiceApps(int numUids, char *appUids[]) {
                                  IptJumpReturn, IptOpDelete);
 }
 
+int BandwidthController::addRestrictAppsOnData(const std::string& iface, int numUids,
+                                               char *appUids[]) {
+    return manipulateRestrictAppsInOut(iface, toStrVec(numUids, appUids), restrictAppUidsOnData,
+                                       IptOpInsert);
+}
+
+int BandwidthController::removeRestrictAppsOnData(const std::string& iface, int numUids,
+                                                  char *appUids[]) {
+    return manipulateRestrictAppsInOut(iface, toStrVec(numUids, appUids), restrictAppUidsOnData,
+                                       IptOpDelete);
+}
+
+int BandwidthController::addRestrictAppsOnWlan(const std::string& iface, int numUids,
+                                               char *appUids[]) {
+    return manipulateRestrictAppsInOut(iface, toStrVec(numUids, appUids), restrictAppUidsOnWlan,
+                                       IptOpInsert);
+}
+
+int BandwidthController::removeRestrictAppsOnWlan(const std::string& iface, int numUids,
+                                                  char *appUids[]) {
+    return manipulateRestrictAppsInOut(iface, toStrVec(numUids, appUids), restrictAppUidsOnWlan,
+                                       IptOpDelete);
+}
+
+int BandwidthController::manipulateRestrictAppsInOut(const std::string& iface,
+                                                     const std::vector<std::string>& appStrUids,
+                                                     std::vector<int /*appUid*/>& restrictAppUids,
+                                                     IptOp op) {
+    int ret;
+    std::string chain;
+
+    chain = StringPrintf("INPUT -i %s", iface.c_str());
+    ret = manipulateRestrictApps(appStrUids, chain, restrictAppUids, op);
+    if (ret != 0) {
+        return ret;
+    }
+    chain = StringPrintf("OUTPUT -o %s", iface.c_str());
+    ret = manipulateRestrictApps(appStrUids, chain, restrictAppUids, op);
+    return ret;
+}
+
+int BandwidthController::manipulateRestrictApps(const std::vector<std::string>& appStrUids,
+                                                const std::string& chain,
+                                                std::vector<int /*appUid*/>& restrictAppUids,
+                                                IptOp op) {
+    for (const auto& appStrUid : appStrUids) {
+        int uid = std::stoi(appStrUid, nullptr, 0);
+        auto it = std::find(restrictAppUids.begin(), restrictAppUids.end(), uid);
+        bool found = (it != restrictAppUids.end());
+        if (op == IptOpDelete) {
+            if (!found) {
+                ALOGE("No such appUid %d to remove", uid);
+                return -1;
+            }
+            restrictAppUids.erase(it);
+        } else {
+            if (found && android::base::StartsWith(chain, "INPUT")) {
+                ALOGE("appUid %d exists already", uid);
+                return -1;
+            }
+            restrictAppUids.push_back(uid);
+        }
+    }
+    return manipulateSpecialApps(appStrUids, chain, IptJumpReject, op);
+}
+
 int BandwidthController::manipulateSpecialApps(const std::vector<std::string>& appStrUids,
                                                const std::string& chain, IptJumpOp jumpHandling,
                                                IptOp op) {
diff --git a/server/BandwidthController.h b/server/BandwidthController.h
index 0eef581..4c98fc7 100644
--- a/server/BandwidthController.h
+++ b/server/BandwidthController.h
@@ -88,6 +88,11 @@ public:
     int addNiceApps(int numUids, char *appUids[]);
     int removeNiceApps(int numUids, char *appUids[]);
 
+    int addRestrictAppsOnData(const std::string& iface, int numUids, char *appUids[]);
+    int removeRestrictAppsOnData(const std::string& iface, int numUids, char *appUids[]);
+    int addRestrictAppsOnWlan(const std::string& iface, int numUids, char *appUids[]);
+    int removeRestrictAppsOnWlan(const std::string& iface, int numUids, char *appUids[]);
+
     int setGlobalAlert(int64_t bytes);
     int removeGlobalAlert();
     int setGlobalAlertInForwardChain();
@@ -135,6 +140,13 @@ public:
 
     std::string makeDataSaverCommand(IptablesTarget target, bool enable);
 
+    int manipulateRestrictAppsInOut(const std::string& iface,
+                                    const std::vector<std::string>& appStrUids,
+                                    std::vector<int /*appUid*/>& restrictAppUids, IptOp appOp);
+
+    int manipulateRestrictApps(const std::vector<std::string>& appStrUids, const std::string& chain,
+                               std::vector<int /*appUid*/>& restrictAppUids, IptOp appOp);
+
     int manipulateSpecialApps(const std::vector<std::string>& appStrUids, const std::string& chain,
                               IptJumpOp jumpHandling, IptOp appOp);
 
@@ -203,6 +215,9 @@ public:
 
     std::map<std::string, QuotaInfo> mQuotaIfaces;
     std::set<std::string> mSharedQuotaIfaces;
+
+    std::vector<int /*appUid*/> restrictAppUidsOnData;
+    std::vector<int /*appUid*/> restrictAppUidsOnWlan;
 };
 
 #endif
diff --git a/server/CommandListener.cpp b/server/CommandListener.cpp
index 2795482..ff5c2a7 100644
--- a/server/CommandListener.cpp
+++ b/server/CommandListener.cpp
@@ -890,6 +890,42 @@ int CommandListener::BandwidthControlCmd::runCommand(SocketClient *cli, int argc
         sendGenericOkFail(cli, rc);
         return 0;
     }
+    if (!strcmp(argv[1], "addrestrictappsondata")) {
+        if (argc < 4) {
+            sendGenericSyntaxError(cli, "addrestrictappsondata <interface> <appUid> ...");
+            return 0;
+        }
+        int rc = gCtls->bandwidthCtrl.addRestrictAppsOnData(argv[2], argc - 3, argv + 3);
+        sendGenericOkFail(cli, rc);
+        return 0;
+    }
+    if (!strcmp(argv[1], "removerestrictappsondata")) {
+        if (argc < 4) {
+            sendGenericSyntaxError(cli, "removerestrictappsondata <interface> <appUid> ...");
+            return 0;
+        }
+        int rc = gCtls->bandwidthCtrl.removeRestrictAppsOnData(argv[2], argc - 3, argv + 3);
+        sendGenericOkFail(cli, rc);
+        return 0;
+    }
+    if (!strcmp(argv[1], "addrestrictappsonwlan")) {
+        if (argc < 4) {
+            sendGenericSyntaxError(cli, "addrestrictappsonwlan <interface> <appUid> ...");
+            return 0;
+        }
+        int rc = gCtls->bandwidthCtrl.addRestrictAppsOnWlan(argv[2], argc - 3, argv + 3);
+        sendGenericOkFail(cli, rc);
+        return 0;
+    }
+    if (!strcmp(argv[1], "removerestrictappsonwlan")) {
+        if (argc < 4) {
+            sendGenericSyntaxError(cli, "removerestrictappsonwlan <inteface> <appUid> ...");
+            return 0;
+        }
+        int rc = gCtls->bandwidthCtrl.removeRestrictAppsOnWlan(argv[2], argc - 3, argv + 3);
+        sendGenericOkFail(cli, rc);
+        return 0;
+    }
     if (!strcmp(argv[1], "setglobalalert") || !strcmp(argv[1], "sga")) {
         if (argc != 3) {
             sendGenericSyntaxError(cli, "setglobalalert <bytes>");
-- 
2.17.0

