From 7ef7a5c5b759eab3f1b464335f257879417823ca Mon Sep 17 00:00:00 2001
From: Danesh M <daneshm90@gmail.com>
Date: Thu, 1 Mar 2018 08:54:15 -0500
Subject: [PATCH] NetD : Allow passing in interface names for wifi/data app
 restriction

CYAN-3976
CRACKLING-834

Change-Id: I085434d70dfe00e9c27b821661fff5076d57e930
---
 server/BandwidthController.cpp | 74 ++++++++++++++++++++++++++++++++++
 server/BandwidthController.h   | 15 +++++++
 server/CommandListener.cpp     | 56 +++++++++++++++++++++++++
 3 files changed, 145 insertions(+)

diff --git a/server/BandwidthController.cpp b/server/BandwidthController.cpp
index 4962b7c..cbaad5a 100644
--- a/server/BandwidthController.cpp
+++ b/server/BandwidthController.cpp
@@ -238,6 +238,9 @@ int BandwidthController::enableBandwidthControl(bool force) {
     mGlobalAlertTetherCount = 0;
     mSharedQuotaBytes = mSharedAlertBytes = 0;
 
+    restrictAppUidsOnData.clear();
+    restrictAppUidsOnWlan.clear();
+
     flushCleanTables(false);
     std::string commands = Join(IPT_BASIC_ACCOUNTING_COMMANDS, '\n');
     return iptablesRestoreFunction(V4V6, commands, nullptr);
@@ -290,6 +293,77 @@ int BandwidthController::removeNiceApps(int numUids, char *appUids[]) {
                                  IptJumpReturn, IptOpDelete);
 }
 
+int BandwidthController::addRestrictAppsOnData(const std::string& iface, int numUids,
+                                               char *appUids[]) {
+    return manipulateRestrictAppsInOut(iface, toStrVec(numUids, appUids), restrictAppUidsOnData,
+                                       IptOpInsert);
+}
+
+int BandwidthController::removeRestrictAppsOnData(const std::string& iface, int numUids,
+                                                  char *appUids[]) {
+    return manipulateRestrictAppsInOut(iface, toStrVec(numUids, appUids), restrictAppUidsOnData,
+                                       IptOpDelete);
+}
+
+int BandwidthController::addRestrictAppsOnWlan(const std::string& iface, int numUids,
+                                               char *appUids[]) {
+    return manipulateRestrictAppsInOut(iface, toStrVec(numUids, appUids), restrictAppUidsOnWlan,
+                                       IptOpInsert);
+}
+
+int BandwidthController::removeRestrictAppsOnWlan(const std::string& iface, int numUids,
+                                                  char *appUids[]) {
+    return manipulateRestrictAppsInOut(iface, toStrVec(numUids, appUids), restrictAppUidsOnWlan,
+                                       IptOpDelete);
+}
+
+int BandwidthController::manipulateRestrictAppsInOut(const std::string& iface,
+                                                     const std::vector<std::string>& appStrUids,
+                                                     std::vector<int /*appUid*/> &restrictAppUids,
+                                                     IptOp op) {
+    int ret;
+    std::string chain;
+
+    chain = StringPrintf("INPUT -i %s", iface.c_str());
+    ret = manipulateRestrictApps(appStrUids, chain, restrictAppUids, op);
+    if (ret != 0) {
+        return ret;
+    }
+    chain = StringPrintf("OUTPUT -o %s", iface.c_str());
+    ret = manipulateRestrictApps(appStrUids, chain, restrictAppUids, op);
+    return ret;
+}
+
+int BandwidthController::manipulateRestrictApps(const std::vector<std::string>& appStrUids,
+                                                const std::string& chain,
+                                                std::vector<int /*appUid*/> &restrictAppUids,
+                                                IptOp op) {
+    for (const auto& appStrUid : appStrUids) {
+        int uid = std::stoi(appStrUid, nullptr, 0);
+        std::vector<int /*uid*/>::iterator it;
+        bool isOutputChain = chain == "OUTPUT";
+        for (it = restrictAppUids.begin(); it != restrictAppUids.end(); it++) {
+            if (*it == uid)
+                break;
+        }
+        bool found = (it != restrictAppUids.end());
+        if (op == IptOpDelete) {
+            if (!found) {
+                ALOGE("No such appUid %d to remove", uid);
+                return -1;
+            }
+            restrictAppUids.erase(it);
+        } else {
+            if (found && !isOutputChain) {
+                ALOGE("appUid %d exists already", uid);
+                return -1;
+            }
+            restrictAppUids.push_back(uid);
+        }
+    }
+    return manipulateSpecialApps(appStrUids, chain, IptJumpReject, op);
+}
+
 int BandwidthController::manipulateSpecialApps(const std::vector<std::string>& appStrUids,
                                                const std::string& chain, IptJumpOp jumpHandling,
                                                IptOp op) {
diff --git a/server/BandwidthController.h b/server/BandwidthController.h
index 0eef581..365811d 100644
--- a/server/BandwidthController.h
+++ b/server/BandwidthController.h
@@ -88,6 +88,11 @@ public:
     int addNiceApps(int numUids, char *appUids[]);
     int removeNiceApps(int numUids, char *appUids[]);
 
+    int addRestrictAppsOnData(const std::string& iface, int numUids, char *appUids[]);
+    int removeRestrictAppsOnData(const std::string& iface, int numUids, char *appUids[]);
+    int addRestrictAppsOnWlan(const std::string& iface, int numUids, char *appUids[]);
+    int removeRestrictAppsOnWlan(const std::string& iface, int numUids, char *appUids[]);
+
     int setGlobalAlert(int64_t bytes);
     int removeGlobalAlert();
     int setGlobalAlertInForwardChain();
@@ -135,6 +140,13 @@ public:
 
     std::string makeDataSaverCommand(IptablesTarget target, bool enable);
 
+    int manipulateRestrictAppsInOut(const std::string& iface,
+                                    const std::vector<std::string>& appStrUids,
+                                    std::vector<int /*appUid*/> &restrictAppUids, IptOp appOp);
+
+    int manipulateRestrictApps(const std::vector<std::string>& appStrUids, const std::string& chain,
+                               std::vector<int /*appUid*/> &restrictAppUids, IptOp appOp);
+
     int manipulateSpecialApps(const std::vector<std::string>& appStrUids, const std::string& chain,
                               IptJumpOp jumpHandling, IptOp appOp);
 
@@ -203,6 +215,9 @@ public:
 
     std::map<std::string, QuotaInfo> mQuotaIfaces;
     std::set<std::string> mSharedQuotaIfaces;
+
+    std::vector<int /*appUid*/> restrictAppUidsOnWlan;
+    std::vector<int /*appUid*/> restrictAppUidsOnData;
 };
 
 #endif
diff --git a/server/CommandListener.cpp b/server/CommandListener.cpp
index 2795482..bdef036 100644
--- a/server/CommandListener.cpp
+++ b/server/CommandListener.cpp
@@ -994,6 +994,62 @@ int CommandListener::BandwidthControlCmd::runCommand(SocketClient *cli, int argc
         return 0;
 
     }
+    if (!strcmp(argv[1], "addrestrictappsondata")) {
+        if (argc < 4) {
+            cli->sendMsg(ResponseCode::CommandSyntaxError,
+                       "addrestrictappsondata <interface> <appUid> ...", false);
+            return 0;
+        }
+        int rc = gCtls->bandwidthCtrl.addRestrictAppsOnData(argv[2], argc - 3, argv + 3);
+        if (!rc) {
+            cli->sendMsg(ResponseCode::CommandOkay, "Firewall command succeeeded", false);
+        } else {
+            cli->sendMsg(ResponseCode::OperationFailed, "Firewall command failed", false);
+        }
+        return 0;
+    }
+    if (!strcmp(argv[1], "removerestrictappsondata")) {
+        if (argc < 4) {
+            cli->sendMsg(ResponseCode::CommandSyntaxError,
+                       "removerestrictappsondata <interface> <appUid> ...", false);
+            return 0;
+        }
+        int rc = gCtls->bandwidthCtrl.removeRestrictAppsOnData(argv[2], argc - 3, argv + 3);
+        if (!rc) {
+            cli->sendMsg(ResponseCode::CommandOkay, "Firewall command succeeeded", false);
+        } else {
+            cli->sendMsg(ResponseCode::OperationFailed, "Firewall command failed", false);
+        }
+        return 0;
+    }
+    if (!strcmp(argv[1], "addrestrictappsonwlan")) {
+        if (argc < 4) {
+            cli->sendMsg(ResponseCode::CommandSyntaxError,
+                         "addrestrictappsonwlan <interface> <appUid> ...", false);
+            return 0;
+        }
+        int rc = gCtls->bandwidthCtrl.addRestrictAppsOnWlan(argv[2], argc - 3, argv + 3);
+        if (!rc) {
+            cli->sendMsg(ResponseCode::CommandOkay, "Firewall command succeeeded", false);
+        } else {
+            cli->sendMsg(ResponseCode::OperationFailed, "Firewall command failed", false);
+        }
+        return 0;
+    }
+    if (!strcmp(argv[1], "removerestrictappsonwlan")) {
+        if (argc < 4) {
+            cli->sendMsg(ResponseCode::CommandSyntaxError,
+                         "removerestrictappsonwlan <inteface> <appUid> ...", false);
+            return 0;
+        }
+        int rc = gCtls->bandwidthCtrl.removeRestrictAppsOnWlan(argv[2], argc - 3, argv + 3);
+        if (!rc) {
+            cli->sendMsg(ResponseCode::CommandOkay, "Firewall command succeeeded", false);
+        } else {
+            cli->sendMsg(ResponseCode::OperationFailed, "Firewall command failed", false);
+        }
+        return 0;
+    }
 
     cli->sendMsg(ResponseCode::CommandSyntaxError, "Unknown bandwidth cmd", false);
     return 0;
-- 
2.17.0

