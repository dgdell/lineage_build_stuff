From f77f4a325db7787e5c66335a775dc36d76545d9b Mon Sep 17 00:00:00 2001
From: Luca Stefani <luca.stefani.ge1@gmail.com>
Date: Fri, 19 Oct 2018 12:22:41 +0200
Subject: [PATCH 2/2] Merge android-9.0.0_r12

commit 462e0c58f297bde2fb63b93872e668c6a81a7fc9
Merge: 300f909 83fbc4b
Author: android-build-team Robot <android-build-team-robot@google.com>
Date:   Mon Jul 23 23:06:43 2018 +0000

    Merge cherrypicks of [4607809, 4607810, 4609855, 4608092, 4608093, 4607931, 4607932, 4609887, 4609888, 4609907, 4609873, 4609874, 4609927, 4609928, 4609967, 4609968, 4609969, 4609970, 4609971, 4607550, 4607551, 4607552, 4607553, 4607554, 4607555, 4607556, 4607557, 4607558, 4607559, 4609929, 4608094, 4608095, 4608096, 4608097, 4608098, 4608099, 4610018, 4610019, 4610047] into pi-dr1-release

    Change-Id: I60340a368244bd8f979edf01036450d2d2a26577

commit 83fbc4b31a1f3231df7c27b8a6205193fcb3ed5a
Author: Erik Kline <ek@google.com>
Date:   Thu Jun 14 15:16:27 2018 +0900

    Don't continuously reevaluate DNS-over-TLS unless strict mode

    This is because sending TCP SYNs and not getting any replies can trip
    the mobile data stall detector. The data stall detection mechanism
    needs to be re-evaluated, but until such time only do reevaluation
    if a network is using strict mode.

    Additionally, revalidate failed servers whenever a DNS configuration is
    pushed down to netd.

    Test: as follows
        - built, flashed, booted
        - observed tcpdump traffic in opportunistic and strict mode
        - ./system/netd/tests/runtests.sh passes
    Bug: 64133961
    Bug: 72344805
    Bug: 109928338
    Merged-In: I729bc9cd7ba6cfc088aaf0aec3e770f14d1ac10d
    Merged-In: If62c3348fe115f9791a136bf16ccf8bacccff36e
    Change-Id: I15a9c2d328fec2910e47a477cbc1dcaa5323675a
    (cherry picked from commit f4b7b1f63e6e8ed3cfeee09570709cad81419458)

commit 300f909da9536e8cb1883de8ff4e15b79e0137b2
Merge: 3d1f64e e8ff8d7
Author: android-build-team Robot <android-build-team-robot@google.com>
Date:   Thu Jun 28 03:32:16 2018 +0000

    Merge "Snap for 4866883 from 4cef4147bfc1c8708c32972191690e1cd449e2e1 to pi-dr1-release" into pi-dr1-release

commit e8ff8d7484ddbce9bcc2e8a696213333537b4fbe
Merge: 4aa84ab 4cef414
Author: android-build-team Robot <android-build-team-robot@google.com>
Date:   Thu Jun 28 03:24:28 2018 +0000

    Snap for 4866883 from 4cef4147bfc1c8708c32972191690e1cd449e2e1 to pi-dr1-release

    Change-Id: I75a2b128969a5d31483538b20ed9a0e0ce8fcb32

commit 3d1f64e0b53adf7e1eaf82b58c7c75fc3e90c491
Merge: 4aa84ab 4cef414
Author: android-build-team Robot <android-build-team-robot@google.com>
Date:   Thu Jun 28 03:13:38 2018 +0000

    Snap for 4866863 from 4cef4147bfc1c8708c32972191690e1cd449e2e1 to pi-dr1-release

    Change-Id: I11898ab5e88b2bad74d1fa9cf2858f29211d925b

commit 4cef4147bfc1c8708c32972191690e1cd449e2e1
Author: Tyler Wear <twear@codeaurora.org>
Date:   Mon Nov 6 18:34:11 2017 -0800

    netd: Active FTP Helper

    Enable conntrack helper for active FTP connections when
    tethering is started.

    Bug:69265432
    CRs-fixed:2136660

    Test: as follows
          - Boot device - Pass
          - Start tethering - Pass
          - Start active FTP on tethered host (USB) - Pass
          - Download file over FTP - Pass
          - make -j64 netd_unit_test
                adb shell /data/nativetest64/netd_unit_test/netd_unit_test - Pass

    Change-Id: I5c812afe9602e80ea1c42d0cafba40fe6019a995

commit 4aa84ab2111f8ba3bc6f6e2d3e0cd176ba3de903
Merge: d6178af 33ef503
Author: android-build-team Robot <android-build-team-robot@google.com>
Date:   Thu Jun 7 03:01:58 2018 +0000

    Snap for 4826407 from 33ef503e865d634a10f4a788f9713160141f6dd4 to pi-dr1-release

    Change-Id: I99218ba406d1019a6ad8fe4a4b1018b82953858a

commit d6178afc766582d9e379925ddc78fbfd874e48bb
Merge: c42cc25 c5066b4
Author: android-build-team Robot <android-build-team-robot@google.com>
Date:   Tue Jun 5 03:02:10 2018 +0000

    Snap for 4820872 from c5066b4a78c3fdbaaa8fc7f4896d11d111a653a4 to pi-dr1-release

    Change-Id: I8cb969f4a2dba6a8a970cd35cd5ce3362f99a71c

Change-Id: Ife1ac1b10e4c68e529a8bb91831749f8a3bbdbaa
---
 server/ResolverController.cpp   | 41 +++++++++++++++++++++++----------
 server/TetherController.cpp     |  4 ++++
 server/TetherControllerTest.cpp |  8 +++++++
 3 files changed, 41 insertions(+), 12 deletions(-)

diff --git a/server/ResolverController.cpp b/server/ResolverController.cpp
index f8e1fb3..0812e7a 100644
--- a/server/ResolverController.cpp
+++ b/server/ResolverController.cpp
@@ -168,9 +168,7 @@ class PrivateDnsConfiguration {
 
         // Add any new or changed servers to the tracker, and initiate async checks for them.
         for (const auto& server : tlsServers) {
-            // Don't probe a server more than once.  This means that the only way to
-            // re-check a failed server is to remove it and re-add it from the netId.
-            if (tracker.count(server) == 0) {
+            if (needsValidation(tracker, server)) {
                 validatePrivateDnsProvider(server, tracker, netId);
             }
         }
@@ -305,7 +303,15 @@ class PrivateDnsConfiguration {
             return DONT_REEVALUATE;
         }
 
-        bool reevaluationStatus = success ? DONT_REEVALUATE : NEEDS_REEVALUATION;
+        const auto mode = mPrivateDnsModes.find(netId);
+        if (mode == mPrivateDnsModes.end()) {
+            ALOGW("netId %u has no private DNS validation mode", netId);
+            return DONT_REEVALUATE;
+        }
+        const bool modeDoesReevaluation = (mode->second == PrivateDnsMode::STRICT);
+
+        bool reevaluationStatus = (success || !modeDoesReevaluation)
+                ? DONT_REEVALUATE : NEEDS_REEVALUATION;
 
         auto& tracker = netPair->second;
         auto serverPair = tracker.find(server);
@@ -348,9 +354,10 @@ class PrivateDnsConfiguration {
             }
         } else {
             // Validation failure is expected if a user is on a captive portal.
-            // TODO: Trigger a second validation attempt after captive portal login
-            // succeeds.
-            tracker[server] = Validation::fail;
+            // A second validation attempt is triggered in opportunistic mode
+            // by the framework after captive portal login succeeds.
+            tracker[server] = (reevaluationStatus == NEEDS_REEVALUATION)
+                    ? Validation::in_process : Validation::fail;
             if (DBG) {
                 ALOGD("Validation failed for %s!", addrToString(&(server.ss)).c_str());
             }
@@ -359,6 +366,16 @@ class PrivateDnsConfiguration {
         return reevaluationStatus;
     }
 
+
+    // Start validation for newly added servers as well as any servers that have
+    // landed in Validation::fail state. Note that servers that have failed
+    // multiple validation attempts but for which there is still a validating
+    // thread running are marked as being Validation::in_process.
+    static bool needsValidation(const PrivateDnsTracker& tracker, const DnsTlsServer& server) {
+        const auto& iter = tracker.find(server);
+        return (iter == tracker.end()) || (iter->second == Validation::fail);
+    }
+
     EventReporter mEventReporter;
 
     std::mutex mPrivateDnsLock;
@@ -368,7 +385,7 @@ class PrivateDnsConfiguration {
     std::map<unsigned, PrivateDnsTracker> mPrivateDnsTransports GUARDED_BY(mPrivateDnsLock);
     android::sp<android::net::metrics::INetdEventListener>
             mNetdEventListener GUARDED_BY(mPrivateDnsLock);
-} privateDnsConfiguration;
+} sPrivateDnsConfiguration;
 
 }  // namespace
 
@@ -382,7 +399,7 @@ int ResolverController::setDnsServers(unsigned netId, const char* searchDomains,
 
 ResolverController::PrivateDnsStatus
 ResolverController::getPrivateDnsStatus(unsigned netId) const {
-    return privateDnsConfiguration.getStatus(netId);
+    return sPrivateDnsConfiguration.getStatus(netId);
 }
 
 int ResolverController::clearDnsServers(unsigned netId) {
@@ -390,7 +407,7 @@ int ResolverController::clearDnsServers(unsigned netId) {
     if (DBG) {
         ALOGD("clearDnsServers netId = %u\n", netId);
     }
-    privateDnsConfiguration.clear(netId);
+    sPrivateDnsConfiguration.clear(netId);
     return 0;
 }
 
@@ -486,7 +503,7 @@ int ResolverController::setResolverConfiguration(int32_t netId,
         return -EINVAL;
     }
 
-    const int err = privateDnsConfiguration.set(netId, tlsServers, tlsName, tlsFingerprints);
+    const int err = sPrivateDnsConfiguration.set(netId, tlsServers, tlsName, tlsFingerprints);
     if (err != 0) {
         return err;
     }
@@ -590,7 +607,7 @@ void ResolverController::dump(DumpWriter& dw, unsigned netId) {
                     static_cast<unsigned>(params.max_samples));
         }
 
-        privateDnsConfiguration.dump(dw, netId);
+        sPrivateDnsConfiguration.dump(dw, netId);
     }
     dw.decIndent();
 }
diff --git a/server/TetherController.cpp b/server/TetherController.cpp
index 6e805f5..06eaf94 100644
--- a/server/TetherController.cpp
+++ b/server/TetherController.cpp
@@ -630,6 +630,10 @@ int TetherController::setForwardRules(bool add, const char *intIface, const char
     }
 
     std::vector<std::string> v4 = {
+        "*raw",
+        StringPrintf("%s %s -p tcp --dport 21 -i %s -j CT --helper ftp",
+                     op, LOCAL_RAW_PREROUTING, intIface),
+        "COMMIT",
         "*filter",
         StringPrintf("%s %s -i %s -o %s -m state --state ESTABLISHED,RELATED -g %s",
                      op, LOCAL_FORWARD, extIface, intIface, LOCAL_TETHER_COUNTERS_CHAIN),
diff --git a/server/TetherControllerTest.cpp b/server/TetherControllerTest.cpp
index bcdb106..6e77bfe 100644
--- a/server/TetherControllerTest.cpp
+++ b/server/TetherControllerTest.cpp
@@ -127,6 +127,10 @@ protected:
             "COMMIT\n", intIf);
 
         std::vector<std::string> v4Cmds = {
+            "*raw",
+            StringPrintf("-A tetherctrl_raw_PREROUTING -p tcp --dport 21 -i %s -j CT --helper ftp",
+                         intIf),
+            "COMMIT",
             "*filter",
             StringPrintf("-A tetherctrl_FORWARD -i %s -o %s -m state --state"
                          " ESTABLISHED,RELATED -g tetherctrl_counters", extIf, intIf),
@@ -195,6 +199,10 @@ protected:
             "COMMIT\n", intIf);
 
         std::vector<std::string> v4Cmds = {
+            "*raw",
+            StringPrintf("-D tetherctrl_raw_PREROUTING -p tcp --dport 21 -i %s -j CT --helper ftp",
+                         intIf),
+            "COMMIT",
             "*filter",
             StringPrintf("-D tetherctrl_FORWARD -i %s -o %s -m state --state"
                          " ESTABLISHED,RELATED -g tetherctrl_counters", extIf, intIf),
-- 
2.17.1

