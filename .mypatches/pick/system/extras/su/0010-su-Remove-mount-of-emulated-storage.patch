From e2171dc0939524b31e7b6bf829467bd93f09f69a Mon Sep 17 00:00:00 2001
From: Luca Stefani <luca.stefani.ge1@gmail.com>
Date: Sun, 26 Aug 2018 19:25:42 +0200
Subject: [PATCH 10/11] su: Remove mount of emulated storage

Change-Id: Ic36addeb2edbadb579fa2ab01d4c93b10c2f5d58
---
 daemon.c | 52 +---------------------------------------------------
 1 file changed, 1 insertion(+), 51 deletions(-)

diff --git a/daemon.c b/daemon.c
index 80f735b..29ff8ca 100644
--- a/daemon.c
+++ b/daemon.c
@@ -15,10 +15,7 @@
 ** limitations under the License.
 */
 
-#define _GNU_SOURCE /* for unshare() */
-
 #include <stdlib.h>
-#include <sys/mount.h>
 #include <sys/socket.h>
 #include <sys/stat.h>
 #include <sys/types.h>
@@ -26,7 +23,6 @@
 #include <sys/wait.h>
 #include <unistd.h>
 
-#include <cutils/multiuser.h>
 #include <log/log.h>
 
 #include "pts.h"
@@ -200,41 +196,6 @@ static void write_string(int fd, char* val) {
     }
 }
 
-static void mount_emulated_storage(int user_id) {
-    const char* emulated_source = getenv("EMULATED_STORAGE_SOURCE");
-    const char* emulated_target = getenv("EMULATED_STORAGE_TARGET");
-    const char* legacy = getenv("EXTERNAL_STORAGE");
-
-    if (!emulated_source || !emulated_target) {
-        // No emulated storage is present
-        return;
-    }
-
-    // Create a second private mount namespace for our process
-    if (unshare(CLONE_NEWNS) < 0) {
-        PLOGE("unshare");
-        return;
-    }
-
-    if (mount("rootfs", "/", NULL, MS_SLAVE | MS_REC, NULL) < 0) {
-        PLOGE("mount rootfs as slave");
-        return;
-    }
-
-    // /mnt/shell/emulated -> /storage/emulated
-    if (mount(emulated_source, emulated_target, NULL, MS_BIND, NULL) < 0) {
-        PLOGE("mount emulated storage");
-    }
-
-    char target_user[PATH_MAX];
-    snprintf(target_user, PATH_MAX, "%s/%d", emulated_target, user_id);
-
-    // /mnt/shell/emulated/<user> -> /storage/emulated/legacy
-    if (mount(target_user, legacy, NULL, MS_BIND | MS_REC, NULL) < 0) {
-        PLOGE("mount legacy path");
-    }
-}
-
 static int run_daemon_child(int infd, int outfd, int errfd, int argc, char** argv) {
     if (-1 == dup2(outfd, STDOUT_FILENO)) {
         PLOGE("dup2 child outfd");
@@ -278,7 +239,6 @@ static int daemon_accept(int fd) {
 
     daemon_from_uid = credentials.uid;
 
-    int mount_storage = read_int(fd);
     // The the FDs for each of the streams
     int infd = recv_fd(fd);
     int outfd = recv_fd(fd);
@@ -414,10 +374,6 @@ static int daemon_accept(int fd) {
     }
     free(pts_slave);
 
-    if (mount_storage) {
-        mount_emulated_storage(multiuser_get_user_id(daemon_from_uid));
-    }
-
     child_result = run_daemon_child(infd, outfd, errfd, argc, argv);
     for (i = 0; i < argc; i++) {
         free(argv[i]);
@@ -572,8 +528,6 @@ int connect_daemon(int argc, char* argv[], int ppid) {
 
     ALOGV("connecting client %d", getpid());
 
-    int mount_storage = getenv("MOUNT_EMULATED_STORAGE") != NULL;
-
     // Determine which one of our streams are attached to a TTY
     int atty = 0;
 
@@ -601,7 +555,6 @@ int connect_daemon(int argc, char* argv[], int ppid) {
     write_string(socketfd, pts_slave);
     // Parent PID
     write_int(socketfd, ppid);
-    write_int(socketfd, mount_storage);
 
     // Send stdin
     if (atty & ATTY_IN) {
@@ -631,14 +584,11 @@ int connect_daemon(int argc, char* argv[], int ppid) {
     }
 
     // Number of command line arguments
-    write_int(socketfd, mount_storage ? argc - 1 : argc);
+    write_int(socketfd, argc);
 
     // Command line arguments
     int i;
     for (i = 0; i < argc; i++) {
-        if (i == 1 && mount_storage) {
-            continue;
-        }
         write_string(socketfd, argv[i]);
     }
 
-- 
2.17.1

