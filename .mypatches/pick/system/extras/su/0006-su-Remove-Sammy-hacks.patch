From 4ec2af32a8426f11da5e58b050f3b1eece951c75 Mon Sep 17 00:00:00 2001
From: Luca Stefani <luca.stefani.ge1@gmail.com>
Date: Sun, 26 Aug 2018 11:59:12 +0200
Subject: [PATCH 06/11] su: Remove Sammy hacks

Change-Id: I3b037e200b1d8b8817369230ebc036d3b47f31cd
---
 su.c | 29 -----------------------------
 1 file changed, 29 deletions(-)

diff --git a/su.c b/su.c
index 366cbee..df1ca30 100644
--- a/su.c
+++ b/su.c
@@ -315,27 +315,6 @@ int access_disabled(const struct su_initiator* from) {
     return 0;
 }
 
-static void fork_for_samsung(void) {
-    // Samsung CONFIG_SEC_RESTRICT_SETUID wants the parent process to have
-    // EUID 0, or else our setresuid() calls will be denied.  So make sure
-    // all such syscalls are executed by a child process.
-    int rv;
-
-    switch (fork()) {
-        case 0:
-            return;
-        case -1:
-            PLOGE("fork");
-            exit(1);
-        default:
-            if (wait(&rv) < 0) {
-                exit(1);
-            } else {
-                exit(WEXITSTATUS(rv));
-            }
-    }
-}
-
 int main(int argc, char* argv[]) {
     if (getuid() != geteuid()) {
         ALOGE("must not be a setuid binary");
@@ -352,7 +331,6 @@ int su_main(int argc, char* argv[], int need_client) {
     }
 
     int ppid = getppid();
-    fork_for_samsung();
 
     // Sanitize all secure environment variables (from linker_environ.c in AOSP linker).
     /* The same list than GLibc at this point */
@@ -506,13 +484,6 @@ int su_main(int argc, char* argv[], int need_client) {
 
     ALOGE("SU from: %s", ctx.from.name);
 
-    // the latter two are necessary for stock ROMs like note 2 which do dumb things with su, or
-    // crash otherwise
-    if (ctx.from.uid == AID_ROOT) {
-        ALOGD("Allowing root/system/radio.");
-        allow(&ctx, NULL);
-    }
-
     // check if superuser is disabled completely
     if (access_disabled(&ctx.from)) {
         ALOGD("access_disabled");
-- 
2.17.1

