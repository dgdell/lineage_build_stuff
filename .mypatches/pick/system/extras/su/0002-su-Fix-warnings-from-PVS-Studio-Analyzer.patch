From 31643b360a93c7e845a436c99a934c05a7372b2f Mon Sep 17 00:00:00 2001
From: Tom Marshall <tdm.code@gmail.com>
Date: Fri, 24 Aug 2018 19:38:42 +0200
Subject: [PATCH 02/14] su: Fix warnings from PVS Studio Analyzer

 * Fix leak of "ops" in appops_start_op_su().
 * Fix leak of "packages" and returned value in resolve_package_name().
 * Fix various potential NULL pointer dereferences.
 * Fix various signedness issues.

Change-Id: I3e0f64a31298b42f8f7d9ed1b2c0877f0697a422
---
 binder/appops-wrapper.cpp | 15 +++++++--------
 binder/pm-wrapper.c       | 16 +++++++++-------
 binder/pm-wrapper.h       |  2 +-
 daemon.c                  |  9 ++++++++-
 su.c                      | 19 +++++++++++--------
 utils.c                   |  2 ++
 6 files changed, 38 insertions(+), 25 deletions(-)

diff --git a/binder/appops-wrapper.cpp b/binder/appops-wrapper.cpp
index acc26b3..848a8de 100644
--- a/binder/appops-wrapper.cpp
+++ b/binder/appops-wrapper.cpp
@@ -13,16 +13,15 @@ int appops_start_op_su(int uid, const char *pkgName) {
 
     int mode = ops->startOp(AppOpsManager::OP_SU, uid, String16(pkgName));
 
-    switch (mode) {
-        case AppOpsManager::MODE_ALLOWED:
-          ALOGD("Privilege elevation allowed by appops");
-          return 0;
-        default:
-          ALOGD("Privilege elevation denied by appops");
-          return 1;
+    delete ops;
+
+    if (mode == AppOpsManager::MODE_ALLOWED) {
+        ALOGD("Privilege elevation allowed by appops");
+        return 0;
     }
 
-    delete ops;
+    ALOGD("Privilege elevation denied by appops");
+    return 1;
 }
 
 void appops_finish_op_su(int uid, const char *pkgName) {
diff --git a/binder/pm-wrapper.c b/binder/pm-wrapper.c
index 0f5a5bc..abfa60e 100644
--- a/binder/pm-wrapper.c
+++ b/binder/pm-wrapper.c
@@ -16,11 +16,12 @@
  * Since packages may share UID, this function will return the first present
  * in packages.list.
  */
-const char* resolve_package_name(int uid) {
+char* resolve_package_name(int uid) {
+    char* package_name = NULL;
     char *packages = read_file(PACKAGE_LIST_PATH);
 
     if (packages == NULL) {
-        goto notfound;
+        return NULL;
     }
 
     char *p = packages;
@@ -37,14 +38,15 @@ const char* resolve_package_name(int uid) {
                 char *endptr;
                 errno = 0;
                 int pkgUidInt = strtoul(pkgUid, &endptr, 10);
-                if ((errno == 0 && endptr != NULL && !(*endptr)) && pkgUidInt == uid)
-                    return strdup(pkgName);
+                if ((errno == 0 && endptr != NULL && !(*endptr)) && pkgUidInt == uid) {
+                    package_name = strdup(pkgName);
+                    break;
+                }
             }
         }
         p = ++line_end;
     }
-    free(packages);
 
-notfound:
-    return "";
+    free(packages);
+    return package_name;
 }
diff --git a/binder/pm-wrapper.h b/binder/pm-wrapper.h
index 10c1da6..37b3390 100644
--- a/binder/pm-wrapper.h
+++ b/binder/pm-wrapper.h
@@ -1,6 +1,6 @@
 #ifndef _HAS_PM_WRAPPER_H
 #define _HAS_PM_WRAPPER_H
 
-const char* resolve_package_name(int uid);
+char* resolve_package_name(int uid);
 
 #endif
diff --git a/daemon.c b/daemon.c
index f10293c..9c32845 100644
--- a/daemon.c
+++ b/daemon.c
@@ -150,6 +150,9 @@ static void send_fd(int sockfd, int fd) {
             msg.msg_controllen = sizeof(cmsgbuf);
 
             struct cmsghdr *cmsg = CMSG_FIRSTHDR(&msg);
+            if (!cmsg) {
+                goto error;
+            }
 
             cmsg->cmsg_len   = CMSG_LEN(sizeof(int));
             cmsg->cmsg_level = SOL_SOCKET;
@@ -169,7 +172,7 @@ error:
 static int read_int(int fd) {
     int val;
     int len = read(fd, &val, sizeof(int));
-    if (len != sizeof(int)) {
+    if (len != (int)sizeof(int)) {
         ALOGE("unable to read int: %d", len);
         exit(-1);
     }
@@ -305,6 +308,10 @@ static int daemon_accept(int fd) {
     }
     ALOGV("remote args: %d", argc);
     char** argv = (char**)malloc(sizeof(char*) * (argc + 1));
+    if (!argv) {
+        ALOGE("unable to allocate memory\n");
+        exit(-1);
+    }
     argv[argc] = NULL;
     int i;
     for (i = 0; i < argc; i++) {
diff --git a/su.c b/su.c
index bc3466b..788cbec 100644
--- a/su.c
+++ b/su.c
@@ -76,7 +76,7 @@ static int from_init(struct su_initiator *from) {
     }
 
     /* Get the command line */
-    snprintf(path, sizeof(path), "/proc/%u/cmdline", from->pid);
+    snprintf(path, sizeof(path), "/proc/%u/cmdline", (unsigned)from->pid);
     fd = open(path, O_RDONLY);
     if (fd < 0) {
         PLOGE("Opening command line");
@@ -113,14 +113,14 @@ static int from_init(struct su_initiator *from) {
     }
 
     /* If this isn't app_process, use the real path instead of argv[0] */
-    snprintf(path, sizeof(path), "/proc/%u/exe", from->pid);
+    snprintf(path, sizeof(path), "/proc/%u/exe", (unsigned)from->pid);
     len = readlink(path, exe, sizeof(exe));
     if (len < 0) {
         PLOGE("Getting exe path");
         return -1;
     }
     exe[len] = '\0';
-    if (strcmp(exe, "/system/bin/app_process")) {
+    if (strcmp(exe, "/system/bin/app_process") != 0) {
         argv0 = exe;
     }
 
@@ -500,7 +500,7 @@ int su_main(int argc, char *argv[], int need_client) {
         optind++;
     }
     /* username or uid */
-    if (optind < argc && strcmp(argv[optind], "--")) {
+    if (optind < argc && strcmp(argv[optind], "--") != 0) {
         struct passwd *pw;
         pw = getpwnam(argv[optind]);
         if (!pw) {
@@ -554,10 +554,13 @@ int su_main(int argc, char *argv[], int need_client) {
         allow(&ctx, NULL);
     }
 
-    const char *packageName = resolve_package_name(ctx.from.uid);
-    if (!appops_start_op_su(ctx.from.uid, packageName)) {
-        ALOGD("Allowing via appops.");
-        allow(&ctx, packageName);
+    char *packageName = resolve_package_name(ctx.from.uid);
+    if (packageName) {
+        if (!appops_start_op_su(ctx.from.uid, packageName)) {
+            ALOGD("Allowing via appops.");
+            allow(&ctx, packageName);
+        }
+        free(packageName);
     }
 
     ALOGE("Allow chain exhausted, denying request");
diff --git a/utils.c b/utils.c
index 8bce3e0..327f8dc 100644
--- a/utils.c
+++ b/utils.c
@@ -59,6 +59,8 @@ int get_property(const char *data, char *found, const char *searchkey, const cha
     if (data == NULL) goto defval;
     int matched = 0;
     char *dup = strdup(data);
+    if (!dup)
+        goto defval;
 
     sol = dup;
     while((eol = strchr(sol, '\n'))) {
-- 
2.17.1

