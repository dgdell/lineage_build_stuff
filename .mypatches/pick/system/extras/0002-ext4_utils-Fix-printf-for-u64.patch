From 575fd7b9db8518c78e12433bcb4ac504068e553e Mon Sep 17 00:00:00 2001
From: Brandon McAnsh <brandon.mcansh@gmail.com>
Date: Thu, 10 May 2018 21:47:48 -0400
Subject: [PATCH 2/2] ext4_utils: Fix printf for u64

* Formatting was specifying unsigned long long and PRI macros seem to be failing

Change-Id: Ic445e39f7e29f46f70b63430e0ff961cd3bc9a1f
Signed-off-by: Brandon McAnsh <brandon.mcansh@gmail.com>
---
 ext4_utils/ext4_utils.c  |  2 +-
 ext4_utils/extent.c      | 12 ++++++------
 ext4_utils/make_ext4fs.c |  2 +-
 3 files changed, 8 insertions(+), 8 deletions(-)

diff --git a/ext4_utils/ext4_utils.c b/ext4_utils/ext4_utils.c
index 07a92119..f67ec2dd 100644
--- a/ext4_utils/ext4_utils.c
+++ b/ext4_utils/ext4_utils.c
@@ -632,7 +632,7 @@ int read_ext(int fd, int verbose)
 		printf("    Inodes per group: %d\n", info.inodes_per_group);
 		printf("    Inode size: %d\n", info.inode_size);
 		printf("    Label: %s\n", info.label);
-		printf("    Blocks: %"PRIu64"\n", aux_info.len_blocks);
+		printf("    Blocks: %llx\n", (unsigned long long) aux_info.len_blocks);
 		printf("    Block groups: %d\n", aux_info.groups);
 		printf("    Reserved block group size: %d\n", info.bg_desc_reserve_blocks);
 		printf("    Used %d/%d inodes and %d/%d blocks\n",
diff --git a/ext4_utils/extent.c b/ext4_utils/extent.c
index ff56a141..80b9bd69 100644
--- a/ext4_utils/extent.c
+++ b/ext4_utils/extent.c
@@ -150,8 +150,8 @@ static struct block_allocation *do_inode_allocate_extents(
 
 		if (((int)(info.block_size - sizeof(struct ext4_extent_header) /
 				sizeof(struct ext4_extent))) < allocation_len) {
-			error("File size %"PRIu64" is too big to fit in a single extent block\n",
-					len);
+			error("File size %llx is too big to fit in a single extent block\n",
+					(unsigned long long)len);
 			return NULL;
 		}
 
@@ -206,14 +206,14 @@ u8 *inode_allocate_data_extents(struct ext4_inode *inode, u64 len,
 
 	alloc = do_inode_allocate_extents(inode, len, NULL);
 	if (alloc == NULL) {
-		error("failed to allocate extents for %"PRIu64" bytes", len);
+		error("failed to allocate extents for %llx bytes", (unsigned long long) len);
 		return NULL;
 	}
 
 	if (backing_len) {
 		data = extent_create_backing(alloc, backing_len);
 		if (!data)
-			error("failed to create backing for %"PRIu64" bytes", backing_len);
+			error("failed to create backing for %llx bytes", (unsigned long long) backing_len);
 	}
 
 	free_alloc(alloc);
@@ -247,7 +247,7 @@ struct block_allocation* inode_allocate_file_extents(struct ext4_inode *inode, u
 
 	alloc = do_inode_allocate_extents(inode, len, prealloc);
 	if (alloc == NULL) {
-		error("failed to allocate extents for %"PRIu64" bytes", len);
+		error("failed to allocate extents for %llx bytes", (unsigned long long) len);
 		return NULL;
 	}
 
@@ -262,7 +262,7 @@ void inode_allocate_extents(struct ext4_inode *inode, u64 len)
 
 	alloc = do_inode_allocate_extents(inode, len, NULL);
 	if (alloc == NULL) {
-		error("failed to allocate extents for %"PRIu64" bytes", len);
+		error("failed to allocate extents for %llx bytes", (unsigned long long) len);
 		return;
 	}
 
diff --git a/ext4_utils/make_ext4fs.c b/ext4_utils/make_ext4fs.c
index e255ab1c..c8f41c72 100644
--- a/ext4_utils/make_ext4fs.c
+++ b/ext4_utils/make_ext4fs.c
@@ -821,7 +821,7 @@ int make_ext4fs_internal(int fd, const char *_directory, const char *_target_out
 
 	ext4_create_fs_aux_info();
 
-	printf("    Blocks: %"PRIu64"\n", aux_info.len_blocks);
+	printf("    Blocks: %llx\n", (unsigned long long) aux_info.len_blocks);
 	printf("    Block groups: %d\n", aux_info.groups);
 	printf("    Reserved block group size: %d\n", info.bg_desc_reserve_blocks);
 
-- 
2.17.0

