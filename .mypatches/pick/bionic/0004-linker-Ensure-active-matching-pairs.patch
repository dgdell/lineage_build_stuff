From 4015baab412a4f4bbb59aed5313566d97bc3d934 Mon Sep 17 00:00:00 2001
From: Nich <nctrenco@gmail.com>
Date: Fri, 15 Jun 2018 03:59:05 +0800
Subject: [PATCH 4/5] linker: Ensure active matching pairs

Change-Id: I54c666b4560dbfb40839b0bf9132a7fd8d3ed2dd
---
 linker/linker.cpp      | 14 ++++++--------
 linker/linker_soinfo.h |  9 ++++-----
 2 files changed, 10 insertions(+), 13 deletions(-)

diff --git a/linker/linker.cpp b/linker/linker.cpp
index c7abaabcb..94944e4db 100644
--- a/linker/linker.cpp
+++ b/linker/linker.cpp
@@ -717,10 +717,6 @@ static std::vector<ShimDescriptor> g_ld_all_shim_libs;
 // for libB where libA also links against libB).
 static linked_list_t<const ShimDescriptor> g_active_shim_libs;
 
-// matched_pairs are shim libs that load over their corresponding
-// target libraries/executables, which are DT_NEEDED.
-std::vector<const ShimDescriptor *> matched_pairs;
-
 static void reset_g_active_shim_libs(void) {
   g_active_shim_libs.clear();
   for (const auto& pair : g_ld_all_shim_libs) {
@@ -745,18 +741,20 @@ void parse_LD_SHIM_LIBS(const char* path) {
   reset_g_active_shim_libs();
 }
 
-void shim_matching_pairs(const char *const path) {
-  INFO("Finding shim libs for \"%s\"\n", path);
+std::vector<const ShimDescriptor*> shim_matching_pairs(const char* path) {
+  std::vector<const ShimDescriptor*> matched_pairs;
 
-  g_active_shim_libs.for_each([&](const ShimDescriptor *a_pair) {
+  g_active_shim_libs.for_each([&](const ShimDescriptor* a_pair) {
     if (a_pair->first == path) {
       matched_pairs.push_back(a_pair);
     }
   });
 
-  g_active_shim_libs.remove_if([&](const ShimDescriptor *a_pair) {
+  g_active_shim_libs.remove_if([&](const ShimDescriptor* a_pair) {
     return a_pair->first == path;
   });
+
+  return matched_pairs;
 }
 #endif
 
diff --git a/linker/linker_soinfo.h b/linker/linker_soinfo.h
index c2398adff..ece397ee0 100644
--- a/linker/linker_soinfo.h
+++ b/linker/linker_soinfo.h
@@ -346,14 +346,13 @@ uint32_t calculate_elf_hash(const char* name);
 
 #ifdef LD_SHIM_LIBS
 typedef std::pair<std::string, std::string> ShimDescriptor;
-extern std::vector<const ShimDescriptor *> matched_pairs;
-void shim_matching_pairs(const char *const path);
+std::vector<const ShimDescriptor*> shim_matching_pairs(const char* path);
 
 template<typename F>
-void for_each_matching_shim(const char *const path, F action) {
+void for_each_matching_shim(const char* path, F action) {
   if (path == nullptr) return;
-  shim_matching_pairs(path);
-  for (const auto& one_pair : matched_pairs) {
+  INFO("Finding shim libs for \"%s\"\n", path);
+  for (const auto& one_pair : shim_matching_pairs(path)) {
     INFO("Injecting shim lib \"%s\" as needed for %s", one_pair->second.c_str(), path);
     action(one_pair->second.c_str());
   }
-- 
2.17.1

