From 3d671d416f459b81b05964c8a973d3d8acef9091 Mon Sep 17 00:00:00 2001
From: Ethan Chen <intervigil@gmail.com>
Date: Tue, 25 Sep 2018 00:11:05 -0700
Subject: [PATCH 6/6] Actually restore pre-P mutex behavior

Apps built against versions < P may not actually expect the EBUSY return
code, and may crash or otherwise misbehave. Check for target SDK
versions earlier than P when performing the IsMutexDestroyed check so
any invocation of HandleUsingDestroyedMutex is bypassed and pre-P mutex
behavior is restored.

See 9e989f12d1186231d97dac6d038db7955acebdf3 for the change that
introduced this new behavior.

Change-Id: I45f8882c9527c63eed1ef5820a5004b8958d58ea

# Conflicts:
#	libc/bionic/pthread_mutex.cpp
---
 libc/bionic/pthread_mutex.cpp | 16 ++++++++++------
 1 file changed, 10 insertions(+), 6 deletions(-)

diff --git a/libc/bionic/pthread_mutex.cpp b/libc/bionic/pthread_mutex.cpp
index 8602d464a..45cca14a7 100644
--- a/libc/bionic/pthread_mutex.cpp
+++ b/libc/bionic/pthread_mutex.cpp
@@ -782,18 +782,22 @@ static int MutexLockWithTimeout(pthread_mutex_internal_t* mutex, bool use_realti
 }  // namespace NonPI
 
 static inline __always_inline bool IsMutexDestroyed(uint16_t mutex_state) {
-    return mutex_state == 0xffff;
+    // Returning EBUSY is a P-specific behavior. Check the SDK version here
+    // so the HandleUsingDestroyedMutex function is bypassed.
+    if (bionic_get_application_target_sdk_version() >= __ANDROID_API_P__) {
+        return mutex_state == 0xffff;
+    } else {
+        return false;
+    }
 }
 
 // Inlining this function in pthread_mutex_lock() adds the cost of stack frame instructions on
 // ARM64. So make it noinline.
 static int __attribute__((noinline)) HandleUsingDestroyedMutex(pthread_mutex_t* mutex,
                                                                const char* function_name) {
-    if (bionic_get_application_target_sdk_version() >= __ANDROID_API_P__) {
-        (void)(mutex);
-        (void)(function_name);
-        // __fortify_fatal("%s called on a destroyed mutex (%p)", function_name, mutex);
-    }
+    (void)(mutex);
+    (void)(function_name);
+    // __fortify_fatal("%s called on a destroyed mutex (%p)", function_name, mutex);
     return EBUSY;
 }
 
-- 
2.17.1

