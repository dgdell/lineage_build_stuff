From a6443dd22b6be5910fd3963f3e13c370de337a8a Mon Sep 17 00:00:00 2001
From: nx111 <gd.zhangdz@gmail.com>
Date: Sun, 17 Dec 2017 12:01:13 +0800
Subject: [PATCH 20/20] NetworkMonitor: dns probe if http probe failed.

Change-Id: I0ee2bfd58f88b03d99f763a1108bc441c46272f8
---
 .../android/server/connectivity/NetworkMonitor.java   | 19 ++++++++++++++-----
 1 file changed, 14 insertions(+), 5 deletions(-)

diff --git a/services/core/java/com/android/server/connectivity/NetworkMonitor.java b/services/core/java/com/android/server/connectivity/NetworkMonitor.java
index 09e61f9..53a3fc5 100644
--- a/services/core/java/com/android/server/connectivity/NetworkMonitor.java
+++ b/services/core/java/com/android/server/connectivity/NetworkMonitor.java
@@ -82,7 +82,7 @@ import java.util.concurrent.TimeUnit;
 public class NetworkMonitor extends StateMachine {
     private static final String TAG = NetworkMonitor.class.getSimpleName();
     private static final boolean DBG  = true;
-    private static final boolean VDBG = false;
+    private static final boolean VDBG = true;
 
     // Default configuration values for captive portal detection probes.
     // TODO: append a random length parameter to the default HTTPS url.
@@ -779,19 +779,26 @@ public class NetworkMonitor extends StateMachine {
         // Only do this if HttpURLConnection is about to, to avoid any potentially
         // unnecessary resolution.
         final String host = (proxy != null) ? proxy.getHost() : url.getHost();
-        sendDnsProbe(host);
-        return sendHttpProbe(url, probeType);
+        CaptivePortalProbeResult dnsResult = sendDnsProbe(host);
+        CaptivePortalProbeResult probeResult = sendHttpProbe(url, probeType);
+        if(probeResult.isSuccessful() || probeResult.isPortal())
+		return probeResult;
+        else if (dnsResult.isSuccessful())
+		return dnsResult;
+        else
+             return CaptivePortalProbeResult.FAILED;
     }
 
     /** Do a DNS resolution of the given server. */
-    private void sendDnsProbe(String host) {
+    private CaptivePortalProbeResult sendDnsProbe(String host) {
         if (TextUtils.isEmpty(host)) {
-            return;
+            return CaptivePortalProbeResult.FAILED;
         }
 
         final String name = ValidationProbeEvent.getProbeName(ValidationProbeEvent.PROBE_DNS);
         final Stopwatch watch = new Stopwatch().start();
         int result;
+        int httpResponseCode = 599;
         String connectInfo;
         try {
             InetAddress[] addresses = mNetworkAgentInfo.network.getAllByName(host);
@@ -800,6 +807,7 @@ public class NetworkMonitor extends StateMachine {
                 buffer.append(',').append(address.getHostAddress());
             }
             result = ValidationProbeEvent.DNS_SUCCESS;
+            httpResponseCode = 204;
             connectInfo = "OK " + buffer.substring(1);
         } catch (UnknownHostException e) {
             result = ValidationProbeEvent.DNS_FAILURE;
@@ -809,6 +817,7 @@ public class NetworkMonitor extends StateMachine {
         validationLog(ValidationProbeEvent.PROBE_DNS, host,
                 String.format("%dms %s", latency, connectInfo));
         logValidationProbe(latency, ValidationProbeEvent.PROBE_DNS, result);
+        return new CaptivePortalProbeResult(httpResponseCode);
     }
 
     /**
-- 
2.7.4

