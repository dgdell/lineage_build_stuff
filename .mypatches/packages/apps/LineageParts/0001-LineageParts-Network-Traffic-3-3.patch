From a763fd2309c616fdd92a4fd718fab8389eadc235 Mon Sep 17 00:00:00 2001
From: Jon Haus <haus.xda@gmail.com>
Date: Mon, 2 Nov 2015 05:47:01 -0500
Subject: [PATCH 1/2] LineageParts: Network Traffic [3/3]

 * Adapted to Lineage SDK (bgcngm)

Change-Id: Id5280a52e4d06c3f4752beb7cae708da54e9a60b
---
 res/layout/preference_nettraffic_slider.xml        |  54 +++++++++++
 res/values/arrays.xml                              |  24 +++++
 res/values/strings.xml                             |  14 +++
 res/xml/network_traffic_settings.xml               |  40 ++++++++
 res/xml/status_bar_settings.xml                    |   7 ++
 .../statusbar/NetworkTrafficSettings.java          |  93 ++++++++++++++++++
 .../NetworkTrafficThresholdSeekBarPreference.java  | 104 +++++++++++++++++++++
 7 files changed, 336 insertions(+)
 create mode 100644 res/layout/preference_nettraffic_slider.xml
 create mode 100644 res/xml/network_traffic_settings.xml
 create mode 100644 src/org/lineageos/lineageparts/statusbar/NetworkTrafficSettings.java
 create mode 100644 src/org/lineageos/lineageparts/statusbar/NetworkTrafficThresholdSeekBarPreference.java

diff --git a/res/layout/preference_nettraffic_slider.xml b/res/layout/preference_nettraffic_slider.xml
new file mode 100644
index 0000000..04e11ca
--- /dev/null
+++ b/res/layout/preference_nettraffic_slider.xml
@@ -0,0 +1,54 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!-- Copyright (C) 2015 The Android Open Source Project
+
+     Licensed under the Apache License, Version 2.0 (the "License");
+     you may not use this file except in compliance with the License.
+     You may obtain a copy of the License at
+
+          http://www.apache.org/licenses/LICENSE-2.0
+
+     Unless required by applicable law or agreed to in writing, software
+     distributed under the License is distributed on an "AS IS" BASIS,
+     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+     See the License for the specific language governing permissions and
+     limitations under the License.
+-->
+
+<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
+    android:layout_width="match_parent"
+    android:layout_height="wrap_content"
+    android:minHeight="?android:attr/listPreferredItemHeight"
+    android:gravity="center_vertical"
+    android:paddingTop="16dip"
+    android:paddingBottom="16dip"
+    android:paddingStart="?android:attr/listPreferredItemPaddingStart"
+    android:paddingEnd="?android:attr/listPreferredItemPaddingEnd"
+    android:background="?android:attr/activatedBackgroundIndicator"
+    android:orientation="vertical">
+
+    <TextView android:id="@android:id/title"
+        android:layout_width="wrap_content"
+        android:layout_height="wrap_content"
+        android:singleLine="true"
+        android:textAppearance="?android:attr/textAppearanceListItem"
+        android:ellipsize="marquee"
+        android:fadingEdge="horizontal" />
+
+    <SeekBar
+       android:id="@+id/seekbar"
+       android:layout_gravity="center_vertical"
+       android:layout_width="match_parent"
+       android:layout_height="48dp"
+       style="@android:style/Widget.Material.SeekBar.Discrete"
+       android:tickMarkTint="@android:color/black" />
+
+    <TextView
+        android:id="@android:id/summary"
+        android:paddingTop="4dp"
+        android:layout_width="wrap_content"
+        android:layout_height="wrap_content"
+        android:textAppearance="?android:attr/textAppearanceListItemSecondary"
+        android:textColor="?android:attr/textColorSecondary"
+        android:maxLines="4" />
+
+</LinearLayout>
diff --git a/res/values/arrays.xml b/res/values/arrays.xml
index b790078..b7a1d56 100644
--- a/res/values/arrays.xml
+++ b/res/values/arrays.xml
@@ -1,6 +1,7 @@
 <?xml version="1.0" encoding="utf-8"?>
 <!--
      Copyright (C) 2012-2015 The CyanogenMod Project
+                   2017 The LineageOS Project
 
      Licensed under the Apache License, Version 2.0 (the "License");
      you may not use this file except in compliance with the License.
@@ -342,4 +343,27 @@
         <item>300</item>
         <item>600</item>
     </string-array>
+
+    <!-- Network Traffic -->
+    <string-array name="network_traffic_mode_entries" translatable="false">
+        <item>@string/network_traffic_mode_disable</item>
+        <item>@string/network_traffic_mode_up</item>
+        <item>@string/network_traffic_mode_down</item>
+        <item>@string/network_traffic_mode_all</item>
+    </string-array>
+
+    <string-array name="network_traffic_mode_values" translatable="false">
+        <item>0</item>
+        <item>1</item>
+        <item>2</item>
+        <item>3</item>
+    </string-array>
+
+    <integer-array name="network_traffic_threshold_values">
+        <item>5</item>
+        <item>10</item>
+        <item>20</item>
+        <item>100</item>
+        <item>200</item>
+    </integer-array>
 </resources>
diff --git a/res/values/strings.xml b/res/values/strings.xml
index cf589f0..e7d9181 100644
--- a/res/values/strings.xml
+++ b/res/values/strings.xml
@@ -498,6 +498,20 @@
     <string name="status_bar_icons_title">Status bar icons</string>
     <string name="status_bar_icons_summary">Control which status bar icons are shown</string>
 
+    <!-- Status bar - Network Traffic -->
+    <string name="network_traffic_settings_title">Network traffic monitor</string>
+    <string name="network_traffic_settings_summary">Shows current amount of network traffic in the status bar</string>
+
+    <string name="network_traffic_mode_title">Display mode</string>
+    <string name="network_traffic_mode_disable">Disabled</string>
+    <string name="network_traffic_mode_up">Outgoing</string>
+    <string name="network_traffic_mode_down">Incoming</string>
+    <string name="network_traffic_mode_all">Outgoing and incoming</string>
+    <string name="network_traffic_autohide">Auto hide</string>
+    <string name="network_traffic_autohide_summary">Hide the traffic monitor when there is no activity</string>
+    <string name="network_traffic_autohide_threshold_title">Inactivity threshold</string>
+    <string name="network_traffic_autohide_threshold_summary">The traffic display will be hidden if there\'s less than <xliff:g id="value">%1$s</xliff:g> <xliff:g id="unit" example="kB">%2$s</xliff:g>/s of traffic</string>
+
     <!-- Protected apps -->
     <string name="protected_apps_manager_title">Protected apps</string>
     <string name="protected_apps_manager_summary">Manage which apps are hidden behind a secure lock</string>
diff --git a/res/xml/network_traffic_settings.xml b/res/xml/network_traffic_settings.xml
new file mode 100644
index 0000000..6e3c147
--- /dev/null
+++ b/res/xml/network_traffic_settings.xml
@@ -0,0 +1,40 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!--
+     Copyright (C) 2017 The LineageOS Project
+
+     Licensed under the Apache License, Version 2.0 (the "License");
+     you may not use this file except in compliance with the License.
+     You may obtain a copy of the License at
+
+          http://www.apache.org/licenses/LICENSE-2.0
+
+     Unless required by applicable law or agreed to in writing, software
+     distributed under the License is distributed on an "AS IS" BASIS,
+     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+     See the License for the specific language governing permissions and
+     limitations under the License.
+-->
+
+<PreferenceScreen xmlns:android="http://schemas.android.com/apk/res/android"
+    xmlns:settings="http://schemas.android.com/apk/res/com.android.settings">
+
+    <DropDownPreference
+        android:key="network_traffic_mode"
+        android:title="@string/network_traffic_mode_title"
+        android:entries="@array/network_traffic_mode_entries"
+        android:entryValues="@array/network_traffic_mode_values"
+        android:summary="%s"
+        android:persistent="false" />
+
+    <lineageos.preference.LineageSecureSettingSwitchPreference
+        android:key="network_traffic_autohide"
+        android:title="@string/network_traffic_autohide"
+        android:summary="@string/network_traffic_autohide_summary"
+        android:defaultValue="false" />
+
+    <org.lineageos.lineageparts.statusbar.NetworkTrafficThresholdSeekBarPreference
+        android:key="network_traffic_autohide_threshold"
+        android:title="@string/network_traffic_autohide_threshold_title"
+        android:persistent="false" />
+
+</PreferenceScreen>
diff --git a/res/xml/status_bar_settings.xml b/res/xml/status_bar_settings.xml
index e7b40e5..0fa61cf 100644
--- a/res/xml/status_bar_settings.xml
+++ b/res/xml/status_bar_settings.xml
@@ -1,6 +1,7 @@
 <?xml version="1.0" encoding="UTF-8"?>
 <!--
      Copyright (C) 2014-2016 The CyanogenMod Project
+                   2017 The LineageOS Project
 
      Licensed under the Apache License, Version 2.0 (the "License");
      you may not use this file except in compliance with the License.
@@ -27,6 +28,12 @@
         android:entryValues="@array/status_bar_quick_qs_pulldown_values"
         android:defaultValue="0" />
 
+    <PreferenceScreen
+        android:fragment="org.lineageos.lineageparts.statusbar.NetworkTrafficSettings"
+        android:key="network_traffic_settings"
+        android:title="@string/network_traffic_settings_title"
+        android:summary="@string/network_traffic_settings_summary" />
+
     <PreferenceCategory
         android:title="@string/status_bar_icons_title">
 
diff --git a/src/org/lineageos/lineageparts/statusbar/NetworkTrafficSettings.java b/src/org/lineageos/lineageparts/statusbar/NetworkTrafficSettings.java
new file mode 100644
index 0000000..6c41939
--- /dev/null
+++ b/src/org/lineageos/lineageparts/statusbar/NetworkTrafficSettings.java
@@ -0,0 +1,93 @@
+/*
+ * Copyright (C) 2017 The LineageOS Project
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.lineageos.lineageparts.statusbar;
+
+import android.content.ContentResolver;
+import android.os.Bundle;
+import android.support.v7.preference.DropDownPreference;
+import android.support.v7.preference.Preference;
+
+import lineageos.preference.LineageSecureSettingSwitchPreference;
+import lineageos.providers.LineageSettings;
+import org.lineageos.lineageparts.R;
+import org.lineageos.lineageparts.SettingsPreferenceFragment;
+
+
+public class NetworkTrafficSettings extends SettingsPreferenceFragment
+        implements Preference.OnPreferenceChangeListener  {
+
+    private static final String TAG = "NetworkTrafficSettings";
+
+    private DropDownPreference mNetTrafficMode;
+    private LineageSecureSettingSwitchPreference mNetTrafficAutohide;
+    private NetworkTrafficThresholdSeekBarPreference mNetTrafficAutohideThreshold;
+
+    @Override
+    public void onCreate(Bundle savedInstanceState) {
+        super.onCreate(savedInstanceState);
+        addPreferencesFromResource(R.xml.network_traffic_settings);
+        final ContentResolver resolver = getActivity().getContentResolver();
+
+        mNetTrafficMode = (DropDownPreference)
+                findPreference(LineageSettings.Secure.NETWORK_TRAFFIC_MODE);
+        mNetTrafficMode.setOnPreferenceChangeListener(this);
+        int mode = LineageSettings.Secure.getInt(resolver,
+                LineageSettings.Secure.NETWORK_TRAFFIC_MODE, 0);
+        mNetTrafficMode.setValue(String.valueOf(mode));
+
+        mNetTrafficAutohide = (LineageSecureSettingSwitchPreference)
+                findPreference(LineageSettings.Secure.NETWORK_TRAFFIC_AUTOHIDE);
+        mNetTrafficAutohide.setOnPreferenceChangeListener(this);
+
+        mNetTrafficAutohideThreshold = (NetworkTrafficThresholdSeekBarPreference)
+                findPreference(LineageSettings.Secure.NETWORK_TRAFFIC_AUTOHIDE_THRESHOLD);
+        int netTrafficAutohideThreshold = LineageSettings.Secure.getInt(resolver,
+                LineageSettings.Secure.NETWORK_TRAFFIC_AUTOHIDE_THRESHOLD, 10);
+        mNetTrafficAutohideThreshold.setThreshold(netTrafficAutohideThreshold);
+        mNetTrafficAutohideThreshold.setOnPreferenceChangeListener(this);
+
+        updateEnabledStates(null, null);
+    }
+
+    @Override
+    public boolean onPreferenceChange(Preference preference, Object newValue) {
+        if (preference == mNetTrafficMode) {
+            int intState = Integer.valueOf((String) newValue);
+            LineageSettings.Secure.putInt(getActivity().getContentResolver(),
+                    LineageSettings.Secure.NETWORK_TRAFFIC_MODE, intState);
+            updateEnabledStates(intState, null);
+            return true;
+        } else if (preference == mNetTrafficAutohide) {
+            updateEnabledStates(null, (Boolean) newValue);
+            return true;
+        } else if (preference == mNetTrafficAutohideThreshold) {
+            int threshold = (Integer) newValue;
+            LineageSettings.Secure.putInt(getActivity().getContentResolver(),
+                    LineageSettings.Secure.NETWORK_TRAFFIC_AUTOHIDE_THRESHOLD, threshold);
+            return true;
+        }
+        return false;
+    }
+
+    private void updateEnabledStates(Integer mode, Boolean autoHide) {
+        boolean disabled = mode == null ? "0".equals(mNetTrafficMode.getValue()) : mode == 0;
+        boolean autoHideEnabled = autoHide == null ? mNetTrafficAutohide.isChecked() : autoHide;
+
+        mNetTrafficAutohide.setEnabled(!disabled);
+        mNetTrafficAutohideThreshold.setEnabled(!disabled && autoHideEnabled);
+    }
+}
diff --git a/src/org/lineageos/lineageparts/statusbar/NetworkTrafficThresholdSeekBarPreference.java b/src/org/lineageos/lineageparts/statusbar/NetworkTrafficThresholdSeekBarPreference.java
new file mode 100644
index 0000000..079af14
--- /dev/null
+++ b/src/org/lineageos/lineageparts/statusbar/NetworkTrafficThresholdSeekBarPreference.java
@@ -0,0 +1,104 @@
+/*
+ * Copyright (C) 2017 The LineageOS Project
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.lineageos.lineageparts.statusbar;
+
+import android.content.Context;
+import android.content.res.Resources;
+import android.support.v7.preference.PreferenceViewHolder;
+import android.text.format.Formatter;
+import android.util.AttributeSet;
+import android.widget.SeekBar;
+import android.widget.TextView;
+
+import org.lineageos.lineageparts.R;
+import org.lineageos.lineageparts.widget.SeekBarPreference;
+
+public class NetworkTrafficThresholdSeekBarPreference extends SeekBarPreference {
+    private int[] mValues;
+    private Formatter.BytesResult mFormattedValue;
+    private Resources mResources;
+    private TextView mSummaryView;
+
+    public NetworkTrafficThresholdSeekBarPreference(Context context) {
+        this(context, null);
+    }
+
+    public NetworkTrafficThresholdSeekBarPreference(Context context, AttributeSet attrs) {
+        this(context, attrs, 0);
+    }
+
+    public NetworkTrafficThresholdSeekBarPreference(Context context, AttributeSet attrs,
+            int defStyleAttr) {
+        this(context, attrs, defStyleAttr, 0);
+    }
+
+    public NetworkTrafficThresholdSeekBarPreference(Context context, AttributeSet attrs,
+            int defStyleAttr, int defStyleRes) {
+        super(context, attrs, defStyleAttr, defStyleRes);
+        setLayoutResource(R.layout.preference_nettraffic_slider);
+        mResources = context.getResources();
+        mValues = mResources.getIntArray(R.array.network_traffic_threshold_values);
+        setMax(mValues.length - 1);
+    }
+
+    public void setThreshold(int threshold) {
+        int delta = Integer.MAX_VALUE;
+        int bestIndex = 0;
+        for (int i = 0; i < mValues.length; i++) {
+            if (Math.abs(mValues[i] - threshold) < delta) {
+                bestIndex = i;
+                delta = Math.abs(mValues[i] - threshold);
+            }
+        }
+        setProgress(bestIndex);
+        updateFormattedValue(bestIndex);
+    }
+
+    public int getThreshold() {
+        return mValues[getProgress()];
+    }
+
+    @Override
+    public void onBindViewHolder(PreferenceViewHolder view) {
+        super.onBindViewHolder(view);
+        mSummaryView = (TextView) view.findViewById(com.android.internal.R.id.summary);
+    }
+
+    @Override
+    public CharSequence getSummary() {
+        if (mFormattedValue == null) {
+            return null;
+        }
+        return getContext().getString(R.string.network_traffic_autohide_threshold_summary,
+                mFormattedValue.value, mFormattedValue.units);
+    }
+
+    @Override
+    public void onProgressChanged(SeekBar seekBar, int progress, boolean fromTouch) {
+        super.onProgressChanged(seekBar, progress, fromTouch);
+        updateFormattedValue(progress);
+        if (mSummaryView != null) {
+            mSummaryView.setText(getSummary());
+        }
+    }
+
+    private void updateFormattedValue(int index) {
+        mFormattedValue = Formatter.formatBytes(mResources, mValues[index] * 1024,
+                Formatter.FLAG_SHORTER);
+    }
+}
+
-- 
2.7.4

