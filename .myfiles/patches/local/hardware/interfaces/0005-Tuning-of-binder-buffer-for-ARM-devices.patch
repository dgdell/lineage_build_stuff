From 1f0e501588a3600e46f7e7d72e260b71e8e743ff Mon Sep 17 00:00:00 2001
From: Hari Veerubhotla <vsubrahm@codeaurora.org>
Date: Tue, 3 Jul 2018 12:42:42 +0530
Subject: [PATCH 5/8] Tuning of binder buffer for ARM devices

Author: Hari Veerubhotla <vsubrahm@codeaurora.org>
Date:   Tue Jul 3 12:42:42 2018 +0530

    Tuning of Binder buffer for below HALs
    1. Boot Control
    2. Vibrator

    Set the Binder buffer memory limit for boot control
    and Vibrator HALs to 8 KiB.

    CRs-Fixed: 2275027

    Change-Id: I7955af000aa34e19d1229949c0966ef93e7ff0cb

Author: Bharath Gopal <gopalb@codeaurora.org>
Date:   Wed Jul 11 14:48:09 2018 +0530

    graphics: Optimize binder buffer allocation

     Optimize binder buffer allocation based on maximum page size
     observed during peak usage.

    CRs-Fixed: 2275027

    Change-Id: I50ff14fb49382f286c3c07e959e2fb0e1e54a9ad

Author: Ramjee Singh <ramjee@codeaurora.org>
Date:   Thu Jul 26 14:19:01 2018 +0530

    audio_hal: Optimize binder buffer allocation.

    Optimize binder buffer allocation based on maximum page size
    observed during peak usage.

    CRs-Fixed: 2290589

    Change-Id: I308f3eaff5ada787426526e1efcc787cd4f12409

Author: Shaikh Shadul <sshadu@codeaurora.org>
Date:   Tue Aug 14 19:12:01 2018 +0530

    Interfaces: Set binder buffer for sensors HIDL

    Setting custom binder buffer size for sensors HIDL service.

    Change-Id: I83ebdc77ed7aec0e25a975097358440681ca5f11
    CRs-Fixed: 2305971

Author: Vinay Verma <vvinay@codeaurora.org>
Date:   Fri Sep 14 11:15:57 2018 +0530

    Reduce hwbinder buffer size for cas HAL

    Set hwbinder buffer size to 16KB for 32 bit architecture.

    CRs-Fixed: 2315283

    Change-Id: I14b77a2476be57a121ba4e036737b5a19bdc86fd

Author: Vinay Verma <vvinay@codeaurora.org>
Date:   Fri Sep 14 11:25:46 2018 +0530

    Reduce hwbinder buffer size for power HAL

    Set hwbinder buffer size to 16KB for 32 bit architecture.

    Change-Id: I4272a12853269dd6363f58a5bb81caa09cc47e9a
    CRs-Fixed: 2315283

Author: Baldev Sahu <bsahu@codeaurora.org>
Date:   Wed Sep 12 14:41:03 2018 +0530

    Tuning of Binder buffer for below HALs

    1. Allocator
    2. ConfigStore
    3. Light

    Set the Binder buffer memory limit for above HALs.

    CRs-Fixed: 2275027

    Change-Id: I11d3bcf6073d3d6412491c88acc9f79496ed1ba0

Author: Baldev Sahu <bsahu@codeaurora.org>
Date:   Wed Sep 19 16:44:09 2018 +0530

    Modify binder buffer tuning sequence for configstore

    Setting the binder buffer size should be done as the first
    step when configstore starts. Otherwise the initWithmMapSize
    api fails with a fatal error 'ProcessState already intialized
    with a differenet mmap size'.

    CRs-Fixed: 2275027

    Change-Id: I024bfb1f92efbbb3c4d9ee576991401f4b2a0098

Author: Hari Veerubhotla <vsubrahm@codeaurora.org>
Date:   Wed Sep 26 17:38:56 2018 +0530

    Tuning of Binder buffer for below HALs on 32-bit
    1. Boot Control
    2. Vibrator

    Set the Binder buffer memory limit for boot control
    and Vibrator HALs to 8 KiB.

    Change-Id: Ic7f73d33489260e2fe7375ccb819a0c1f022c684
    CRs-Fixed: 2275027

Change-Id: I171eea605aaa1cc0288bf9bd950fb90764ca22e3
---
 .../all-versions/default/service/Android.mk   |  6 ++++++
 .../all-versions/default/service/service.cpp  | 18 +++++++++++++++++
 boot/1.0/default/Android.bp                   |  9 ++++++++-
 boot/1.0/default/service.cpp                  |  3 +++
 cas/1.0/default/Android.bp                    |  6 ++++++
 cas/1.0/default/service.cpp                   |  8 ++++++++
 configstore/1.1/default/Android.mk            |  5 +++++
 configstore/1.1/default/service.cpp           |  6 ++++++
 graphics/allocator/2.0/default/Android.bp     |  8 ++++++++
 graphics/allocator/2.0/default/service.cpp    |  5 +++++
 graphics/composer/2.1/default/Android.bp      |  8 ++++++++
 graphics/composer/2.1/default/service.cpp     |  5 +++++
 light/2.0/default/Android.bp                  | 11 ++++++++--
 light/2.0/default/service.cpp                 |  4 ++++
 power/1.0/default/Android.bp                  |  6 ++++++
 power/1.0/default/service.cpp                 |  6 ++++++
 sensors/1.0/default/Android.bp                |  7 +++++++
 sensors/1.0/default/service.cpp               | 20 +++++++++++++++++++
 vibrator/1.0/default/Android.bp               |  8 ++++++++
 vibrator/1.0/default/service.cpp              |  3 +++
 20 files changed, 149 insertions(+), 3 deletions(-)

diff --git a/audio/common/all-versions/default/service/Android.mk b/audio/common/all-versions/default/service/Android.mk
index 43d7fe19..73d03f10 100644
--- a/audio/common/all-versions/default/service/Android.mk
+++ b/audio/common/all-versions/default/service/Android.mk
@@ -35,8 +35,10 @@ LOCAL_SHARED_LIBRARIES := \
     libhidlbase \
     libhidltransport \
     liblog \
+    libcutils \
     libutils \
     libhardware \
+    libhwbinder \
     android.hardware.audio@2.0 \
     android.hardware.audio@4.0 \
     android.hardware.audio.common@2.0 \
@@ -55,4 +57,8 @@ else
 LOCAL_MULTILIB := $(AUDIOSERVER_MULTILIB)
 endif
 
+ifeq ($(TARGET_ARCH),arm)
+    LOCAL_CFLAGS += -DARCH_ARM_32
+endif
+
 include $(BUILD_EXECUTABLE)
diff --git a/audio/common/all-versions/default/service/service.cpp b/audio/common/all-versions/default/service/service.cpp
index c7ce638e..afcca081 100644
--- a/audio/common/all-versions/default/service/service.cpp
+++ b/audio/common/all-versions/default/service/service.cpp
@@ -26,11 +26,29 @@
 #include <binder/ProcessState.h>
 #include <hidl/HidlTransportSupport.h>
 #include <hidl/LegacySupport.h>
+#include <hwbinder/ProcessState.h>
+#include <cutils/properties.h>
 
 using namespace android::hardware;
 using android::OK;
 
+
+#ifdef ARCH_ARM_32
+//default h/w binder memsize is 1 MB
+#define DEFAULT_HW_BINDER_MEM_SIZE_KB 1024
+
+size_t getHWBinderMmapSize(){
+    int32_t value = DEFAULT_HW_BINDER_MEM_SIZE_KB;
+    value = property_get_int32("persist.vendor.audio.hw.binder.size_kbyte", value);
+    ALOGD("Init hw binder with mem  size = %d  ", value);
+    return 1024 * value;
+}
+#endif
+
 int main(int /* argc */, char* /* argv */ []) {
+#ifdef ARCH_ARM_32
+    android::hardware::ProcessState::initWithMmapSize(getHWBinderMmapSize());
+#endif
     android::ProcessState::initWithDriver("/dev/vndbinder");
     // start a threadpool for vndbinder interactions
     android::ProcessState::self()->startThreadPool();
diff --git a/boot/1.0/default/Android.bp b/boot/1.0/default/Android.bp
index 6cfbf32e..f64eb91c 100644
--- a/boot/1.0/default/Android.bp
+++ b/boot/1.0/default/Android.bp
@@ -31,6 +31,13 @@ cc_binary {
         "libhidltransport",
         "libutils",
         "android.hardware.boot@1.0",
+        "libhwbinder",
     ],
-
+    arch: {
+        arm: {
+            cflags: [
+                "-DARCH_ARM_32"
+            ],
+        },
+    },
 }
diff --git a/boot/1.0/default/service.cpp b/boot/1.0/default/service.cpp
index f3996efe..d49f4d40 100644
--- a/boot/1.0/default/service.cpp
+++ b/boot/1.0/default/service.cpp
@@ -22,5 +22,8 @@ using ::android::hardware::boot::V1_0::IBootControl;
 using android::hardware::defaultPassthroughServiceImplementation;
 
 int main (int /* argc */, char * /* argv */ []) {
+#ifdef ARCH_ARM_32
+    android::hardware::ProcessState::initWithMmapSize((size_t)8192);
+#endif
     return defaultPassthroughServiceImplementation<IBootControl>();
 }
diff --git a/cas/1.0/default/Android.bp b/cas/1.0/default/Android.bp
index 544162ba..f65a9905 100644
--- a/cas/1.0/default/Android.bp
+++ b/cas/1.0/default/Android.bp
@@ -25,9 +25,15 @@ cc_binary {
       "libhidltransport",
       "liblog",
       "libutils",
+      "libhwbinder"
     ],
     header_libs: [
       "libstagefright_foundation_headers",
       "media_plugin_headers",
     ],
+    arch: {
+        arm: {
+            cflags: ["-DARCH_ARM_32"],
+        },
+    },
 }
diff --git a/cas/1.0/default/service.cpp b/cas/1.0/default/service.cpp
index 04a8ad97..c47be7a8 100644
--- a/cas/1.0/default/service.cpp
+++ b/cas/1.0/default/service.cpp
@@ -23,12 +23,20 @@
 
 #include "MediaCasService.h"
 
+#ifdef ARCH_ARM_32
+#include <hwbinder/ProcessState.h>
+#endif
+
 using android::hardware::configureRpcThreadpool;
 using android::hardware::joinRpcThreadpool;
 using android::hardware::cas::V1_0::implementation::MediaCasService;
 using android::hardware::cas::V1_0::IMediaCasService;
 
 int main() {
+    #ifdef ARCH_ARM_32
+        android::hardware::ProcessState::initWithMmapSize((size_t)16384);
+    #endif
+
     ALOGD("android.hardware.cas@1.0-service starting...");
 
     // The CAS HAL may communicate to other vendor components via
diff --git a/configstore/1.1/default/Android.mk b/configstore/1.1/default/Android.mk
index 40f621b3..ed711c87 100644
--- a/configstore/1.1/default/Android.mk
+++ b/configstore/1.1/default/Android.mk
@@ -18,6 +18,7 @@ include $(LOCAL_PATH)/surfaceflinger.mk
 LOCAL_SHARED_LIBRARIES := \
     libhidlbase \
     libhidltransport \
+    libhwbinder \
     libbase \
     libhwminijail \
     liblog \
@@ -25,6 +26,10 @@ LOCAL_SHARED_LIBRARIES := \
     android.hardware.configstore@1.0 \
     android.hardware.configstore@1.1
 
+ifeq ($(TARGET_ARCH),arm)
+LOCAL_CFLAGS := -DARCH_ARM_32
+endif
+
 include $(BUILD_EXECUTABLE)
 
 # seccomp filter for configstore
diff --git a/configstore/1.1/default/service.cpp b/configstore/1.1/default/service.cpp
index 3b4e7745..9d031f92 100644
--- a/configstore/1.1/default/service.cpp
+++ b/configstore/1.1/default/service.cpp
@@ -19,6 +19,7 @@
 #include <android/hardware/configstore/1.1/ISurfaceFlingerConfigs.h>
 #include <hidl/HidlTransportSupport.h>
 #include <hwminijail/HardwareMinijail.h>
+#include <hwbinder/ProcessState.h>
 
 #include "SurfaceFlingerConfigs.h"
 
@@ -32,6 +33,11 @@ using android::status_t;
 using android::OK;
 
 int main() {
+
+#ifdef ARCH_ARM_32
+    android::hardware::ProcessState::initWithMmapSize((size_t)(32768));
+#endif
+
     configureRpcThreadpool(10, true);
 
     SetupMinijail("/vendor/etc/seccomp_policy/configstore@1.1.policy");
diff --git a/graphics/allocator/2.0/default/Android.bp b/graphics/allocator/2.0/default/Android.bp
index 9980ae0f..9841e01d 100644
--- a/graphics/allocator/2.0/default/Android.bp
+++ b/graphics/allocator/2.0/default/Android.bp
@@ -32,7 +32,15 @@ cc_binary {
         "android.hardware.graphics.allocator@2.0",
         "libhidlbase",
         "libhidltransport",
+        "libhwbinder",
         "liblog",
         "libutils",
     ],
+    arch: {
+        arm: {
+            cflags: [
+                "-DARCH_ARM_32"
+            ],
+        },
+    },
 }
diff --git a/graphics/allocator/2.0/default/service.cpp b/graphics/allocator/2.0/default/service.cpp
index bc0539a6..ca1fee4f 100644
--- a/graphics/allocator/2.0/default/service.cpp
+++ b/graphics/allocator/2.0/default/service.cpp
@@ -19,10 +19,15 @@
 #include <android/hardware/graphics/allocator/2.0/IAllocator.h>
 
 #include <hidl/LegacySupport.h>
+#include <hwbinder/ProcessState.h>
 
 using android::hardware::defaultPassthroughServiceImplementation;
 using android::hardware::graphics::allocator::V2_0::IAllocator;
 
 int main() {
+
+#ifdef ARCH_ARM_32
+    android::hardware::ProcessState::initWithMmapSize((size_t)(32768));
+#endif
     return defaultPassthroughServiceImplementation<IAllocator>(4);
 }
diff --git a/graphics/composer/2.1/default/Android.bp b/graphics/composer/2.1/default/Android.bp
index 2de1e3ca..858d32a0 100644
--- a/graphics/composer/2.1/default/Android.bp
+++ b/graphics/composer/2.1/default/Android.bp
@@ -36,6 +36,7 @@ cc_binary {
     init_rc: ["android.hardware.graphics.composer@2.1-service.rc"],
     shared_libs: [
         "android.hardware.graphics.composer@2.1",
+        "libhwbinder",
         "libbinder",
         "libhidlbase",
         "libhidltransport",
@@ -43,4 +44,11 @@ cc_binary {
         "libsync",
         "libutils",
     ],
+    arch: {
+        arm: {
+            cflags: [
+                "-DARCH_ARM_32"
+            ],
+        },
+    },
 }
diff --git a/graphics/composer/2.1/default/service.cpp b/graphics/composer/2.1/default/service.cpp
index 82a33f6a..bfaf328d 100644
--- a/graphics/composer/2.1/default/service.cpp
+++ b/graphics/composer/2.1/default/service.cpp
@@ -22,6 +22,7 @@
 
 #include <binder/ProcessState.h>
 #include <hidl/LegacySupport.h>
+#include <hwbinder/ProcessState.h>
 
 using android::hardware::graphics::composer::V2_1::IComposer;
 using android::hardware::defaultPassthroughServiceImplementation;
@@ -40,5 +41,9 @@ int main() {
         ALOGE("Couldn't set SCHED_FIFO: %d", errno);
     }
 
+#ifdef ARCH_ARM_32
+    android::hardware::ProcessState::initWithMmapSize((size_t)(32768));
+#endif
+
     return defaultPassthroughServiceImplementation<IComposer>(4);
 }
diff --git a/light/2.0/default/Android.bp b/light/2.0/default/Android.bp
index 8b5f7802..4e124270 100644
--- a/light/2.0/default/Android.bp
+++ b/light/2.0/default/Android.bp
@@ -44,10 +44,17 @@ cc_binary {
         "libbase",
         "libdl",
         "libutils",
+        "libhwbinder",
         "libhardware",
         "libhidlbase",
         "libhidltransport",
         "android.hardware.light@2.0",
     ],
-
-}
\ No newline at end of file
+    arch: {
+        arm: {
+            cflags: [
+                "-DARCH_ARM_32"
+            ],
+        },
+    },
+}
diff --git a/light/2.0/default/service.cpp b/light/2.0/default/service.cpp
index 70ae5655..0fc4795f 100644
--- a/light/2.0/default/service.cpp
+++ b/light/2.0/default/service.cpp
@@ -18,10 +18,14 @@
 
 #include <android/hardware/light/2.0/ILight.h>
 #include <hidl/LegacySupport.h>
+#include <hwbinder/ProcessState.h>
 
 using android::hardware::light::V2_0::ILight;
 using android::hardware::defaultPassthroughServiceImplementation;
 
 int main() {
+#ifdef ARCH_ARM_32
+    android::hardware::ProcessState::initWithMmapSize((size_t)(32768));
+#endif
     return defaultPassthroughServiceImplementation<ILight>();
 }
diff --git a/power/1.0/default/Android.bp b/power/1.0/default/Android.bp
index 4f43b95a..9b6fe4f7 100644
--- a/power/1.0/default/Android.bp
+++ b/power/1.0/default/Android.bp
@@ -56,6 +56,12 @@ cc_binary {
         "libhidlbase",
         "libhidltransport",
         "android.hardware.power@1.0",
+        "libhwbinder"
     ],
 
+    arch: {
+        arm: {
+            cflags: ["-DARCH_ARM_32"],
+        },
+    },
 }
diff --git a/power/1.0/default/service.cpp b/power/1.0/default/service.cpp
index e8618b84..d5619192 100644
--- a/power/1.0/default/service.cpp
+++ b/power/1.0/default/service.cpp
@@ -18,10 +18,16 @@
 
 #include <android/hardware/power/1.0/IPower.h>
 #include <hidl/LegacySupport.h>
+#ifdef ARCH_ARM_32
+#include <hwbinder/ProcessState.h>
+#endif
 
 using android::hardware::power::V1_0::IPower;
 using android::hardware::defaultPassthroughServiceImplementation;
 
 int main() {
+    #ifdef ARCH_ARM_32
+        android::hardware::ProcessState::initWithMmapSize((size_t)16384);
+    #endif
     return defaultPassthroughServiceImplementation<IPower>();
 }
diff --git a/sensors/1.0/default/Android.bp b/sensors/1.0/default/Android.bp
index 2485b058..6338821e 100644
--- a/sensors/1.0/default/Android.bp
+++ b/sensors/1.0/default/Android.bp
@@ -48,6 +48,7 @@ cc_binary {
     relative_install_path: "hw",
     vendor: true,
     init_rc: ["android.hardware.sensors@1.0-service.rc"],
+    defaults: ["hidl_defaults"],
     srcs: ["service.cpp"],
 
     shared_libs: [
@@ -59,5 +60,11 @@ cc_binary {
         "libhidlbase",
         "libhidltransport",
         "android.hardware.sensors@1.0",
+        "libhwbinder",
     ],
+    arch: {
+        arm: {
+            cflags: ["-DARCH_ARM_32"],
+        },
+    },
 }
diff --git a/sensors/1.0/default/service.cpp b/sensors/1.0/default/service.cpp
index 65f6d816..c413d1a0 100644
--- a/sensors/1.0/default/service.cpp
+++ b/sensors/1.0/default/service.cpp
@@ -19,10 +19,30 @@
 #include <android/hardware/sensors/1.0/ISensors.h>
 #include <hidl/LegacySupport.h>
 
+#ifdef ARCH_ARM_32
+#include <hwbinder/ProcessState.h>
+#include <cutils/properties.h>
+#endif
+
 using android::hardware::sensors::V1_0::ISensors;
 using android::hardware::defaultPassthroughServiceImplementation;
 
+#ifdef ARCH_ARM_32
+//default h/w binder memsize for sensors is 8 KB
+#define DEFAULT_SENSORS_HW_BINDER_MEM_SIZE_KB 8
+size_t getHWBinderMmapSize() {
+    int32_t value = DEFAULT_SENSORS_HW_BINDER_MEM_SIZE_KB;
+
+    value = property_get_int32("persist.vendor.sensor.hw.binder.size", value);
+    ALOGD("Init hw binder with mem size = %d", value);
+    return 1024 * value;
+}
+#endif
+
 int main() {
+#ifdef ARCH_ARM_32
+    android::hardware::ProcessState::initWithMmapSize((size_t)getHWBinderMmapSize());
+#endif
     /* Sensors framework service needs at least two threads.
      * One thread blocks on a "poll"
      * The second thread is needed for all other HAL methods.
diff --git a/vibrator/1.0/default/Android.bp b/vibrator/1.0/default/Android.bp
index 0c7d1557..c977942c 100644
--- a/vibrator/1.0/default/Android.bp
+++ b/vibrator/1.0/default/Android.bp
@@ -44,5 +44,13 @@ cc_binary {
         "libutils",
         "libhardware",
         "android.hardware.vibrator@1.0",
+        "libhwbinder",
     ],
+    arch: {
+        arm: {
+            cflags: [
+                "-DARCH_ARM_32"
+            ],
+        },
+    },
 }
diff --git a/vibrator/1.0/default/service.cpp b/vibrator/1.0/default/service.cpp
index 7cc07446..ab585f38 100644
--- a/vibrator/1.0/default/service.cpp
+++ b/vibrator/1.0/default/service.cpp
@@ -22,5 +22,8 @@ using android::hardware::vibrator::V1_0::IVibrator;
 using android::hardware::defaultPassthroughServiceImplementation;
 
 int main() {
+#ifdef ARCH_ARM_32
+    android::hardware::ProcessState::initWithMmapSize((size_t)8192);
+#endif
     return defaultPassthroughServiceImplementation<IVibrator>();
 }
-- 
2.17.1

