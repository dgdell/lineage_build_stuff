From 39b37354bf7e84c3f3e52ca20138c68c80185cf0 Mon Sep 17 00:00:00 2001
From: Su Liu <suliu@codeaurora.org>
Date: Wed, 4 Sep 2013 18:16:50 +0800
Subject: [PATCH 033/201] Camera: Change volume hard key button to zoom
 function

Able to capture image through volume hard key
button in camera application, change the function
to zoom function.

Change-Id: Iab9fc2492b2e2ff89cd58c21bac2f147f47b77e2
---
 src/com/android/camera/PhotoModule.java     | 16 +++++++---
 src/com/android/camera/PhotoUI.java         | 17 ++++++++++
 src/com/android/camera/PreviewGestures.java | 16 ++++++++++
 src/com/android/camera/ui/ZoomRenderer.java | 35 +++++++++++++++++++++
 4 files changed, 79 insertions(+), 5 deletions(-)

diff --git a/src/com/android/camera/PhotoModule.java b/src/com/android/camera/PhotoModule.java
index 40c9ea59e..6d369f102 100644
--- a/src/com/android/camera/PhotoModule.java
+++ b/src/com/android/camera/PhotoModule.java
@@ -2796,7 +2796,17 @@ public class PhotoModule
     public boolean onKeyDown(int keyCode, KeyEvent event) {
         switch (keyCode) {
             case KeyEvent.KEYCODE_VOLUME_UP:
+                if (/*TODO: mActivity.isInCameraApp() &&*/ mFirstTimeInitialized
+                    && (mUI.mMenuInitialized)) {
+                    mUI.onScaleStepResize(true);
+                }
+                return true;
             case KeyEvent.KEYCODE_VOLUME_DOWN:
+                if (/*TODO: mActivity.isInCameraApp() &&*/ mFirstTimeInitialized
+                    && (mUI.mMenuInitialized)) {
+                    mUI.onScaleStepResize(false);
+                }
+                return true;
             case KeyEvent.KEYCODE_FOCUS:
                 if (/*TODO: mActivity.isInCameraApp() &&*/ mFirstTimeInitialized) {
                     if (event.getRepeatCount() == 0) {
@@ -2830,11 +2840,7 @@ public class PhotoModule
         switch (keyCode) {
             case KeyEvent.KEYCODE_VOLUME_UP:
             case KeyEvent.KEYCODE_VOLUME_DOWN:
-                if (/*mActivity.isInCameraApp() && */ mFirstTimeInitialized) {
-                    onShutterButtonClick();
-                    return true;
-                }
-                return false;
+                return true;
             case KeyEvent.KEYCODE_FOCUS:
                 if (mFirstTimeInitialized) {
                     onShutterButtonFocus(false);
diff --git a/src/com/android/camera/PhotoUI.java b/src/com/android/camera/PhotoUI.java
index 9f6cc9833..11838222f 100755
--- a/src/com/android/camera/PhotoUI.java
+++ b/src/com/android/camera/PhotoUI.java
@@ -56,6 +56,7 @@ import android.widget.LinearLayout;
 import android.widget.ListView;
 import android.widget.PopupWindow;
 import android.widget.Toast;
+import android.graphics.Canvas;
 
 import com.android.camera.CameraPreference.OnPreferenceChangedListener;
 import com.android.camera.FocusOverlayManager.FocusUI;
@@ -1318,6 +1319,22 @@ public class PhotoUI implements PieListener,
         mFaceView.setFaces(faces);
     }
 
+
+    public boolean onScaleStepResize(boolean direction)
+    {
+        if(mGestures != null){
+            return mGestures.onScaleStepResize(direction);
+        }
+        return false;
+    }
+
+    public void onScaleChangeDraw(Canvas canvas)
+    {
+        if(mGestures != null){
+            mGestures.onScaleChangeDraw(canvas);
+        }
+    }
+
     @Override
     public void onDisplayChanged() {
         Log.d(TAG, "Device flip detected.");
diff --git a/src/com/android/camera/PreviewGestures.java b/src/com/android/camera/PreviewGestures.java
index 170476e82..e626c81c8 100644
--- a/src/com/android/camera/PreviewGestures.java
+++ b/src/com/android/camera/PreviewGestures.java
@@ -20,6 +20,7 @@ import android.view.GestureDetector;
 import android.view.MotionEvent;
 import android.view.ScaleGestureDetector;
 import android.view.View;
+import android.graphics.Canvas;
 
 import com.android.camera.ui.PieRenderer;
 import com.android.camera.ui.RenderOverlay;
@@ -309,5 +310,20 @@ public class PreviewGestures
     public void onScaleEnd(ScaleGestureDetector detector) {
         mZoom.onScaleEnd(detector);
     }
+
+    public boolean onScaleStepResize(boolean direction)
+    {
+        if(mZoom != null){
+            return mZoom.onScaleStepResize(direction);
+        }
+        return false;
+    }
+
+    public void onScaleChangeDraw(Canvas canvas)
+    {
+        if(mZoom != null){
+            mZoom.onScaleChangeDraw(canvas);
+        }
+    }
 }
 
diff --git a/src/com/android/camera/ui/ZoomRenderer.java b/src/com/android/camera/ui/ZoomRenderer.java
index 48a565a6f..136837aad 100755
--- a/src/com/android/camera/ui/ZoomRenderer.java
+++ b/src/com/android/camera/ui/ZoomRenderer.java
@@ -52,6 +52,7 @@ public class ZoomRenderer extends OverlayRenderer
     private boolean mCamera2 = false;
     private float mZoomMinValue;
     private float mZoomMaxValue;
+    private Canvas mCanvas;
 
     public interface OnZoomChangedListener {
         void onZoomStart();
@@ -128,6 +129,7 @@ public class ZoomRenderer extends OverlayRenderer
 
     @Override
     public void onDraw(Canvas canvas) {
+        mCanvas = canvas;
         canvas.rotate(mOrientation, mCenterX, mCenterY);
         mPaint.setStrokeWidth(mInnerStroke);
         canvas.drawCircle(mCenterX, mCenterY, mMinCircle, mPaint);
@@ -143,6 +145,12 @@ public class ZoomRenderer extends OverlayRenderer
                 mTextPaint);
     }
 
+     public void onScaleChangeDraw(Canvas canvas) {
+        if(mCanvas != null){
+            onDraw(mCanvas);
+        }
+    }
+
     @Override
     public boolean onScale(ScaleGestureDetector detector) {
         final float sf = detector.getScaleFactor();
@@ -165,6 +173,33 @@ public class ZoomRenderer extends OverlayRenderer
         return true;
     }
 
+    public boolean onScaleStepResize(boolean direction) {
+        int zoom;
+        float circle;
+        float circleStep = (mMaxCircle - mMinCircle)/10;
+        if(direction){
+            circle = (int) (mCircleSize + circleStep);
+        } else {
+            circle = (int) (mCircleSize - circleStep);
+        }
+        circle = Math.max(mMinCircle, circle);
+        circle = Math.min(mMaxCircle, circle);
+        if (mListener != null && (int) circle != mCircleSize
+            && ((mMaxCircle - mMinCircle) != 0)) {
+            mCircleSize = (int) circle;
+            zoom = mMinZoom + (int) ((mCircleSize - mMinCircle)
+                   * (mMaxZoom - mMinZoom) / (mMaxCircle - mMinCircle));
+            if (mListener != null) {
+                mListener.onZoomStart();
+                mListener.onZoomValueChanged(zoom);
+                mListener.onZoomEnd();
+            }
+            return true;
+        } else {
+            return false;
+        }
+    }
+
     @Override
     public boolean onScaleBegin(ScaleGestureDetector detector) {
         setVisible(true);
-- 
2.17.1

