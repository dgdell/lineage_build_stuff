From 86c33111485bcb3205895594895bd49ef8a6a4e8 Mon Sep 17 00:00:00 2001
From: Su Liu <suliu@codeaurora.org>
Date: Wed, 4 Sep 2013 18:16:50 +0800
Subject: [PATCH 025/171] Camera: Change volume hard key button to zoom
 function

Author: Su Liu <suliu@codeaurora.org>
Date:   Wed Sep 4 18:16:50 2013 +0800

    Camera: Change volume hard key button to zoom function

    Able to capture image through volume hard key
    button in camera application, change the function
    to zoom function.

    Change-Id: Iab9fc2492b2e2ff89cd58c21bac2f147f47b77e2

Author: jt1134 <jt1134@gmail.com>
Date:   Sat Jan 4 20:52:27 2014 -0600

    Camera2: implement volume key zoom in video mode

    Change-Id: I140e8cfb3e39700f60e40c35b38e92c83a3c26de

Author: Lars Greiss <kufikugel@googlemail.com>
Date:   Sun Feb 2 03:09:22 2014 +0100

    Camera2: tweak volume key zoom and cleanup

    - cleanup unused code
    - cleanup codestyle
    - add more zoom steps for smother zooming
    - show zoom circle indicator during zoom

    Change-Id: I5214fc2620a0c5167bfdc8e85f7115966c3b8bcf

Change-Id: I99dd2fffc92985156eece67c19435a71d14cd928
---
 src/com/android/camera/PhotoModule.java     | 16 ++++---
 src/com/android/camera/PhotoUI.java         |  7 ++++
 src/com/android/camera/PreviewGestures.java |  7 ++++
 src/com/android/camera/VideoModule.java     |  9 ++++
 src/com/android/camera/VideoUI.java         |  7 ++++
 src/com/android/camera/ui/ZoomRenderer.java | 46 +++++++++++++++++++++
 6 files changed, 87 insertions(+), 5 deletions(-)

diff --git a/src/com/android/camera/PhotoModule.java b/src/com/android/camera/PhotoModule.java
index 116d7e301..b8b3a5c88 100644
--- a/src/com/android/camera/PhotoModule.java
+++ b/src/com/android/camera/PhotoModule.java
@@ -2796,7 +2796,17 @@ public class PhotoModule
     public boolean onKeyDown(int keyCode, KeyEvent event) {
         switch (keyCode) {
             case KeyEvent.KEYCODE_VOLUME_UP:
+                if (/*TODO: mActivity.isInCameraApp() &&*/ mFirstTimeInitialized
+                    && (mUI.mMenuInitialized)) {
+                    mUI.onScaleStepResize(true);
+                }
+                return true;
             case KeyEvent.KEYCODE_VOLUME_DOWN:
+                if (/*TODO: mActivity.isInCameraApp() &&*/ mFirstTimeInitialized
+                    && (mUI.mMenuInitialized)) {
+                    mUI.onScaleStepResize(false);
+                }
+                return true;
             case KeyEvent.KEYCODE_FOCUS:
                 if (/*TODO: mActivity.isInCameraApp() &&*/ mFirstTimeInitialized) {
                     if (event.getRepeatCount() == 0) {
@@ -2830,11 +2840,7 @@ public class PhotoModule
         switch (keyCode) {
             case KeyEvent.KEYCODE_VOLUME_UP:
             case KeyEvent.KEYCODE_VOLUME_DOWN:
-                if (/*mActivity.isInCameraApp() && */ mFirstTimeInitialized) {
-                    onShutterButtonClick();
-                    return true;
-                }
-                return false;
+                return true;
             case KeyEvent.KEYCODE_FOCUS:
                 if (mFirstTimeInitialized) {
                     onShutterButtonFocus(false);
diff --git a/src/com/android/camera/PhotoUI.java b/src/com/android/camera/PhotoUI.java
index 9f6cc9833..bd5efbf0e 100755
--- a/src/com/android/camera/PhotoUI.java
+++ b/src/com/android/camera/PhotoUI.java
@@ -1318,6 +1318,13 @@ public class PhotoUI implements PieListener,
         mFaceView.setFaces(faces);
     }
 
+    public boolean onScaleStepResize(boolean direction) {
+        if (mGestures != null) {
+            return mGestures.onScaleStepResize(direction);
+        }
+        return false;
+    }
+
     @Override
     public void onDisplayChanged() {
         Log.d(TAG, "Device flip detected.");
diff --git a/src/com/android/camera/PreviewGestures.java b/src/com/android/camera/PreviewGestures.java
index 170476e82..e699e56fd 100644
--- a/src/com/android/camera/PreviewGestures.java
+++ b/src/com/android/camera/PreviewGestures.java
@@ -309,5 +309,12 @@ public class PreviewGestures
     public void onScaleEnd(ScaleGestureDetector detector) {
         mZoom.onScaleEnd(detector);
     }
+
+    public boolean onScaleStepResize(boolean direction) {
+        if (mZoom != null) {
+            return mZoom.onScaleStepResize(direction);
+        }
+        return false;
+    }
 }
 
diff --git a/src/com/android/camera/VideoModule.java b/src/com/android/camera/VideoModule.java
index 3d190e520..44bf51351 100644
--- a/src/com/android/camera/VideoModule.java
+++ b/src/com/android/camera/VideoModule.java
@@ -1380,6 +1380,12 @@ public class VideoModule implements CameraModule,
         }
 
         switch (keyCode) {
+            case KeyEvent.KEYCODE_VOLUME_UP:
+                mUI.onScaleStepResize(true);
+                return true;
+            case KeyEvent.KEYCODE_VOLUME_DOWN:
+                mUI.onScaleStepResize(false);
+                return true;
             case KeyEvent.KEYCODE_CAMERA:
                 if (event.getRepeatCount() == 0) {
                     mUI.clickShutter();
@@ -1402,6 +1408,9 @@ public class VideoModule implements CameraModule,
     @Override
     public boolean onKeyUp(int keyCode, KeyEvent event) {
         switch (keyCode) {
+            case KeyEvent.KEYCODE_VOLUME_UP:
+            case KeyEvent.KEYCODE_VOLUME_DOWN:
+                return true;
             case KeyEvent.KEYCODE_CAMERA:
                 mUI.pressShutter(false);
                 return true;
diff --git a/src/com/android/camera/VideoUI.java b/src/com/android/camera/VideoUI.java
index ce51d2a16..80951496a 100755
--- a/src/com/android/camera/VideoUI.java
+++ b/src/com/android/camera/VideoUI.java
@@ -1103,6 +1103,13 @@ public class VideoUI implements PieRenderer.PieListener,
         return mCameraControls.getVisibility() == View.VISIBLE;
     }
 
+    public boolean onScaleStepResize(boolean direction) {
+        if (mGestures != null) {
+            return mGestures.onScaleStepResize(direction);
+        }
+        return false;
+    }
+
     @Override
     public void onDisplayChanged() {
         mCameraControls.checkLayoutFlip();
diff --git a/src/com/android/camera/ui/ZoomRenderer.java b/src/com/android/camera/ui/ZoomRenderer.java
index 48a565a6f..edc9d97b2 100755
--- a/src/com/android/camera/ui/ZoomRenderer.java
+++ b/src/com/android/camera/ui/ZoomRenderer.java
@@ -22,6 +22,7 @@ import android.graphics.Canvas;
 import android.graphics.Color;
 import android.graphics.Paint;
 import android.graphics.Rect;
+import android.os.Handler;
 import android.view.ScaleGestureDetector;
 
 import org.codeaurora.snapcam.R;
@@ -35,6 +36,8 @@ public class ZoomRenderer extends OverlayRenderer
     private int mMinZoom;
     private OnZoomChangedListener mListener;
 
+    private final Handler mHandler = new Handler();
+
     private ScaleGestureDetector mDetector;
     private Paint mPaint;
     private Paint mTextPaint;
@@ -47,6 +50,7 @@ public class ZoomRenderer extends OverlayRenderer
     private int mOuterStroke;
     private int mZoomSig;
     private int mZoomFraction;
+    private boolean mInZoom;
     private Rect mTextBounds;
     private int mOrientation;
     private boolean mCamera2 = false;
@@ -165,6 +169,48 @@ public class ZoomRenderer extends OverlayRenderer
         return true;
     }
 
+    public boolean onScaleStepResize(boolean direction) {
+        int zoom;
+        float circle;
+        float circleStep = (mMaxCircle - mMinCircle) / 18;
+        if (direction) {
+            circle = (int) (mCircleSize + circleStep);
+        } else {
+            circle = (int) (mCircleSize - circleStep);
+        }
+        circle = Math.max(mMinCircle, circle);
+        circle = Math.min(mMaxCircle, circle);
+        if (mListener != null && (int) circle != mCircleSize && (mMaxCircle - mMinCircle) > 0) {
+            mCircleSize = (int) circle;
+            zoom = mMinZoom + (int) ((mCircleSize - mMinCircle)
+                    * (mMaxZoom - mMinZoom) / (mMaxCircle - mMinCircle));
+            if (mListener != null) {
+                mHandler.removeCallbacks(mOnZoomEnd);
+                if (!mInZoom) {
+                    mInZoom = true;
+                    setVisible(true);
+                    mListener.onZoomStart();
+                    update();
+                }
+                mListener.onZoomValueChanged(zoom);
+                mHandler.postDelayed(mOnZoomEnd, 300);
+            }
+            return true;
+        } else {
+            return false;
+        }
+    }
+
+    Runnable mOnZoomEnd = new Runnable() {
+        public void run() {
+            mInZoom = false;
+            setVisible(false);
+            if (mListener != null) {
+                mListener.onZoomEnd();
+            }
+        }
+    };
+
     @Override
     public boolean onScaleBegin(ScaleGestureDetector detector) {
         setVisible(true);
-- 
2.17.1

