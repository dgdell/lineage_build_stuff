From 005af1631a17c0e41d420711cb62cf017218c5d0 Mon Sep 17 00:00:00 2001
From: Luca Stefani <luca.stefani.ge1@gmail.com>
Date: Tue, 6 Nov 2018 15:06:20 +0100
Subject: [PATCH] [SQUSH][DNM] Merge tag 'android-9.0.0_r16' into lineage-16.0

commit ca5a5e1487e7690e4d54d585db8aa9d643fd96a3
Merge: 4b5b4a38 c45f5efa
Author: android-build-team Robot <android-build-team-robot@google.com>
Date:   Fri Aug 3 03:04:45 2018 +0000

    Snap for 4930082 from c45f5efa6182ecb098b5ca67a4f58c6bd1bcb1b8 to pi-qpr1-release

    Change-Id: I350e517b9beca9c18a82245d2ad1e98f08aa7f4d

commit c45f5efa6182ecb098b5ca67a4f58c6bd1bcb1b8
Author: Louis Chang <louischang@google.com>
Date:   Fri Jun 8 09:33:48 2018 +0800

    Fix selection crash in GestureSelectionHelper MotionEvent handling.

    Pull in this changes from ag/4276105.

    Fixes: 79945297
    Test: atest GestureSelectionHelperTest and manual

    Change-Id: Ia132f7fcc1093e160f285d9ad3e35c0986d3ff81
    Merged-In: Ia132f7fcc1093e160f285d9ad3e35c0986d3ff81

commit 4b5b4a3860ea174d52cf3fa05eedd112bc66b7e9
Merge: 40ac4a06 005ccd94
Author: android-build-team Robot <android-build-team-robot@google.com>
Date:   Fri Jul 27 03:04:38 2018 +0000

    Snap for 4916303 from 005ccd94b9b137f804252c12234edac615d60d89 to pi-qpr1-release

    Change-Id: I39d3b587037fa51ff4ab446aeb40ba5765c0b173

commit 005ccd94b9b137f804252c12234edac615d60d89
Author: Bill Yi <byi@google.com>
Date:   Fri Jul 20 10:58:04 2018 -0700

    Import translations. DO NOT MERGE

    Auto-generated-cl: translation import

    Bug: 64712476
    Change-Id: If4ff0edaf7892899eacfab992791e23c65aa0909

commit 40ac4a061c23f379aba4c3883f7e6a871ae01482
Author: Bill Yi <byi@google.com>
Date:   Thu Jun 21 07:03:22 2018 -0700

    Import translations. DO NOT MERGE

    Auto-generated-cl: translation import

    Bug: 64712476
    Change-Id: I9880a99d3b3b196da2d56440e3ace9f4573e45b9

Change-Id: Ica2a979840c60eae45071cdf7927f10aaa20e3f0
---
 res/values-fr/strings.xml                     |  2 +-
 res/values-iw/strings.xml                     |  2 +-
 .../selection/GestureSelectionHelper.java     | 95 +++++++++++--------
 .../selection/GestureSelectionHelperTest.java | 11 ++-
 4 files changed, 63 insertions(+), 47 deletions(-)

diff --git a/res/values-fr/strings.xml b/res/values-fr/strings.xml
index 29bf594c..ebcaae14 100644
--- a/res/values-fr/strings.xml
+++ b/res/values-fr/strings.xml
@@ -74,7 +74,7 @@
     <string name="create_error" msgid="3092144450044861994">"Échec de la création du dossier"</string>
     <string name="query_error" msgid="6625421453613879336">"Impossible de charger le contenu pour le moment"</string>
     <string name="root_recent" msgid="1080156975424341623">"Récents"</string>
-    <string name="root_available_bytes" msgid="8269870862691408864">"Espace disponible : <xliff:g id="SIZE">%1$s</xliff:g>"</string>
+    <string name="root_available_bytes" msgid="8269870862691408864">"<xliff:g id="SIZE">%1$s</xliff:g> disponible(s)"</string>
     <string name="root_type_service" msgid="6521366147466512289">"Services de stockage"</string>
     <string name="root_type_shortcut" msgid="6059343175525442279">"Raccourcis"</string>
     <string name="root_type_device" msgid="1713604128005476585">"Appareils"</string>
diff --git a/res/values-iw/strings.xml b/res/values-iw/strings.xml
index eccd206a..ede64792 100644
--- a/res/values-iw/strings.xml
+++ b/res/values-iw/strings.xml
@@ -206,7 +206,7 @@
     <string name="open_external_dialog_root_request" msgid="6776729293982633">"האם להעניק לאפליקציה <xliff:g id="APPNAME"><b>^1</b></xliff:g> גישה לנתונים שלך, כולל תמונות וסרטונים, השמורים ב<xliff:g id="STORAGE"><i>^2</i></xliff:g>?"</string>
     <string name="never_ask_again" msgid="525908236522201138">"ראיתי פעם אחת, זה מספיק"</string>
     <string name="allow" msgid="1275746941353040309">"כן, זה בסדר"</string>
-    <string name="deny" msgid="5127201668078153379">"לא, אין מצב"</string>
+    <string name="deny" msgid="5127201668078153379">"לא, תודה"</string>
     <plurals name="elements_selected" formatted="false" msgid="4448165978637163692">
       <item quantity="two"><xliff:g id="COUNT_1">%1$d</xliff:g> נבחרו</item>
       <item quantity="many"><xliff:g id="COUNT_1">%1$d</xliff:g> נבחרו</item>
diff --git a/src/com/android/documentsui/selection/GestureSelectionHelper.java b/src/com/android/documentsui/selection/GestureSelectionHelper.java
index d3d8be16..8a55cc36 100644
--- a/src/com/android/documentsui/selection/GestureSelectionHelper.java
+++ b/src/com/android/documentsui/selection/GestureSelectionHelper.java
@@ -21,9 +21,11 @@ import static android.support.v4.util.Preconditions.checkState;
 
 import android.graphics.Point;
 import android.os.Build;
+import android.support.annotation.NonNull;
 import android.support.annotation.VisibleForTesting;
 import android.support.v7.widget.RecyclerView;
 import android.support.v7.widget.RecyclerView.OnItemTouchListener;
+
 import android.util.Log;
 import android.view.MotionEvent;
 import android.view.View;
@@ -47,7 +49,7 @@ public final class GestureSelectionHelper extends ScrollHost implements OnItemTo
     private final ContentLock mLock;
     private final ItemDetailsLookup mItemLookup;
 
-    private int mLastTouchedItemPosition = -1;
+    private int mLastTouchedItemPosition = RecyclerView.NO_POSITION;
     private boolean mStarted = false;
     private Point mLastInterceptedPoint;
 
@@ -85,9 +87,9 @@ public final class GestureSelectionHelper extends ScrollHost implements OnItemTo
         // See: b/70518185. It appears start() is being called via onLongPress
         // even though we never received an intial handleInterceptedDownEvent
         // where we would usually initialize mLastStartedItemPos.
-        if (mLastTouchedItemPosition < 0){
-          Log.w(TAG, "Illegal state. Can't start without valid mLastStartedItemPos.");
-          return;
+        if (mLastTouchedItemPosition == RecyclerView.NO_POSITION) {
+            Log.w(TAG, "Illegal state. Can't start without valid mLastStartedItemPos.");
+            return;
         }
 
         // Partner code in MotionInputHandler ensures items
@@ -109,63 +111,72 @@ public final class GestureSelectionHelper extends ScrollHost implements OnItemTo
             if (Shared.DEBUG) Log.w(TAG, "Unexpected Mouse event. Check configuration.");
         }
 
-        switch (e.getActionMasked()) {
-            case MotionEvent.ACTION_DOWN:
-                // NOTE: Unlike events with other actions, RecyclerView eats
-                // "DOWN" events. So even if we return true here we'll
-                // never see an event w/ ACTION_DOWN passed to onTouchEvent.
-                return handleInterceptedDownEvent(e);
-            case MotionEvent.ACTION_MOVE:
-                return mStarted;
+        // TODO(b/109808552): It seems that mLastStartedItemPos should likely be set as a method
+        // parameter in start().
+        if (e.getActionMasked() == MotionEvent.ACTION_DOWN) {
+            if (mItemLookup.getItemDetails(e) != null) {
+                mLastTouchedItemPosition = mView.getItemUnder(e);
+            }
         }
 
-        return false;
+        // See handleTouch(MotionEvent) javadoc for explanation as to why this is correct.
+        return handleTouch(e);
     }
 
     @Override
-    public void onTouchEvent(RecyclerView unused, MotionEvent e) {
-        // Note: There were a couple times I as this check firing
-        // after combinations of mouse + touch + rotation.
-        // But after further investigation I couldn't repro.
-        // For that reason we guard this check (for now) w/ IS_DEBUGGABLE.
-        if (Build.IS_DEBUGGABLE) checkState(mStarted);
+    /** @hide */
+    public void onTouchEvent(@NonNull RecyclerView unused, @NonNull MotionEvent e) {
+        // See handleTouch(MotionEvent) javadoc for explanation as to why this is correct.
+        handleTouch(e);
+    }
+
+    /**
+     * If selection has started, will handle all appropriate types of MotionEvents and will return
+     * true if this OnItemTouchListener should start intercepting the rest of the MotionEvents.
+     *
+     * <p>This code, and the fact that this method is used by both OnInterceptTouchEvent and
+     * OnTouchEvent, is correct and valid because:
+     * <ol>
+     * <li>MotionEvents that aren't ACTION_DOWN are only ever passed to either onInterceptTouchEvent
+     * or onTouchEvent; never to both.  The MotionEvents we are handling in this method are not
+     * ACTION_DOWN, and therefore, its appropriate that both the onInterceptTouchEvent and
+     * onTouchEvent code paths cross this method.
+     * <li>This method returns true when we want to intercept MotionEvents.  OnInterceptTouchEvent
+     * uses that information to determine its own return, and OnMotionEvent doesn't have a return
+     * so this methods return value is irrelevant to it.
+     * </ol>
+     */
+    private boolean handleTouch(MotionEvent e) {
+        if (!mStarted) {
+            return false;
+        }
 
         switch (e.getActionMasked()) {
             case MotionEvent.ACTION_MOVE:
                 handleMoveEvent(e);
-                break;
+                return true;
             case MotionEvent.ACTION_UP:
-                handleUpEvent(e);
-                break;
+                handleUpEvent();
+                return true;
             case MotionEvent.ACTION_CANCEL:
-                handleCancelEvent(e);
-                break;
+                handleCancelEvent();
+                return true;
         }
+
+        return false;
     }
 
     @Override
-    public void onRequestDisallowInterceptTouchEvent(boolean disallowIntercept) {}
-
-    // Called when an ACTION_DOWN event is intercepted. See onInterceptTouchEvent
-    // for additional notes.
-    // If down event happens on an item, we mark that item's position as last started.
-    private boolean handleInterceptedDownEvent(MotionEvent e) {
-        // Ignore events where details provider doesn't return details.
-        // These objects don't participate in selection.
-        if (mItemLookup.getItemDetails(e) == null) {
-            return false;
-        }
-        mLastTouchedItemPosition = mView.getItemUnder(e);
-        return mLastTouchedItemPosition != RecyclerView.NO_POSITION;
+    public void onRequestDisallowInterceptTouchEvent(boolean disallowIntercept) {
     }
 
     // Called when ACTION_UP event is to be handled.
     // Essentially, since this means all gesture movement is over, reset everything and apply
     // provisional selection.
-    private void handleUpEvent(MotionEvent e) {
+    private void handleUpEvent() {
         mSelectionMgr.mergeProvisionalSelection();
         endSelection();
-        if (mLastTouchedItemPosition > -1) {
+        if (mLastTouchedItemPosition != RecyclerView.NO_POSITION) {
             mSelectionMgr.startRange(mLastTouchedItemPosition);
         }
     }
@@ -173,7 +184,7 @@ public final class GestureSelectionHelper extends ScrollHost implements OnItemTo
     // Called when ACTION_CANCEL event is to be handled.
     // This means this gesture selection is aborted, so reset everything and abandon provisional
     // selection.
-    private void handleCancelEvent(MotionEvent unused) {
+    private void handleCancelEvent() {
         mSelectionMgr.clearProvisionalSelection();
         endSelection();
     }
@@ -181,7 +192,7 @@ public final class GestureSelectionHelper extends ScrollHost implements OnItemTo
     private void endSelection() {
         checkState(mStarted);
 
-        mLastTouchedItemPosition = -1;
+        mLastTouchedItemPosition = RecyclerView.NO_POSITION;
         mStarted = false;
         mLock.unblock();
     }
@@ -253,7 +264,9 @@ public final class GestureSelectionHelper extends ScrollHost implements OnItemTo
     @VisibleForTesting
     static abstract class ViewDelegate extends ScrollerCallbacks {
         abstract int getHeight();
+
         abstract int getItemUnder(MotionEvent e);
+
         abstract int getLastGlidedItemPosition(MotionEvent e);
     }
 
diff --git a/tests/unit/com/android/documentsui/selection/GestureSelectionHelperTest.java b/tests/unit/com/android/documentsui/selection/GestureSelectionHelperTest.java
index 088088f4..df69fdf8 100644
--- a/tests/unit/com/android/documentsui/selection/GestureSelectionHelperTest.java
+++ b/tests/unit/com/android/documentsui/selection/GestureSelectionHelperTest.java
@@ -23,6 +23,7 @@ import static org.junit.Assert.fail;
 import android.support.test.filters.SmallTest;
 import android.support.test.runner.AndroidJUnit4;
 import android.support.v7.widget.RecyclerView;
+
 import android.view.MotionEvent;
 
 import com.android.documentsui.selection.testing.SelectionProbe;
@@ -95,15 +96,17 @@ public class GestureSelectionHelperTest {
     }
 
     @Test
-    public void testClaimsDownOnItem() {
+    public void testDoesNotClaimDownOnItem() {
         mView.mNextPosition = 0;
-        assertTrue(mHelper.onInterceptTouchEvent(null, DOWN));
+        assertFalse(mHelper.onInterceptTouchEvent(null, DOWN));
     }
 
     @Test
     public void testClaimsMoveIfStarted() {
         mView.mNextPosition = 0;
-        assertTrue(mHelper.onInterceptTouchEvent(null, DOWN));
+        // TODO(b/109808552): This should be removed with that bug is fixed because it will be a
+        // no-op at that time.
+        mHelper.onInterceptTouchEvent(null, DOWN);
 
         // Normally, this is controller by the TouchSelectionHelper via a a long press gesture.
         mSelectionHelper.select("1");
@@ -130,7 +133,7 @@ public class GestureSelectionHelperTest {
         mHelper.onTouchEvent(null, MOVE);
         mHelper.onTouchEvent(null, UP);
 
-        mSelection.assertRangeSelected(1,  9);
+        mSelection.assertRangeSelected(1, 9);
     }
 
     private static final class TestViewDelegate extends GestureSelectionHelper.ViewDelegate {
-- 
2.17.1

