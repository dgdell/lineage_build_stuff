From c9629bfd87a7884040aa5cc650b3c2d41c6dc761 Mon Sep 17 00:00:00 2001
From: Joey Rizzoli <joey@lineageos.org>
Date: Thu, 9 Nov 2017 16:05:00 +0100
Subject: [PATCH 24/32] Launcher3: custom grid

Change-Id: I097ab67ae0adc4e052df0521b72f14fd9a979417
Signed-off-by: Arne Coucheron <arco68@gmail.com>
Signed-off-by: Joey Rizzoli <joey@lineageos.org>
---
 res/layout/dialog_custom_grid.xml             | 59 ++++++++++++
 res/values/lineage_strings.xml                |  9 +-
 res/xml/launcher_preferences.xml              |  4 +
 .../launcher3/InvariantDeviceProfile.java     | 31 +++++--
 .../android/launcher3/SettingsActivity.java   | 92 ++++++++++++++++++-
 .../launcher3/lineage/LineageUtils.java       | 33 +++++++
 6 files changed, 220 insertions(+), 8 deletions(-)
 create mode 100644 res/layout/dialog_custom_grid.xml

diff --git a/res/layout/dialog_custom_grid.xml b/res/layout/dialog_custom_grid.xml
new file mode 100644
index 000000000..aa54b78f7
--- /dev/null
+++ b/res/layout/dialog_custom_grid.xml
@@ -0,0 +1,59 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!-- Copyright (C) 2017 The LineageOS Project
+
+     Licensed under the Apache License, Version 2.0 (the "License");
+     you may not use this file except in compliance with the License.
+     You may obtain a copy of the License at
+
+          http://www.apache.org/licenses/LICENSE-2.0
+
+     Unless required by applicable law or agreed to in writing, software
+     distributed under the License is distributed on an "AS IS" BASIS,
+     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+     See the License for the specific language governing permissions and
+     limitations under the License.
+-->
+<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
+    android:layout_width="match_parent"
+    android:layout_height="match_parent"
+    android:orientation="horizontal"
+    android:padding="16dp">
+
+    <LinearLayout
+        android:layout_width="0dp"
+        android:layout_height="wrap_content"
+        android:layout_weight="1"
+        android:orientation="vertical">
+
+        <TextView
+            android:layout_width="match_parent"
+            android:layout_height="wrap_content"
+            android:textAlignment="center"
+            android:text="@string/grid_size_columns" />
+
+        <NumberPicker
+            android:id="@+id/dialog_grid_column"
+            android:layout_width="match_parent"
+            android:layout_height="wrap_content"
+            android:layout_marginEnd="8dp" />
+    </LinearLayout>
+
+    <LinearLayout
+        android:layout_width="0dp"
+        android:layout_height="wrap_content"
+        android:layout_weight="1"
+        android:orientation="vertical">
+
+        <TextView
+            android:layout_width="match_parent"
+            android:layout_height="wrap_content"
+            android:textAlignment="center"
+            android:text="@string/grid_size_rows" />
+
+        <NumberPicker
+            android:id="@+id/dialog_grid_row"
+            android:layout_width="match_parent"
+            android:layout_height="wrap_content"
+            android:layout_marginEnd="8dp" />
+    </LinearLayout>
+</LinearLayout>
\ No newline at end of file
diff --git a/res/values/lineage_strings.xml b/res/values/lineage_strings.xml
index d2526e8ae..1a3c6f300 100644
--- a/res/values/lineage_strings.xml
+++ b/res/values/lineage_strings.xml
@@ -31,4 +31,11 @@
     <string name="icon_shape_circle_name">Circle</string>
     <string name="icon_shape_squircle_name">Squircle</string>
     <string name="icon_shape_teardrop_name">Teardrop</string>
-</resources>
\ No newline at end of file
+
+    <!-- Grid size -->
+    <string name="grid_size_text">Grid size</string>
+    <string name="grid_size_rows">Rows</string>
+    <string name="grid_size_columns">Columns</string>
+    <string name="grid_size_custom_positive">Set</string>
+    <string name="grid_size_custom_message">Select custom columns and rows count</string>
+</resources>
diff --git a/res/xml/launcher_preferences.xml b/res/xml/launcher_preferences.xml
index 9bec06c4d..5c5fd125f 100644
--- a/res/xml/launcher_preferences.xml
+++ b/res/xml/launcher_preferences.xml
@@ -58,4 +58,8 @@
         android:defaultValue="@string/icon_shape_default"
         android:persistent="false" />
 
+    <Preference
+        android:key="pref_grid_size"
+        android:title="@string/grid_size_text"
+        android:persistent="true" />
 </PreferenceScreen>
diff --git a/src/com/android/launcher3/InvariantDeviceProfile.java b/src/com/android/launcher3/InvariantDeviceProfile.java
index f63cce58d..2e6abb8ac 100644
--- a/src/com/android/launcher3/InvariantDeviceProfile.java
+++ b/src/com/android/launcher3/InvariantDeviceProfile.java
@@ -18,17 +18,20 @@ package com.android.launcher3;
 
 import android.annotation.TargetApi;
 import android.content.Context;
+import android.content.SharedPreferences;
 import android.content.res.Configuration;
 import android.content.res.TypedArray;
 import android.content.res.XmlResourceParser;
 import android.graphics.Point;
 import android.support.annotation.VisibleForTesting;
 import android.util.DisplayMetrics;
+import android.util.Pair;
 import android.util.Xml;
 import android.view.Display;
 import android.view.WindowManager;
 
 import com.android.launcher3.config.FeatureFlags;
+import com.android.launcher3.lineage.LineageUtils;
 import com.android.launcher3.util.Thunk;
 
 import org.xmlpull.v1.XmlPullParser;
@@ -46,6 +49,9 @@ public class InvariantDeviceProfile {
 
     private static final float ICON_SIZE_DEFINED_IN_APP_DP = 48;
 
+    private static final String KEY_GRID_SIZE = "pref_grid_size";
+    private static final String KEY_GRID_CUSTOM = "pref_grid_custom";
+
     // Constants that affects the interpolation curve between statically defined device profile
     // buckets.
     private static float KNEARESTNEIGHBOR = 3;
@@ -93,14 +99,14 @@ public class InvariantDeviceProfile {
     public InvariantDeviceProfile() {
     }
 
-    private InvariantDeviceProfile(InvariantDeviceProfile p) {
-        this(p.name, p.minWidthDps, p.minHeightDps, p.numRows, p.numColumns,
+    private InvariantDeviceProfile(Context context, InvariantDeviceProfile p) {
+        this(context, p.name, p.minWidthDps, p.minHeightDps, p.numRows, p.numColumns,
                 p.numFolderRows, p.numFolderColumns,
                 p.iconSize, p.landscapeIconSize, p.iconTextSize, p.numHotseatIcons,
                 p.defaultLayoutId, p.demoModeLayoutId);
     }
 
-    private InvariantDeviceProfile(String n, float w, float h, int r, int c, int fr, int fc,
+    private InvariantDeviceProfile(Context context, String n, float w, float h, int r, int c, int fr, int fc,
             float is, float lis, float its, int hs, int dlId, int dmlId) {
         name = n;
         minWidthDps = w;
@@ -115,6 +121,8 @@ public class InvariantDeviceProfile {
         numHotseatIcons = hs;
         defaultLayoutId = dlId;
         demoModeLayoutId = dmlId;
+
+        setGridSize(context);
     }
 
     @TargetApi(23)
@@ -135,7 +143,7 @@ public class InvariantDeviceProfile {
         ArrayList<InvariantDeviceProfile> closestProfiles = findClosestDeviceProfiles(
                 minWidthDps, minHeightDps, getPredefinedDeviceProfiles(context));
         InvariantDeviceProfile interpolatedDeviceProfileOut =
-                invDistWeightedInterpolate(minWidthDps,  minHeightDps, closestProfiles);
+                invDistWeightedInterpolate(context, minWidthDps,  minHeightDps, closestProfiles);
 
         InvariantDeviceProfile closestProfile = closestProfiles.get(0);
         numRows = closestProfile.numRows;
@@ -194,6 +202,7 @@ public class InvariantDeviceProfile {
                     int numColumns = a.getInt(R.styleable.InvariantDeviceProfile_numColumns, 0);
                     float iconSize = a.getFloat(R.styleable.InvariantDeviceProfile_iconSize, 0);
                     profiles.add(new InvariantDeviceProfile(
+                            context,
                             a.getString(R.styleable.InvariantDeviceProfile_name),
                             a.getFloat(R.styleable.InvariantDeviceProfile_minWidthDps, 0),
                             a.getFloat(R.styleable.InvariantDeviceProfile_minHeightDps, 0),
@@ -276,7 +285,7 @@ public class InvariantDeviceProfile {
     }
 
     // Package private visibility for testing.
-    InvariantDeviceProfile invDistWeightedInterpolate(float width, float height,
+    InvariantDeviceProfile invDistWeightedInterpolate(Context context, float width, float height,
                 ArrayList<InvariantDeviceProfile> points) {
         float weights = 0;
 
@@ -287,7 +296,7 @@ public class InvariantDeviceProfile {
 
         InvariantDeviceProfile out = new InvariantDeviceProfile();
         for (int i = 0; i < points.size() && i < KNEARESTNEIGHBOR; ++i) {
-            p = new InvariantDeviceProfile(points.get(i));
+            p = new InvariantDeviceProfile(context, points.get(i));
             float w = weight(width, height, p.minWidthDps, p.minHeightDps, WEIGHT_POWER);
             weights += w;
             out.add(p.multiply(w));
@@ -332,6 +341,16 @@ public class InvariantDeviceProfile {
         return (float) (WEIGHT_EFFICIENT / Math.pow(d, pow));
     }
 
+    private void setGridSize(Context context) {
+        SharedPreferences prefs = Utilities.getPrefs(context);
+        String defaultGridSize = LineageUtils.getGridValue(numColumns, numRows);
+        String properSize = prefs.getString(KEY_GRID_SIZE, defaultGridSize);
+
+        Pair<Integer, Integer> values = LineageUtils.extractCustomGrid(properSize);
+        numColumns = values.first;
+        numRows = values.second;
+    }
+
     /**
      * As a ratio of screen height, the total distance we want the parallax effect to span
      * horizontally
diff --git a/src/com/android/launcher3/SettingsActivity.java b/src/com/android/launcher3/SettingsActivity.java
index da0856db7..0b67a2fb3 100644
--- a/src/com/android/launcher3/SettingsActivity.java
+++ b/src/com/android/launcher3/SettingsActivity.java
@@ -32,6 +32,9 @@ import android.content.Context;
 import android.content.DialogInterface;
 import android.content.Intent;
 import android.os.Build;
+import android.app.AlarmManager;
+import android.app.PendingIntent;
+import android.content.SharedPreferences;
 import android.os.Bundle;
 import android.preference.ListPreference;
 import android.preference.Preference;
@@ -43,6 +46,9 @@ import android.text.TextUtils;
 import android.view.View;
 import android.widget.Adapter;
 import android.widget.ListView;
+import android.util.Pair;
+import android.view.LayoutInflater;
+import android.widget.NumberPicker;
 
 import com.android.launcher3.graphics.IconShapeOverride;
 import com.android.launcher3.lineage.LineageLauncherCallbacks;
@@ -71,6 +77,7 @@ public class SettingsActivity extends Activity {
     private static final String SAVE_HIGHLIGHTED_KEY = "android:preference_highlighted";
 
     public static final String KEY_MINUS_ONE = "pref_enable_minus_one";
+    private static final String KEY_GRID_SIZE = "pref_grid_size";
 
     @Override
     protected void onCreate(Bundle savedInstanceState) {
@@ -91,12 +98,17 @@ public class SettingsActivity extends Activity {
     /**
      * This fragment shows the launcher preferences.
      */
-    public static class LauncherSettingsFragment extends PreferenceFragment {
+    public static class LauncherSettingsFragment extends PreferenceFragment 
+            implements SharedPreferences.OnSharedPreferenceChangeListener {
 
         private IconBadgingObserver mIconBadgingObserver;
 
         private String mPreferenceKey;
         private boolean mPreferenceHighlighted = false;
+        private boolean mShouldRestart = false;
+
+        private SharedPreferences mPrefs;
+        private Preference mGridPref;
 
         @Override
         public void onCreate(Bundle savedInstanceState) {
@@ -108,6 +120,9 @@ public class SettingsActivity extends Activity {
             getPreferenceManager().setSharedPreferencesName(LauncherFiles.SHARED_PREFERENCES_KEY);
             addPreferencesFromResource(R.xml.launcher_preferences);
 
+            mPrefs = Utilities.getPrefs(getActivity().getApplicationContext());
+            mPrefs.registerOnSharedPreferenceChangeListener(this);
+
             ContentResolver resolver = getActivity().getContentResolver();
 
             ButtonPreference iconBadgingPref =
@@ -150,6 +165,16 @@ public class SettingsActivity extends Activity {
                     getPreferenceScreen().removePreference(minusOne);
                 }
             }
+
+            mGridPref = findPreference(KEY_GRID_SIZE);
+            if (mGridPref != null) {
+                mGridPref.setOnPreferenceClickListener(preference -> {
+                    setCustomGridSize();
+                    return true;
+                });
+
+                mGridPref.setSummary(mPrefs.getString(KEY_GRID_SIZE, getDefaultGridSize()));
+            }
         }
 
         @Override
@@ -208,9 +233,74 @@ public class SettingsActivity extends Activity {
                 mIconBadgingObserver.unregister();
                 mIconBadgingObserver = null;
             }
+            mPrefs.unregisterOnSharedPreferenceChangeListener(this);
+
+            if (mShouldRestart) {
+                triggerRestart();
+            }
             super.onDestroy();
         }
 
+        @Override
+        public void onSharedPreferenceChanged(SharedPreferences prefs, String key) {
+            if (KEY_GRID_SIZE.equals(key)) {
+                mGridPref.setSummary(mPrefs.getString(KEY_GRID_SIZE, getDefaultGridSize()));
+                mShouldRestart = true;
+            }
+        }
+
+        private void setCustomGridSize() {
+            int minValue = 3;
+            int maxValue = 9;
+
+            String storedValue = mPrefs.getString(KEY_GRID_SIZE, "4x4");
+            Pair<Integer, Integer> currentValues = LineageUtils.extractCustomGrid(storedValue);
+
+            LayoutInflater inflater = (LayoutInflater)
+                    getActivity().getSystemService(Context.LAYOUT_INFLATER_SERVICE);
+            if (inflater == null) {
+                return;
+            }
+            View contentView = inflater.inflate(R.layout.dialog_custom_grid, null);
+            NumberPicker columnPicker = contentView.findViewById(R.id.dialog_grid_column);
+            NumberPicker rowPicker = contentView.findViewById(R.id.dialog_grid_row);
+
+            columnPicker.setMinValue(minValue);
+            rowPicker.setMinValue(minValue);
+            columnPicker.setMaxValue(maxValue);
+            rowPicker.setMaxValue(maxValue);
+            columnPicker.setValue(currentValues.first);
+            rowPicker.setValue(currentValues.second);
+
+            new AlertDialog.Builder(getActivity())
+                    .setTitle(R.string.grid_size_text)
+                    .setMessage(R.string.grid_size_custom_message)
+                    .setView(contentView)
+                    .setPositiveButton(R.string.grid_size_custom_positive, (dialog, i) -> {
+                        String newValues = LineageUtils.getGridValue(columnPicker.getValue(),
+                                rowPicker.getValue());
+                        mPrefs.edit().putString(KEY_GRID_SIZE, newValues).apply();
+                    })
+                    .show();
+        }
+
+        private String getDefaultGridSize() {
+            InvariantDeviceProfile profile = new InvariantDeviceProfile(getActivity());
+            return LineageUtils.getGridValue(profile.numColumns, profile.numRows);
+        }
+
+        private void triggerRestart() {
+            Context context = getActivity().getApplicationContext();
+            Intent intent = new Intent(Intent.ACTION_MAIN);
+            intent.addCategory(Intent.CATEGORY_HOME);
+            intent.addFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP);
+            PendingIntent pi = PendingIntent.getActivity(context, 41, intent,
+                    PendingIntent.FLAG_CANCEL_CURRENT);
+            AlarmManager manager = (AlarmManager) context.getSystemService(Context.ALARM_SERVICE);
+            manager.set(AlarmManager.RTC, java.lang.System.currentTimeMillis() + 1, pi);
+            java.lang.System.exit(0);
+        }
+
         @TargetApi(Build.VERSION_CODES.O)
         private PreferenceScreen selectPreferenceRecursive(
                 Preference pref, PreferenceScreen topParent) {
diff --git a/src/com/android/launcher3/lineage/LineageUtils.java b/src/com/android/launcher3/lineage/LineageUtils.java
index ae324dd10..e697d6c63 100644
--- a/src/com/android/launcher3/lineage/LineageUtils.java
+++ b/src/com/android/launcher3/lineage/LineageUtils.java
@@ -3,9 +3,17 @@ package com.android.launcher3.lineage;
 import android.content.Context;
 import android.content.pm.ApplicationInfo;
 import android.content.pm.PackageManager;
+import android.util.Pair;
+
+import java.util.Locale;
 
 public class LineageUtils {
 
+    private static final String GRID_VALUE_SEPARATOR = "x";
+    private static final int GRID_ROW_VALUE_DEFAULT = 4;
+    private static final int GRID_COLUMN_VALUE_DEFAULT = 5;
+
+
     public static boolean hasPackageInstalled(Context context, String pkgName) {
         try {
             ApplicationInfo ai = context.getPackageManager().getApplicationInfo(pkgName, 0);
@@ -14,4 +22,29 @@ public class LineageUtils {
             return false;
         }
     }
+
+    public static Pair<Integer, Integer> extractCustomGrid(String value) {
+        int columns = GRID_COLUMN_VALUE_DEFAULT;
+        int rows = GRID_ROW_VALUE_DEFAULT;
+        String[] values = value.split(GRID_VALUE_SEPARATOR);
+
+        if (values.length == 2) {
+            try {
+                columns = Integer.parseInt(values[0]);
+                rows = Integer.parseInt(values[1]);
+            } catch (NumberFormatException e) {
+                // Ignore and fallback to default
+                columns = GRID_COLUMN_VALUE_DEFAULT;
+                rows = GRID_ROW_VALUE_DEFAULT;
+            }
+        }
+
+        return new Pair<>(columns, rows);
+
+    }
+
+    public static String getGridValue(int columns, int rows) {
+        return String.format(Locale.ENGLISH, "%1$d%2$s%3$d", columns,
+                GRID_VALUE_SEPARATOR, rows);
+    }
 }
-- 
2.17.1

