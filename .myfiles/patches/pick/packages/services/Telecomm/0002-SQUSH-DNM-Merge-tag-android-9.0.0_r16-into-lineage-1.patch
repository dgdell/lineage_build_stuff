From 087f5c0fa4c27d05926730b0b8c2cf0eb0214d24 Mon Sep 17 00:00:00 2001
From: Luca Stefani <luca.stefani.ge1@gmail.com>
Date: Tue, 6 Nov 2018 15:25:28 +0100
Subject: [PATCH 2/2] [SQUSH][DNM] Merge tag 'android-9.0.0_r16' into
 lineage-16.0

commit 5ebb43805a8768bbcfe1cb255805a1f6ea46ad36
Merge: 644edf83 81fb20a3
Author: android-build-team Robot <android-build-team-robot@google.com>
Date:   Wed Sep 5 23:35:36 2018 +0000

    Merge cherrypicks of [4948448, 4948511, 4948299, 4947854, 4947306, 4946150, 4948531, 4946116, 4948532] into pi-qpr1-release

    Change-Id: I0b8f2268cf9796147f18e41506e938d5bbef09c3

commit 81fb20a343d800a52d381dd18cdc03fabbfa8c79
Author: Tyler Gunn <tgunn@google.com>
Date:   Tue Aug 28 08:39:52 2018 -0700

    Add unit test for PhoneAccount equality operator.

    Test: Add unit test for PhoneAccount equality.
    Bug: 112884689
    Merged-In: I563d1dfbb1f6c9b20f7b4ecd50b671009451c2c4
    Change-Id: I563d1dfbb1f6c9b20f7b4ecd50b671009451c2c4
    (cherry picked from commit 78722fde80f8870d226294791543902196a9962a)
    (cherry picked from commit 1b05f949002b6dfff830f4879e3cf22c8417b075)

commit 644edf83de5c8244bb4079ff96576d77e7f1f881
Merge: 00db34da 23e48f39
Author: android-build-team Robot <android-build-team-robot@google.com>
Date:   Wed Aug 15 03:01:50 2018 +0000

    Snap for 4954419 from 23e48f397d729b9019a4ea1ab2baac0a6b06bc0a to pi-qpr1-release

    Change-Id: If37bab7faa53792230dba917f4de5045317942eb

commit 23e48f397d729b9019a4ea1ab2baac0a6b06bc0a
Author: Siddharth Ray <siddharthr@google.com>
Date:   Mon Aug 13 10:14:17 2018 -0700

    Add HW Revision to Telecom Metrics

    Test:
    adb shell dumpsys telecomm
    Hardware Version: EVT2.0

    BUG:112541087
    Change-Id: I108b7b43d6fbd9899b4adba51720f0dd9ef3980b

commit 00db34da7393b61a7609343ae11b2c4814f68734
Merge: 0340c912 d92a693e
Author: android-build-team Robot <android-build-team-robot@google.com>
Date:   Tue Aug 7 03:13:22 2018 +0000

    Snap for 4937098 from d92a693eb325942d436d929714a2f71d1ebbe9cc to pi-qpr1-release

    Change-Id: I9c6c3fdd138ed777ee0cf3cb966ab7e8b488951b

commit d92a693eb325942d436d929714a2f71d1ebbe9cc
Author: Hall Liu <hallliu@google.com>
Date:   Fri Aug 3 18:27:43 2018 -0700

    Don't insert certain numbers into the call log

    For regulatory requirements, prevent certain sensitive numbers from
    being logged in the call log. The numbers can either be specified in the
    carrier config or in the mcc config for the device.

    Bug: 111470439
    Test: unit, manual
    Change-Id: I95040d6927d75b4104b5994e585b9498122448b0

commit 0340c91259f196b0661d61ab7a1ae72a702560d1
Merge: 5d8e004b 4462a803
Author: android-build-team Robot <android-build-team-robot@google.com>
Date:   Fri Jul 27 03:04:39 2018 +0000

    Snap for 4916303 from 4462a803bdad000deedea1ab008fc31ab119af26 to pi-qpr1-release

    Change-Id: Iee7f61ab2c2aad94a391e5421aefc3492b054b83

commit 4462a803bdad000deedea1ab008fc31ab119af26
Author: Bill Yi <byi@google.com>
Date:   Thu Jul 19 21:33:33 2018 -0700

    Import translations. DO NOT MERGE

    Auto-generated-cl: translation import

    Bug: 64712476
    Change-Id: I9446e02b2f05d98c6317212662c397aef827e5be

commit 5d8e004bee02107d2abd0c31c4aae12f8882fcb3
Author: Jack He <siyuanh@google.com>
Date:   Wed Jun 6 18:43:00 2018 -0700

    Telecom: Send call state update to newly connected BluetoothHeadset service

    * Call updateHeadsetWithCallState(true) when BluetoothHeadset service is
      connected

    Bug: 109790139
    Test: toggle Bluetooth while call is active
    Change-Id: I8f0d981cf1cfc29409e4f50bd54a66a41280330e
    (cherry picked from commit 9c0d4be940f8e4834bc061dd12d5377dabda39bb)

commit a63f0962a8a1c6dd332294fcc81fdaef7ea43df9
Author: Bill Yi <byi@google.com>
Date:   Thu Jul 5 01:02:06 2018 -0700

    Import translations. DO NOT MERGE

    Auto-generated-cl: translation import

    Bug: 64712476
    Change-Id: I5b28168690aca1af82d63dbc10081d101c7990e1

commit 4b4a8b8bfef2c5e51122f1d13700cffa3afe548c
Merge: ff1307c4 3516b4e0
Author: TreeHugger Robot <treehugger-gerrit@google.com>
Date:   Fri Jun 29 23:54:04 2018 +0000

    Merge "Don't call onStartRtt unless RTT property changes" into pi-dev

commit ff1307c4d4c028b21f910410effdc69311b4fb85
Merge: afcdfa26 79caeb39
Author: Hall Liu <hallliu@google.com>
Date:   Thu Jun 28 00:19:38 2018 +0000

    Merge "Don't use RTT for calls to voicemail" into pi-dev

commit 3516b4e0d17e244731a6d4e58fff81ddb4156253
Author: Hall Liu <hallliu@google.com>
Date:   Wed Jun 27 16:25:10 2018 -0700

    Don't call onStartRtt unless RTT property changes

    Don't call onStartRtt inside the call connection property change unless
    the RTT property flipped to on -- this'll send spurious RTT requests if
    RTT was already on.

    Change-Id: If8ee4e9bf994f1ed6c6fc58c3f224445493f9c5d
    Fixes: 110855750
    Test: manual

commit afcdfa26a5279f58234ecd860eb2c577f03482c5
Author: Tyler Gunn <tgunn@google.com>
Date:   Wed Jun 13 10:45:44 2018 -0700

    Fix inability to reject call as secondary user from lock screen.

    The rejectCall method in InCallAdapter was performing a check to see if
    reply via sms is allowed, however it was doing this outside of the
    "clearCallingIdentity" block.  This was causing a crash when trying to
    determine if the device is locked.

    Test: Reject call as primary user from lock screen.
    Test: Reject call as secondary user from lock screen.
    Bug: 78463911

    Merged-In: I85b5793a1e64c2567df035cfb3d7b6e0daa3181f
    Change-Id: I85b5793a1e64c2567df035cfb3d7b6e0daa3181f
    (cherry picked from commit a286b7b8f59a59290cdcc384de502b279234876f)

commit 79caeb3958af69d7e41f9c79bc02378ff057cb1d
Author: Hall Liu <hallliu@google.com>
Date:   Fri Jun 15 18:24:45 2018 -0700

    Don't use RTT for calls to voicemail

    Check whether an outgoing call is placed to a voicemail number before
    setting the RTT property on it.

    Bug: 110271520
    Test: manual
    Change-Id: I5035372b28b8566d9b6908db7925e620a3c93e18

commit 67ff0378b1bdc39ece2a384a2f2f58b1223f1ab2
Author: Tyler Gunn <tgunn@google.com>
Date:   Tue Jun 19 08:31:01 2018 -0700

    Add option to use Ringtone looping API in Telecom config.xml

    Currently AsyncRingtonePlayer will check every 3 seconds to see if the
    ringtone has stopped playing and restart it if it has.  Adding a config
    option so that we can isntead opt to just set the ringtone to loop by
    itself.
    Default is to use existing 3 second handler check.

    Bug: 75947705
    Test: manual incoming ringer test
    Merged-In: I0cb30b423c412d8e6c8603472b23c9f4aa65d31d
    Change-Id: I0cb30b423c412d8e6c8603472b23c9f4aa65d31d
    (cherry picked from commit 631c8039322fad01d81fbc3d5d97d7a7ce63a714)

Change-Id: I301ba85f3981950f8bb9a7d7f00280eee4d5a8e7
---
 proto/telecom.proto                           |  3 ++
 res/values-eu/strings.xml                     |  2 +-
 res/values-sw/strings.xml                     |  4 +-
 res/values/config.xml                         |  5 ++
 src/com/android/server/telecom/Analytics.java |  4 ++
 .../server/telecom/AsyncRingtonePlayer.java   | 30 ++++++++++-
 .../telecom/BluetoothPhoneServiceImpl.java    |  1 +
 src/com/android/server/telecom/Call.java      |  6 +--
 .../server/telecom/CallLogManager.java        | 25 ++++++++-
 .../android/server/telecom/CallsManager.java  | 20 +++++--
 .../android/server/telecom/InCallAdapter.java | 16 +++---
 .../telecom/components/TelecomService.java    |  6 ++-
 .../telecom/tests/CallLogManagerTest.java     | 52 +++++++++++++++++++
 .../tests/PhoneAccountRegistrarTest.java      | 27 ++++++++++
 14 files changed, 182 insertions(+), 19 deletions(-)

diff --git a/proto/telecom.proto b/proto/telecom.proto
index 9fd64dbc..df69ed70 100644
--- a/proto/telecom.proto
+++ b/proto/telecom.proto
@@ -13,6 +13,9 @@ message TelecomLog {
 
   // Timing information for the logging sessions
   repeated LogSessionTiming session_timings = 2;
+
+  // Hardware revision (EVT, DVT, PVT etc.)
+  optional string hardware_revision = 3;
 }
 
 message LogSessionTiming {
diff --git a/res/values-eu/strings.xml b/res/values-eu/strings.xml
index 192ad73a..ef5902ac 100644
--- a/res/values-eu/strings.xml
+++ b/res/values-eu/strings.xml
@@ -64,7 +64,7 @@
     <string name="blocked_numbers_butter_bar_button" msgid="2197943354922010696">"Gaitu berriro"</string>
     <string name="blocked_numbers_number_blocked_message" msgid="7678509606805029540">"Blokeatu da <xliff:g id="BLOCKED_NUMBER">%1$s</xliff:g>"</string>
     <string name="blocked_numbers_number_unblocked_message" msgid="977894647366750418">"Desblokeatu da <xliff:g id="UNBLOCKED_NUMBER">%1$s</xliff:g>"</string>
-    <string name="blocked_numbers_block_emergency_number_message" msgid="917851876780698387">"Ezin da blokeatu larrialdi-zenbakia."</string>
+    <string name="blocked_numbers_block_emergency_number_message" msgid="917851876780698387">"Ezin da blokeatu larrialdietarako zenbakia."</string>
     <string name="blocked_numbers_number_already_blocked_message" msgid="4392247814500811798">"<xliff:g id="BLOCKED_NUMBER">%1$s</xliff:g> blokeatuta dago dagoeneko."</string>
     <string name="toast_personal_call_msg" msgid="5115361633476779723">"Telefono pertsonala erabiltzen ari zara deia egiteko"</string>
     <string name="notification_incoming_call" msgid="7713197997773986670">"<xliff:g id="CALL_VIA">%1$s</xliff:g> deia (deitzailea: <xliff:g id="CALL_FROM">%2$s</xliff:g>)"</string>
diff --git a/res/values-sw/strings.xml b/res/values-sw/strings.xml
index 19c56690..86b83a56 100644
--- a/res/values-sw/strings.xml
+++ b/res/values-sw/strings.xml
@@ -45,10 +45,10 @@
     <string name="no_vm_number" msgid="4164780423805688336">"Nambari ya sauti inayokosekana"</string>
     <string name="no_vm_number_msg" msgid="1300729501030053828">"Hakuna nambari ya ujumbe wa sauti iliyohifadhiwa katika SIM kadi."</string>
     <string name="add_vm_number_str" msgid="4676479471644687453">"Ongeza nambari"</string>
-    <string name="change_default_dialer_dialog_title" msgid="9101655962941740507">"Unataka kufanya <xliff:g id="NEW_APP">%s</xliff:g> iwe programu chaguo msingi ya simu?"</string>
+    <string name="change_default_dialer_dialog_title" msgid="9101655962941740507">"Unataka kufanya <xliff:g id="NEW_APP">%s</xliff:g> iwe programu chaguomsingi ya simu?"</string>
     <string name="change_default_dialer_dialog_affirmative" msgid="8606546663509166276">"Fanya iwe Chaguo-Msingi"</string>
     <string name="change_default_dialer_dialog_negative" msgid="9078144617060173845">"Ghairi"</string>
-    <string name="change_default_dialer_warning_message" msgid="1417671460801684999">"<xliff:g id="NEW_APP">%s</xliff:g> itaweza kupiga simu na kudhibiti kila kipengele cha simu. Unastahili kuweka programu unazoziamini tu kama programu chaguo msingi ya kupiga simu."</string>
+    <string name="change_default_dialer_warning_message" msgid="1417671460801684999">"<xliff:g id="NEW_APP">%s</xliff:g> itaweza kupiga simu na kudhibiti kila kipengele cha simu. Unastahili kuweka programu unazoziamini tu kama programu chaguomsingi ya kupiga simu."</string>
     <string name="blocked_numbers" msgid="2751843139572970579">"Nambari zilizozuiwa"</string>
     <string name="blocked_numbers_msg" msgid="1045015186124965643">"Hutapokea simu au SMS kutoka kwa nambari zilizozuiwa."</string>
     <string name="block_number" msgid="1101252256321306179">"Ongeza nambari"</string>
diff --git a/res/values/config.xml b/res/values/config.xml
index 7db3315a..8c84688d 100644
--- a/res/values/config.xml
+++ b/res/values/config.xml
@@ -55,4 +55,9 @@
          When false, a fancy vibration pattern which ramps up and down will be used.
          Devices should overlay this value based on the type of vibration hardware they employ. -->
     <bool name="use_simple_vibration_pattern">false</bool>
+
+    <!-- When true, if Telecom is playing the ringtone, it will attempt to pause for some time
+         between repeats of the ringtone.
+         When false, the ringtone will be looping with no pause. -->
+    <bool name="should_pause_between_ringtone_repeats">true</bool>
 </resources>
diff --git a/src/com/android/server/telecom/Analytics.java b/src/com/android/server/telecom/Analytics.java
index dbe1a296..1c9ac351 100644
--- a/src/com/android/server/telecom/Analytics.java
+++ b/src/com/android/server/telecom/Analytics.java
@@ -16,6 +16,8 @@
 
 package com.android.server.telecom;
 
+import android.os.SystemProperties;
+
 import android.telecom.Connection;
 import android.telecom.DisconnectCause;
 import android.telecom.Logging.EventManager;
@@ -583,6 +585,7 @@ public class Analytics {
                             .setSessionEntryPoint(timing.getKey())
                             .setTimeMillis(timing.getTime()))
                     .toArray(TelecomLogClass.LogSessionTiming[]::new);
+            result.setHardwareRevision(SystemProperties.get("ro.boot.revision", ""));
             if (args.length > 1 && CLEAR_ANALYTICS_ARG.equals(args[1])) {
                 sCallIdToInfo.clear();
                 sSessionTimings.clear();
@@ -628,6 +631,7 @@ public class Analytics {
                     .filter(e -> sSessionIdToLogSession.containsKey(e.getKey()))
                     .forEach(e -> writer.printf("%s: %.2f\n",
                             sSessionIdToLogSession.get(e.getKey()), e.getValue()));
+            writer.println("Hardware Version: " + SystemProperties.get("ro.boot.revision", ""));
         }
     }
 
diff --git a/src/com/android/server/telecom/AsyncRingtonePlayer.java b/src/com/android/server/telecom/AsyncRingtonePlayer.java
index 26ad7691..eae94aee 100644
--- a/src/com/android/server/telecom/AsyncRingtonePlayer.java
+++ b/src/com/android/server/telecom/AsyncRingtonePlayer.java
@@ -50,6 +50,26 @@ public class AsyncRingtonePlayer {
     private float mIncrementAmount;
     private float mCurrentIncrementVolume;
 
+    /**
+     * Determines if the {@link AsyncRingtonePlayer} should pause between repeats of the ringtone.
+     * When {@code true}, the system will check if the ringtone has stopped every
+     * {@link #RESTART_RINGER_MILLIS} and restart the ringtone if it has stopped.  This does not
+     * guarantee that there is {@link #RESTART_RINGER_MILLIS} between each repeat of the ringtone,
+     * rather it ensures that for short ringtones, or ringtones which are not a multiple of
+     * {@link #RESTART_RINGER_MILLIS} in duration that there will be some pause between repetitions.
+     * When {@code false}, the ringtone will be looped continually with no attempt to pause between
+     * repeats.
+     */
+    private boolean mShouldPauseBetweenRepeat = true;
+
+    public AsyncRingtonePlayer() {
+        // Empty
+    }
+
+    public AsyncRingtonePlayer(boolean shouldPauseBetweenRepeat) {
+        mShouldPauseBetweenRepeat = shouldPauseBetweenRepeat;
+    }
+
     /** Plays the ringtone. */
     public void play(RingtoneFactory factory, Call incomingCall,
             float incStartVolume, int incRampUpTime) {
@@ -173,7 +193,15 @@ public class AsyncRingtonePlayer {
             mRingtone.setVolume(1F);
         }
 
-        handleRepeat();
+        if (mShouldPauseBetweenRepeat) {
+            // We're trying to pause between repeats, so the ringtone will not intentionally loop.
+            // Instead, we'll use a handler message to perform repeats.
+            handleRepeat();
+        } else {
+            mRingtone.setLooping(true);
+            mRingtone.play();
+            Log.i(this, "Play ringtone, looping.");
+        }
     }
 
     private void handleRepeat() {
diff --git a/src/com/android/server/telecom/BluetoothPhoneServiceImpl.java b/src/com/android/server/telecom/BluetoothPhoneServiceImpl.java
index d0fcfa11..804909c6 100644
--- a/src/com/android/server/telecom/BluetoothPhoneServiceImpl.java
+++ b/src/com/android/server/telecom/BluetoothPhoneServiceImpl.java
@@ -408,6 +408,7 @@ public class BluetoothPhoneServiceImpl {
                 public void onServiceConnected(int profile, BluetoothProfile proxy) {
                     synchronized (mLock) {
                         setBluetoothHeadset(new BluetoothHeadsetProxy((BluetoothHeadset) proxy));
+                        updateHeadsetWithCallState(true /* force */);
                     }
                 }
 
diff --git a/src/com/android/server/telecom/Call.java b/src/com/android/server/telecom/Call.java
index 04f06a2a..bc20d1ca 100644
--- a/src/com/android/server/telecom/Call.java
+++ b/src/com/android/server/telecom/Call.java
@@ -1453,7 +1453,9 @@ public class Call implements CreateConnectionResponse, EventManager.Loggable,
         if (changedProperties != 0) {
             int previousProperties = mConnectionProperties;
             mConnectionProperties = connectionProperties;
-            if ((mConnectionProperties & Connection.PROPERTY_IS_RTT) ==
+            boolean didRttChange =
+                    (changedProperties & Connection.PROPERTY_IS_RTT) == Connection.PROPERTY_IS_RTT;
+            if (didRttChange && (mConnectionProperties & Connection.PROPERTY_IS_RTT) ==
                     Connection.PROPERTY_IS_RTT) {
                 createRttStreams();
                 // Call startRtt to pass the RTT pipes down to the connection service.
@@ -1468,8 +1470,6 @@ public class Call implements CreateConnectionResponse, EventManager.Loggable,
             }
             mWasHighDefAudio = (connectionProperties & Connection.PROPERTY_HIGH_DEF_AUDIO) ==
                     Connection.PROPERTY_HIGH_DEF_AUDIO;
-            boolean didRttChange =
-                    (changedProperties & Connection.PROPERTY_IS_RTT) == Connection.PROPERTY_IS_RTT;
             for (Listener l : mListeners) {
                 l.onConnectionPropertiesChanged(this, didRttChange);
             }
diff --git a/src/com/android/server/telecom/CallLogManager.java b/src/com/android/server/telecom/CallLogManager.java
index caa7970f..0ac50ac3 100755
--- a/src/com/android/server/telecom/CallLogManager.java
+++ b/src/com/android/server/telecom/CallLogManager.java
@@ -40,7 +40,14 @@ import android.telephony.PhoneNumberUtils;
 import com.android.internal.annotations.VisibleForTesting;
 import com.android.internal.telephony.CallerInfo;
 
+import java.util.Arrays;
+import java.util.HashSet;
+import java.util.LinkedHashSet;
 import java.util.Locale;
+import java.util.Objects;
+import java.util.Set;
+import java.util.stream.Collectors;
+import java.util.stream.Stream;
 
 /**
  * Helper class that provides functionality to write information about calls and their associated
@@ -295,7 +302,8 @@ public final class CallLogManager extends CallsManagerListenerBase {
         boolean isSensitiveNumber = mSensitivePhoneNumbers.isSensitiveNumber(mContext, number,
                 accountHandle.getId());
         Log.d(TAG, "isSensitiveNumber: " + isSensitiveNumber);
-        final boolean isOkToLogThisCall = (!isEmergency || okToLogEmergencyNumber) && !isSensitiveNumber;
+        final boolean isOkToLogThisCall = (!isEmergency || okToLogEmergencyNumber)
+                && !isUnloggableNumber(number, configBundle) && !isSensitiveNumber;
 
         sendAddCallBroadcast(callType, duration);
 
@@ -318,6 +326,21 @@ public final class CallLogManager extends CallsManagerListenerBase {
         }
     }
 
+    private boolean isUnloggableNumber(String callNumber, PersistableBundle carrierConfig) {
+        String normalizedNumber = PhoneNumberUtils.normalizeNumber(callNumber);
+        String[] unloggableNumbersFromCarrierConfig = carrierConfig == null ? null
+                : carrierConfig.getStringArray(
+                        CarrierConfigManager.KEY_UNLOGGABLE_NUMBERS_STRING_ARRAY);
+        String[] unloggableNumbersFromMccConfig = mContext.getResources()
+                .getStringArray(com.android.internal.R.array.unloggable_phone_numbers);
+        return Stream.concat(
+                unloggableNumbersFromCarrierConfig == null ?
+                        Stream.empty() : Arrays.stream(unloggableNumbersFromCarrierConfig),
+                unloggableNumbersFromMccConfig == null ?
+                        Stream.empty() : Arrays.stream(unloggableNumbersFromMccConfig)
+        ).anyMatch(unloggableNumber -> Objects.equals(unloggableNumber, normalizedNumber));
+    }
+
     /**
      * Based on the video state of the call, determines the call features applicable for the call.
      *
diff --git a/src/com/android/server/telecom/CallsManager.java b/src/com/android/server/telecom/CallsManager.java
index 875322e6..c9d4cdec 100644
--- a/src/com/android/server/telecom/CallsManager.java
+++ b/src/com/android/server/telecom/CallsManager.java
@@ -1250,8 +1250,13 @@ public class CallsManager extends Call.ListenerBase
                     CallState.CONNECTING,
                     phoneAccountHandle == null ? "no-handle" : phoneAccountHandle.toString());
 
-            if (isRttSettingOn() || (extras != null
-                    && extras.getBoolean(TelecomManager.EXTRA_START_CALL_WITH_RTT, false))) {
+            boolean isVoicemail = (call.getHandle() != null)
+                    && (PhoneAccount.SCHEME_VOICEMAIL.equals(call.getHandle().getScheme())
+                    || (accountToUse != null && mPhoneAccountRegistrar.isVoiceMailNumber(
+                    accountToUse.getAccountHandle(), call.getHandle().getSchemeSpecificPart())));
+
+            if (!isVoicemail && (isRttSettingOn() || (extras != null
+                    && extras.getBoolean(TelecomManager.EXTRA_START_CALL_WITH_RTT, false)))) {
                 Log.d(this, "Outgoing call requesting RTT, rtt setting is %b", isRttSettingOn());
                 if (accountToUse != null
                         && accountToUse.hasCapabilities(PhoneAccount.CAPABILITY_RTT)) {
@@ -1834,8 +1839,15 @@ public class CallsManager extends Call.ListenerBase
                 Log.d("phoneAccountSelected: default to voip mode for call %s", call.getId());
                 call.setIsVoipAudioMode(true);
             }
-            if (isRttSettingOn() || call.getIntentExtras()
-                    .getBoolean(TelecomManager.EXTRA_START_CALL_WITH_RTT, false)) {
+
+            boolean isVoicemail = (call.getHandle() != null)
+                    && (PhoneAccount.SCHEME_VOICEMAIL.equals(call.getHandle().getScheme())
+                    || (realPhoneAccount != null && mPhoneAccountRegistrar.isVoiceMailNumber(
+                    realPhoneAccount.getAccountHandle(),
+                    call.getHandle().getSchemeSpecificPart())));
+
+            if (!isVoicemail && (isRttSettingOn() || call.getIntentExtras()
+                    .getBoolean(TelecomManager.EXTRA_START_CALL_WITH_RTT, false))) {
                 Log.d(this, "Outgoing call after account selection requesting RTT," +
                         " rtt setting is %b", isRttSettingOn());
                 if (realPhoneAccount != null
diff --git a/src/com/android/server/telecom/InCallAdapter.java b/src/com/android/server/telecom/InCallAdapter.java
index f3afc9a0..8de27be9 100644
--- a/src/com/android/server/telecom/InCallAdapter.java
+++ b/src/com/android/server/telecom/InCallAdapter.java
@@ -96,15 +96,19 @@ class InCallAdapter extends IInCallAdapter.Stub {
     public void rejectCall(String callId, boolean rejectWithMessage, String textMessage) {
         try {
             Log.startSession(LogUtils.Sessions.ICA_REJECT_CALL, mOwnerComponentName);
-            // Check to make sure the in-call app's user isn't restricted from sending SMS. If so,
-            // silently drop the outgoing message. Also drop message if the screen is locked.
-            if (!mCallsManager.isReplyWithSmsAllowed(Binder.getCallingUid())) {
-                rejectWithMessage = false;
-                textMessage = null;
-            }
+
+            int callingUid = Binder.getCallingUid();
             long token = Binder.clearCallingIdentity();
             try {
                 synchronized (mLock) {
+                    // Check to make sure the in-call app's user isn't restricted from sending SMS.
+                    // If so, silently drop the outgoing message. Also drop message if the screen is
+                    // locked.
+                    if (!mCallsManager.isReplyWithSmsAllowed(callingUid)) {
+                        rejectWithMessage = false;
+                        textMessage = null;
+                    }
+
                     Log.d(this, "rejectCall(%s,%b,%s)", callId, rejectWithMessage, textMessage);
                     Call call = mCallIdMapper.getCall(callId);
                     if (call != null) {
diff --git a/src/com/android/server/telecom/components/TelecomService.java b/src/com/android/server/telecom/components/TelecomService.java
index a1c70fab..9a096363 100644
--- a/src/com/android/server/telecom/components/TelecomService.java
+++ b/src/com/android/server/telecom/components/TelecomService.java
@@ -48,6 +48,7 @@ import com.android.server.telecom.PhoneNumberUtilsAdapterImpl;
 import com.android.server.telecom.ProximitySensorManagerFactory;
 import com.android.server.telecom.InCallWakeLockController;
 import com.android.server.telecom.ProximitySensorManager;
+import com.android.server.telecom.R;
 import com.android.server.telecom.TelecomSystem;
 import com.android.server.telecom.TelecomWakeLock;
 import com.android.server.telecom.Timeouts;
@@ -84,6 +85,9 @@ public class TelecomService extends Service implements TelecomSystem.Component {
             NotificationChannelManager notificationChannelManager =
                     new NotificationChannelManager();
             notificationChannelManager.createChannels(context);
+
+            boolean shouldPauseBetweenRingtoneRepeat = context.getResources().getBoolean(
+                    R.bool.should_pause_between_ringtone_repeats);
             TelecomSystem.setInstance(
                     new TelecomSystem(
                             context,
@@ -173,7 +177,7 @@ public class TelecomService extends Service implements TelecomSystem.Component {
                                 }
                             },
                             new Timeouts.Adapter(),
-                            new AsyncRingtonePlayer(),
+                            new AsyncRingtonePlayer(shouldPauseBetweenRingtoneRepeat),
                             new PhoneNumberUtilsAdapterImpl(),
                             new IncomingCallNotifier(context),
                             ToneGenerator::new,
diff --git a/tests/src/com/android/server/telecom/tests/CallLogManagerTest.java b/tests/src/com/android/server/telecom/tests/CallLogManagerTest.java
index 0617ac32..a52cabf4 100644
--- a/tests/src/com/android/server/telecom/tests/CallLogManagerTest.java
+++ b/tests/src/com/android/server/telecom/tests/CallLogManagerTest.java
@@ -23,6 +23,7 @@ import android.content.ContentValues;
 import android.content.Context;
 import android.content.IContentProvider;
 import android.content.pm.UserInfo;
+import android.content.res.Resources;
 import android.location.Country;
 import android.location.CountryDetector;
 import android.location.CountryListener;
@@ -222,6 +223,57 @@ public class CallLogManagerTest extends TelecomTestCase {
         verifyNoInsertion();
     }
 
+    @MediumTest
+    @Test
+    public void testDontLogUnloggableNumbers() {
+        // Set up the carrier config source
+        String number1 = "90000";
+        String number2 = "80000";
+        CarrierConfigManager mockCarrierConfigManager =
+                (CarrierConfigManager) mComponentContextFixture.getTestDouble()
+                        .getApplicationContext().getSystemService(Context.CARRIER_CONFIG_SERVICE);
+        PersistableBundle bundle = new PersistableBundle();
+        bundle.putStringArray(CarrierConfigManager.KEY_UNLOGGABLE_NUMBERS_STRING_ARRAY,
+                new String[] {number1});
+        when(mockCarrierConfigManager.getConfig()).thenReturn(bundle);
+
+        Resources mockResources = mContext.getResources();
+        when(mockResources.getStringArray(com.android.internal.R.array.unloggable_phone_numbers))
+                .thenReturn(new String[] {number2});
+
+        Call fakeCall1 = makeFakeCall(
+                DisconnectCause.OTHER, // disconnectCauseCode
+                false, // isConference
+                false, // isIncoming
+                1L, // creationTimeMillis
+                1000L, // ageMillis
+                Uri.parse("tel:" + number1),
+                EMERGENCY_ACCT_HANDLE, // phoneAccountHandle
+                NO_VIDEO_STATE, // callVideoState
+                POST_DIAL_STRING, // postDialDigits
+                VIA_NUMBER_STRING, // viaNumber
+                UserHandle.of(CURRENT_USER_ID)
+        );
+
+        Call fakeCall2 = makeFakeCall(
+                DisconnectCause.OTHER, // disconnectCauseCode
+                false, // isConference
+                false, // isIncoming
+                1L, // creationTimeMillis
+                1000L, // ageMillis
+                Uri.parse("tel:" + number2),
+                EMERGENCY_ACCT_HANDLE, // phoneAccountHandle
+                NO_VIDEO_STATE, // callVideoState
+                POST_DIAL_STRING, // postDialDigits
+                VIA_NUMBER_STRING, // viaNumber
+                UserHandle.of(CURRENT_USER_ID)
+        );
+
+        mCallLogManager.onCallStateChanged(fakeCall1, CallState.ACTIVE, CallState.DISCONNECTED);
+        mCallLogManager.onCallStateChanged(fakeCall2, CallState.ACTIVE, CallState.DISCONNECTED);
+        verifyNoInsertion();
+    }
+
     @MediumTest
     @Test
     public void testDontLogCallsFromEmergencyAccount() {
diff --git a/tests/src/com/android/server/telecom/tests/PhoneAccountRegistrarTest.java b/tests/src/com/android/server/telecom/tests/PhoneAccountRegistrarTest.java
index e6884163..f8acb9d2 100644
--- a/tests/src/com/android/server/telecom/tests/PhoneAccountRegistrarTest.java
+++ b/tests/src/com/android/server/telecom/tests/PhoneAccountRegistrarTest.java
@@ -882,6 +882,33 @@ public class PhoneAccountRegistrarTest extends TelecomTestCase {
                 PhoneAccount.CAPABILITY_RTT);
     }
 
+    /**
+     * Tests {@link PhoneAccount#equals(Object)} operator.
+     * @throws Exception
+     */
+    @MediumTest
+    @Test
+    public void testPhoneAccountEquality() throws Exception {
+        PhoneAccountHandle handle = new PhoneAccountHandle(new ComponentName("foo", "bar"), "id");
+        PhoneAccount.Builder builder = new PhoneAccount.Builder(handle, "label");
+        builder.addSupportedUriScheme("tel");
+        builder.setAddress(Uri.fromParts("tel", "6505551212", null));
+        builder.setCapabilities(PhoneAccount.CAPABILITY_CALL_PROVIDER);
+        Bundle extras = new Bundle();
+        extras.putInt("INT", 1);
+        extras.putString("STR", "str");
+        builder.setExtras(extras);
+        builder.setGroupId("group");
+        builder.setHighlightColor(1);
+        builder.setShortDescription("short");
+        builder.setSubscriptionAddress(Uri.fromParts("tel", "6505551213", null));
+        builder.setSupportedAudioRoutes(2);
+
+        PhoneAccount account1 = builder.build();
+        PhoneAccount account2 = builder.build();
+        assertEquals(account1, account2);
+    }
+
     private static ComponentName makeQuickConnectionServiceComponentName() {
         return new ComponentName(
                 "com.android.server.telecom.tests",
-- 
2.17.1

