From ac8564804f13bd772a2c3d6a21cb3bf6fec4638f Mon Sep 17 00:00:00 2001
From: Luca Stefani <luca.stefani.ge1@gmail.com>
Date: Tue, 6 Nov 2018 14:48:31 +0100
Subject: [PATCH 2/2] [SQUSH][DNM] Merge tag 'android-9.0.0_r16' into
 lineage-16.0

commit e77a930cda3ed425416694aaa87cebdedfb66d39
Merge: 05cd4b89 c5e18407
Author: android-build-team Robot <android-build-team-robot@google.com>
Date:   Fri Jul 27 03:15:51 2018 +0000

    Snap for 4916303 from c5e18407c277ca75b854b4416c70d23dc2c6a90e to pi-qpr1-release

    Change-Id: Ic4adee77a3526f949bf45bd1bf5d86c76d58edbc

commit c5e18407c277ca75b854b4416c70d23dc2c6a90e
Author: Hector Dearman <hjd@google.com>
Date:   Wed Jun 20 10:57:06 2018 +0100

    traced_probes: Fix clock bug

    There was a bug when parsing the list of available clocks from
    /d/tracing/trace_clock.

    The contents of /d/tracing/trace_clock looks like:
    uptime perf mono mono_raw boot\n
    We acidentally included the newline in the name of the final clock when
    reading. This means (if boot is unfortunate enough to be the last clock
    listed) we fail to set the boot clock (since "boot" != "boot\n").

    Fix the parsing of trace_clock to discount the newline.

    Bug: 110356412
    Change-Id: I5160637efec69844fe75f8e705d02a7c486ae990
    Merged-In: I5160637efec69844fe75f8e705d02a7c486ae990
    (cherry picked from commit 22dac14815a58d00ea87a0013bb638c703843f11)

Change-Id: I539ab231de113c1f5e8fc019fdccc34234c11d49
---
 src/ftrace_reader/ftrace_procfs.cc          |  2 ++
 src/ftrace_reader/ftrace_procfs_unittest.cc | 36 +++++++++++++++++++++
 2 files changed, 38 insertions(+)

diff --git a/src/ftrace_reader/ftrace_procfs.cc b/src/ftrace_reader/ftrace_procfs.cc
index 70aa050e..bcc25574 100644
--- a/src/ftrace_reader/ftrace_procfs.cc
+++ b/src/ftrace_reader/ftrace_procfs.cc
@@ -170,6 +170,8 @@ std::set<std::string> FtraceProcfs::AvailableClocks() {
     end = s.find(' ', start);
     if (end == std::string::npos)
       end = s.size();
+    while (end > start && s[end - 1] == '\n')
+      end--;
     if (start == end)
       break;
 
diff --git a/src/ftrace_reader/ftrace_procfs_unittest.cc b/src/ftrace_reader/ftrace_procfs_unittest.cc
index bccf2e05..6c86339d 100644
--- a/src/ftrace_reader/ftrace_procfs_unittest.cc
+++ b/src/ftrace_reader/ftrace_procfs_unittest.cc
@@ -55,9 +55,45 @@ TEST(FtraceProcfsTest, ParseAvailableClocks) {
       .WillOnce(Return("local [global] boot"));
   EXPECT_THAT(ftrace.GetClock(), "global");
 
+  EXPECT_CALL(ftrace, ReadFileIntoString("/root/trace_clock"))
+      .WillOnce(Return("local global [boot]"));
+  EXPECT_THAT(ftrace.GetClock(), "boot");
+
   EXPECT_CALL(ftrace, ReadFileIntoString("/root/trace_clock"))
       .WillOnce(Return(""));
   EXPECT_THAT(ftrace.AvailableClocks(), IsEmpty());
+
+  // trace_clock text may end in a new line:
+  EXPECT_CALL(ftrace, ReadFileIntoString("/root/trace_clock"))
+      .WillOnce(Return("[local] global boot\n"));
+  EXPECT_THAT(ftrace.AvailableClocks(),
+              UnorderedElementsAre("local", "global", "boot"));
+
+  EXPECT_CALL(ftrace, ReadFileIntoString("/root/trace_clock"))
+      .WillOnce(Return("local global [boot]\n"));
+  EXPECT_THAT(ftrace.AvailableClocks(),
+              UnorderedElementsAre("local", "global", "boot"));
+
+  EXPECT_CALL(ftrace, ReadFileIntoString("/root/trace_clock"))
+      .WillOnce(Return("local global [boot]\n"));
+  EXPECT_THAT(ftrace.GetClock(), "boot");
+
+  EXPECT_CALL(ftrace, ReadFileIntoString("/root/trace_clock"))
+      .WillOnce(Return("\n"));
+  EXPECT_THAT(ftrace.AvailableClocks(), IsEmpty());
+
+  // We should handle many newlines (just in case):
+  EXPECT_CALL(ftrace, ReadFileIntoString("/root/trace_clock"))
+      .WillOnce(Return("local global [boot]\n\n\n"));
+  EXPECT_THAT(ftrace.GetClock(), "boot");
+
+  EXPECT_CALL(ftrace, ReadFileIntoString("/root/trace_clock"))
+      .WillOnce(Return("local global [boot]\n\n"));
+  EXPECT_THAT(ftrace.GetClock(), "boot");
+
+  EXPECT_CALL(ftrace, ReadFileIntoString("/root/trace_clock"))
+      .WillOnce(Return("\n\n\n\n"));
+  EXPECT_THAT(ftrace.AvailableClocks(), IsEmpty());
 }
 
 }  // namespace
-- 
2.17.1

