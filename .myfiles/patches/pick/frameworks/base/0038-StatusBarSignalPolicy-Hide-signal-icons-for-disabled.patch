From 6739717d5e7dc87d9ca1d417f59f3adb303e6c83 Mon Sep 17 00:00:00 2001
From: Paul Keith <javelinanddart@gmail.com>
Date: Mon, 28 May 2018 04:23:30 +0200
Subject: [PATCH 38/47] StatusBarSignalPolicy: Hide signal icons for disabled
 SIMs

Change-Id: I4ee313cf4f5f0c1dc7190c80584e4375dd167b1b
---
 .../phone/StatusBarSignalPolicy.java          | 36 +++++++++++++++----
 1 file changed, 30 insertions(+), 6 deletions(-)

diff --git a/packages/SystemUI/src/com/android/systemui/statusbar/phone/StatusBarSignalPolicy.java b/packages/SystemUI/src/com/android/systemui/statusbar/phone/StatusBarSignalPolicy.java
index fc815befb72..1847343edd5 100644
--- a/packages/SystemUI/src/com/android/systemui/statusbar/phone/StatusBarSignalPolicy.java
+++ b/packages/SystemUI/src/com/android/systemui/statusbar/phone/StatusBarSignalPolicy.java
@@ -22,6 +22,7 @@ import android.graphics.Rect;
 import android.os.Handler;
 import android.os.Looper;
 import android.telephony.SubscriptionInfo;
+import android.telephony.SubscriptionManager;
 import android.util.ArraySet;
 import android.util.Log;
 import android.view.LayoutInflater;
@@ -44,9 +45,11 @@ import java.util.ArrayList;
 import java.util.List;
 import java.util.Objects;
 
+import org.lineageos.internal.util.TelephonyExtUtils;
+import org.lineageos.internal.util.TelephonyExtUtils.ProvisioningChangedListener;
 
 public class StatusBarSignalPolicy implements NetworkControllerImpl.SignalCallback,
-        SecurityController.SecurityControllerCallback, Tunable {
+        SecurityController.SecurityControllerCallback, Tunable, ProvisioningChangedListener {
     private static final String TAG = "StatusBarSignalPolicy";
 
     private final String mSlotAirplane;
@@ -92,6 +95,19 @@ public class StatusBarSignalPolicy implements NetworkControllerImpl.SignalCallba
         Dependency.get(TunerService.class).addTunable(this, StatusBarIconController.ICON_BLACKLIST);
         mNetworkController.addCallback(this);
         mSecurityController.addCallback(this);
+
+        TelephonyExtUtils.getInstance(context).addListener(this);
+    }
+
+    @Override
+    public void onProvisioningChanged(int slotId, boolean isProvisioned) {
+        int[] subId = SubscriptionManager.getSubId(slotId);
+        if (subId != null) {
+            MobileIconState state = getState(subId[0]);
+            if (state != null) {
+                state.provisioned = isProvisioned;
+            }
+        }
     }
 
     public void destroy() {
@@ -195,7 +211,7 @@ public class StatusBarSignalPolicy implements NetworkControllerImpl.SignalCallba
         // Visibility of the data type indicator changed
         boolean typeChanged = statusType != state.typeId && (statusType == 0 || state.typeId == 0);
 
-        state.visible = statusIcon.visible && !mBlockMobile;
+        state.visible = statusIcon.visible && !mBlockMobile && state.provisioned;
         state.strengthId = statusIcon.icon;
         state.typeId = statusType;
         state.contentDescription = statusIcon.contentDescription;
@@ -251,7 +267,7 @@ public class StatusBarSignalPolicy implements NetworkControllerImpl.SignalCallba
         mMobileStates.clear();
         final int n = subs.size();
         for (int i = 0; i < n; i++) {
-            mMobileStates.add(new MobileIconState(subs.get(i).getSubscriptionId()));
+            mMobileStates.add(new MobileIconState(subs.get(i).getSubscriptionId(), mContext));
         }
     }
 
@@ -395,11 +411,17 @@ public class StatusBarSignalPolicy implements NetworkControllerImpl.SignalCallba
         public int typeId;
         public boolean roaming;
         public boolean needsLeadingPadding;
+        public boolean provisioned;
         public String typeContentDescription;
+        public Context context;
 
-        private MobileIconState(int subId) {
+        private MobileIconState(int subId, Context context) {
             super();
             this.subId = subId;
+            this.context = context;
+
+            TelephonyExtUtils extTelephony = TelephonyExtUtils.getInstance(context);
+            this.provisioned = !extTelephony.hasService() || extTelephony.isSubProvisioned(subId);
         }
 
         @Override
@@ -412,6 +434,7 @@ public class StatusBarSignalPolicy implements NetworkControllerImpl.SignalCallba
             }
             MobileIconState that = (MobileIconState) o;
             return subId == that.subId &&
+                    context == that.context &&
                     strengthId == that.strengthId &&
                     typeId == that.typeId &&
                     roaming == that.roaming &&
@@ -428,7 +451,7 @@ public class StatusBarSignalPolicy implements NetworkControllerImpl.SignalCallba
         }
 
         public MobileIconState copy() {
-            MobileIconState copy = new MobileIconState(this.subId);
+            MobileIconState copy = new MobileIconState(this.subId, this.context);
             copyTo(copy);
             return copy;
         }
@@ -436,6 +459,7 @@ public class StatusBarSignalPolicy implements NetworkControllerImpl.SignalCallba
         public void copyTo(MobileIconState other) {
             super.copyTo(other);
             other.subId = subId;
+            other.context = context;
             other.strengthId = strengthId;
             other.typeId = typeId;
             other.roaming = roaming;
@@ -446,7 +470,7 @@ public class StatusBarSignalPolicy implements NetworkControllerImpl.SignalCallba
         private static List<MobileIconState> copyStates(List<MobileIconState> inStates) {
             ArrayList<MobileIconState> outStates = new ArrayList<>();
             for (MobileIconState state : inStates) {
-                MobileIconState copy = new MobileIconState(state.subId);
+                MobileIconState copy = new MobileIconState(state.subId, state.context);
                 state.copyTo(copy);
                 outStates.add(copy);
             }
-- 
2.17.1

