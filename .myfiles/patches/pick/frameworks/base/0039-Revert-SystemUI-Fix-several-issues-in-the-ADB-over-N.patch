From e8a2a8bad99c7a2d9af8a1cb4fb5f006f5e8319e Mon Sep 17 00:00:00 2001
From: "Kevin F. Haggerty" <haggertk@lineageos.org>
Date: Sun, 9 Dec 2018 13:05:35 -0700
Subject: [PATCH 39/45] Revert "SystemUI: Fix several issues in the ADB over
 Network tile"

* This was accidentally merged

This reverts commit 5bee4ef08e66b41825c337650e74926b3984dd61.

Change-Id: Iefb9dd4e7f7bf36105ce9661a54cbe9ff56d4c2a
---
 .../systemui/qs/tiles/AdbOverNetworkTile.java | 63 ++++++-------------
 1 file changed, 18 insertions(+), 45 deletions(-)

diff --git a/packages/SystemUI/src/com/android/systemui/qs/tiles/AdbOverNetworkTile.java b/packages/SystemUI/src/com/android/systemui/qs/tiles/AdbOverNetworkTile.java
index c6f09aee1a1..f5482311881 100644
--- a/packages/SystemUI/src/com/android/systemui/qs/tiles/AdbOverNetworkTile.java
+++ b/packages/SystemUI/src/com/android/systemui/qs/tiles/AdbOverNetworkTile.java
@@ -1,6 +1,6 @@
 /*
  * Copyright (C) 2015 The CyanogenMod Project
- * Copyright (C) 2017-2018 The LineageOS Project
+ * Copyright (C) 2017 The LineageOS Project
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -20,8 +20,6 @@ package com.android.systemui.qs.tiles;
 import android.content.Context;
 import android.content.Intent;
 import android.database.ContentObserver;
-import android.net.ConnectivityManager;
-import android.net.NetworkInfo;
 import android.net.NetworkUtils;
 import android.net.Uri;
 import android.net.wifi.WifiInfo;
@@ -37,9 +35,6 @@ import com.android.systemui.qs.QSHost;
 import com.android.systemui.qs.tileimpl.QSTileImpl;
 import com.android.systemui.R;
 import com.android.systemui.statusbar.policy.KeyguardMonitor;
-import com.android.systemui.statusbar.policy.NetworkController;
-import com.android.systemui.statusbar.policy.NetworkController.IconState;
-import com.android.systemui.statusbar.policy.NetworkController.SignalCallback;
 
 import lineageos.providers.LineageSettings;
 import org.lineageos.internal.logging.LineageMetricsLogger;
@@ -51,20 +46,14 @@ public class AdbOverNetworkTile extends QSTileImpl<BooleanState> {
 
     private boolean mListening;
     private final KeyguardMonitor mKeyguardMonitor;
-    private final KeyguardMonitorCallback mKeyguardCallback = new KeyguardMonitorCallback();
-
-    private final NetworkController mController;
-    private final WifiSignalCallback mSignalCallback = new WifiSignalCallback();
-    private final WifiManager mWifiManager;
+    private final KeyguardMonitorCallback mCallback = new KeyguardMonitorCallback();
 
     private static final Intent SETTINGS_DEVELOPMENT =
             new Intent(Settings.ACTION_APPLICATION_DEVELOPMENT_SETTINGS);
 
     public AdbOverNetworkTile(QSHost host) {
         super(host);
-        mController = Dependency.get(NetworkController.class);
         mKeyguardMonitor = Dependency.get(KeyguardMonitor.class);
-        mWifiManager = mContext.getSystemService(WifiManager.class);
     }
 
     @Override
@@ -89,19 +78,26 @@ public class AdbOverNetworkTile extends QSTileImpl<BooleanState> {
 
     @Override
     protected void handleUpdateState(BooleanState state, Object arg) {
-        state.value = isAdbEnabled() && isAdbNetworkEnabled();
+        state.value = isAdbNetworkEnabled();
         state.icon = ResourceIcon.get(R.drawable.ic_qs_network_adb);
         state.label = mContext.getString(R.string.quick_settings_network_adb_label);
         if (state.value) {
-            WifiInfo wifiInfo = mWifiManager.getConnectionInfo();
+            WifiManager wifiManager = mContext.getSystemService(WifiManager.class);
+            WifiInfo wifiInfo = wifiManager.getConnectionInfo();
+
             if (wifiInfo != null) {
+                // If wifiInfo is not null, set secondary label to "hostAddress"
                 InetAddress address = NetworkUtils.intToInetAddress(wifiInfo.getIpAddress());
                 state.secondaryLabel = address.getHostAddress();
-                state.state = Tile.STATE_ACTIVE;
+            } else {
+                // If wifiInfo is null, disable secondary label
+                state.secondaryLabel = null;
             }
+            state.state = Tile.STATE_ACTIVE;
         } else {
+            // Otherwise set the disabled label and icon
             state.secondaryLabel = null;
-            state.state = canEnableAdbNetwork() ? Tile.STATE_INACTIVE : Tile.STATE_UNAVAILABLE;
+            state.state = Tile.STATE_INACTIVE;
         }
     }
 
@@ -125,22 +121,10 @@ public class AdbOverNetworkTile extends QSTileImpl<BooleanState> {
                 LineageSettings.Secure.ADB_PORT, 0) > 0;
     }
 
-    private boolean isWifiConnected() {
-        ConnectivityManager connMgr = mContext.getSystemService(ConnectivityManager.class);
-        NetworkInfo networkInfo = connMgr.getNetworkInfo(ConnectivityManager.TYPE_WIFI);
-        return networkInfo != null && networkInfo.isConnected();
-    }
-
-    private boolean canEnableAdbNetwork() {
-        return isAdbEnabled() && isWifiConnected();
-    }
-
     private void toggleAction() {
-        if (canEnableAdbNetwork()) {
-            LineageSettings.Secure.putIntForUser(mContext.getContentResolver(),
-                    LineageSettings.Secure.ADB_PORT, getState().value ? -1 : 5555,
-                    UserHandle.USER_CURRENT);
-        }
+        LineageSettings.Secure.putIntForUser(mContext.getContentResolver(),
+                LineageSettings.Secure.ADB_PORT, getState().value ? -1 : 5555,
+                UserHandle.USER_CURRENT);
     }
 
     private ContentObserver mObserver = new ContentObserver(mHandler) {
@@ -161,12 +145,10 @@ public class AdbOverNetworkTile extends QSTileImpl<BooleanState> {
                 mContext.getContentResolver().registerContentObserver(
                         Settings.Global.getUriFor(Settings.Global.ADB_ENABLED),
                         false, mObserver);
-                mKeyguardMonitor.addCallback(mKeyguardCallback);
-                mController.addCallback(mSignalCallback);
+                mKeyguardMonitor.addCallback(mCallback);
             } else {
                 mContext.getContentResolver().unregisterContentObserver(mObserver);
-                mKeyguardMonitor.removeCallback(mKeyguardCallback);
-                mController.removeCallback(mSignalCallback);
+                mKeyguardMonitor.removeCallback(mCallback);
             }
         }
     }
@@ -177,13 +159,4 @@ public class AdbOverNetworkTile extends QSTileImpl<BooleanState> {
             refreshState();
         }
     }
-
-    private class WifiSignalCallback implements SignalCallback {
-        @Override
-        public void setWifiIndicators(boolean enabled, IconState statusIcon, IconState qsIcon,
-                boolean activityIn, boolean activityOut, String description, boolean isTransient,
-                String statusLabel) {
-            refreshState();
-        }
-    }
 }
-- 
2.17.1

