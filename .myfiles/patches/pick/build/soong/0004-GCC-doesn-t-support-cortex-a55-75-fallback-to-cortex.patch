From ef70299e503995c23cce24fff0c376c0553fbdf5 Mon Sep 17 00:00:00 2001
From: Luca Stefani <luca.stefani.ge1@gmail.com>
Date: Tue, 1 Jan 2019 21:57:57 +0100
Subject: [PATCH 4/4] GCC doesn't support cortex-a55/75, fallback to cortex-a53

* Instead of optimizing for a generic ARM/ARM64 cpu,
  optimize to the closest supported CPU supported by GCC
* Also removes some spurious build warnings while building
  toolchain libraries ( libatomic, libgcc... )

Test: Control mcpu in build-aosp_crosshatch.ninja
Change-Id: I7db9632628ce487adf87b9e62ae929248fa931a2
---
 cc/config/arm64_device.go | 13 +++++++++----
 cc/config/arm_device.go   |  9 +++++++--
 2 files changed, 16 insertions(+), 6 deletions(-)

diff --git a/cc/config/arm64_device.go b/cc/config/arm64_device.go
index 8be33a85..d9558522 100644
--- a/cc/config/arm64_device.go
+++ b/cc/config/arm64_device.go
@@ -50,12 +50,10 @@ var (
 			"-mcpu=cortex-a53",
 		},
 		"cortex-a55": []string{
-			"-mcpu=cortex-a55",
+			"-mcpu=cortex-a53",
 		},
 		"cortex-a75": []string{
-			// Use the cortex-a55 since it is similar to the little
-			// core (cortex-a55) and is sensitive to ordering.
-			"-mcpu=cortex-a55",
+			"-mcpu=cortex-a53",
 		},
 		"kryo": []string{
 			// Use the cortex-a57 cpu since some compilers
@@ -94,6 +92,13 @@ func init() {
 	// Clang supports specific Kryo targeting
 	replaceFirst(arm64ClangCpuVariantCflags["kryo"], "-mcpu=cortex-a57", "-mcpu=kryo")
 
+	// cortex-a55 and cortex-a75 are not supported by GCC, but are supported by Clang,
+	// so override the definitions when building modules with Clang.
+	replaceFirst(arm64ClangCpuVariantCflags["cortex-a55"], "-mcpu=cortex-a53", "-mcpu=cortex-a55")
+	// Use the cortex-a55 since it is similar to the little
+	// core (cortex-a55) and is sensitive to ordering.
+	replaceFirst(arm64ClangCpuVariantCflags["cortex-a75"], "-mcpu=cortex-a53", "-mcpu=cortex-a55")
+
 	pctx.StaticVariable("arm64GccVersion", arm64GccVersion)
 
 	pctx.SourcePathVariable("Arm64GccRoot",
diff --git a/cc/config/arm_device.go b/cc/config/arm_device.go
index cad1b161..c982908e 100644
--- a/cc/config/arm_device.go
+++ b/cc/config/arm_device.go
@@ -98,7 +98,7 @@ var (
 			"-D__ARM_FEATURE_LPAE=1",
 		},
 		"cortex-a55": []string{
-			"-mcpu=cortex-a55",
+			"-mcpu=cortex-a53",
 			"-mfpu=neon-fp-armv8",
 			// Fake an ARM compiler flag as these processors support LPAE which GCC/clang
 			// don't advertise.
@@ -107,7 +107,7 @@ var (
 			"-D__ARM_FEATURE_LPAE=1",
 		},
 		"cortex-a75": []string{
-			"-mcpu=cortex-a55",
+			"-mcpu=cortex-a53",
 			"-mfpu=neon-fp-armv8",
 			// Fake an ARM compiler flag as these processors support LPAE which GCC/clang
 			// don't advertise.
@@ -175,6 +175,11 @@ func init() {
 	// override the definitions when building modules with Clang.
 	replaceFirst(armClangCpuVariantCflags["krait"], "-mcpu=cortex-a15", "-mcpu=krait")
 
+	// cortex-a55 and cortex-a75 are not supported by GCC, but are supported by Clang,
+	// so override the definitions when building modules with Clang.
+	replaceFirst(armClangCpuVariantCflags["cortex-a55"], "-mcpu=cortex-a53", "-mcpu=cortex-a55")
+	replaceFirst(armClangCpuVariantCflags["cortex-a75"], "-mcpu=cortex-a53", "-mcpu=cortex-a55")
+
 	// The reason we use "-march=armv8-a+crc", instead of "-march=armv8-a", for
 	// gcc is the latter would conflict with any specified/supported -mcpu!
 	// All armv8-a cores supported by gcc 4.9 support crc, so it's safe
-- 
2.17.1

