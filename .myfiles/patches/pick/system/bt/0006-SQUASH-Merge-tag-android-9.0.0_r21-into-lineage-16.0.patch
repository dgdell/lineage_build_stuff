From d7ca66dc5cd1cde787d7e38fd5625a0c42cc991f Mon Sep 17 00:00:00 2001
From: Luca Stefani <luca.stefani.ge1@gmail.com>
Date: Tue, 4 Dec 2018 15:32:04 +0100
Subject: [PATCH 6/6] [SQUASH] Merge tag 'android-9.0.0_r21' into
 lineage-16.0-android-9.0.0_r21

commit b8da9c304f53d4a254638c9b70a40c111e0ed685
Merge: a6f9ca4aa 8c1d4c1dd
Author: android-build-team Robot <android-build-team-robot@google.com>
Date:   Sat Oct 20 00:19:43 2018 +0000

    Merge cherrypicks of [5317808, 5317809, 5318498, 5317873, 5318338, 5318195, 5318499, 5317874, 5317875, 5317876, 5318243, 5318244, 5318537, 5318538, 5318539, 5318540, 5318541, 5318542, 5318543, 5318544, 5318545, 5318546, 5315210, 5317756, 5318557, 5318558, 5318559, 5318560, 5318561, 5318339, 5318547, 5318548, 5318549, 5318562, 5318563, 5318564, 5318565, 5318566, 5318172, 5318173, 5318174, 5318550, 5318401, 5318196, 5317889, 5318175, 5318176, 5318577, 5318578, 5318579, 5318580, 5318581, 5318503, 5318390, 5318505, 5318341, 5318551] into pi-qpr1-release

    Change-Id: I6df9d99838866ae835f25adc27afe9e29fc6a380

commit 8c1d4c1ddd80e60b816ea8c2fff79806fe5f4edf
Author: Jakub Pawlowski <jpawlowski@google.com>
Date:   Wed Oct 10 19:35:37 2018 +0200

    Fix possible OOB read

    Bug: 74249842
    Change-Id: I0dbe43f0da1f5a8f14bcb69659752de4bd70ca98
    (cherry picked from commit 6e6c347e798bf8195a9a02457edf871a97b1cfad)

commit 9009da96e00434501d9398bbfbc636902c757632
Author: Hansong Zhang <hsz@google.com>
Date:   Tue Oct 2 16:26:38 2018 -0700

    HIDD: Check descriptor length and increase buffer

    Since maximum descriptor length is 2048, we need to assign 2054 bytes of
    buffer for another 6 bytes of data. Also added a const for maximum
    descriptor length.

    Bug: 113572366
    Test: manual
    Change-Id: Ie2b25c9e1a9f2019cbc7e6fbecbb08b643c87946
    Merged-In: Ie2b25c9e1a9f2019cbc7e6fbecbb08b643c87946
    (cherry picked from commit c0530b211e8a5b43e556c6d47d424b231afb8e99)

commit 72aa93cbe72008b1d0486b3ab3e8c7faf01b45f6
Author: Pavlin Radoslavov <pavlin@google.com>
Date:   Fri Aug 24 18:45:16 2018 -0700

    Run the wakelock JNI callbacks on the JNI thread

    All JNI callbacks must be on the JNI thread, otherwise this could
    impact the threads' operation.

    Bug: 111277984
    Test: A2DP streaming
    Change-Id: I94fa4500aea62a574c80749e904434e46eb4e942
    (cherry picked from commit c788ad703836f6ac0f63e47b20f27b41dcce9353)
    (cherry picked from commit f918ab9ff83a750a344871758a308f17b6e8f5fb)

commit 1bb14c41a72978c6075c5753a8301ddcbb10d409
Author: Myles Watson <mylesgw@google.com>
Date:   Thu Sep 6 10:57:47 2018 -0700

    bta: Pass the correct UUID array size in bta_ag_do_disc

    Bug: 113164621
    Test: Connect HSP from a device to the phone
    Change-Id: Iec875cd165ad1cea64c307602bb00b623967c7c7
    (cherry picked from commit 9645b5dd62c8166f10798335768aa2a6c3e05e4c)

commit 82ef3ceb978fd5d95a310ff555d42b271dae530a
Author: Ugo Yu <ugoyu@google.com>
Date:   Mon Sep 17 15:59:30 2018 +0800

    Check SDU lower bound before allocate p_data

    Bug: 112321180
    Test: SL4A BleCocTest:test_coc_insecured_connection_write_ascii
    Change-Id: Id0c9aa2097f0b6bdc2bb9fa9086daa9452188e1d
    (cherry picked from commit 785e12ed58d020a0df075163c1831021c0cde218)

Change-Id: I6b8417d4f6159d0fe37072c04d52a0ecfe831af3
---
 bta/ag/bta_ag_sdp.cc       |  1 -
 bta/hd/bta_hd_int.h        |  2 +-
 stack/hid/hidd_api.cc      | 13 ++++++++++++-
 stack/include/hiddefs.h    |  2 ++
 stack/l2cap/l2c_fcr.cc     |  8 ++++++++
 stack/sdp/sdp_discovery.cc | 11 +++++++++++
 6 files changed, 34 insertions(+), 3 deletions(-)

diff --git a/bta/ag/bta_ag_sdp.cc b/bta/ag/bta_ag_sdp.cc
index 8ff39fd78..5ab1215fe 100644
--- a/bta/ag/bta_ag_sdp.cc
+++ b/bta/ag/bta_ag_sdp.cc
@@ -470,7 +470,6 @@ void bta_ag_do_disc(tBTA_AG_SCB* p_scb, tBTA_SERVICE_MASK service) {
 
     if (p_scb->hsp_version >= HSP_VERSION_1_2) {
       uuid_list[0] = Uuid::From16Bit(UUID_SERVCLASS_HEADSET_HS);
-      num_uuid = 2;
     } else {
       /* Legacy from HSP v1.0 */
       uuid_list[0] = Uuid::From16Bit(UUID_SERVCLASS_HEADSET);
diff --git a/bta/hd/bta_hd_int.h b/bta/hd/bta_hd_int.h
index 4a4825483..0748b677e 100644
--- a/bta/hd/bta_hd_int.h
+++ b/bta/hd/bta_hd_int.h
@@ -66,7 +66,7 @@ typedef struct {
 #define BTA_HD_APP_NAME_LEN 50
 #define BTA_HD_APP_DESCRIPTION_LEN 50
 #define BTA_HD_APP_PROVIDER_LEN 50
-#define BTA_HD_APP_DESCRIPTOR_LEN 2048
+#define BTA_HD_APP_DESCRIPTOR_LEN HIDD_APP_DESCRIPTOR_LEN
 
 #define BTA_HD_STATE_DISABLED 0x00
 #define BTA_HD_STATE_ENABLED 0x01
diff --git a/stack/hid/hidd_api.cc b/stack/hid/hidd_api.cc
index 414cf74bd..f93511e58 100644
--- a/stack/hid/hidd_api.cc
+++ b/stack/hid/hidd_api.cc
@@ -33,6 +33,7 @@
 #include "hidd_api.h"
 #include "hidd_int.h"
 #include "hiddefs.h"
+#include "log/log.h"
 
 tHID_DEV_CTB hd_cb;
 
@@ -293,7 +294,13 @@ tHID_STATUS HID_DevAddRecord(uint32_t handle, char* p_name, char* p_description,
       uint8_t* p_buf;
       uint8_t seq_len = 4 + desc_len;
 
-      p_buf = (uint8_t*)osi_malloc(2048);
+      if (desc_len > HIDD_APP_DESCRIPTOR_LEN) {
+        HIDD_TRACE_ERROR("%s: descriptor length = %d, larger than max %d",
+                         __func__, desc_len, HIDD_APP_DESCRIPTOR_LEN);
+        return HID_ERR_NOT_REGISTERED;
+      };
+
+      p_buf = (uint8_t*)osi_malloc(HIDD_APP_DESCRIPTOR_LEN + 6);
 
       if (p_buf == NULL) {
         HIDD_TRACE_ERROR("%s: Buffer allocation failure for size = 2048 ",
@@ -314,6 +321,10 @@ tHID_STATUS HID_DevAddRecord(uint32_t handle, char* p_name, char* p_description,
       UINT8_TO_BE_STREAM(p, desc_len);
       ARRAY_TO_BE_STREAM(p, p_desc_data, (int)desc_len);
 
+      if (desc_len > HIDD_APP_DESCRIPTOR_LEN - 6) {
+        android_errorWriteLog(0x534e4554, "113572366");
+      }
+
       result &= SDP_AddAttribute(handle, ATTR_ID_HID_DESCRIPTOR_LIST,
                                  DATA_ELE_SEQ_DESC_TYPE, p - p_buf, p_buf);
 
diff --git a/stack/include/hiddefs.h b/stack/include/hiddefs.h
index 8df616c77..df01e7d5d 100644
--- a/stack/include/hiddefs.h
+++ b/stack/include/hiddefs.h
@@ -131,6 +131,8 @@ typedef struct desc_info {
 
 #define HID_SSR_PARAM_INVALID 0xffff
 
+#define HIDD_APP_DESCRIPTOR_LEN 2048
+
 typedef struct sdp_info {
   char svc_name[HID_MAX_SVC_NAME_LEN];   /*Service Name */
   char svc_descr[HID_MAX_SVC_DESCR_LEN]; /*Service Description*/
diff --git a/stack/l2cap/l2c_fcr.cc b/stack/l2cap/l2c_fcr.cc
index b20b9c1de..8326e4d16 100644
--- a/stack/l2cap/l2c_fcr.cc
+++ b/stack/l2cap/l2c_fcr.cc
@@ -841,6 +841,14 @@ void l2c_lcc_proc_pdu(tL2C_CCB* p_ccb, BT_HDR* p_buf) {
       return;
     }
 
+    if (sdu_length < p_buf->len) {
+      L2CAP_TRACE_ERROR("%s: Invalid sdu_length: %d", __func__, sdu_length);
+      android_errorWriteWithInfoLog(0x534e4554, "112321180", -1, NULL, 0);
+      /* Discard the buffer */
+      osi_free(p_buf);
+      return;
+    }
+
     p_data = (BT_HDR*)osi_malloc(BT_HDR_SIZE + sdu_length);
     if (p_data == NULL) {
       osi_free(p_buf);
diff --git a/stack/sdp/sdp_discovery.cc b/stack/sdp/sdp_discovery.cc
index 8d662b8c2..95f55bf36 100644
--- a/stack/sdp/sdp_discovery.cc
+++ b/stack/sdp/sdp_discovery.cc
@@ -280,6 +280,11 @@ static void process_service_search_rsp(tCONN_CB* p_ccb, uint8_t* p_reply,
   uint16_t total, cur_handles, orig;
   uint8_t cont_len;
 
+  if (p_reply + 8 > p_reply_end) {
+    android_errorWriteLog(0x534e4554, "74249842");
+    sdp_disconnect(p_ccb, SDP_GENERIC_ERROR);
+    return;
+  }
   /* Skip transaction, and param len */
   p_reply += 4;
   BE_STREAM_TO_UINT16(total, p_reply);
@@ -298,6 +303,12 @@ static void process_service_search_rsp(tCONN_CB* p_ccb, uint8_t* p_reply,
   if (p_ccb->num_handles > sdp_cb.max_recs_per_search)
     p_ccb->num_handles = sdp_cb.max_recs_per_search;
 
+  if (p_reply + ((p_ccb->num_handles - orig) * 4) + 1 > p_reply_end) {
+    android_errorWriteLog(0x534e4554, "74249842");
+    sdp_disconnect(p_ccb, SDP_GENERIC_ERROR);
+    return;
+  }
+
   for (xx = orig; xx < p_ccb->num_handles; xx++)
     BE_STREAM_TO_UINT32(p_ccb->handles[xx], p_reply);
 
-- 
2.17.1

