From 9d7c45ee439e1be1d766bf8b0d884f8aa8fd8c1d Mon Sep 17 00:00:00 2001
From: nico <nicorg2529@gmail.com>
Date: Fri, 4 Jan 2019 15:55:19 +0000
Subject: [PATCH 7/7] TelephonyExtUtils: Set timeout for (de)activating
 provision

* catch OEM RIL being unresponsive to UICC provisioning request

Change-Id: Ic28c01412bffaec4cadabd3d68434ddef75693ef
---
 .../internal/util/TelephonyExtUtils.java      | 45 ++++++++++++++++---
 1 file changed, 39 insertions(+), 6 deletions(-)

diff --git a/sdk/src/java/org/lineageos/internal/util/TelephonyExtUtils.java b/sdk/src/java/org/lineageos/internal/util/TelephonyExtUtils.java
index 59f6d10..6ad8681 100644
--- a/sdk/src/java/org/lineageos/internal/util/TelephonyExtUtils.java
+++ b/sdk/src/java/org/lineageos/internal/util/TelephonyExtUtils.java
@@ -20,8 +20,10 @@ import android.content.BroadcastReceiver;
 import android.content.Context;
 import android.content.Intent;
 import android.content.IntentFilter;
+import android.os.AsyncTask;
 import android.os.RemoteException;
 import android.os.ServiceManager;
+import android.os.SystemProperties;
 import android.telephony.SubscriptionManager;
 import android.util.Log;
 
@@ -31,6 +33,8 @@ import org.codeaurora.internal.IExtTelephony;
 
 import java.util.ArrayList;
 import java.util.List;
+import java.util.concurrent.TimeoutException;
+import java.util.concurrent.TimeUnit;
 
 public final class TelephonyExtUtils {
     private static final boolean DEBUG = false;
@@ -41,6 +45,9 @@ public final class TelephonyExtUtils {
 
     public static final String EXTRA_NEW_PROVISION_STATE = "newProvisionState";
 
+    private static final int ACTIVATE_TIME_OUT = 30000;
+    private static final String PROP_TIME_OUT = "sys.uicc.activate.timeout";
+
     // This is the list of possible values that
     // IExtTelephony.getCurrentUiccCardProvisioningStatus() can return
     public static final int CARD_NOT_PRESENT = -2;
@@ -150,9 +157,22 @@ public final class TelephonyExtUtils {
         IExtTelephony service = getService();
         if (service != null) {
             try {
-                return mExtTelephony.activateUiccCard(slotId);
-            } catch (RemoteException ex) {
-                Log.e(TAG, "Activating sub failed for slotId: " + slotId);
+                return new AsyncTask<Integer, Void, Integer>() {
+                    @Override
+                    protected Integer doInBackground(Integer... params) {
+                        try {
+                            return mExtTelephony.activateUiccCard(params[0]);
+                        } catch (RemoteException ex) {
+                            Log.e(TAG, "Activating sub failed for slotId: " + slotId);
+                        }
+                        return -1;
+                    }
+                }.executeOnExecutor(AsyncTask.THREAD_POOL_EXECUTOR, slotId).get(ACTIVATE_TIME_OUT, TimeUnit.MILLISECONDS);
+            } catch (TimeoutException ex) {
+                Log.e(TAG, "Activating sub timed out for slotId: " + slotId);
+                SystemProperties.set(PROP_TIME_OUT , Integer.toString(slotId + 1));
+            } catch (Exception ex) {
+                Log.e(TAG, "Activating sub task failed for slotId: " + slotId);
             }
         }
         return -1;
@@ -167,9 +187,22 @@ public final class TelephonyExtUtils {
         IExtTelephony service = getService();
         if (service != null) {
             try {
-                return mExtTelephony.deactivateUiccCard(slotId);
-            } catch (RemoteException ex) {
-                Log.e(TAG, "Deactivating sub failed for slotId: " + slotId);
+                return new AsyncTask<Integer, Void, Integer>() {
+                    @Override
+                    protected Integer doInBackground(Integer... params) {
+                        try {
+                            return mExtTelephony.deactivateUiccCard(params[0]);
+                        } catch (RemoteException ex) {
+                            Log.e(TAG, "Deactivating sub failed for slotId: " + slotId);
+                        }
+                        return -1;
+                    }
+                }.executeOnExecutor(AsyncTask.THREAD_POOL_EXECUTOR, slotId).get(ACTIVATE_TIME_OUT, TimeUnit.MILLISECONDS);
+            } catch (TimeoutException ex) {
+                Log.e(TAG, "Deactivating sub timed out for slotId: " + slotId);
+                SystemProperties.set(PROP_TIME_OUT , Integer.toString(slotId + 1));
+            } catch (Exception ex) {
+                Log.e(TAG, "Deactivating sub task failed for slotId: " + slotId);
             }
         }
         return -1;
-- 
2.17.1

